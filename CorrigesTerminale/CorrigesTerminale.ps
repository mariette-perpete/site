%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: CorrigesTerminale.dvi
%%CreationDate: Mon Jul 10 11:45:48 2023
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold Fourier-Math-Letters-Italic
%%+ Utopia-Italic Fourier-Math-Symbols Fourier-Math-BlackBoard LINE10
%%+ EURM10 Fourier-Math-Letters
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o CorrigesTerminale.ps
%+ CorrigesTerminale.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2023.07.10:1345
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: EURM10
%!PS-AdobeFont-1.0: EURM10 003.003
%%Title: EURM10
%Version: 003.003
%%CreationDate: Mon Jun 13 12:00:00 2011
%%Creator: American Mathematical Society
%Copyright: Copyright (c) 1997, 2009, 2011 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name EURM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (003.003) readonly def
/Notice (Copyright \050c\051 1997, 2009, 2011 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name EURM10.) readonly def
/FullName (EURM10) readonly def
/FamilyName (Euler) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Medium) readonly def
end readonly def
/FontName /EURM10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 30 /phi put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-32 -243 1060 720} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F41F8A25
49C1ADDE0F25E4C2E5C990C47FF040F896D567264EF5C3F584F56F343C2737E9
EBBB4521049C78FA1A7314E86D532BBC544FE600AB25D177ED8281150D633906
8BA0DAB861A70FA9DB57EF3CE0D91C6A618A0082E595C1EA7E42B3C16842A9CC
7B8D943FA5D2384E3A8E797C334EEA52719AF615796D2EC131ABFB18606909F5
6192412A0320AD88B47D26C2D51FF38411F77DA84D5176BFB243447977173EAA
EDFE34ADC06154B053A3D5620C5F9A35B6BB5FD64B5EBDD13DEE096EC7543A55
DD9D1438D1746D8BE4DCD1D4A173DF9943C66B5128C3FA98E15C0C94FE411BAD
E810EDB7B7273FDEE769E94B6C49F09E74A5D89D5F6D776BA691DA3C5D59F573
5F1BF23A503258D642835A52BEAD40E16329D85497362275CE42FE13DAA19CAB
2C81DCF4644C65D988C1A27AB4E0EEA3D97D1076913836CB837FE42F98D80DA8
6A792B3CBE7587CCA83AA8A0722A7460A6A20D8EC0A70789C0CF4689C4113AA3
D42EDE01909AAA83450597B2D62195C5FC6B85075B31722E4919C9255D450036
BC434E6C05F32F0AECECE4CCA9AB7372C14BA99F8EEF9A240F0A537E75ED2CD6
B884FFE9BA738EFF3883E754E8C9A4647EC368E7C9E6CE86D8CD5C94B0FFAD7C
8C3C95053EE6DC3BADE68D985D9AAEA241F2BEF8576A74B6E46C635C20A5FE3B
BE83FD7FEBA6A21114FE25CC22437163B3504F62A1A1E3B9D81CEBA885B23678
8C1EF18A1B7FF384B08E6C857BF0AC2DE0AB368C5C6658E743AB02998152F9D5
29C8A78A2D7A62395617F5D533F38A68C2F94CB35E68DDBE2B94487C26E16241
531924C936DEDCD9B5DBBE867BFA34243DFE8C08F1CF1DBC72C01399DFE33EE3
F5A26DBD9409CC8E4A077A6576B662AE7BE7BC9D7D1A4465FD0E819964F62EC5
B0ADC909F6DA228DE32F694FD027CE76F45C623709187300E6484980A062C05C
9B352F6AF5BD52FE1D7944260036DD3A631F076DC1B3D3933900D3F1D794EDE4
DB65719A00D03B33502E1F59F53F8A02D005A3124555C19DBC80FDE4CD173B0E
3FCE02D064A6435322199C983565E8D4445637ABE216E1F84089E6E0A57A6AD5
25B4FB46B776DB2F8385EDF530FE6CC403B268CE34B1BA0BFFD785EC748BA3EB
9721AF8DC3C5D5D26A75FE580A3DE8992CBDF430E117B0B7705A43DA4915B92B
9E369A913488C8AD37E731BAEDCACFA8006A049FD3B350741EED5151973D65DC
6DEFCE17AA397770D733037F72F599C09F35A16CED0DBB36DFE3578097AE3D23
990AD071833F236088CA0A33565C584726E4C1D5953CCA29EFDE324D10D9FC0F
D7AE521EEAF6E21F32513DBB6E269218F5D2E1CC0FDEFF9D05A29D5C3B6B8195
33D642BC08CE5DB97909ABF5B87C7C7F2A4091C819F03101571DE8126C7FB3A8
37CB9A9ED232C3A38321DF1410C805DF50C579E56F70A0DBE768CB20F2FA7C22
A586FD388439AD34872C17033DF2171B7DF7262EDBF5846D9B15FCE42A1BBE9F
6CB869604CA74FA846B4DD4C71DBB4A7CFFEE7BD3B1F81C3A34FEB6A4784E271
2B63A21EBD61164790F7D8DF24CAAD82C8D28E2254129701A145381FB0D6A5E0
745308C7E1935CE6A7EBE22A23A5BC68F3B97DDBB0952E11
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LINE10
%!PS-AdobeFont-1.0: LINE10 003.002
%%Title: LINE10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name LINE10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/LINE10 known{/LINE10 findfont dup/UniqueID known{dup
/UniqueID get 5011940 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /LINE10 def
/FontBBox {-150 -150 1020 1020 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name LINE10.) readonly def
/FullName (LINE10) readonly def
/FamilyName (LaTeX) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /a1 put
dup 8 /a8 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE366EF37D4823F376DD9F7E4CBB15
DA8E93E91E84D36BA5A5B06F3A46B45692ED11C8FC76C0B0B3157F699878E2ED
D89511CBE105EB42FD76309DA91EEEE85F1AED9920648285111A1690C4AE2638
C0601A7DBC8D2D41CA8C4F9DC7A6AA5C51015D8BA926831892381DCA7E61E230
5BB3BD5632D276B929D97D4836F9703461BED94450CDD2660430A0D13F49EB47
72EB0371E38B92F488FD6E19C944811D4AA52CCC359210320B484568E5060BC5
4D2FDAC73C49BA0168EC70388AF54EB24A30387A41246830C10472DC40AA0BA7
BFD5FA9A7730D9FDB4B639665275683C8E3CD7E719FF53B6DE1F5835C06D1671
1185AE2114E4BF5C0836BBD5391FB7AC5793DB4D3C5535ECB70119CFDF567D0C
A390B1D9A992250D535CE1C36B028E3E9CFEF1DC5E0626C58FB0F25E04DC1FFC
DB6A1C67E40E6435D2994BE814C695B48D64DE30E3F9A38D4547B49FF66829A4
9AA4FB9432DD10B6AFA88BBC184BE95E34A17076782DCDFED010CC19715BA5D4
5D525F33A6065EC6C6811F7D8AC94F27E4E2EBCBBDC3AF1AED1016C343825BA1
1DF58B80CA212DAA2F4EA1889F989C99972A5FA25617CABA3B52190EAA98C27C
15717FD85CDC8CAD43292A21B341CC2A04EF383D978142D16B4A97EBF22ED674
0B45CF5B2C3F151029B75CFB6FD2C53AB88066DD793B85CB7A7A13694C0B865D
BB3315043A4986FB138775B7354F4AB89AFD27D52E0864D384397ECD9A850511
E96A85AAC591975E185230AD05DD19D2C6883B2AEE9107448928AC6959BB66AB
7F8F7C4BE5E6E4F88D3BA98B117C9F0F58BA8D4A7B88413ACF98B0ED4A5FF6C2
5F96EDEC0AC75AAA7C2F27FA3DDDD0B3BA0683D98F99A282C799183C0952DAF5
A900E23342D083E8454E64F9984EB44FE0929E8C1605B8B26C37A219ED8A04A9
D7D6FDF3546CB443BB11B2E4A1015E59E8AEA265CC70DEADB42D8361F4F54979
19ED22A9E83B7C851A296D1B5F44AC57AB4EC29FFF3C75A20CB3C1B57EDFB4B2
1AB1FC26A6D947D45EE8221185749042F2896A43FF932AD70B16BC2AD7982D51
C390D752102D4A6D49F0205253618EAA62D3616BC1FB3B7C5F3EE8F00D3EED1F
A096AED8381876AD3B6904E0AF7AB1D15ADF3AE26D38FD979F820B4607A4458A
FE32A61551AC882694E29AD2156E5D008591A02C59FC1DD6BD2F52F0FD868E8A
FCD67B5AEAB0025C012E85B2B1C1A99F66C67287B1FD75A0140EACAF485EB377
7E5C58B9E2904060FD815725F149D6B8251CD6DC34D3675B815D73F7F1F16D87
287341207E5791D6D8AE82E7BE370A2BE4C5F73FAB72B1F4C2058CA4994F6AD3
FDEF96183821964ED7BAA607C483A436C20C2EA50F45951BCD5A4EE21805DEA7
071BEE4216E8B2913E7743BFB58EC4E7FFB7C31E873147605D83D955B00B6B29
F8066EEC1E7091BF7F1D9E261658AEA6A81ECE5051E75695D5631C7398E77F98
08580980492E302486A98593780638B6FDF3C54D55FAB1271BC5888F18F4595C
2BFFC548C8BC5205962144EBF08C53026135AC215895CA9277DC7FF0ED5564
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:50:41 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /arrowdblleft put
dup 41 /arrowdblright put
dup 48 /prime put
dup 49 /infinity put
dup 50 /element put
dup 112 /radicallow put
dup 161 /minus put
dup 163 /multiply put
dup 169 /circleplus put
dup 170 /circleminus put
dup 197 /plus put
dup 198 /equal put
dup 200 /greater put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735F731DA07EF3D6E818628
AF05166460DA5B83052A083336C23DE3F4916E3E60E10509910166E063832CE3
29E5DF2FDFD0AA1DC9F1C99A95FC477BF7F113B2CF4626600B1B5DFF712EB302
AFCB86EEF4DD29EA456833CF29BC0C5CC42C0BB09735A0A83143A0560B03DF25
B27B0B383BD641B85E8F6790F6ACFA6A03C77D60425F8B515C48893EE05FFD60
CB40D1B9185FCF7D27FAE0616B15007FBA17D23DBE9347515CC3A932A96246E1
85C477A9D6665D4F5D8F374CF4C0F4CDE76C57C8F7BD4A66071AF94604FBA047
80C65D0357949E03600E099BFE0ECAEBC6E6A636BCFEFC0A9035532476354B49
DFC61218068C10E8103BFF464394C6A73A86807D46452EFE438C9A865EBF163C
2BE2F7A043E0A9B96151E873C29B35113FFE3AD8B523995FDA676E5E4BA61A30
BCC6474B5F42D86AD64519763339CE70EB7406E7871950A04FAFC741B0617228
0AD858F952B73B4B2933756C1867A7CCC699B285D06A804D32B266AD654882C9
E35840DF31D02B962FD94F42B64D6F31E231B9E57ABE49CBE058D73981B01E47
EC554108102807CC94F9EA2AFDCBB5A39AEE344A325F58A3D16863648D3CA4F1
2C34289CE42CC3086CB2093B8E8575D620B9537907B0F68A94C0CBBCEBE67484
91C7D1B40B3F4E942F35D0856CB9376787CEF6D08E1183223FB703DDE63FEEEB
048FC63AD8F0ECD2BC6FA7B569DF2124BA078D31C5EDAD52C5A17B6CFF65EF69
8AE4F80D603448514CC63F668B413AD209D6CD7CEF2CEDBB3DB3E2AA1F4BDC98
4D848C146BA09A1FB7CA90161015B1C8730B440A23882132E0D02EA6F48912EE
5ADDAAFDB972E3506BB493602D94FC95122641D360EC1EA6A7C2E6F4BFF972A4
8AA1C32FE8C01D2EE0C152D28E8E0CC8755C937A869CF59EEDE9D609E8A7A2BB
78F30300724AE54BA2CC150B0704F8181703CED494B16DE6D6D8C80000AA7B3F
F7EAAB5293F5E8E566538E0BB3899722AF9BF0E3F40ED6F3E7738AA8E154F2D5
94F1C7ED95F5874EA12BD86EF2C15EEE23BD34B7A21D5C7EF6E1F356E1433E64
8766260282A606A5F17A0725F9F05DFAD57443456901CB49C37050BFA77FCC94
5F9E420221DA80B42F8A228EB86EEFC390D4A57FCCB5D5BB98ACD61003DA03CE
AEF77BEF1FF0495F17C5C4D023C6E9439AFFB0BD2959E8BECEE9BC309FE0ECAD
FA004086BBE4A5F979D62FD4BA95AF61C542400555A254980B0C8039C5B0A925
3877C995A5197951F2F92C4ED9D1EF1D09C4584CEF587BEBD99C417BA3655E59
8DAF6B24A575D898BE993DC955AAF4312F9BC7CA57A9C84A2CBA0841E4EFE92D
2FE07EBD7E1106CB7BF3FEFD6B668EA5600B416160AD659460EC384EDC6CC91C
487CE18EF365FE39A4C66C2593230637D9B0E2AF68684DC788DEC5044DDCB26A
E7D693778F56CE6B916CA56EC76E4071DDC8834A038F6A360DAAD16CE78A9F70
746410100570FF7EB20314BAE732602DA28484D6EC533D120DE5679F4F833748
0E18957EA41186923E44C2AEA09494FBF405BF8A7AD7515A95B8E317A5027FBA
B5A528BFB2384E004336F85089062EE0E2BEA4B6B86A2339B4803BF5CFE6BACB
76E54994FBDFCF77064D7D4EF6BA60BB2CA6ED00D962038EB7E1E02449443A84
82B0268C3DEFD586E346C75FDD4AFE716ED18163BA885625EC3BCF94F9BFBCAE
6F42618D023C8DF4A225B791AE84301F37C6493860964E4BC608F55B98693C03
7DAFC444B4FCBA922823F701B323C54ACE746F2F729638984DDF5DCFBA7B3A7A
5B134B9DCCEB8099BE3BB4BADDAACE2A4C7E994995055B9CA085FA51B00CEB0D
C3AE80A51E033674BFF02FA6979163F392B59BCC105634E7A4181B6C1A902089
BCFF3250AFB605CA5928E90696103E8B81C76D2CADDA4D96D1A1DD8E413AE6DD
79D474D5124B8CB2D7AAB75746E1C474F38B6E2329B24E796720AD0022B9FBAF
5C7BD85034F3DA15D7CA8236AAC8FC708E6F9A92DEF46F8E5C670B88D752FC64
78FEEF32B34ECF4D1401C47051C5F475C1D30D39BCE26A167860EFFED0941BF2
68BD0337CE2C6DD945D5A0CE2E4605D1F9F5D535CDB1AABA90E97F946E57EF41
739CC94433916A97C0B2278AAF163F88DD865D6FF2F03D112DFDEC9F4DB95EF9
9AAAA9E527361B3C18A954E4E34594A905F8A0E894133BAD3B25822C22A2539C
69C7BDB896798B83B68E69E9A9AD10549A539F7B149B38A0E6351652FBE96C3D
A666AFA69BA4D9727B6BCDF286683545CFFB23A276FD5DEB299913521AAF229F
D0AB845814FE43D3AE31BE84B888F4B293107D8C3F8F053BD4ACCC3C0027DC87
B705F6FF25F403DC4724ED67148C225E5978CC887C63983D8CBD18BA462FDDF5
712E5835FEF5DA842487292AD64910739B7A73465754A5E4DF9CA061FF2B5057
80
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-BlackBoard
%!PS-AdobeFont-1.0: Fourier-Math-BlackBoard 001.004
%%CreationDate: Sun Sep 14 11:40:06 2003
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-BlackBoard) readonly def
/FamilyName (Fourier-Math-BlackBoard) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Roman) readonly def
end readonly def
/FontName /Fourier-Math-BlackBoard def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.00100 0 0 0.00100 0 0 ] readonly def
/FontBBox {34 -199 886 747} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18A96F6D1C771F81C4B3B8CF0CBC2E8
4B44D923DDCE84E17DAE82547EA9EA5E732D78F03AA245377BF0780A3752527B
6E63F6A41202E7A6C4E4F9330A0AABBD04387E12F2ABF531216BF498DC6B6BE6
06DD50B385DDB864515170905E2BF225AB9AEF29A2181200040460795735C124
59C90AE9BF9F01F42A2ACC5A5D97D4F6548FBC903ECEFE9FBC8492EFEE55ED6F
F29A7BB50432A42FF30DB3CEBFE1C2BF83D613F2C846B7F2173F00B4EE5FAA8E
12EDC39BDDF670F50F6AF072673281554416E77FF134014D5C465127C28647BE
3E810BBD9EC9F9580C21D2E9479B8F0435749734B76F4C06995E769710828768
3141ACD67803BC92D5B405AEBD4B25D5DF255B110F1EF1C35D45D24AD0B1E0C6
8816579DF17721764D5D2CE396276ECE1E6142DC2EEDF83FD7B65717064CF671
051D92A9993F82D241AA1C3254DBD3DC53886264BDA18DE9FB8F584DEC9A32F9
82A6131D7140BC7926C074E26639A7141B87ACCD64E61A25DD7E26F463FD7834
964655DDF83538CF1DEA3D6363DE79EBBCDB429279F84F5DA8035CE823A76FDA
C2FE77036F5B9D71C0CBB063689C0C9770514E550CDBB1BE97D763729B78CFE3
DD162726B3F3190F0003F4812E9877545507664B32A1BC0E6C933BA64EEB3563
39606495CEDCB8EA6E63ABEC9F3558DAA0BAA350F45A6E9B145480D9513B87EC
14F7551489E0F96B698A104DCDAEF9160549D551093AB3F5F7EBDDEBCAA3ABA5
F0CD388ED13E9611675BA045A8E99C002616ED89D1F3EF0537C6E787DEF9B5D3
F20879DF1555A646A79400D3EB80A209937A45A6345C4E51748D3A5C523F9F93
FCA3628D463FABD8537A948B3A3715BAAEE70345F5186A550FAC78ACD262E671
AF8FDCC133800B82183CD17B4EA18EB6AD976F91FE3C1447EAB9EACE7CAA00F8
69C9D899C80FDAA551B57BDFD7BFDFE5BE081D0AE6FC30D89B49C43AB5C8F923
13C1E770F0905663C6B7FF3B02723580D7B1E8C0DAA19968884E622821BC174E
58859FA90DF4D140C225017AE82F1C01CF0FE1952AC0CBFDB2B2AE148026C116
8E9D2D51BEECF04E3D194C3B62EBBA84552E741659DB3BEA3EB1887DDF2FF5EC
E616B5DDDF84603216ABD3CC62CCF91FCF4BBA041DB075C2A7DEFCE18F39B173
F296A12AE1CDD8B0C1DAD85E3F73F5D378EF9B3E44241869EF76C09CDA729288
046DC05F6A8281F31175DF235627E657CD3BACEF2AD0B700ACD6976C54D0B1E1
803BAB50CC45C5102647D7D2B835491465DD1A2507761E496334D370804A5E4A
5F1481C6A20C9AAECEBA628202ECD441DDECAAE92151F47AB7999A2290E4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F607E0F7863C43D7F6A91917EBD66730DBD642DAB8769849
47384FFFB4994ECF216FFA8140397695EE5AD63F1156720A01BBFB15AA24FDB8
2F2A8F541C7FC860E03F5E4DE80BCF6891263C142159D5879CA0A1883A9B6C50
CBDA9CF0C97E761E354C39527F070E680B42E6732896B10E6A7600184B156ACF
57BD9A98F613FC166F47C3D1C4E5E02BAB648D74B078EE3F0D8148D981451BD3
918C71284E6154BEDF8D66BA1261A7459F64F133445F9BE19A2B8DB77722B4BC
7CE51A6004362D6B0DC62CBBF70A069C53B682FE26B34CE16CAEEC0DE8C53BE4
DCF4CC48B04D6F6E6EDF07FAA75EB2DD9483FF65455FACBB4CD279721E852D63
33EB1DE80F1DD1408BC91BEA00E3D7C9121DAAD9A62E705B6DD2AAA6452B7A38
14DB40B124C8448D5300BB08D982B2D8DB1A6AC943BD077932E330CB226F6720
890E2178AABAE13EBD573C7A473787A3D4E157EBE13B2DE68D7D7EBE23B68519
D11ACB684554E52BC8DECC1125C2CF812CE6C953A9185381872F693579FD372C
9156CC0B03C17560B4222F9DCA2F59697989C2AC1DCFC180BCD3E76A862C3392
6ED6DABA6011F4C3DAC80C1120B2902E7395A5828909C7A0026F3E82BD05C368
0982310DBF6768D98EBB612F6B27102DE05A476BAC883E895298F791476A7753
9191A4F2BEFB280385D4504DA2CEAB96B64488F3411EED126E7D03350D4B9CC4
90E3602B95CF2BA78D4CF8DCF47CACB165BD4CE4EE52FB35A76D2F55C9FEAC05
E7BC1139D96204F5EBE6862256289A59B71DE1AC38D8185042F86B85EB2987B6
810C8CF303132B66A80DA1C53CFAF7C76EC67815D27C5B1D25AD65C357134BD4
E40FBF1BEE0993D38EEDFF5A31992A614D1A1BED0E4241B003B3A6B77BDF661C
FB17A79FB6A2107D6A48A8E10BF97FAEADE1E4032EBEF8DBDE86217074BF9ADC
6E6A4C3D23F18ADA4B3B9BA5A44A6A325B9868FAE84254679360C5346E0446E0
DD7B8EB838C3899F41FC34818FD7B2A078E26A166575049E84F390A98E1E7939
9593DCFD9043706BB118497BD332F688E18C501CD60CAF585E449F11D0DE9B04
8E1E50C3D118CAAF668EDA4388B59F035FC602ACA9E9ECA0D1BF7DECE0A2018B
05F76EF52427E0B79DBD2910F9DBFB2980D628141E0313089F472C31BA815638
A608308687C8FE453F91819066BE36CE9D16EC0D8C9323AF459C01D8A6DF13FD
25B629D1579C9E52D1787E42DE24F8E34187D3B13107F9E3796414042DE977CA
50513DA82692B195840780E15E585B816EF134AB25DCAD2BE257C3B6D1E21505
145AB9B2BA42FB4FA5F8339286C4F958DB61B2CB550B19D908FC4E9EEC8EDC1A
7B9D373539E8ABAD249D19CD9F55E840FE6994961F5E78EA20B21850613F6560
0DBB29116D942C7704EE04237D96DD41894A867C9E90693B0C4A9305950B5BF0
5F0CDB44912C7500D79FE440B263D9A404344DBDC0FB3CE5F91A5F16673D46E8
EF4F4B6003DD31C017928672AF8E7DE7A7AE9153ABCA5D32E77DD68BC11E2057
402F93938AFE4516A9DB49F181F0A15E3D66D8ED27FA1486B6216A1AFA2DF586
27399F63DE6FD2822C03FF2260BF89810EDEC931E87F4BF5C17CE9BCFD421B8F
156B6555F6E1BEFA574643EADC08BA36A2EF05D906D936BA22A9B3D13D06C96D
ECB325BA32CFC2B231C4CCA1E61B8D5A413287D9D0E7E6EB689A0CDBD430396D
CFD1E5EC95BA6DDB914A7DF0884F7D7FC63BCD802747E53E0B124A48F95A8E6D
FD5839E6687A7604F60E30854CFC652045B82DBF0F418A8BE0BA60084921CE1F
DFA08C12BC83564C6215A45C485B477C447FCCC14631226DE462250A24B9BBAD
E77359909CB0FCA1B036FDF96A5ADDE48322CC0FAC10AE53165042A35C79DCF9
C7DA3838E096C18127FE7712068D4B458D9BDA8D57CCF2FFC42A8D02AA734C59
11AA72060C5C1FD21C069A9D6F3DF6B7691C53D51D4D5ECBC5329D97AFDB31D3
18559707C38F3582F05D68ED2F0C864DFD03BA8FAD8194F7ED5D26699EC23A65
82BF054CAFBCC89302F82903A56D2ED47296555705CB57013982983828817679
E6CE21C03BF50A837BB3F39A81435F00C64A70923296165191DD7EF4B51B74EB
C3C3F424F9A94504314132AC0E3FDB948EB80024ADCE957B001530E7FC665271
5002A621DF24B95C816D8DBD3915FC2E1AD4F427046E470BB95D213C9C2F9C44
6A878C782BA6D48AEE80E17953AAC7FDD495927DA0949B5B333D2816405169F9
2404F6B14927B6EE5B5536490E3CD97683EEDD111C442A7CF169292AF595C0C1
5FD40C5BC9D51418E6810AF751B82562E100579720B119FC72FE0091FC42B511
A9D85FA97499920676BEBC0A52D024263AAEF21B9D49943AFFD0B5F6E5152B01
14C673D870289A0643332F5E2CD1BC338BA19D607C58C3A070BF88BCB9BDB7E5
FFEABE5F54A30DB330855899B8137E3DC0CBB3604CFBBF62A09EE35137B76D1E
44C5000A515061E4FBBB3534E13242C74B11249D43432870FBD1312EDF539137
1A70558F6840AA76EEE99B013017F6A83082EEDCEA0D0B07882882076463858A
4FE176AF97506D3242B5AEF8258365A82866A740D4D5704B2D3D018CB0BDF160
D2EC4C5C58A70708BE4CF02CB53D5408091D600B9EDC74DFC88A0B879EA87CDC
AA3A5336ADD332364003B089656143B089B8B64D703FEC53549A80C80381C700
5CFEBBFAB4868108E2D0D5F8F796E0F0E6D56F23D7FE94E9E82808AEFDE04D94
389BC57E64C3AD33809266AEDF3E92BD358E8B668996472C721DCA8E89896280
74FBFD7A863F49AE3ED1028650741BBEBA5D9AA2C7CC3C55F277CBAEEA8FF20A
C1C82FCF0C166B4A835C1CB86F2157B0FED251D8687B5029F05816979CD26443
938B0BF3BF7B8B5BD68475546D529559386A8A3BF37169F67089069B72F3C264
EC9D21513D924EA63055CFCB0D7E81149A66EF630080E6BACE547699B4351061
1AB3FA15066BD907E21DA4CAC9C0964877EA22D9E5E6F338F46A197922AA63B2
A5A18273EA5EF8EE031CD91F1C967EB881D95F417068EC5BEE2FB95A44C09A02
B08A41AB7519C4705810520A97B48285DAB5BF1C6415820154F8C189E4A84258
5D01A59AAA120B88151D104ABDDF7B3697AC9ECB190D3C92B46B21864F29CED3
A549D261FFD7039C80D003E0ABED5E50C134FF33B4D8D885544CE5E68A603B1C
32EA6C1299D27F9136DDC5BB291DEA0D0D7F32DEBE2F5CEDE7C92DD03C1A882E
2AC2BA6B51FD321D3CBFE5655D3EDC72D7DDD34F3957B3348F3408B0AC6E3AAF
A7C3BAC7C86CEDB980281E09CC4C87D9901F274415E9DD3166022BCB537B6DA9
E8217A0B0F65942F2321EB09DFCDD6A51B5612D906F966B142CC90AAEF2FBA46
A492E8E0C2642719EFC747B40B8B42D04F2A4240DA33CBD3E07FA1D55842BB5B
3102149A196ECE13CB4F395609A94DBAE60E345CCF6624BAD9EAE33833C267DF
308F0B800154B6416FBEADC6710135F0BB64B8EF98BBD9853DD5539CF4B3ED55
BBBB50F1B7CA0551601A74B4CC279F85A59E58CFFF4B519D9EE3FBD7874A8562
9DAC1AAEF295CD8F97EA851757DC3E7CC6F7C0C5D8CA93D88AD162FE33D75FFD
F7C643D284AD3FFE537A49FA627BF9D58E281A672CE9425D964834D39F67072F
90863EC701A6AD7B9D4FFCB5F468223E890CF811431FE3EEFEB6487A232F85E8
1C54781C05A7198971C74FFC21D3BA374A2914CC5B90F4A4D901C8C9CBE2741D
C2C6709E88284D2FB544859645A143B9D2AD9B00A7BCD93B469068A5BD2017E1
A9D2C72DF5C9DC39C1FE52A723DB3DB5D7275AC87BDAFB1629719E75F07CA200
CB7D71298B2512B7B995DCC55499B646AC93319D751E95979877DCDA412F518E
D45BCDB8AB3779D44D6F02ABF533161005D90C915B4735481E2C8A5D9E3F60F1
0CAB24A584DCC97AA2A1D7463ED69CAE56D714E4534C0F8BBC91379EE302EA6C
22210F6362AA978BA1639D0D5EAB46B681FD0A5DD59CF4A57DDCF9DCF3EB3450
34DD3F66EFC7137D118D4F2436599BF01497E903B3B187D72A93518C2EB17A2A
6F7BDCEF63AD54442E1D1850B773B9AEE7ED4696AA3E108D9C48FD436DD43ADA
AC1F0ED02934266037AACECB9F9BA7D26CAC6B8030108A138E760F70238F69A4
CE6910A7A232F434A68ACD6D71F59CD9D8565E9C7AC8179026DD7EBB5D0C9D8D
0304DB17458CE58F651270701837C45AF1BB0ACF139FDAEBF847FC956BF321AD
859A24FA8D49B395A57C5C246A92A45490A6B6D9CDBF560339675F833BDD4B3C
95AC1450744608EE366E32A3F53859FDE1239472F92BDF5A7D8778243E1B814F
701E9C2EC26D8F09FCF1D2F42F6F2FB924C2885F0B50C65020373AFDD25EE9D2
41443FB7E47F3630C69E43B8092B0CC212018FAA8C57D30B4D8FAD6185729B38
ECD3E9125B5C4039D1D3CBB0C756F92F4E8524E02771532AE34906079AA71F5C
35E4C6E54E5892C60CB1A247801DF1C389AA1D0FA3717BC14630A58A2C74FE71
D3984436EF69E57608B34E659153D0606C83DCC3E606A3B401F6D7955DAE29F4
6963AF645634CC630675447E9A64E3142F9D944983B1A85CDDDA0862D117F65F
182B17E8D5EA6436A0224D73E0AE25E73866FAA2F1CD0A281B9685F5147CD304
A9F80E163B946654304987D87F5FBAB3764282DA78818C8D7C485EBA9CCE928E
2831CE0234951FF68AC27F81EDFE59BD0E9745B36ECDE90B4B793677DC9D0D59
F2A114F7BFAB346E27BADEF347A3BE68C541EE8D976CD5E7C8C132F7021A8638
3CCFFF7AA0BBC9A98DD6181DD539CB02B0504434BDA3750074F36E773AE8B5AF
EDE6F666C9591360D7C2AC9DCFC1B7449390607C57AE0A2057094B0F70E803C2
BDE682ED8680F1D1C65A9CBA58CCA82700F05B67269013FDA935FA86C0A0F603
8EB3DB7CAF1FBB8964AC7F49A6C5C0F20571F772638D3F81F4BE73D274619ACA
6AD5A9DF5CEB561DBE5BB7224521814C66ACE0C35DD47371FC14E56A9856C3B1
96F1210E597F404E262CD6BC70542121B0A03EBCA6A4A7A8C43F176B647073AF
9085F3C72EFDE6084B9F14026D94F1CB6B0C763E007FDCC1895EC435116748EF
16F2B0D17C7E9F0CEEFC05A0F71C1F3AD924DC97030DFE3A18AFB0F6E91182F5
D6814AB810238D433CAEDE97BC6A7435562A7F1F3A6AE580F7C4662A8D9F8B0F
EB9203197D753D8C57048ED47325A2136551DE2AA7103B28BAA2FB85467960CF
CAF502B791D88795EE88D80E3A8CF0DDAFDCBA09D03745D7639FB363111F45F8
BC6E07B11A55A24300A2FA85C197E29295AE76F09A53B38BB6ECE73DA3BAA49F
CAE6E31F459D996A2871A406B79EC01307FE809C0670A93533A6B0A5A39B0850
B2AED4D3A0BB041115DB80EE6128F4BAE7BC515F3897902529D0585D078CD036
4E3D996E616F68C39A890CBFE7C486E02350F8D5FE7D4A8425FE56025D1CA41E
4B94F0A6322BB29413227022B09AA58E4726F0C7C3BC2058BB7E7858898AD528
630DCCE324DBD535B156F8C644AE410062892C27481745CA6A559BEF0AC0083F
A18E1D271FFDCCDD178A0CCF922DE513B2D7E5D9E7276A14368F904FF4D13851
BFDC58A24D65F2D9389532C37C6F5910EC324FD2DFA58C52BA94D853897E3E07
235FB9C6953833F38B469E5BA1A334F4E505B6C7D2C77B6DD17766E680F2D477
7C33A6DE4D9CF006501018FD4AE214974B2B275CEE453C885BBF442B6DE3179B
2F24AC57965589DA2614A15DE3F85B8321E4D2FDEA82A203B28B03A324CF5DFE
97F0350982E9BA29EDD53AB0BB59034060C90D18CD2106773B47CDE8AF262AE4
3890FD4FA2A0A626594CBBBC246B3C780D5623EB0283881BC3306E363E76B711
DE647B73A937182CA798E6BEC8EFE496272109A85CF598BEDE4626112D7AFB17
CBF94E503A6055665E4093F98C7CEB6ACC9E858B1576F20DF2DFD495114D0616
EEEE39E708960691832B3ECED633BAFFCE67E213E7DDC522AD8427609532DEDF
15400F35F789FFA040283ABD99A640FAEDC2F845BEA685E12400705F914AC522
2C8A7AC46953DA92A25ED95EB8E3E305E9B35A2390E5D040F0F6D73366375274
ADB56BAAF1A1B1C7EA3D873778EB671F2AFF273AC239ABDCD321438A2A99AF87
0BFE5C37EB3E481112E8AD848E38C47FDD75488BD6D5CCD84389A526DB2AEBF0
3AC98FC2C82D88B0BF013C492C55C42CB58BC77432EE201F41FAB734278171EC
9A46E2F560EED718481EAF1EFEDA3283C0424B11FEB7E125B39CA63F6DF9DEE1
C864901E870F2A99727E9DD558E1B16A564338BB923A4E3B1D4A86E70CD8A0A3
19C50E1A729B27053E0F6D96D1F0F7DF04DF478BDA4A990A0284A88C75860C8E
B02498F94BFB42344E6663BC0CBC5237134E5BB4F8D8244E83F9B14AB9ECF495
B96F3D5E37F6AA0A18E74DC17A0CDDEFE0028E11A5BD89D5720185846B15647E
D6C5EE5714245B96CC2862886E025989CA8DC2EFE4A635A0039DEF9FD4E2A36B
4E5B7B38C7D9DC544694E26DB544181E89C691AC246E4B9DB1C5DA71AFBF455E
6888534EED218E2FD6B4C1AD6F1A7621D3749DFF82BB25ED6C99C9BECFFC7990
2CAC8AE287C68A60023C485F2CC8E86EFBDC698672885E61A2CB5645DE05935A
91480D037E34419D8D5EE87EEC959EB539EA679100452AAE08844904088E8CF3
1E6C016A12EFF81B44550A03D98CFC032191D614E5B76FB20E26619874CE8CC8
967E1AEB951A4B283641125C817616BA7B1997557282EC4820B2109B67F67FE9
60576D856D933DA8B96F143DC4C41806ADA12647D6DCCD6CC225B6091906A3DA
0A6C3BEF1D1FCF00FA85C1DBB2E5CB811E204513120884390D64801336AA2502
EF713100D28F2C51170267543360906FECAE951C79AED73EAD2B8DA123EB5906
5ECE9DF399378057B9B533DBC2D927EB5BB51CCB12AA5DFAB626BAA069DEF6CA
2C029AC67A8065AF6E272993DE83AB64E36CDC85EA0485C53FD0EF5728073C92
22D163DAEA78725732E2B44E1DCF28B2A64B8980F8017A84BA6BCE39449DF4A6
5AC4026ADAED2CD7D3DC1140C488518777CF2E2BFA2C034818738BEABE5E009C
6F55787E1ECD23DEC40E64DC4FF707F99285ABDFBC2B69AE20DA4DF858428EDD
65CB7CEB6F8B921633D2A4AA9E2D6E0E87A2DBD42A78E7633041123FC4384743
7C729C8BCB2B5AB68F5FFF31C9A2FC025866E54696D672A1E558E9DF89F8D9EE
A86E6F0224EBA3624C6F0CD0AC744EDA3374CAA55D83310DAA21E75EF6491680
DE8B5A9601D6AA8512089344A538C5DE9F3812A024DB5688F3ED38346607C41F
012BCA544EE9FF664DCE61C4186436B34C861A33D89B68CCD548F0ACE81830A0
BA8414C9D9B382CD6EC9AA2751CC5484161F9DD1338986E65AAC52D7E8195A4C
84574E96962EED3A3A13F6AF7F5C4D795F8AFAA7DD45E46B12B7C1962EEAED2C
C1E288B1A8E3DC13D5DDF04A56C0247834B454D2C3793DBD102469967B97BD1F
1D91A600E115E709487873BEA112AA341979F90C41DDA4B3CCB0149CE4321C25
CBA8D22A504D7E9119EA982BAC3361FC8FCEEA012485EB19D15A4D50B41E2A9F
8567243C5F55158D944250EA263A157E9B2F9023D79BF240990CA76EE846B877
A2FBB433AF539D76F1C6EB8EABCB8DA4AEF69DCAC9D2D4629FC57C366BF6C19A
7B2E525D6ECD27603DE252E574E8949D8D33E68E96357320D2CCF069BEC5EB93
8AD280C1C4F26F1D5E883AAF545618B8873970BDFA373DC28A99EE6498B2382F
1AF715645171C405756E57D1ABD36E6CEF53243684692ACB9F170BEBBECC37E7
4F0E185AD52A6115E876426A5D5D60CCA7C65B7B73FA1EDF0E2866AF6998C61A
7E94E682B73D6377544DDB12854801C843ED68BE1144355CEC45FBCDEA39CB01
8477304AD34B1F08B8A4C6E4900D236AF169699F0B0E8D11B5D0EA99D9C525B7
55039AA11D981715A9000D0E62748674E729E56E422A2B7F9D1411171B5FAD9F
E6E01E63EE8868EE90A4254213F177954429878A9A254984CC690781AFD3E4A9
B84CF7DB83C059F7AEA7A3F51A65166B0955CB2E716C42F0FDBFB9D6912C90A0
E46702572A9668EE64C4236760C4CFBEC7C9837A26769421C589354C51FCF85D
95A919AA088E3FB84964E3785DD783438DBBD06A5246DF0AE03AD5477B7899C0
85D9C9BFE93708A6CE9D7140125574E918579A4764CCB37EE6992DB42C228E58
6694A33546A468458CDBEB50A58F227F17D39B3898C78E210C7CC7645A676716
C278816F87AEE5F1A7DD8829E6C75123998FF6C47BF25B05C23A4BA96B0C392C
B820C5E4F0ED09ABD45B24A8C805832912B535A0946FB6D123E954963C3CBA29
FBD8888831119F214E508626FF3381288C3F7D29965133EBB08548C09B85A624
1DD366C39EA66BC4B07A3D388497A66B2723365A449D7D3F86F89546C2E71E39
C12829063D1B956834480762F6C8D6B0FE406634DE9634364BD995B9E829F41C
843B5B0814CCF9445B4C8063B565C80F059B2794188378D9D72E91645BE4890F
DC8D15697C4D2B25620E25A0732B430B25A1F0014EE2433F68859BF1C11951AB
0D06685278E01F2CE6E1D2050E48DBFA3E2C63BD0222B2522B9E47D4B5ED5AA9
5944ED748BA4F6EDABB56EEEB1CCDE4251E736D4548CFFBE68A5074FAF7BB8E3
066406E6904C934DED809460A8DC4106720D5B4C08682D7844262AACE43C66D8
931BA1BBBB3CE412A217722C415BEA7B5EAC73E4E2ECB891EDDD849412075A3C
8295A277AD1D40106D97741D9FE4CA1D1679BF06DFE561195C6853D2192FBDE6
EB1E0F53696C1E1852571E62512F86E3D942BCB1ED62EB0380F94EFA08AEE97A
202AB1DF51CFDBEBF48A9CD166CB95459F07258BA18641051AA28CBFDA55CAA6
4BC3D23D8D4A148E1D1270194E595D6B9E7870B627FB16073860B9DC5E665EDC
05FB5472435B8B7ADBA85B9D06F421FB620C2C1C39205ACF5747C6ED4F1AA1FC
2888168ED84FB32709CC538F1B459BB9773F1D4F1397B4ABFDBFFB4A0185E386
0E76B452B2BBC0806759BA0A3FA26470B231194E9F0500CBE9DE4B1F08B8A4C6
E49034DF0E7623FB855D4A85CF1830C960480D418C559FC1676411B1B598885A
17E5B0036DAD5797D4267092F2CDC3E77C89E0DA28BFFB7FAE324120EAB2102F
08CF6BC1E4A25C762A876980EC5C15B03E118C18E64C1D8900EFD8732788EFAB
21AFEBE530ED17B1F6C3E5BADFAB9333877E28A192CFEBD0A7DEDA931A0D1379
1C051AE214CA4ED59E1BFE321CD82990AEF00E6EED52626EC61B9546C4CFB90F
E4C8CB089524A44E4A9D2E0ADD4B5701AF798CD0CF3389ADE001D02FA5D322EA
2DFCED9398B96E28AC9208A19BE0D45D6F4921EC1D28C2141AAA9BEFA2472593
299C2A83B08C68B3D51133AE95B9229891A689CB88678AFF7388B58509666CEC
4C582982FD686952FFAD2AD1CDEC175300E861A5A13B7FAAC7EC7A5D5DBD156C
4FE06EDBA625F2FBEA0963B709DFEDCFF9E7DE188B810DF5C91345B5AD329249
CF6D2580E2D10E102F98DD2B211CE91FF192D0D20264D39E3DFB7757D085229C
D7C681EE124778AA49C0B0B43644E9678B17CCB846BD7BC17D8578CFB30DDED9
8FEECE8613DEEC7433EEF1BB68989E73F41162443F77B8F87729270E4DF70B0F
06F5417C975B168B9B471BDB893F5877D78490C5B6C0745AF43972FBD40A3D18
8252E95D007AF10B53B96AA71E2994C4027B4BFE2F93F0D4BBDC92C491D2CFA8
4D8B5604401E0FB1BF6BC0B35776E8830F3806F6414DBC33DE097A1D3232C4B5
336E51E751E79FD6E1566AE80DD146446EAE5197758E0458C527D0408E3D5271
31F944EC2C0E10D3D7F6C65F109CC0DA225FFEA7FB67B47C51475FDCA1F2E180
0C9FF1AB8111BA1924733A6C819CDD399D83998B5B314704441262AF3A2346EA
93FE49094FD7C7013727EC5DCB1206AA29E11E4EB16206AB22A632641B24E4E9
30CF2F99E3021E120F3B33C5014D8A4AEA83915A417BC0A365719EA16CC08151
619BF7BA77903C641489AAD69EE95884ADA55FA5701D2492486AEFAC7F4C72F0
A343B7991D47A63A6933DF3A2AFD5F8DC4CDC30E377B78459895AAABDC4C6274
B759B3D82921AB79D3FED9CEFC44243AD377D8F9B8CC698A7CD5FD23225272B2
C64B1184207F350132C28B503B2DD2AA86E52CADD6114791A5F3F88D5B4FE5E4
5301AD280FD091925081DB1224BBB8B36DB58C5345A749A43199A5184FBD4871
119874A6AC116191FAD0E6C138B66BB660C1426E904ECEAA93B5088CF4A72ADF
FAEA86E9AEADC7D524E5F95841EBAEFB9AFACCBBC7FF58AE1CD0F2D132F6DBA5
36EA084FEA4387B1F758128E2C348C03C65466A6EDA3667D38EA83166314F302
72752554A770AC9E2F9842CF58562CE15E5186FD355693E1F3B7CC4C82350FE0
23593554C64AE770FD224ED2883ECB0C1624222BB6C52DCE9E7AEA2A41CB8228
84231EBFD25AAC3304BF08AB080868F56A5A0BD5DBF2BA7652756B2E0BE3DF39
08C06E10EB0E6EC73D36588242112DFAC8E1FC8D79679485F52B85870C736F7E
2050DAD0B84C49C1A3D741907D58A98183F96AE24D32E9C76E6B5908778F0097
DEE9BF26BED9358DEA79A9236826E7AD6C60EC789358EED4D67D0E86100FF574
11A82C860A1BC2B8968BB436D55518A20890AAFA87BC53C8A58A951307D97DA5
9138A400B5CF2C175B4ACB96D1EE2F23B61961BE8CC38955214A03B6E193E133
D59746FB0624EE8D43E23EDAB960519EFBD289AD0D1B43DB0EC8D3BB576737B8
CE6C5F5C0C9914AA4A4D00BCF8E6D2FCDF8F2F1160D4722792F338E8C8C35599
54F1CB15675144B5D92E1CA5018E5F405B92D88B52EFB69565A7B73449CEA8DB
230872820A540DEE17B3A544EB10B5E3226E248ABEBA5B2CD60C41764FBB9DF9
50BD7727773D95963FBAAE5AC4FAB44E37122899FD8BB1A26E4C2333959630FC
F4802FF6229B426FB28623536471804388C791C2745E1F310FEBB4448EEFE995
EBD76CA1B3AF74D60D38618292065F2FA5D452BFE30668866AFE4DDC94095057
6404FCB0F9860D03022EA35E7827A3D15EF5AE952002863D00FD767EC577BCF3
1B711C6A2D19F381270062B6B6B0B1403CD0923FCE37E583828BC16EDD35CDBF
4E8D9A3BC3D55E2BB553BCC881062017EA49A5EB7778297C86B3E119179CB130
E9F217EA06AA3580E36A47733FBBAE7E723C14BF6D64E9C25B062C2A43412412
09061F57884105BD8D2C6FF35AD435188D754045E85E8D0F0C18CF339D1085A9
53DB386196B4B82241F32157C01DAF473EC4BA46D2B07972F0587D78A17D26C0
DD187AF154547B75E254BE91784B72105723C71963F369341118E5FCFD0A8D4D
4CEA17E02B9CADF4D5EF841F27D99B73837A2985596ECFA13CD639E383C7C731
112BAE578624FB9B16BA47721566A71B087999EF9C37568FAA2DCD8ED32B7D11
D8BDB7B9B86D410B1FA48BC56CFF4586DCA3FBE2AB518AED7CC5093F3B7ACEDE
3C2E0177C58642A1EC084B83E3B9EE0B0A881DCE4A66F3EC249B76B6A7AABEF7
AC5429B6F4B9A8770E3461B62DC61CE4E511C95D4B63437146B1143A3F16AD2B
BC092932A530BC222E247199B5433B9CCD5CEFBD37A60EAF5DBCCC38858C46CD
56E8BD013F0B1795BFBED525F9989B81F3D1279FFAC4741B8F57EC39D455AD21
6178056BFCDAB3C4316ACC6EAED309619A27C0EED6598CD84CDD725F9AA215EE
B7D23F56A639805EFA48E9BCB2FFF243628AAFB32997A6FFE219872F0F6970E7
C20B64755CFDE5EDB358A40B2812488D6417CE101B4AAE908BC56BDF3A2BDDAF
E218195C690BC6EB1FCD7C6D2386769BF30BB16F7A73DF9FCA3CC90392F1B67E
0B8B99EE014915A91072202A27E659AA307582524D42A51795F5E6A1031476BA
8B834773E6088F5B6B2FA8DEC198FFF1C7FC44EE3FBBBB32155BD6DDD478F036
1D60378452706B0E042F2AEA2AD8E00A7688055B8828FDB72DEF6492D7DC1D64
C738014D8AFD7D79637A73A97422ED4722D63D759B34C86F11711F29BF36CEBD
091525C55CE3F41635FC812E4B84819478A3CBBF990B1B54001B54A821E71983
C05D0DC5A6F6137D6B20D3CFFB889492CF2B925F55467B938826A0805E4D2DBC
00F282407DB51ABA63959DD85AE2E3CDE1965F4AE1D53FF0A0E0C214B01C729A
CB856EA00E322D2914F84ABCF41A36B6CC8245DF0C8E9471A5ADCD6C3EBF2103
606247E509FBDFFB5D919FAAF4C38BA88B677ABC3B7D175CE19018B22F07B558
3362668A631B23629863A186106AFABDF17C6DEF4D21AF4D835DB78589EF7FAB
0CA353DF861FC4832EB87D311E6BAC376B17B21F7C6327C908EE6415F97D6E35
503F50DF4B7C0A6752C8EB0BA717AA59CA484AD169E5FFC0F527C5B5A8590223
348E5A940C105A43CAE1FB333F6BF9BC425B2100A71AB581EDCA352D8DD7FE8B
C6A7A6547AEEE4E8F393FEE466B4E1835B4E22E80CFA663E3745F5B85D4FFADD
88FF32609A9D52E9DCEEE483624EA02C34C080C31F6211746E1814DAF2D5E10C
E5DF82EF32EA4502DC524FB8B0049753B024B4AAEC5302078D2026064F3F221D
43D9128A05734B00F2A05C2B938EA767E82E88EAA03F653534500BD01EDE4140
6378E863809E2DD0885CA9566012592AA78C575A6E029C875B3B5EE14A9E7B7B
6674301889EA648AF7033FDDBEECD0860CCAA34022104EEAD390567258F8E53D
6DA7BE60769C96DC633974C91F4E3E6985C53B76CB0B57EFB196DBE2AB542FD0
122320B78A4283B2E5C13CAAC3673796F6F20F51E1B0FA00C13E9071E7523A5B
6CFB7E1BFB6EECCBC2EA85F24AB2585B57B5F74E7AC09A3F6A0A5EF8DA1554C0
1152323E3BCCCE32845D1E4828D71336DAC67E6AB92A253C84ECD49E59AC5A58
EE833269184AB38A018B57761E5DAD9E535039540ACC449D7D7B0D3528AACC0F
2A621843F47C6F033D419623D9400E637BC22C08D769C83824A7F8A4666A8975
89F3371EB24AEE71000EB26DC544320BA3EFD2940AD104A433D21598E51FE561
D336B31591F7E542B5127D30CC3623DC002934A21AD1C1D32FC4552D8E293BC4
36685B7DE09AB2F7FCDB08151A111BD70F51F0283949FD1301D08BB4884EDA6D
A441867E2C44A138A3409684EB8B84785676CF166764416311784DEF672E0CDF
7A33F4DDD0C61F2FBE66F0EABEB299FC1D37A9CB4E146CD9EB063EE6D7395D18
68710C17C5F22140567946961C3A1EDFFA139B933DF50BB168790AAEA417F484
1D58645CD352F63F3CB99A87796A4E25CAFA566E55DC835F540BDF82278FEC5A
D8A94813D77C75D339551999EB6DE4D0F24BF7AC9653164176ACE8934CB9AEB0
26AD7D1B2594ABB36DD4233CAAEE14927FAA7586BF35F74D53F39581254F896D
9DC7195548ABEC0EC7A1436B303D1CE268C83B7FFF45B67DADDD9C6619F31698
A8BC144D00682174C505E3044DDC4D93635AA7714B91E64CE7EB757380639EC0
35CB9C2FAB0D7A3BC9115C8F2AE654C1263E6C8779ABD6F271D517C52160725D
764AA14D561FE3FA0D88F1E1331B39A366C722F299F4B72F3E014F2F55445224
29C2901116912F6A9163007465E689BCA3673EE53DC90251F2C9FDD25FF29C65
5B84AF619AADC2354AE6C7F34CF53FFE92941ACE2E121D8FF527E960EF31DA83
D9682FDAA01B350D935E5BCD606A1F6860B41451903FFC84969E728AC0099A00
C919E06308666878D6E19D90C3CB73B668800F10A214EBB4F17562E581F6A5FC
94E0B4221B242B63270B898CC6E063641A06075D9BA7EA439C82DC9396014F60
8C35E570C532DB0F32617AF5D9F3A3FA1C55313332016F3F4D5F4809FD560F3E
5A4D5C7C2CDB6A284912BBF13EF3F6D2BF682FD3B1F85019D787A83ABBF86D24
2FAF4BA6754F514FAF610CBD67A943EEEEE520331D56446A0F4BC25753192165
404DD4F66FDEBE77D693FB6E898A5C4757021CAAB189B888C0EECC7666205187
1F79363E0F0D2684C1526EC703079DC55EE57D4F6D338761F11E0283791F7700
3B3AF198DCD41FD6970D4DC1CEFEDCC03D8C56BEAFD0C272FC7B5D7FB5550E1E
EA37941F099FDE168685EFC377419D50F323A29B23998D7BEEBF20471D49A875
24375CC5E07AFFA1545BF1D476AAD38A4AB368CF536358AE51DE21883AC68AD7
F3710166AEF7EAF49999678E187749A689D9CB037B254CB28FE8CE006234A50C
19B5E9ABF1CF567B2FF4F630FDE5272770BEDF935A9D251798643E658ACD3D19
C04CD7AB8D22A679EDD5244C680CB49B9C6BD3202DF297CE3A3492F76F7AB59C
B8AC0588EB18B9628E87686C354BEC9D0BEA6365A67DCCF638BBA67717976DE0
122E0390C70E4F4892F785D4ACD3403BBE0D5CECCCC980E3169C2652928B237D
317D71F885E661526BD32D0A7A4951DB7B83AF643612998A3E88F75743DD3986
A9EADBD98F892B3BFB6C3FB91B8CF111AC12E787B4051BAD796CF726C4F2516B
980942B029B511BC98D4438FBB17F15C1E71B07CC5F0C46F5491C1721AA0CB8B
7F7A0AD1649DBA25F851EEC021CBCD8DBE78CF166FDBD75479A07A636BC7D505
EE5BBF540C77F83B88D7D0A33D54FB5458E81338C8736C86B525114F4E1C0775
8048B46357AA59626FA71984EF40ED95029E1A4A28BEB7083D46EE7373DCFC32
B6ACB4A981BC265C9C25D11C018B42CD1C9EC4DED741FED2529C37400B2406A2
C40EC1FF9811DFB662F34A1FDE8E2F12771D931FD3D23A8B2B40B60279E140FF
CE79B60983C29BA8066C24B94F75E5EF004D9EDEBEDD6B555B81890891BCB03C
783121ACCEB83B75FB25135948C614EBAD386FD3001355D9DA85739B3FC90FB8
796229B1BAD8AF5DFF54345C102D953CD4AF0EF67686BAEE1906D7837B62234E
A63D38930B69B4F6337A369F44DCFF7370E588E9AB4F8E05807ADB29BB5EB6CE
024E3D8D4DC3E97958A76699726A89B587C22D2673725304EAC71D5840746C51
51726A4439AB2A3EED91463A3FCFC5F80066ED36952C5B06F71B8EF606AA0D5C
9FE9C21F005D1F1050C3C1730FF0A026152C753BBD3C0C3EF78B72A20B05A116
1F647A737D4E1A8C99B32A7D8813B1C263171A70AE6ED3C9957B89B80B871BCD
E4A1D0D090A518BE9E3D7E2621820B45E84D9DA7FEB0EBA6E52ED8BE23E4E712
8287F56B8B7EF7A2EF205C47B40822D85621F89BD0900C063C69768F1ECD1B01
7B60C87AEAF84CD2319E70BA9B5325D22D0085F6F982294550E8BC9E6A684B81
AAE2121B1F365D2A30755B19BCAECF3EAFC3AE0ABE3AEA42C65D83055CCB682D
34F13BE73CF8CDE9E2D4BAE9C37A4FA09F0B6E199B51072B1CBD920AFE5F0A30
D3593D1AB35336098D02ADC4B31BA10B4EC394EFFF933B3E9F9E348238B71F4D
DCB510D735842422EA4CC25B2EC650F1C05FE2C612183A1043EEDE6ECC492EF3
A693C4B6AC0741EA91D36DA73F5AB444941C0A5E5880B7F8466AD3F48B69019D
7DE0F56FE8576B3D627215AECCDF27D57FCC0E76872B564CE6F9649FB2D300D6
7354D1994F10D1A6C7D5AC402107F531907849919B2A3381ACE65162C3D7AB03
A8031522EE93BB68EB0E38DB9B432D5DB70388A7AF4AB7BEA2A72584F5A9CC04
A2123656FB59E51A97124616D1D82D4D38B19390CA2B073D2012E8264F7AC39A
0E94EB2C1B0D13A6D24330CA222D49DC2DF08653E2DC624D8E784662BFE7BD79
BD8EC34B1A26C103E8CF072C9DA68A01785DC500A7F55968F06BC8E4E20EF06F
48813974E1230EC764A9C62AD0C5477A06FE835DE9EA9415CC2465EEE8257666
B126545BEEA588D494ADF25766578DED8D3C0DA51DBDAA7945FA14C3008F93CA
C6E5CF2DB1D91AA4CE1C52F84B026D33BC5EEC2B914262FC7E5D77E3A4DD09B6
14AAD3C5857CD34A1521B39FF9E458F8D13A13AC634418FEFB3C265E0CF6EEC4
2CF07DE8BA3C7676D0913063D34A9F638E1C7F3150D9E1BC16AF93BFB7C67850
6B435CE3DB79B1897A8EB65E211B2D90F71C52EF10185764C4E1818872C296D3
AE867BE6FB42D28806B353EFC90AA16E52619EDE0E00D0F036CBA2F1BC870AEC
B3644321108CD42E882C837CD7197DAAFF660BC0FFBE377AF8682C2A78FE18B1
B4D0451AD46619A448C256D46232F32DFEDCCCDE780AFB3CE055993B87E5404D
DF82F3C1182728BC6D9CF7307FD0059B631186649F322DFF8D816898F3BCE68D
6E44EA9145C689C0F786980C2FCBED97AD93F0D7E3C3E5A4105D3A5B265F3571
38F18AB8450520561EBE498C5911610A13A05C9D34B8D1C7233A356770E7E019
DF4C3F05F658E52A42A46948996C1AF38932564A152ABC34197CB3473436723A
943D21665375E47E9670D403B995F4D4BD71772365282B6D1532B9F11199B64F
E9145EA1AB4FF48103177DC9A8897A5D64F71BE4A26C48EE977F75AA33D38CA2
F16A14C5A29389C7BA84B451B80C02691086AB6764CA9D940D7C80190C508A8D
BAFE72CDA6E2984849D49A217F01D208FA645CF38C76FDD4624F4C6C0848B1F8
CD471D150AEF623C98A097B25E2ADFAB8460D3AE5EFA4AAB425943AD344EAADA
43E048B165817DCF79FEB319C1394B6D408A174EA3B914EC82B164D47C464F4D
5A18E888599790E3A93DF37E31518D778B57FD3416056F14BB230691C2057FCD
9D8BB2F9EEFC84E0CB971AFAFD888C1F39E6929886A398C146DE766954EAB965
1DA22FAE59E8A413AECD6814DAFF61AB9B19F52FA1383F69E731623E94EE3CE4
2324AE139FDF5A22F45D173EA973C683C3391F0AD91576D2353875B2A06BC0BB
72913D8CFDCC3B7AE3AE5B775BC0DD11C5DF9FC66FD11A4254D151C6FBD2A04B
0C916C67FEDB9A131B915A371122A808CC8F6C8773E4FF788CBA956F1C84F4A6
2D4CF681DDB0EF3FF705B2CDE3363B91824554001792F44F7ADC44F23235EF17
3FECA2DF3A3340B90F3D915C9899EDC14F9595FA2869FE57F685EF852DF8C580
3AC3D021234586E859F52A51DC64E135BED5F210234E8471521C62858D2265A5
DBB60618522E595664891F6B2295F18778D5E556C6BCA33C5C0BE02D5240AE6F
8F9FDFC42FE99F28AF1E8BD4875DF15618204031717CF3A455FFFAAA3EB5C907
7D0E5981D7395E10B20D3A51142BB792A42325E4D167CD448139C433AC96DCAD
ED58B5D6FE8CBDFD4088F73A3A63CE905EA3095658A6EA8385D8749194395192
362D01E221D722F7C96E4877F05E534043EB5EE8924F5CB7C177314821F084DD
4F898697FDE29F95A4C8E599B6F0172CB926944806AD89D4C9D5B145C94E5D1C
218CB460A862737EBDF6FD718913AA45636BC3106F186E802BCFE409AC6E1C4D
AC3B6A5D1C1CBAB7D91696340F6BC64EFF2331AF9873D8511719E940C8807D33
2FA5AFB5B5E1F97021FAE2A66FB2C38924137A57951FB2A388B3FF3425EE50C2
F1DFBAC76C1078A2716FF907E2F9C1179C48D4490BC0C18DAA9C07249E5DE9D6
EC96C7B0EF9A38F08390312EF1C005F53A0FCD97FB9C6BC43D55152D9757575D
8EA2FD5F40D185846AB6D0A3AAA86CE8F57E50CACD017F7ECC035B1A51D571A6
60475B11A858EFF0C64A3A9F75B1D7152261679E799BEA3C175723574A94708A
F27E594CEB03DB9EDE739A6D69C4430FEC0575E70CEA9037FF0BF14B7F0686EF
CBEB905112A10AEE7B871337699B7213EEF5DD91EFD48AADCEA9CE158F0A8CDC
E3D90F74166959037CC7E1ED85B8C44EDCFC64B08671A6AF8850C590739EE13E
739F5B4CCFB6098A3BA29A98B26A15F6B88E43E08C4FC0D0F2C6E0C167CDE5B7
30EB0F142C77858E442772D5B0A6E2451995A705C15D07F721F2FFCFC77FB64B
7CD662EC201C79B9BBC79EAA32E8D6ED625486A62DF26C8A5455EA83186DDE0D
7463D43315BF73F6B2339B9C7EA3D3161BBDB12D738523EFABC09C16F92B253E
92028B95F4CDEFC6B9A2DACFC43593E1D422A4A63BEAA14E4FBD8D73D2CE8CF7
78A02D581D9EA0D6CE397A3C470D6C1336E83E1C0C192203705C911F85F93445
E006724E8BC8372594E21612651E92A5970A217A270157717D302881FD9D3FE5
BFDDE1C815DFCD84E4B27493DE05F4B68558EECB306C2B3ACD4F9CB319B291B3
37174B6B12252B741706B11B01FCDE13CD2AE195155DA92CBD9010C8075A9F77
F563211C0D7776248CAC6A4E52E3E87570606676CB44AE4F84C5C1238C00790E
5FBF410C8EC1423CC2B8604ED8D94499370C9F211E0C4D64D4D8FFAB8BC5D61A
671F062C5E00DE471FA4B4D66F06AB55D980DA47EDF2CA2E96085BCD16DB1BAF
2EAE42A0EE4E1633A42B0513EA1F6D537198B0DC8302C9590466C88F0CCC4846
1412D3013B5F38C7672CF188F13B8C4BFDC0E43CB708D2E48E28F1F98272DACC
0EA1354396BEF333CDEAFB0E0F4416C572050064FE9E42B63E25D987B0A56AA7
BC726E72B1B724560D52A10AAAB4FAA2CEBE05BAAFAF96B6D71090F838D32263
F321F0FEF9DCEE5A72028A6CBD108E3D909C6B374FF72C7831BEAFC8609FF050
206E05497FA3A5E24F29FE40F05BE155231D83E9A7770362527DD14E88DF85AA
673D66B04DEC0BFF4B2B220BC33C24A086EDF1185D6B06786CF914D79F8AC235
0930F5085D2A9B581A6054D347E53A467864AF75F94BAE330F71766CEEA5BB96
9B1F489A5704F2E33F5E8F5A8B4BAB811AF6DE374C4B3B47DCA3ED2B5B785714
009AFB44EFA1AECB12ED48851A3E4846D9E2D476D9EDD5DC8152D8C53EA2EA85
19AF3BBB77832DF238D79E49BC98341A425272425B0F59361263FF8AFC42B7B8
37BD4B5F383427A184B5DCE8A3DA3D35239FD52E76124AB48637741A4E6BA224
50EDD0437F1430E11B2A41D7769209A1E2F471FDDEB4274FF172A63E60C7FFE2
9DFE543CBFD0BD06EBBD82690302ED371EC9B32C5260325E38657D94519BE13E
BDB0151CA832D1199881ED13402C1F10EEB0CAD9DB5D62F8B0FDD1DD405C71B4
FE834564757AB21419A57557D63AF7929B597BE4E248A8DF2CF110946AB22304
8BD8249B2CBC6CFC98C00131C4F573D4D740DA906BF47DFC7BA9BDAF656AE370
5052BB667D585CB91AB97373E953627F867E595A102E7F004DFFEAC1D3B44FB9
F4782AFE3695AB32F992EA376502878182B8FA377BE3EB73AFCFD41B848957DB
93C235820D52D2520CBDDFDF8EAF710ACCA530B3604F52A314EE40CF922F4AD5
B14D15632038F0677D695B6C5A00A30C85215DFCA8009A3618EF857A084BE438
AFD58FF92A99F0A9F2B477BEC4DFEA9825B2360C82A05CCD5C723E7B172DD5FB
DBDA54A8B9CF6BF9CFCFCF680296BB221373B8A57DC762CBC534C1A7C37B7BF6
507BB97867859FF730833ADB17CE601F6E8706C8540403A80C4F719D9FBAC0F4
773CD1C63D304779436CCDE9BC5E9096FA66596E1CB729845446FEA282D372A0
748600C7DBFD6FC6CFED890ECECFFE5B762683755D3209613DE8A605A1720B2B
68BC254BD5C246E539A8DDE8128DFE82C149C0CBF85699177F4E545324E7DB10
16446149BEA66362E33FA0A4D2AFE255F54265F47607D2533102199C4B1D2DE5
D3090C72646A715802CB34BE0CBB8E06748C188CA59BA966E08176D2122F78F5
A948E9319173380261ABF5F8C013B4F1BA87FAC5B30A2DC2AC9AADE41D536BA6
B131153A49365425943B777598DD9E43EBC28FF5F60755C0B3B5F377CD2E85C2
AB33E97EAD4C8F12DBADAEFE7FF4ACB7DC1E14B63F9AFA33B59345434808AC94
21CFE510F0404BEDFC9972906A04C2BE13C7D51A0D868C7413AEF73F52223186
F194910473FA5DB14002EF4CB0346812F4BE3807930F54B6919A87E1A3991C95
F89B12094B7E1381163D92145368BBC0BD2B5FABE6D430DF8EF9225C32F4AA81
34B208C43C0F2E29B172DFBD1A8753CE64FDEC2E33EDC29959FD9FC0C5660FFE
849830BDF64AD10F7112CC6C96F66D5D28B117AE3FB15D7D19D9C51C3551E956
987FC766D296AE5338C8A65C566E2573A50E8DBE5A2A21D1AC80290825E56303
062A929A702E90038E8541EAA0BDD404847D646A061C4577054DFB021E5DB263
263705323C9FAFB3CE99AE37C11C32F05BBE392D9DC7963E476A7780581F977C
600AD843E7A0894F6D0BDC6C4F73EE99F9EDEF10482EBB4C311F380A7C9EFFA0
8E9B570AE637DED0E506C6DB607541042B6FC8EA3AF2D2E9AB428F395419F43C
AC98F8BD59E70949938FEFD06B660FC85B10897228B2BBCE8AFBA26A33215C05
3348C3F73F0F08BC0D6CFECC3643EA7BEF8C8A59DFAA0E9B109CBC3F3F228E05
591E6DAECADFB6D939
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
52978AAF95DD252EB0D606F78C7E295BB640D1153A3A0AB2A191B9458436471E
A80334C07C23E3D43BC2A56EE61DFD9FFDF3329FCD4DE9A7CF92ABB65FBCAAFC
7EA124656746FA3B8D5E8C9B51642207EDC0600CA659E44717F2BE08C400AD76
EA2E4F62AB149858C2DA5051009ECCE091A6E497D4729FC9924FEC3FB6A9133D
6B463F7C7EBE4EF91B9B17160941AC0087818BC60EB64E687E9349331FDB33F0
7E1D24C34E9E439FB6C392AFD85238CFEA21292B8E1D0991D029790B7831A2EE
2FA82A3B52599EB0636EF92E5D7C13FB08C67361F04482BB6BFD44CEF14F39F1
21263707E73B9BCFEC74AE58A63D5C3D4D773182258E76E62A5EC2865FB5951E
70F9FDECC6604E7D7A3A56648C90B4F400CD61B0B1ABB6B2EB9F977F0DC1A090
109733A75F2CCFBDD27403DE02C363DE41F7C24249DA6FF6A943A97302E113B2
7C840C2A6EFF6442DD52B43E21BD247CB559F781ED48E700C7C6818380E335F5
C15409940D60BDEE0EFA73595159BF5FA6EF014B844C996C73F53F63A48C7F4E
CEE23E1680B0037EAE119E8C5E67E32C964A18B5D20E9DA6FA4E53156DD528AF
830015D7D80E0A7974FC52EE48924BA4AD2AEBA3156D5F5916537207EB369B2A
6B80A8A4B044164ECE1C1FD5A30B240DE3246DFCBBD6E7EF71B3F46D35AF2EC6
76BF005985FEEB5D4A9ADD84C49132594E273D0A94C8C2DE65B5AA436EFD8768
EC53F2288DC8C1B20D1AD0FD1CBCEE7CB7349F8A7414179A76BEB45D64F98101
3705AB6F7A67D8551E4BC879A6461046CD604D79E621DD382967329A7EF603C5
0A96E000463F8247D7CF06FE08AEB09A6A8F4B0CB143A6C10B1412E1AD8276E4
A5A5219AECB4DD34412429A21E2A5209AEC889B4F6866F253445C88F41CF25DA
60A179B44F4CEB366A028D673EDC34DC2C6159ED9E284CCD6B34405C76ED44A0
341DAF52E65C1FB38B5301B2116C44955C2915D4B7B798E25A751E3F95B9158E
480257B3D8DE09668BC0E0C89032CF57B92D032B79403597185A78357377ED04
7D4387CC8327609532DEDF15400F35F789FFA040283ABD9B08630AD51B3E4D3D
38BCFD0A94E815B399C2439DB0ADF6152327F76EBD2DBA3976D9E1728F408B8E
C29EBAB733108E0A5CADD280D58F1AF1544E5A4D7642235392766C1F7AC9E31F
EC9717679ABA8C356C365DC35EF11EF0CDF28573B596FE57C97EB0DAF50B8A5C
F69B108D8678E9172B031D8B7F9C0DCE3619013BA44CFAAC55DEE70CC5523654
42CFEA7B93B63A76967445BAA85754EDDFACD00A2049924C2796F80122B3ADCC
0E79E4EEED18A99CE066A9080D458DCE7E8A42EDF647251781DFF83E7AF220D2
9611A8915063460CF17342B3EC70B0FEDD062F3BA8699448540C4BABEF2C617F
59015594C697B288FEF77EC8BF4B0258CA9A813FDB8225F281D32B52893DA64A
7E11F8E45D5A2095DD7245E5D0CD32FD2264C613B6238347EB74948A27E54329
B65E14F5616F4CD4F521AC543753969AC587F31B62E3BE1F4F43D9F2F7A380CE
FD9F6FDD519F13FD8B3F70D234883D924A5F84149C85FDA1FC2B749BBF6077BC
C8830DEC2D51089F1DEDD57F8B4881FEE3DAD531A917D716CDF0828C25C7DD41
2D8AF3AB7A8D39A7DA6D10A4ED2328BA1B1FC19F34427AC97A386E37C87011B3
D4AB92C1D146D29D2DAE41A66B44E501641176680ACB0918A3D4EF908D5C3572
A8423403AAA6191318AE40ABA430D2FE2A391271406E252590A468C04EDDD4E7
500ACFD983624D1007F6A30034602AB14B296CB735C41200072E0A9B70F4F097
D1A20E9BCDC43A04F65920D133F1E0AA7F6E7ACED726EBDC0778FBA4AF83213C
D6C576EAE7F028BA349B799666A88307D67968C5A4EFFB389A2A93EC4BE592AC
4E6BF30D2CD748F611BAEDB195038D1976C2B2E1C9A5B9886F253B17F68988D2
68D152E97C2433AB1642AF316C70F2FF7D5C7E8DD9DB7393BC7ECE28A4AB6851
80C6515CBCE164F18B623D4EADBCADBECAF085D96D3E3E53237ED455093C4B5B
EA3876CFD75161A704F9605773A16D59B102F4291DCB9927456083A6FB01AD82
DB9A9C687D1BEFFBE6069842FB68ADFB7558DD92AE49D361691CA8294C452A3E
6A5C46115B7083025DF04842FFACE6FEDCFBE292902D979BF4D84695BD0DED88
8AE49D1134454DDC880DEFE6853F86ABAF27782BDDB7AEEAB5E745E5CACB7FCB
36CF08F4159D067F9895AF0BF7CCD4D9AB62FE26D2A5AFF529818D8B6953E9A2
5E02AA121B19877F54B6215B41EA0F9535D834E9C8A35655F3F63E76BE9897BF
BA00BE512F431288AB7284B078CC532181AC9591A93220D2ADC1925FB96349F8
D94A2C3F4FA17368EBA5F5A4C0D062FF17A34710080E2DE58623B2BD2A3A2379
9130B7A4B741D98D6F026F664F2CAD57026E9CAF83DE13315C7BABA40D04EEAC
691DE585B6B38CEDDE1CE020A0FDDCC049BF7F3E93E768E0A135835B3FA6DB46
1249DD27D568A47072D269664C9E5D00F8D4D1873495FAA5C7FF6F9AD39C9FC5
492F8AE3DEC8A2AE13FBDCC28110D942825870BA74D75C8A72CEACAB07941924
003352DEBC9DFD9CC72C7D619F92612E0FDDA6ED168DF3B656410AFC0B12DCD8
3FC982EF865BE434333D97C0E5F91568583B7DBDDBB71C085D2EB95A37E6CA54
78991E3FD33F498CDDDB704CDAD37E0FEA6C0E7F38B995A2FF1E6140E4694A1E
08CA0E60D053C9B39B90DA73C2C28CD91A368B0530DA35E37FA1AD7AD1C68EF6
9A0E7A301F0C2917EBFD3D26422AE41F0BEA1FDAC19F7DCD5CB57AD9A0289001
CF4634179923501ADF3EC096903F9554C664B7E152E01602AB9515E57AE9F200
D985F632B55E4A0E3AB08D3FAC17D94230C074FC0505D854A97915AF573EB430
EB1C2B1CCC95BB47B6171AE9C86737AB82D189B02AA469C3384607C580F16F15
B8493B5F757C94808989A8E045D37C587DEB811F57260E4ED34528238FB664C8
408D38C8E6A15DF7E29864DDD8E8EB108CA188FC52AF9EB2A583489E224415AE
3DFC1D7F5B9FABFB3165C98E4FC3A6969DC18594368A2D56BD802A94326F1813
FEBEE653648B32E48D57014CCA09D28C155A21A4D5FF6A4910A318409596D179
901650F5941749961E18990A3C531C6320E6C4ECD0AD3FBB58A8EA00006DA311
57ABA1D95482ADFB51E5ED7983B2D7167124807B68BB21A71950387D6829BED5
0C4FFD3E9A4D3D043B542DB39B1D863AA6DBBDFFBF12B3200FFFF4035C26BCB2
EF1553500D4336333A8D5B251EF32A32A876B9275789BA3B756CF825A4A5795D
B3D6A419D8192B7963829017D43821BCA3E9D4B61B6A2C9887A5E28267C80C7A
C68F4647C9847F231C5A0BEEC5A1AD1E2CD9ED269E804D87BED5EFF18EBFA7EA
057D586AC7EBF6977DFA36E043839B743E8850A697558AC6061813A413A9FFE1
D0E1B629E2D075CC85E7CAB9173DD926DE12D88C355D6F028579C7C682BF1512
8993234D2B6AE5D6AAE822A453A1060488E8C971CB07C66E297DE8158DC15CE5
54976ABCC9D94E0C10896BEDBF1726CB5F05EC5FB2E6FF2AB14D5EADB2EF24EA
02CFA52143A3166E8846639790101FCBFDF31D90D499E3AC172D12AE96F198E0
CCE0AB7E5E104BF95D06AA6695C93B141878563E4D53BAA0FE28119768A161F8
C244EAFBCB63B91DFF757B975AB33F862E70D7E93430DD308A23BAEB27F8F753
CD267E30E723D17040EAD11A4BCAB97DA3AD03C72D816AEADC244A76684DE444
9A91166245A8E6ED51B06A175FA8BFA2C1B801780828FC2A6D8B6286A4706C48
AC8097461DF6E344FB6FC8FFEBAF16DE4A46DD4059D7E3973B7F0B7478DD4748
643888AC42C7DC3A6ABEF4C28472B839065284ABED85A3BC3BA69BFF2A2279FD
38424FA41BBCE3E180E05D07ACEA1E0F813FEA2C9A17B198FAF4591AC49A918C
EA4AD8DA1B8A20B6EF8F990380ABAE1CB6A67A8DA606F7BF9654CE99FF894025
42E543BF8C6CD4A24AA61A47B1A58A5C888FC99EC293EC88FE227624914B2D12
9169D12444EDD77912D9BAFA8F453BB48A71CA720DA5752960005A6D79880EBC
4D17BBDC178AFF827C9E1E3501B8CDFF567D31CB24F3D43E18F802B514EAD5C8
185DB0C9297C55A73024B3462FCE34CEDBB49314E16192248F75F1069890939C
4BA8AC40C1E27FDFA3919067E40A8FB4A5C0A922112381C573C14131352911A8
E502E03E44B900A51D2D90ABB66D7154D88D27831269D43F0CF2954FF8C156F9
7BF607D65A5E9F6B5245C352168584B238D132A8CFEB282301A4D18401DE1CFF
61635E77C969E8157A8D23C21F63B456273B4422C591BC4A6679DA95EE2C37CD
1D6C5554768BCDA1771DC1749BDAEE6E19FCAF5B2A59F3688314368A21E37A31
D87030FF26DE63C0A9F9A1E08F5F688B318C4210875C62AC704A10EAFD3ED1A3
5B28386A900C1CFD1FCD4D7902611EF8D17520EE266E21EEBA7F6F5C9216D1F1
EBF431C443840C99138A50E5C0C71B9654C0CD0D53D915475B843463FA6FAE3C
7562451573502E9A92D7623C9E96D31847B221DC3860572DD50F50548792E343
CC57607F420B99120BB47C8A65F002E1148BFDD781C61E38A796B63990C31F1E
B7E810D7C7DD6EE55C9EC64AD1CA5C0B9469F723C845710FE2D708B724364670
A916E86C7426FB8DCA85CEEA1EBBCD7164DA7B602475EF2D509F7AD6B6E558F1
DB46994341A37EC6A89D307A5020DEDF1292F617921C5F3881436FF74B5ECC80
3231224087B40585F1CE6675C83AF12492C9510AE06704D6CEE6CE7F6AD03596
11F6D5EE1BAA6AD1309FFACBE40AF2EE31FB1205F87671678C8F5BF730012B5E
A941F3AECCEB7EB1C144EBDF1EFABE4CB91C005D62A830F732339935244C8D0C
05A9672D280CF0A22D0105BAC9C7F3EAAB68390B3A9908AA71E4AD41B5A47FF5
507A3F0DEA8B7F4FB29E1F8964039E0170FD2DB47F7F773BF93CE143AB31A8E2
BB5C885DAD9F0C407E298AB96427794FB1D23F15A776E257924C83F19AC603F4
5114AB201F66EE2997CBD2D2F885F480C00F2C9F9D201A69D83BC517C2BED52E
7A45C7DDC0DF2E6C47FCBDA5A093F493F52946522A5801B23B030279B43E1DB3
13128359FB834E13CBA49C02D2151128DBB60B53313B6255925F7CA2569D3D3D
C4E421D8CCE9A48B197B195EC6E4FAD1C1778BA9EA1C37452C64C158CD8B2120
3363B2AFBACE43314F53B604CE2C47BC755151715EC491033B381111DCFCC739
1881B37859B66390BD938949438A3D0722F8F3F72460B4552CF7B1C3BEC3F7B2
77F2391B2C0D8A3386EB1AEE41BBE40E71FAE08549559AE4BED310DD87E3187E
EC469A99F9E7E2D1FB9A9903452B13FF17D31778566B5F984FEACB41D40C3B58
D8A7F66F4555D99F2E2F9BA57397A000CC652FC3F2D13B57C8AC043A1A15ABD2
050A46BCC24585667825E5DDCBFC7F94C8534E7559EC668B243CD48E98D78E01
B81DD179F660C4DD190527468A19E15C034A7290750EBCBB8A464394EA84D388
0919E999FB71D29A74A310284CBF2E1158F051FF044EAAD1C795BD95D136728F
DC2DBF9BFFA80902C38259BE13E71C7D81A69837ED9436D3D3FB7699F4A3EF5B
FDBDE28AABAC9DFCACA9412AE6C02DD94BF7BBEABB900A121CF886D8AC8881CE
E42C1981EB8E1A184296C711493B1139E3F29A74CCC53DEE5AF9E6B7B06CF986
D59C627979906E7215775E279BC3B0D28DCB873825FA2B2AE666C27F082A4712
46E8884A783693F964EE958BB8AC05E8950AE2BB2230E7A4A75692FF36D54CED
AA7476AF0CEA8A936FAE2CEC255B464BF26C55981C3EE27952FD2A0D1E613F3F
A299289B21160A2237C6D9D179FBFCE731CDDAD3350BE438066E6D9FE18111DA
004B76574A5049D913E36FD16208E4BAF4F907B91CB207127BE1AA33599B04F7
641BC264B07D197A808487A992CA2D8945B3B83949B1CC8EA52439D438B12B41
D8C717B8A44255FE8ADDB131FA269DB08D8E2CA6706E55880DF024099EE92544
EA213B4B614B36A2F936FCEB51C3C63436EF93CAFB29458E4A320B48F63A6843
0E38009182BA1AC17D7F7254FF910931BD7F55ED160922AAF2C11B00DF5B0D0F
B1E12E5DEABF5B9CDBB5E0039FE7704BBF2D2CDF44BE37AD64AB1ACE526E507E
B057065D7774FD3632E67033FAD2957AE9450D5935040FAC37142D7FF5D962F6
784120B4310A9D1D51B0799A7646D488B020DB0FBFDF82F7CC1F690B6503BC8F
791EBA56C38067C9C0ED749AA3C89898193343CB8C1547939EC05890EA64DE55
FCCA2FD33A7ADCA67EA6C5EC3072EA3FEF39B8BA4FC9F549721A91E9C8BBB6BE
999AC30A0CE1F30EF23C533DB6184290044566B179C91DDAE6B079820BDC7C03
402C5AA28CCF3329C67B7C76F9B896769CD6DF319C690299D87B109B0B15C33C
AB44DBC6BD6B8F8DD116129C290734DCEBA4A9A2F273EBD6C353D691D77BA96B
0DFEAAA64F0CE972003AC25FD8383FED9887D5D6ED9EB9B4E06E198355E8F20A
28A06AF83059A3665927D6DB1C52A71266F35A1D775D9AA9B45DD69A8F2E27AF
490AF11A161500E15ADA370FE36D559E4FAD3E0F747CFAE96245128EE8ED27C7
D56D066F4EEC9CB7B3588774E935385104C7C0730BDD4A2A0A56807478709211
056FEAFA9ED0B02168B31DB34BA5E4BE1BC986D95884306C377780B0FDBE167C
F47D6C1BB06E0D05983F64B5CAB3D7D89FA26498A561F1E0847C94A005C2A2D5
868B60921675AEF8F24E21F842FD0F3FC201A14C24DBE03BB7E25B8BF03C3F88
2DF23070B9F9480F3D1A623982249B72EC6B433AC37C9A52426D710EB4820128
7BA8D4D74D8FE6C0C5D000D37BC69319C408E5147D20CB504EE9C2F39AA1B893
617833CCD671338E0B48B6CD80C062934DD82DBD2E16E51AE05FD7FD719209CD
9438A73C41D92F3693F1D2EA5B3E90F49CCE038ABEE8D91344CEE59EDADDFB64
B9D9450C33CBFCBA0293A742C9E773790AF0B6550CD18A2C12095233DA62F7E7
B03662E043AC1544BE674E4BCA925D230464D09D4671AA3376CC291E45230A08
11081DAA43739F5F278A146D9401C3457BF26AAA2482EFBD804FE8FADB457489
5BC47DCAA01C4F097C7FE33A7ED13CEA6C8003858307703A6F799EFEE232D419
205CFF8BAE37C11C32485155F92D59EFB045FE299481B46CFAFA9FD538E3DAA6
2B3FF0C1B61C8FB7FD939435963C5AFDE49FAE134145C9BFEB3C108AD5B484A1
D9C88C23F850FF698A1E383942D0F4BF68483C3D25723F38E10193B8C2DA705B
B5069F2B7222B339700ADBBDC3120AA518C223E09144C1EF28C7D7C7E4F64CA4
3F84CCCFD11F23AC377194EB6A528D3BCA4D5CFC478AA031662157FD60456618
134FD1544027B8FC8157AF9DCF94E0A40106318B7615AB2869CD2C2B0F0B30E8
D19B8552B1662774B9A1A88662B4FFFB23F2FD830262FBD400C843A71061D214
8F2882141250729CCBD175F000EF5EBD83825D649F9544B1A2F756D828EE0553
402D137ACC74EA13F68ED3EAB2BABCF692BECC8E5F6BAFC3D01AA673FCFAB02A
51B946954166B73A057FB5FB51DA856908120A07E83764A5689E33E445E12F2E
0E1DE07894CD0792116AE5F9E08073253566B030D919C7F7B1BFE2E98D8717D0
2A15FF3773ED320D61385C6BDD670F2F28990918D93456C5DAB6CBF79EC2687E
277D163F19945DB897A380E37993DA43092467DED049E80D332113F62237E9FB
24CA26BA111333C0ACFDE3218835C4F50F6DB5CBC2BDDF6643B862DE9557DBBA
8D1243BF04609E83CF2D57D62B21CDD3D3F40DDDB69BCD78F3DE751DAC5D75F0
A711B2F23263092181438D53D676F5D5ACFC0E4613B207069719ECCC2067B9CD
255583782E158DF7711F4936EC889DFC82FAFCE84FE25767C311C5B82FF3327B
E5831EFC1143FDB6D069247ABE63302EEDB5004E25E7A989A774DF4E5E4E6ABA
76C4F7561A42947B65F66A0E354B454233D3E8863B2161664FB7DC610AD67F59
7EFF11145DC25AFCF25D154707E021355272C754EB959AF1F3B2DB5A04F0B34C
852508F8CBFD7A0D36AFA14969834FEE29D759678998E81CCC28E7174BDF0F15
57D938FC4AEAD840BE173AB90B28FA0A973DA39FF1029FA5E9FE7B98BC05B373
05EB9E7D262BCCAF55DFAF76F4D52B0B6109678B01613A47A368D8B5B5765C2E
A0707CEABD8E7F8779DF344F4C5676F87833CC583143521475AA789BAB863328
18EA10C6F3EA58B33FE075521A8C020C772B8E6DD1AF8978FA9743947F469105
39801393C553D7373122DB975F9FDA955437BB3BFB62CFED083FCE878F7B6E9D
68B2C092B1175F13AE2BF981212D178AAA712DA3859E0973F09C62255E45C1C3
1AA7931A7BD5BCCE067E3CB6DB8D644A9C502008763BC188DC365E34A0A1D9B6
8E705B53544C154D2663429DE29AAFFD323FA0226036E3F3B7096A7DFF19C9D0
0B730AA1CEFC59E26C834BC748BB5C4B1AA24D524013AE87ABD38C8709E12B30
6B86A2AFBBAED5861FFC1B84BF9D62BD5E295210694115A9A2135B6398A1D4AE
5D9CA406D7B574C8411549BBD98CCCE0FB864B7F781EBBD8FBB1BB36A193F1D6
36DDC4B3A9E82E4DA9E19D7239B4943E3FD64FB66A93088BFDD237EBB26340D6
ABB1DB4235BD71F4132BE91F288672D323718C7294A15D833674BCF29AE4055A
B8125E3A48E5D8D71035D0D8DB8B8B4FF8CAB72D6EF0F8BF943C6A1CD80148FD
257FF3E301EB1CE826480027E8CCC3FBA7730F378C0D2784FAA9A2DDD2BEF7FB
52DA5C2360B0BDE06438CE7C9CED4243271E5FEEB94537A61698DAD2C3ADE7D9
47832E25CE49A8BFB2B0507D6D62AE1E787592168489076969F99A85C5A2EE9F
0171A00653F01704F89609808E57CB966B7909223692950495C33EE38356E645
FF01BC59792785A41343E53FDABD0B1A1A036DA5DB8BE3410F0708B45093C35B
52EA68C833BEB10F20697C67C54DC08C8467400C0D3C775CB6DA9FA3FFBB7A97
836EE2A0E390E4073535A5C93CDA64C769B2B0240548802256FCD88D7BF88EC3
B4CFD9E1AC3BDDF3C9ED8E320805352DE7C2B1F18C008709A59E4ABBC97D082A
B1027A78DD2520FD061A636AF2EBF80DD907B4F1DD4E042B6733F42E8EFABEC6
DF2BA21CF4A6B75A512AF2664386596B8CF0CBB29DB5EE98ED9D0C3779A1D300
C4BFE16ACA58A3DFC646B0F463C0B2FC41C6A7A378A0C4B78CE1E66B6C828366
16A14E7BBABC030BB85AA516AB6C263AE450F84DB5B3BC8322A9EB89963977F5
02CBE5E8DCAF5F8B4B212F3D633FBD4B46BD3F1E90B8C3F56A8738208FC98B80
B7E29E12240B7F21935554667299946056DD2B28978D9B0BC7B7A7FB2EED4A26
0E5D3A39F4FD3443F217C5A82577AB923333891A4CC17C7E8E4B5D609CB0F6C0
972CE96B85A3512E2F64365F3A56576082C2362E4CCF0CEF5235E1EADD2A2E9F
24C4344953D34AC69C2DBB8B9202B5425269089D047965325812CECABF4989E9
6268611C1C54ACC8377F7BA68A4CB2C6D2ACD6CCB8BA6D03BF5EC2A88AF23481
F6CAD8A102101A4B967B698E998D5F8A8973988CDE0B23DFF34F95271C43C6F7
736A64A81CB3000CF3F9CE744D34743FBAE1D232B507801C36A30E86DE14DE88
5B0614DD57F54FF239B0F5F4227C300A6768BA428DC9ED54AED89149E0D55FE7
26A8B55D14597F9C3AC348D38F18F77A31D382E2E7F54472F945BFC2B0085C81
8FEF7064B5113F94ECE3F18F93C7C741D10DCDBD5D42A3930B5D39A46FB7746F
1F788B1CBE8F2162023FA4BBD8B24AE7EDDFEF071A2C8EE3C63E6147BDA67F6B
45077F2A0862A77B3F669B7597C37D8935050716928756FC9BE35DC320213A95
359B7773B134A46A2C69557053F664120254E8AAB5634C4CD419C22A0507DC46
D862F6CE1372B814814838B1D6F2CEA93992315E83747F36CDC7E79B0EF8CE61
20D78A27E926497F6B79F694C12AE05727A9F0A36405F467B01EF82760935178
E836E080E3962598783BA821C35734F0150BE28F17D57CEDE66308C5CC7D9283
FC265471C696D5FC3538EB09573D6950FA27C262D165E9982A825514CCC6C518
12A1DFA94AB36A1B7C228958EE6EDF66239A16E5786773EA72EDB7884D8DE9C3
49DD92975DC5CE3F75D7BD55A2512D896FE4E7CC7C7BA7C3E84419F39DE1EE46
F33362634FA5589E70132E7EA1B9A10F2F50347AE557AF30B96D12F40BCE503D
07F3EDA3FBC4EB639C7DA8246E4B9DB1C5DA71AFBF455E6888534EED218FDDF9
DDD758AB6F1ABECE0563ED84D4EA0E7C610D9EC884403DB848EB8A620464A7B4
7B7C6EDBFE9AA183EFEA76CBA0B2C2F1BCA49C711F6B3C4B9FB34197C33FE3E4
59A7CB669B8E874C23A45CCC631EFB62098DE684E5FC47B8C070763EE8A685C6
2D2D3552B881E8206749F67164F034B64125533D935229A84AB1CCC2A272EA21
D11020429F392610918E369E65C0FD1462D3BEDCB6047686867CA1C7DE45FC73
05E4E6AB1BF2D3079F4881F50EC1521FC5B82FC671AF4B2C82007721A00872A7
0EAB2B56BBB89176FA4A01325BA4421AC5D98A1AD441DBACE2826B07EFACCFCB
CF71FD665175F6CB0EEDE745EDCCBA5E19F86155098291A11877EAE85AF88A25
46F2AC21BE2E6200AB8705257A86D775840E61D84595473AB3346CFFACB9E057
4E1DA345812E7799FF4B6BD83E57D917DA574AF247B8084C32A8153151B04522
D22AB3AF48CA16F5AA34142ABE899057B74D90C68620063167BBB9C8892CD04D
ABAC6A8F123C1B7F323F1F2013A84E326E34C64F95217A0845454073C749CD57
37A347EFCC22DA5BEF66E60C18416C4721DACBB30DFAAA6295F1C1DC0A75166F
A5549E0C932C57883176320B3EDD8FCDF7AC6F322449D340E78063C7B805C438
9FAE433B5CA204B530DF164BE25DA8CECFE188F94F54DAA920FB7444AF4A5C4C
B2B3CDA6C1C41430A6A383EBC8DCF193CA3D720C032E81DE33261437F4A4B213
07CF8D93ADAEF2D5568EB7FEEF25EED8435F11F337847861AF5AEAD55EB4042D
30D1498059F26419E4F13A6170FF94CADB5AC84694CC013BA5B90E9252ACF890
5084C826A9047A3C7B3C81934124D577D774A225C46ABF1BE8353EF2A86FE3F9
CA70A816607F248C6EDB020BC07FEFE435EF76311B35B56F0D9246D16F1BC4DC
CB6B3084A95F059D8D404E79D26D08019521D6D2D9BA1B570C60E99BD2F36B6B
36BD1E521D1886AC6CCF2714606323C87FC15E0DDB42F78AFDC691403FE62E04
0FC34E76D00201E58B63E94706322FD8811954AF92E3AC37602B6160C3AADC0D
DF31D7089AC00469A6EF9F3A839396F3405079A9ED04CDC43A4C2CAA86340C9F
9ACF9B27CE56376867A7DBC5FDCAF446AF6972C71EBE2C8F79879CFED83241C3
CA877051B4EA701298CC9FDA791A5582E4B187B14DE2581EBA7C868BECF9CA51
0B47596223F2FF5B53DABB88A44B5CA1B97C5141D2E05B9AF8A110A06C620D92
F64CDCADCBFDC1877C93A023120F31CDE201A1B6B3F050CA4B449091E61085BD
278B3846031BB14D7743D974388E37902FFE33FA72EF32D0D3B6E3304EA58012
0BF0035005D9546A21E8ECB91EB9BCCA5445D5B4F437140F9DA77BDA7F8C50E1
CEF37C7948898324FE1AB2C39B564606B5A175A9E21307C8A5DD92529B89D47E
93F92CE72CC03EC590C73BB5F44FFCB9BE84E499B3368E7AB51A282D748B4FC8
70FF3BB9B97340CE459B572BEDA6CCF6E38D51DE502B4AE4F792691F7762DAB1
599F649E905E0D03FA08B26C706B742B478A5EEB8BB1A69116755B434C41C029
E9A4E734ECF18AE181B6A237473D1979C3B5A96530F1465011E4605255B1E1E9
6311DF9993D2AD7DD73CF5EEA567D230A799EADB503259898B56A465055F00A4
A4F6BE0A3EA0CE47A94806163F27C153003CD5759EAEAC2FD95EC950F22BD54B
D6582E0925DDF0A2E208DE895334AA04658795B1B3C0C5C90B573C61B5A8C717
23B3941EE8AE3DF2C37A71090207070BAC36DA7E2AD747927D9B861D077FD352
9C109CCE1856B035C835C8A5F75B918A71E31C2D918F052AA2F05E52C3B31BEA
B990F6E5B3708A5F3190AD0D6A291F1BCB58B87ECB4571F9823984EF50AAEFF4
31B27AF17FA3E038AE4E9FB5398CB309750580FB4C3C7AD9AF2A464AB253ACC9
1ADA48E5DB22FCCC1BA04934986B55B9AE2F0ED0A2885F75F527791CEA9C31A2
0C7C6BB23FDB528498F9D874803D7A4331F7B5BA0FB06F709962B9C5E112D5AD
5C6EC9255A3383715C5E154AA43DE1FBACB4D638E7602669FE1684A548C54E65
AC90A2BC8C447E59D45516B6C5BCC11482FB0EBCDB12736FEC51363A4E233062
3D41A3FD77590F18BA03EB40ED7ED02D26CD08DE168BBAF354EE737DFAA4DE82
5B0032D3D6BCC6A5F5AABE46E22D32BE7A8AF178629CA7E0FDE7A14F5A4381F6
3E8C0BFAAC72377662D6FC8D6B32121EC190D91AEE632AEFCD0FC5721AE0601F
8D0540EA50FDD5A3C3B6DA314DF6F3BB01F107753E451BA09EA7D3A671B174B2
C812AC4E0D2ACD98BA8F271C7114B75EA14727E6B153D0511E6F2A5A538BA1AE
50CBCE381475F31D61BBA5ACCDFD32258727604683C065528AF33AD7B447F31F
CFF8EC870655D8ABB193F97770049FFDBE096FB8DDAA333B4811FCB581AEDC74
5D8734D4B05300AA68140A49DE9C7AC1D3E5D9A42D3318BAC25A0AE9EA7CF2C9
AC5CE7F1259EA4E3A0DABDF9A0E2AB5A6E9524535289F8D17DDAEB88D6B31E45
6EC7F314A8E1FC390BCA420F7E7EACD7E0DBC26B86DAA43985BCF7BD8470722C
61559CA1D871199B97829FCF89294FDD57AEC794AF19AB80D8155C171675DC21
481F5D234BE9051429D113EC0871F636E63846470494FF71373D30AFCC1E4D71
4D1F8722B6AB06A638015F9B8076B82A7A6AE4115A08A95A83A254350D1C6469
57FBF636A88C22C7F0764288C3255A7C199073455F9F6FF8C592D1901DDE9B53
DBA44974E71ED7DF4777C26E02D1D25BF37CA3FD74B1868B49F0A7DE2AE0F7AF
1AFAD2A4C86FF91719A2C31E1B1C3BE7AC31F513B46C2A6EDBCBD3EFCE3DC6F8
8F09A54B915ED5DF7F30D878FE294F0438C035AE46B8DD22C65343255425F592
6A15237DED62577C94AB720C9DD5F23265EE4D3A8B209C30261ABBCE0C72BB5E
08854AF284D6298F8E605F2801F54368C6F231A96B787231A748080EFDD87814
28CB0A0F641068D22A10D4238A468D8F05EB12CCE6EFEFD585A79C0E2A868A69
1C4E078167BBF9EB73266E87694C66B490AC02FD54DAF821FBE6601CEAD0B60D
01F183B02A0AA55B753C4E37F42ECB41E67EB850371A3E9AF80D380710A2AC82
2FB48DFE07D08AAB50279504724807D46B6A6AE3E18037A9E5C010D33CF0AA88
112B2BB23BE8A49907C1ACB425DFDBFB19809EE2D519BAAC0BF034AD0719735B
5227B99797D7D69F9B1841D4CA12E1CC01E268486E0A8CF23E2FEB74D38CAAD3
B5EC87CE926E9CEFEB42BF3F06BAC60DE1C2871A43AC80E8A3B5D7EE004B4FBD
E321044BF732170B9FC2EB48254A4FCD1EBA52C38A7EA16DDEF3366A607858C0
7A34DE7567C53A880E19CADE9B1645B478A00EF8FC4DE3F90B23DE9DCC46B8FE
BA65AA59F590F6DD53C01899360D44107F3C4428BEDFFF8DDDAC9B3264B465BE
EC9F343107D36937FCDB4077AB1C757B12DD711EC486DEF53FFF81C0CEE20916
E25F6117EFBFD4626191D7C1F55820C4FC41228D71DC6C0653F8E4C6FE79F364
026D554EB18AACD79130A01598A3CB71635015A237955D1A1BC8F300DEB4146A
7F8913AA9DD8C4E49D5C460A27E085A9C813E36D79E68F5CB190275F428DA1A3
39A3F987753AE5A18209D89198C02432B54017580957A939B83466486DCF1C58
C2B733CBF42A1F0DCF35EFA4DEA00E672FFB73CDC062420EF611BD224AFDFF02
45DF35F4B5FDAD1C596E6AD4B47FE5C16DCE5194ADAD67B4405E96388DA1A9F3
F63CE336E3B65136A6C82F4C1F50A2DEBF6FA31B1976555CC9802A20369F1CF8
0DCB77EFAFF54E7B07AE6F516D001DB141B4DD576031847287847305F87D1423
2709307D519FAFCC5BEC41298B8BDE711AA9B6508683DA63ECA1D4C939669C99
4A8195231B74F3F5AACCD2C0BF02990E9322780FB4B81CB0C0408A4BE25718E3
32DDA2B005B70F229F2CFA51079A2BB11FEE9B10ACD691CFDDFE36825A4FF569
20DCEE114883DD9800B46F42DC2E622308733763C231AA103762543F1A2F3BE9
E0772F9332708D2BE2C56F11763AFAF5F7F86F86C5F4C9D9F7AA6081394D227E
D861F579B2346E244E8C01932091D561834B82082CD02C84977AA2A2747825E7
50241E899784
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters
%!PS-AdobeFont-1.0: Fourier-Math-Letters 001.004
%%CreationDate: Sat Oct 30 17:27:29 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 162 /Delta put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -247 972 755} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F78AE14C
72A7B8AEA5D41576411085046EB76258673C5CF40021E812997FA677D59CE155
7C55D36F8B6501F00808AEE2A8934EF6E7DF27A6D20490B6AD5EE97365B26935
6D798248ACD56BE774DE447B7979B08E595DB252D6EAC137A081AB9E002A195F
08D19ABEE28C95E9EB56094AACD6A73761A3E376674258165DCB3565F51AAE71
E9E3BEA4BB485DF2A75CD2A4335B926A3CFA77EC6765989F03A680DA1A20D708
470FD9A1DB35B2C937E5FD9AA6266283CD76E05138D55F0932678F1088EF5E7D
EFA66BBBECD836DE750970D76D32957258C0B88132232100F446B1885E4E29EA
B8959844D652017B77C98E7ED6D7FC65E1A01EB35DC733347DA3B63F9ACE67A6
975D81865DC92F610E531602C57AF9FCAB91E2EB7A5A39DD2EF594A1E2E5570B
896D14CC26EB1A42F74F76F2231DD03A6824AA2D1005943DDAF2910597A36559
E4BD2F9380A95F7FE63996A81EBBD94329601C7B1DC913319E879728A46CC916
CCC5A010A86E5C572AB48BC20494C889CCAA475A1782731922CAB36A7EE9AFD9
7CEA3215DD9F8FC10F8D4C3F94311A56C45FFD85FB0A91F315F33490242094D2
1996C1071EAEBA4792B29201666254BF49CB393ED233BC236B6BD7617A918696
D74A776613FB94DBD590A7893CA7FE1606C576DEB3E4D7DF25A7A5FE84A8DFD0
9BF199780DBAA1832D07BFBACCB7B8E9DDA897665613728537094E1E8933F961
EBB5ED1BFA4EE2856B8982377719ECF1D7B187015A90CA694AE0ECB4E32BB9E6
AB395207397C971034AD10D252B419D2C1D8841ED02492B3F2A9D73EFF9C12AE
9F92D8858A5ACAB071F8E0ADBE0794A62FB244F098A3940C82C391F0326B9F50
39B18EBFD2C105167F452AF2841C1AA728F941530ECE5D9C861EC8569D27AEC9
D0C19F35A3BDA17F09D2293012310B114FF0BD4D1B99A685BA61CD6E4D63D45B
C47199D41B4DE8F7C00C0F17D72EF41B22A92D559DF471E29954893E6FFE85B2
98AC23152C26ED5EDD43DAC6F23F9D3D0E28D770CA6093A1AEB5365720153023
8DBF05303D4B957B2DA2159F8EC25CB9E26D04C079FFEFD11379918708B95247
E9E48D274C2C4566841020BB7935F900E86709518E7A133B75F878084B0AA054
D2A472488B698A5701C5C909102CBA7CD5812333B254F9648A0F4C33016DAE9F
BC9D19EC7A14960514496FDE776F1A4C73BAC8A050A858127B9B71DCCAEE03E0
BB66A003687A85186CA83B34625B87D53E08A6417BFDDA19AAF3806BDC0272BD
188187ED61E72D8DEC992FA4596F4201DF5D1B5462A22CA111C970E138EF3F13
A7B70573C4356BBF79D344223C3C5FFCC2BFFEA3E1E78D794FD29324B3239D9C
6B11B2EF293012F8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CE18407902FB88F631
211565C71652273016BF4C18DFF5C743B943338D442F565DFD196AC27327B183
14D5538860737A5DB4843C64ABDC3BD49E68B195128828C51F1913FF91F62FBA
C772DA4DE386DB5A11549F6616E7FCB421EA0C92CA95CCD6881B87CB00A1CE8C
185EDAEBFC8230B40849C226DD0945788D629725B2D8E2FCC3C2AA988A19EDF8
61A810A30D5E955120D6D5EEEFA6D4D54B096463D3532265F8D32A0782EEF9F6
2562390897539CF83A4E2E92CBD9297DBDC351AEE78944DD5A06583A473597E8
AE55B63D13C4817E5180E580359DB4465374FF21BD3F460A3EE2F3C6CD88E585
0C8DD4EB4483294509A4B7E8318F8DEABC67C1C1717D06FAD0E3A3489261A627
E1D5A47B8D8FAEB2D2682FA12B01150F646B6008DCD542C0504D6BAED25383F4
5A1462A8EC1047AB8DF1F0F85944C94CE186B47C8091E7F6473939C5B50C84EB
EE45312D6881B84B5D50ECCF27F5229C1E361D6D711EF99052FB0804CD12066B
257BF1D189E5A841BC1B76C50894F085AEA94441AED5CC1BB19177972D7E215A
694250EA263A157E9A799544BB0E690A1A86F80719F3E414084EDBCA0A23308E
0DC49221C046DBC8AE4C671A9D0B93E9A9F12C03D1366AB81F3057209621D565
96E6D3C834B842EB161D5350648A60367A6A7FA378F4DDAAB544E258C4A6DB10
2054068412622084FAFA0C6786658E44CEC74589F5A7906D7613B45365019221
11B8424B6EEFAACB7AC1136868F497C0E162318079392573BBED146179997EF1
FDBDF032FCEC52BE995F5F52A7E6D8DCA16B183EB03A04D2CA895309CAACE217
4EBF7138952793C03F61A77C21D9373100AF9A2415FAF892807D64F54544B82B
25D5FA8C787E44CC09C50E4D2F5F08BD9F391EA00B2A97ED67378DD742DFBAFB
1854E2317ABB53352DBA807E1A77EF35BF3E7002F6E0E5B3B0B41EDEAB29245E
70F9BF972086F1F3657F566CBBB0DB259072F02F6E3B4C5FC0611BC8C11C6D2C
11583E4A5A59F954753B0C692AB247E0B48B55799F20201881DA24C91C196177
CA28BAF2278DC4C7AFFF3FF590F5EE24403DEF847CB31C4708669AD901E3CFB2
5421A753D0148A1651EF96784ED2205F8C2BC3A5CAA9246C584AC2A078F20FF7
D0A1154385D0A04140B68088C1B87738C554429F72F819445C434D4EF1B0767D
EC1895323E2112F44701EB56E6EB0FBB6D88CCBEC94338684545DD2C1B775E7E
5A77989E7F7E8B46CFC07EE5417F70C6497495A2DBC1CF0A0533D42722ECD14B
D2F86DAF0FBDA9E00A55E3AB07981EAB2EF1FCEA7C25684C3B97F3B2BF4C9FC6
00A89D778F36AA134B1983A5D0B134FAAC6457B5C52A69A4FA68BBDE5809B7A1
A57F9CF79EA7458301432F5D5A7D94756F07C9C5B0B15A71082C76D635E1CC73
C0ADD580C786E911F2CA5C3ADB1255CB254A417A78A9A7F472BC752D340AB380
3E54B84DFA6DA93AFF3FB1D1630AD93B206209A88C5D9668F6CE9B90F5C78933
0F42BEB8396D03F419BB73128447CE505087EF37BDE4CD2AFF544E6B73916B75
3F05864A3F5BF598FF6BE3B8CC0930290311B1A7ECB945BFA51F805E84158051
E5C570F2ACCA99724FC1398AD9CDD5D87DEA46CE64D8A8B7B7DEEE2BB45903C2
C279293BE154F56FF9DC9EDC5D77EEA1082AFD8AE62F19B959FA2E81EE1DD213
30BA776B0D6D5585BE673CB9E41B8AB1123729EDBDD2C8142EAEAFE0DE91BE8A
EEDB5F8D97C63AB09309BBA8B4AF954976D2BE1EF5B8E1ABE5009BE3BB3E23E9
6C732FA45016BF0858C1774D0E2ACD1D4F9DAA6B60432DE3F51B9C44F40EE6C0
DAFBC40853694E334295A936E790A03F21C0BFC763A418DDA93E58230984E616
5F8D550F8ACC4BE5B3D96877712930DF2AAB440950B658FF4FAF06B805A2CE6D
7DD0DBEC85B33AEC147B3D03D363D9D17BC1BD8151701F0DD5CBD084F93F795E
CD58CCD8A7127D7385C74B44F1EE6758664F93A6A39B1945336E09BB0E65DA90
A6EC0E9F22433159BD52E079F0C21F4A4BF83492D1627140B8CF21C7535A7E5C
6F41AA4F2768C2988B9A9D8590F656BC0F0DE2A629EBF76B43110824141F4DB4
10CCB6387099ADD8776C158704FAC3ED0AA9AACEAD375AEE157BA30D078B5040
47CAB2011BC5C25FA76EB994849F9D218170FBB220D61E5ECFA13699E3B336C4
FD2AC85B5D4F9169E82D1EFBDCC71DCFFF624E0E0B39840B2B623E0F3980CE20
FB1EE50C9504B720858D2E196D168073E85DA1EF9E8B4676A1A7079709D42BDD
502633207281BEE29F615F0B2D097B2DEDCC62ADBA039601F6AFC24C3707E2FC
5345FB20CE37F8EB3D1AFBC5388FCC021D8338175D36C221BE87B4F9F4AB5E83
3B6AE31963AD744657E42B46C1F6B3A5A44A6A325B9864A92E9C9200BDC3B199
68E8F1004CD3C5C600FFB4A02795245876D9E1728F408B84D41AAA5630FEF539
6C90AF9B2B2D3405CC9F2962EE914A621ADDE30C448F263B2C689C231E4591E0
11AFEB86473FBB34907FDE8FC2E574E70E313AFF4BF6EE75A6E9E338FC1235AF
2E52ADE2753FC10DD301001EA89B37D7C6F5A86BD272DD9EFE9250A34DB9ACB1
F6F06A67FB67CF7E5B9973854C3DFE7034E54C951459B99EAAA11CB037DBFF12
1B0F081D60083FB7E8BD958CF5733C7DBC462EC7EA45BBD4A43279F4B906766D
0BD09F6D06F7C49CE8CDA25DD03D6A5C46115B70830D7C51A44BFBDC441C3D0B
078768B0FAB01A44641382F72487CFAF2240E1E18A241B500D66A02439A888C7
ACEF917D9DB15696D3DC87AB035DE6BA59F9C61E60DAB6334F4800696985FBDF
DA6D3E86FB6F1B1CD6C9C1B38F428A3EEB48C4A12ACA14D91F47A6A35C990ABB
7CBC3A579E5B69AAB13BF636E2CB54154EBEF71067D75442072E06BBC34E1885
B8E6BCD012B6C809C9004D74B3EC7B3DBD8BEC957386DF66A383DB8E69715557
491B4DED386BED5C7A82F53C2A8545E2EF2EE5BB1DD3BAB615EE3EDB0C544D19
81295C3478BB81618A4CA77BC722C8D4156C9152A59E211BF298C3080DDF7F46
3EA60EEE33D463546CF8E0306D18DB30FA7356F012F46903A41590FA30DD9CCC
40138A09065562DAFF949F576A64B104D2FD8D5765D84FC1FAD2EA4E1D49BEAE
E01775A0C9F513CAE2733986B4B7EC4B147FD04D8B9B9E72E8E3238959C8CBE8
FDAD5172DBEF0EEA375E66906F972080D9DD4C9E9AE7936371ED103767DDF6FE
6FCDC2AEEE1911EF6E09305B94938B6CA6CB9A4F91140370CC7E73AF13430106
300A4FF4A035D62FA290C6B968F4F1D5E43900322D8B669A19956A2E03368656
52B4D9BD505A485B3797A4E6ACA6E7A622F66300B6AE847C478012FE8D08A399
3AB45C3432F79AADFDE23DDFE63DA3C7CCB3E12CBA8EAD2FE33650E24F353E70
8BCCCC03EA0975599828D6B149B7BA9939D03AD60A180F4035419B5564E56963
D8E34F9975DBD607AA32067DB113812C14C815FB213446046D425D2C67D6BFA6
66201A11EF209D9E1327AF31D5833FAB8D66716463616218D2C841079071BF50
B9655ADE7177F5965C10531EC3868D1B841944531F5E5B84CE4B056D174FBE48
46B7575522B2C7D348CFAF54ACA70F3D7C5D45D698EEB767B15D2AFF0EAC6F1B
527AECE390C31102A4870FE04CEB212D1DC961B6C7D54FFB2E9AF810D933D8A3
E7CDB04B0EBE8DDA157F70C07DF34EAFE35F1D1809F3CAB946341159C585E5F8
447E28507745B1C6E8517D66FCA38588C673394608FCF101D33E90B832C1F958
14226E50395011CC72697DFD000706D77D55A2E98E9926DDEE1DB8A8617719F4
8EE2DA48DD5712825C0D64258E21E743D67200A94A5329C6793272510CDAC287
E82BCEDC1D4DF5F4DA36431BC83D9842F7C16E031984572E008B72C6F78648D2
4473A7B68D6253F41785BBBC1388441FDBDBDEF6471946061D3F3D751551E44F
C560D50AFEF9C1571594723A6D0211C20555C129BDD429704C615BB5FF65A35D
632A675775DD67F8D29EE51C2405E4F7FEBFFBE163DE6DD4A3ADBABA51B07228
1E2EB98AEABFBA9027C34F29D26B5A0FD680DDA60299A1709E7A51BE1B6F645F
29B7F6CFC81E5E9F58509936EB3FAC2C0240A0B3FF8730A4CFA7356588525CED
A215EBA36001C9FCFBABCF7FCE8672A37BD8F6B2B4675063DDF61A373AA27126
19ADBED96E0CEC2D887BD9788F1CA5B727A758A924BE3FAC870A28CE01079C03
EA67F825B3B240E1E7C6244BE76CC14547730F4CF1C1DB73D109C1C6481A6140
29DBB607CF1A04E75B9F1F1500E4B31F5F16053743C96380CC5FD12E110624DF
BE8D91ECF658E4B8978DD37C80634400F75926AA90EF0D5D258B1F0DEEE59A4B
DE081A7A9EA8CA86FCFD9F6432BF39971CBF0B812F7300F1E113F7F1B43EC5EA
4D9C3E7425065D6CBBF55011AD571066E2A20DB34E4849AB67639EBC8E9AD781
A2C5F154990925FB19E69BBCBF020CBBC33F2BB56626F64FAB5DD7F61DBCD01E
635B8FC2A3963D0B1161937980087C603273F1545167D5A23652A2A296B06FF3
035D3A5FDFDEA504F3D25E12D57272101EED2985EC60D18A44A4D912F4DA060A
CF6E288F3D4D7AC6BB7F6C3F6731BA04836390B0FFFF595EC6BA835EBDDFC1AC
28A9496278C1787F93DE75B3EDBBC9D27F6D857C079FB592328ACAB9B4E303F8
CA64BA55BEEEBC718DCBB397B2729C59DE3A93E5268F3F7788797A24886E1992
573F32EC6ED602D20F392C6D0C829B842802A4211F58E74D093454E9DFF69266
54FC5506C7C15F6BAF9808711285EB28C236C3BC392FD59F2EBB46D99FC3AEA5
214284515134BA0E02D5CFA90AC16BAD16D42E29A509EFD1DB3CDE118221EE42
88D61C5990E6093296827534175DFB4C6CEA7D95C8E5DC23352FD9028DE78872
4EE04A8A657C42D4F4A7851581D0812AFF5D9381936CB0776D5D3C858A579D61
84BE9677D3544E0D5283C7C7C6756848244E1A45E0DB3C13B8C18472D120C5D9
C0BDB419D03302C787D6F7D9D4618054343EC366DEFAA735FBA83C5BA6A4CF34
A6EA69BD986B999760A7B34CD7839A2DC02666A56D9F24F947B9C92312E0FC17
B73183F22F4D568D41228CD9817B278925FFF9B826732F671338DFF88ED1A0B2
B781EA172615A85645C6351D35DAAA082106922245BAA2CF92BBDD30D76ACFA1
FA3478C1F07DF4066D422EA0C81FF6099434D7FE9578EB76CBED711F100476C0
3B131A36F683F9E33947CF3777E926631738E750F117A61675A1AC2BACF152F3
5DDF73BF0290C6FAE137AB0AEA2293C4E2551F1D618B602025DCE756247DD3F1
CE4A9DEC866883E78F2EF7052B5CD259B75F403B0327A5BCD11F6313488F9E42
53D7859EF2E693F327D25D98FB44F53273DE6B8E43C93A494C40709E55EDCFAF
BB672882A031A270B12762F7BF75C7AA20E0DCAA36936E75D5EE119A65612A01
104F811B617AFE301047C956FB2938A9F76922FF5D91D333A2CFC3FF359CC866
4F1A66036877077C3FB4CD4E02A73D5C8ADC5B0E6E470BB95D213C9A44466908
4C393E98760DAAFCCD328AFCB815622C7FC31B9868371C8BE8C7295B77974815
E2259431C05FE258979B407367467C93A2FC7F829293464B2B029ED19442015E
A0E53E592C5D30B09D977E32CCDC0E9918DC70208D170CDDAE9C7B38F5029A3A
18F1EAE7CD390C2A4E7C56EAB8F8AF3E78EFEB9D02BA878986E9A3C9BB6DB773
A6338EF0D7B0FA722FBA42E5DF3D066B463890800D7300702F9DC177B9D8E6DE
D831F059791157E66D30E7AB59DE70F679946481F0977C9EA90A0A33554DC9EF
A858F8A3B763763C95C6BE6CA90A69BBE47B7956E489457496897468573B6565
1CDF745DF5DEAA05940FE455DCBFAFCC8421C1080040F5D7CBFCE48D7E42DD8B
2A7BBEF05ADDB21D604056A76DC6120804D73C814C4A58600D51FB7F200A6808
2FF2DD49163B959A980ABC6139496272FF3E7261CF3605B88849AE8C8AE9FE5A
FDF853E1023F74C359FC481344A9F2F6BF7A0AA240FD49AEE908F5D46A50C126
D9232666FE65D4E5BF52E27B75787ADA0E2FE392959079BDC95EA569B6CAE123
89B1A302D3FB47BAFBF9265F017D18765E754602EDEF6492A899ECF7DB3731D5
8765D69CEC50A4B36CDFE0F56146E92EAA2364B7C750CA09AFE124A2C41826C9
42C841E337ADD8ED5D70EB82F3B3D9211B91AD1D0DEC1DD4DB0AEBF35A2AE06D
EABC3BF4EA59F8C996A63AA3D62424C590DC62DD0C06CB1FB6CE188E0F04BE51
2F0E70D68DF5A2AA08923F1A34CD7CC30531381F8800FC4891ED93D9810BFA98
6D8DC592AF2DECD70AA8987120E085C7CFD4C153361A949FC8A55F26181E5EFA
F298E92463291A25C8E119E1F784C772FC0E92F4903CCF3745C585115111E3F5
15B06954C19287478B4D216F6E7C68C48BA1D7BF71890B49375ACB83B160C466
A259A1A0FBF565A644482D3A4545F1C66513FB598618F8896AA60373B1C61AC3
705FA00F33D5DAC4625C54AAB2DF1A89C4D959C23CCF18A7EB61EAFAC41DDD46
149F67857321A0AEE2140998948F7495E410AE3CF21884328566817B6226568D
05EF5523502BB42C91CF6C6CAD374FBDBF3D8D348873F6F79D518DB994932C8A
5AF1CB6DBF39609F5F30FEE1271D2FC29AA985BF75316C4B1A39F7B3F64411CA
13797FDE43357F8E4A42CFCF1890B0D7FBAE12CA73D0B3E8D25F887D0A95CA7F
78925F642A9645F22A4C05141F885FC953E280823DF19446AF87B30E4F4642EB
040D06A06F1707EBA923673E00800C61247A3D0B2F670CDB4F5B9189E88F8D20
7D834A7ACF7BFE568943B8CF4CCED4F0FE17ADCB2AB583E4873E7FF5601358BF
C654F3F51341308ED6D4A0B7E6E191BE18683B76C76ACACAB696C9C4C6213B49
44F26B94FB1D9AEA8CF2E86B46ECAA13117ED069822E4178B8F0EA48E89CC41B
09F396A5A9077FB4651AF0D25EFF40381F36617C6F96B308F9D17DC90D472CBF
035498B8559574B300876E41AD50D34A2E436CC43578C70DEAD77C4BF8AAE0B0
DA4E78A18E285107E1428551A238FAF73A495748219A06FF4F75362111D6E3AC
B9643116AD9C7782451D3D766E9640ADBF5F7E96A913464C544E5CA05F5E7CFE
DC8F53365C467C763504542D75853403443780F55316F9F40FA50D2955E161B5
EABE4D126395AF8EDC2A176462F29C11D67DCAE6B97B3CAD46646300991F74A8
BE2E5AF99D9758AB5483E72C71395FD64A429AC5CB3F122851BA41AD6BEB081C
4536238B3765DF8638EB5C87E6E595C9A2EA4F990890CEF1A477981711C6498C
6353DBB65EE818461F5A24D2023E4D2E8D7213396866B14A8A9346BB72239D9F
C77F4A435C83469CB7756DAC2400FFA11A5A32D803B7A901907DB6C70DC13376
0E52C721F0B043AC7C86C3665F4A3C10ECA83B5032BF0F91815498C85AA3B4A2
511E210E7D501F4DFBB8CA51E5B0366D048DE6E7CE34EEA6DB53F3581FD49634
72D6E8D9BDCC2E7C1611FC07A54947C230104B8E9DD1F085D126AB94405B7954
6F4A7739A8229D08E4861F98CF47E82E117AEC99BC89350C3923A35BA37BF419
3DA9210D6933EEEB3BBA41CEB43E46DB778158B67FD5F8AF46A121C51C9AAB0B
63C4D7D50B0B8B3A097A5303D66F23CE2230269B3FFFD9BA94E447C820B1833E
A423195D7D6C4D1DB950005F08A4B92AF2B219A6CE38990498836EA5C151EF03
6C05CD75E54F89EF0101403BED287A4A4F03064A09755955B754AB8E850E81FF
E10CB6427316C10C090AA1B0D96E5F20BD2BF4BFE16F0572E41DBC4013EC6B1F
272FC69AFAB0C543CEFEBE31BA5A10E1FFE15EE19FBB7CABAB7CBA7B86884C65
C9ED1ACDE54BD8F6B16BBE5BBE2AC7D6AAC538AFF90EAF946C9F6C608B6E3EE0
527FF3578978AF1696A031CDEF384E3F255D33B93750792557840D573DF8BF14
6CFF6F57B62EE22F0C7D1F58F116E6FBA82A2D0DA5D52A05A513433119EB2BE8
3155E509801B1FC4E367870FB85E1D6A9BBC5313E6A1AC1B0BD1B6BFAE4E7665
FFAAFB430F3BAFA7FB4C173E07750F6099B4F47023B1A13DFE684049FE607E7D
45B8AFFC853427EA12FADB649236615DD85394771F6026C28948C3347BF21BAC
2E7C2B34D2A443A35E4619F51C4F12145EAF481C3697EA12F2677963F7FFFBE6
DE190445771F2D534F915EB256B4CA4BF8EE16455CEA2F92B1684E226654748C
D01903F8D6AAD1E4F1357A07FF227483E3D7C8856898342731581F3DA3732ADA
264673A03D6E65799C752B920E2E3FAF3BEFE93156F3EC6185189D1F460CE57C
C25022A20C1DF7794D747B39B0A26EB37EACBF12502E04FC52343CC0CA3266EE
85158B24F9B14CC644A185AD482C506097C7690E44D2042F633C77151E3E2E2B
B873144854DE0DD82768CEFFC49BE06BC162EC95FBA423CCFF1FC5A9A0E5E0C4
4D4DA9CF45ABB36DC34FFF3749895AD2EAD722B6A633DF1353370C671A4E268B
BADA772F7C16F5392B37C5E458C30F82C22B20AAF0F9C245F6E924D719F180CA
1BF73ABD11A563BB1C9EAEC4F39D9697E29B5C839CD621A4C51E0884195B046C
F81B7F780AA9E4CF210041083F6686E0EC12CC0A08334A5A23E9A2A6E5F065B8
3E277BDFF9E51BB027675558EA5145D934DA916152F9389C6753E01B0FC7D93C
7F0CF7EE179B8F597953634A1F90C06DE7E787F07110F52281DE3378D0A2E7E3
36C4FF94A9357114F63DC8FF7382376D8A65D14870CC58AFDD12CD950A4C35CB
D4E294058DC06C8FB62E531EE556D608D65FA670120126918C74B161A800FDFB
59C27FC0DDB92FEE2E59FD9E50F73BA7264AE1EB392352C982B99440E543F2B2
50A4B68E8E97CCA8A8831FC09C3F1908F3975659FD9C38A4E014D6A41450E92E
8FCC4FAE2241867D6C88BD6316926330A6CC99ECEFECB7D7FB36ADA31D16A5E7
3251A4E8543B310FB5684863E88AF9C6C85004766698A5F4EAA004522611CA48
217EEBAB524642B74EB6143DB7A1C969A9C0D49973F34B618C65A2D08E1DCA16
082699BF3EF287020DEE14113E4D4EF3A183376AB4687685DB626073ECE7AFED
07977D36494C2D07AC2FE9A09FA4D6D1C0DA5E4DA93435353368D816A1CE1C1E
FD4D90D7E45983976ADB92519A8F57C668754D20DA07606D642F38B47BFE14FA
8E1A071A8E37DCF9047DCA66148781310D1CF78B17BB34CADB597E641054BB16
E40CC682CDB511B5FF758C1E23A542E5F7E52D4E9F8676183BE780DD3705249A
A6C37E2FA4340D650C41E82DDE19B4096742AE012B09CC3FAB45EED5200F3825
9AD8C75EEE3E8DC3127E88E254964C348D79405EDFB8A0D34BB240CBBAD33FCA
936B1B41DC5E2F9B0D263AE85626FB7C85BE19476E402C4A12110020F627D1D8
FDE65E3AA8FACD3E2F66C68B3545E50BCC0CD0E7FA92ADA77929CCF65AFFAAFA
085DF6E55E279BDC5543182AF7DE93337F317023808453277ECD5D96D3E4D1D7
A49BF95FF0FA981AB8B56EACA7043D7D3850F55A7B3815F76BDB75E9FAC4C857
2A5A86DB9D8F59BB48316E75276F76AB511C890D8A7B54FABC4B5840D0CC6DB8
8F513BE410DD8BA255941E830ECADE6229643EC14B466CD5BEC708FC26DFFB70
E37A26C6F1B016BBA5D31D4EC486180C28DBE62A3BF8FB005EC314F803D1D48C
282BA9AF95F4D5079219AA89F0F3B7F70A069C53B682FE26B34CE16CAEEC0DE8
C53BE93DB3EF0458B6B456E279CCF8AB35972795A4E8E66F9B77A3A71DF53C74
332E50B4606F135C4841E420E067EE6B3F7DCC038CB06F0D3822CF6A19EB158C
FB7B82B0FE9A4F6580135449D09D6CDF6C3F57E2EDD9A85A491CE456704EE825
59C1B3BFD3FC18D3BEDFFE8846597FBF2E8FFDCA1575929B9E730156F200096F
C2EA7CEAD8EFA8D5B5ECA9CA3DE886C1D6FC2C0194786533D90C66EF859E5866
83BB18DF86BE79568017DC87CBF476F5ED4C048FE606432EE212F87AFEF70791
5DDD347EB3E593318BDB44E2540408A7142CCF11510E5D0FA328269917E6F89D
3772FB594C02188DD42199918DCE99225BC1D3AE95BE82B093259BC114BED0DD
DF6EFD601220D1D4C9D3DC1DC6FDB191EB96BD1CA42FCA7109148367DCD1D94A
6A2816C2461AD673225C9E5137A409334FE8584C43A3412D1439B2CE1C5D8B44
2AC54E1C416FC9F1DB7CADAA56D5B9CE5910FA5E9977FC15222DBB3414422D98
3954C6D6B8F8A8AFFC8ACE673DEBBC68FD9FD11EDC9900BAEE2FA914CEDAAE18
CBE98CB2854B7EF90FA0DF90DEC50559B828685CED1DBB13E5A76B075220FC5C
2FDF0CF2365B798234FBEAB15F5DB32FEAB5CEC1455E67E7CBEA9150C9149C21
DE7BF692895C805F4076655F4CF13954B882D4006BBBE17AE78CC4D88B868D10
F156B80B813BAFFAEDC1088EB8469BFF50541822CBD9A00E9629943100DC9082
5824AA02350D910CA61F5B4984FB49045A57D42264AB159F60419B443674A4D1
9A5B314D3A68BFC49EA01F77BBDA0EFA22DDCB85D19E17AF309A303CEBDC733C
0EFA35F7915B44006CC4D6607F2AB376FF508EEF7CA4DA43D71F6127A9A61EA1
BA3B7F64843EC0E9A5E1BFBB087A26135D14AD855CF1E6077E980459915282DF
5CC2FF321BF3AC819375B9240A6E17F35E24AA5C10A620DFD88E4B19FE2E54DE
9756A778CAF677073B9CEFCA679E214ED7F65FE2A4C0C88B6031A4F58FA2362F
1873747F5F5279BBEE5A6CBE65EE47E3160336DF3CE8EFDFFDE0232AF3C4A677
3E8C41985B898D9412BACB2DAA9050F3077109A51F6C5AB9C26A52F92B3C1EC0
7F25C01966A704D73050FB86C16EC5D132AC0E51AE5DA26B5E696027B014C1C8
6563B6ABB89688FDC3D3491DAE37806475C91E5D83A769A7094B3CCEE442777A
9EB2E22670BF0CF69AD5BEC02A19B4D27AEA540969CED73CF33DAF8195CD5239
ECFA81043CED8B0FD4CEA5F4E7B716993C4FAE23EA470C04FEA074C28F11D0D1
23323D0B916DDB4081FD59A2F87BC92CCC343C8B6FB1F0D03553A59652EFE23A
CDF0404A6CC36DFEC200ADED26028013F033CB9C484B60E4E66AF7CC62795038
306EE8D58C4E911F04D50526783F3C831C65E6E512860F6F59DD7ABAD4C056E4
2D692A88622F592BE5A7BBB90DFAF53666FA965479B29754C4AFB0862907B06A
8653B0A18D3EE2C0BAA7ABA67E9FA3759899720418ECF3B1FDE84D13998B3D02
B04C0EAE0F92D239E1B01B3E56A714EB0E7D209E504F2FADD1D6C3D3AF70630F
FA579D049A38933476861809E3A087615A3950E555F6F0663842521DAECE4004
ADCA17B2ED795A2D0D7D90DB36ADC0A3A53CAB3B01AB02D77EFC2863ADCFFEAB
9464355CEC3AEC666651DB425B5FE9101F85E0112280A05580BDE87060F8D324
26567BAD269F7FBB61505CC10BDB43253EA37FFF11E9378A088B63669EF26D65
47FE859829B820BF23367008184CB9124BCDC13C7EA7EF08349AC312327B4401
DEC72AA27AAEEB78D0CB16C7281AF478310AB76BDD344C260245028468C4FFC4
5847B35BB75FD339B6F991D16634038C64D706E117DE4968367F7D12A5076149
2D593FD4E6974C763B452BD221B8FFB8A1FDC6A4796E2421D7C78CF0986BA7F5
0230E3B9D85E3A029AF0BC512EC1F78F44E6284817909E57392327D0F8D715F7
D4DF853F9859D49ABABF02274124FAB71231CA23840124336EA08DA0C652BCD2
0A592390320237A17B2EE0EBE7345C37F3BEFE4AB30B6AAFFD9C0A3773A03E24
0443C43B7676E7928DCD302D6A3AC104CC4FF1C1DB73D109C1C6481A614029DB
B607CF1A065B814B10A9BAA7CD8E55063239A215E5077C139E3D1236113F0D71
D887744DE37F71D3FDC499FED93C181E01E50AD85973E600E89875B465F110B0
9DE9F9A002A10636D5C181A37CF366B627B992C9E0A3BC6A7C3A96EC7A14712B
EF6A8B594D37D974AC8B12D711920FEC32B4868653BADD8F2B79A9BC4EC2C6AA
63E5DB20F986AEB4B4888006EB2F6D9713B6D7DD2B089FDCF9E3BF88B876B83B
D5F478A55576C1DC01B39401D74D2988472D488888D17159B13C71A7FDB4E72E
DA18959EBBD0420578BB459B1E9CA73B17EF456E2E0FAC9FA81B7F3C37946BB2
DE7BF1763002072F87D21497CC3E1FBAABA6422E6D5588B87953B6C0E4DB2807
334E91C683BC31B28E11744B36A8ABC83C1576B49CE7F028622F6F6A8D547333
6EEC461C818A21BB7A2850B9D188E43D143B1D54F5A497C89D598B4F812AB157
58BC8D66B3900C3112702035093ADBA02861A4586338B24DBD69A931E2DEC9BD
576E0E089273FB89B6BE5F906C0693C763D2FC2945DCBA64EDFB0753459147DC
B2B15B93B7BACB4BEF13E1CFCF2F3B5096D4134B8F1F6C17069B8331745E4DD1
5CC2A895A0B53B5CBCD1F9AB36F0721E5A0F0306997B71B76E2EE9D9649A18F7
BA92B53EE9A5A3767F02A5C78ACD8CD63A0DF4F2F5292899547F10BDE51DC140
9C47E43EB53E6F9E4E00695F8B83DD284E01C272FF9923231C783C891913E970
DEEBC8A9238B150D0F7466EEE90C7B619446F3063844A3CAD1C94FB785E06620
3FC94D1A9F50346A49B52704D05D8F93D1EC72CB751E371C9B9A10A1122B66B6
F2217FCE63972EA0DDBFDADCD6ADD44CCDD189B0EE5E85C7D6D77AD621BFDD4B
146DA45068A70A4CEC05E19EE6861EA1477CD6845860EB4CC271A7043BF29258
47B2FE02728CA5C803EF7D2E5769E394B3ED8B599AAF7ADF9EA77FFFEB73B73B
AAA3C177C94ABA6E0DA0D54AE04C3B149D11D4B51ECDD8E97EBC04286D3CFF60
4B9DC8FDAA266DA43CDC4C3E4D0FDFB4624BBCDDF8CD16401DAA824B8F645E6C
93F724412AB9B496F61BDB008E21D067BF7AC3CB02FAE321A6F901AC1BCBADDE
D1201CC5E9651D374C9E2F945487300955826E5B2B757A4BB66ED95EC0311BCA
B371B2492B35692F43971C41C62A64C3313599D39F79532A52501140D3BA623D
F867FB32C8E2602979C13B84A4E09FC864661AFC0A12C7C7D29CE7B5D9D3C69D
68244DD8B529CFF87DF3A665E3585257000A48220F689F1BDDB1DE2179F8C40E
C3C87C2928FA73A02EEBAA77C6521F7525531746606B1746619709CFDBC407FC
848AFC8AC2DF1CE06C7BA4E2D2D948A912D6CD7A68E32786DD335F5942309066
A9A89E6F5C2CC768497C0F6FB31908525DC3C0E913FBD2D28466E1591FDA4005
8E94BB4E90C22EDD83AFFDECA7D5F9A4EA35CA88B49203FE25129E26F18EA6ED
353F76AE44EA0AC83AF8FACD4A1EB2991F8ED93E2758C0B15DAAE2820FC51034
5FFBDB1F10F1455C330BB2E69C7E89DFF299700AF6FE19576A29A318EFA694EE
04EBC536D81CC123642FC7587E5905D661381C300E536635AE5F6B2A1780EE88
01EE1386B2C1FEA414355386578FFC39EAF22FDDF782F4699FF1322162225FAB
31B8806A7BA27037712E82C511777899C085464FC7638AB843D1AA75AE63EFD0
13ED5E829A1BBAA5835A3B5FCF67C9E7381B6BCCE9B7EE1F3DAE3B59C1FABD6F
B356A6A4C8C73AB5C12493C699431A88A49CF82582EA1382AD6F60E13FE8EA34
362CE5B09C982863A6653EC29C6FB09C330AA502CEF09805DDD9423F960A3F19
8B8935963CFD6BACC165F0AFAE1B3CA9699B79E423756229351500DC6D57C978
928300653D9746C0FE3A147FEB368B382F32F670C8F223873F783BF2D48DAFD6
24D71A53C04F78B2E484279090E7D5E86F8B98F359AA30D5118193113299197B
E93674ACE535B4F2759DDE1DF24A8524D8844FB3FF918D3B6EA89B47A4A49C7B
094D4CFF536C7DEEA0814E7D2A86C853265E2807C5AE7ED5A50606B331C7F5A8
2A73388B471686D836425F820E0142BC006534268A24526921B4EDF9A67BC04B
3963599D85C1884BD070C3C5B40853AD840187F0CEDE0361D41EA13A02E36720
89E328CAB3204E2BC7DC71C5339EC1051D779C0CA1CB946568E51337909E4EBA
C515257D676AA83CECC15DDBC4E2F300134FED7144CE73086FA251864CB4E2A7
A940B7ADE8FAB01D0526D2FEB976A04211E6C6706E5BF137928F7A5F3387F21C
7E8FBBB9C6DBF757EC0DB5A0CD26C8849753411B4E64C13CE0E83F1379C1184D
1117F98ED70CE0D0A9BC9AECD92018CE278CADCB2C5B27B1ED024BBA4035F37A
F1EEF8EFEF7B749626F8312E5218DD8E5A481CFA00F179DAC23CAA4EEB07B2E0
5B248AD682987EBA7F460B6CBA4E9AF7438CF285B885E309FE88CB00A18D1695
AA29B0EE8BF3BF577094000160E4B8897C2783196F5DE324B8267C74A45B9AD5
C988D739E41FA0A541E9ED02A7E3C2E03BD0E828809FDDCF09770F61CB74033C
E0AD041C51BEE0F51A7AA4EF89ACE2103B71744DF10DA951ADCFF0BF55E7CF66
612DCF824952C64BBA7ED546880C023BA49498087D3BBD52972E96ABB5573787
0F365A00EFA1B715F664301C07680FEFD8C7BE0F5984D857C7CB679702A5AA92
C0A00550421107609E13C16B4328BAD64C559558315E81255ED0B50906D6AB0C
493DE00AB0173CBCEB66171FB9AF69DA110849BBA75DC51579786D0F4D8620FC
0CEED11C5B4D5AD67CD0AEEF050B1E5A257FB1517505604B190CF9ED972ECC4C
488FD89CB12558FDD3EAB6616B39073A5B68907A0F02F696B3D24BF448968EC6
2B098AE8EA631F44D7E5A7C8E17E24D22CD4033DB5741B3BEAFEBA701C079363
9FA95E8727B2E9CABD5871CAF79C88C53D9E867799D08B21DEB485C18DB4BB6F
7530E1600F9F80A46C9211219CF4D92F1E2BF93EA780FA3B35C2FBC296D1C2E0
5845011D0645C27E6C9A8F5785C50D8D95E3CA72DF89F673332EE8D2620EA674
C88D637E377355BEAF03BC789D0BB7EC0A6A3F4A265C100E874BB162B9819422
6FECA8D13C0CAD341420A9EE2F45713B70ECC6E5782112AE9CF275F6D60A2069
944D69163840D4B0C5992E57E83C18205130BD7CABABA212144FAA4A79628F7D
E99398190A8E2208110E0BB61A44AFEA27396C807BA40D72BBE16C5FFD42361C
A73B0588DA7A96DC5DA5961FCE75823C0637D7A7A9F6AC2BA4E6976A128F5647
A548F4D26AAA1B8A9DF17B6A9E8018CB6F1063BD781920C2FE60D19D4167777C
7C430D07D5C443A57B428178BAD41E51B6E0BBE346D354E506511CD1C6DCB0CE
11DE6FF9C65D51B4B7ACA174B8943418D4BAF8F53B56B9DC69F1372DF318F08D
7054BBD64FE3F1F4776D9F68FE307F1FF591BDF0F1680EF4141B8390D1AB2C44
CFCDF6E3F6FA6AE87DC6393E83CFE3EF1E6FE18958ACE06B77BFEA46326AE67E
FE5B3E96CDC9155E523A884E3A419BAFE12457779C40AC45DBBCDA218D82AF5E
9783BA3AFC4DD7576729975973A4F3EE3A624836982CA49DB370E3B2EB5543F2
42FC551B493542847D29B38A0B8E914EDF41EF64D667214EE5FFCDF21C95AB87
7EC550DEF3C88E62087093740DA54A6BCCF2748416E63CC69F13F9631C00F97E
ACC7B6564FF4150D13782C4B836C8106F061172C00670D8DB0D2104BE4F3479C
73C07F22600251FF73D287818A0CAEC498E24BEBB83806CDE6C380EC4F7C6DE5
2EF45E9F0D222F41A889E7FF45B5CF12582D41297FBB06502CC1D7597CACBBEF
A5F999E7D765CEFD72B18DDC180619368C3A1689A8435CDA41614AA5C9B93B62
8674ECB0039DD8878E727140D2CE79BFF3AC232C75A301C69AF20F123D083F61
4A53121E35A4A0950BB23F3DEF4352C69839A46AD45DB6995B902B263986FD27
E89B0BE71A3F198486371BD9CD8B36C001384A36254F7BCCD10D063440C63C6B
031715AD9FD7CDD6EAAB8C5973797E2E7D36B18A4783646973228E85437E087F
CB4A4A28A730334C06EA9DD9B484B02B21F975F966598E75097569F7CC7C1F4C
E524D301E864C357E12DA98AC27B6A5AE32BEFBEB99E44DFAC3F9B30989A194A
5AB344BBD20AC3BC99CFC9C0B7401073C6FA7BB0ADBA3D58165220D7442E0A5B
89E74C96C78F2D616097B3543251C65A7846391717EF159E30D051A3228C58C6
0B5B4BF5DF0AF72CAB974E93F83EC8FA6FD63CC75F074B5A4D4DD4BA165A80D5
06424FADBE41314FCDB0A41F6704C3DBD0603CC76C087316185364CB9BFB9BAA
FE151B9ACA2178208511D9263E93186594A3179733A839DA0539100234E78371
4A81D82B0DBEAA82F92190AECDF9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (CorrigesTerminale.dvi)
@start /Fa 225[60 30[{}1 83.022 /EURM10 rf /Fb 247[83
6[42 1[{}2 83.022 /LINE10 rf /Fc 94[42 112[17 48[{}2
58.049 /Fourier-Math-Symbols rf /Fd 173[51 82[{}1 76.3801
/Fourier-Math-BlackBoard rf /Fe 201[31 31 31 31 31 31
31 48[{ TeXBase1Encoding ReEncodeFont }7 58.049 /Utopia-Regular
rf /Ff 55[55 1[55 55 26[55 55 5[55 1[55 48[64 61[45 78
7[76 76 40[{}12 76.3802 /Fourier-Math-Symbols rf /Fg
135[39 1[39 47 12[46 38 24 2[34 43 43 13[41 5[70 10[48
48 65[{ TeXBase1Encoding ReEncodeFont }13 76.3802 /Utopia-Italic
rf /Fh 93[54 162[{}1 76.3802 /Fourier-Math-Letters rf
/Fj 21[39 39 39 7[40 73[38 31 27[39 37 1[38 46 26 33
30 45 46 44 47 70 21 2[22 46 40 24 39 46 38 46 40 3[25
1[25 4[48 5[46 58 2[43 2[27 2[44 1[60 52 7[20 20 2[40
40 40 40 40 40 40 40 1[20 30 20 2[27 27 21 35[47 47 2[{
 TeXBase1Encoding ReEncodeFont }56 76.3802 /Utopia-Regular
rf /Fk 22[40 112[40 1[40 48 28 34 34 46 47 45 49 72 24
2[24 3[40 46 38 1[42 14[52 12[48 1[53 8[21 5[43 43 43
43 49[{ TeXBase1Encoding ReEncodeFont }26 76.3802 /Utopia-Bold
rf /Fl 22[57 57 113[57 69 41 49 48 1[68 64 70 104 34
2[35 3[57 67 1[67 60 12[69 16[76 17[62 49[{
 TeXBase1Encoding ReEncodeFont }20 109.987 /Utopia-Bold
rf /Fm 22[47 112[45 4[40 36 2[53 5[27 1[48 1[47 55 45
31[63 67[{ TeXBase1Encoding ReEncodeFont }11 91.6562
/Utopia-Regular rf /Fn 22[68 82[66 32[80 45 58 51 78
80 1[82 122 37 2[38 80 2[68 1[65 1[69 12[82 6[125 77[{
 TeXBase1Encoding ReEncodeFont }18 131.985 /Utopia-Regular
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -254 -561 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-246 -246 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246
-246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246 -246
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Compl\351ments sur la d\351rivation)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -246 -246 a -246 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -246
-246 a -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246
a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 0 TeXcolorgray
815 166 a Fn(M)n(ath\351matiques)30 b(\226)g(T)-13 b(er)q(minale)29
b(sp\351cialit\351)1496 577 y Fm(C)o(orr)q(ig\351s)18
b(des)j(exer)n(cices)-246 937 y
SDict begin H.S end
 -246 937 a -246 937 a
SDict begin 18 H.A end

-246 937 a -246 937 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -246 937 a Fl(T)-10 b(able)22 b(des)h(mati\350r)n
(es)p 0 0 1 TeXcolorrgb -246 1120 a
SDict begin H.S end
 -246 1120 a Fk(1)67
b(C)o(ompl\351ments)15 b(sur)h(la)f(d\351r)q(iv)o(ation)967
1120 y
SDict begin 12 H.L end
 967 1120 a 967 1120 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 967 1120 a 0 TeXcolorgray
3136 w Fk(2)p 0 TeXcolorgray 1930 5895 a Fj(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -246 -246 a 83 x Fl(1)105 b(C)o(ompl\351ments)23
b(sur)h(la)f(d\351r)q(iv)n(ation)-246 -54 y
SDict begin H.S end
 -246 -54
a -246 -54 a
SDict begin 12 H.A end
 -246 -54 a -246 -54 a
SDict begin [/View [/XYZ H.V]/Dest (exo.1) cvn /DEST pdfmark end
 -246 -54 a 0 TeXcolorgray
75 x Fk(Ex)o(er)o(cice)14 b(1)p 0 TeXcolorgray 42 w Fj(La)j(fonction)27
b Fg(f)36 b Fj(est)18 b(d\351\002nie)f(sur)h(l)o('inter)q(valle)1517
22 y([)1542 21 y Ff(\241)p Fj(2;)8 b(6)1705 22 y(])1749
21 y(par)1596 220 y Fg(f)19 b Fj(\()r Fg(x)5 b Fj(\))14
b Ff(\306)h Fj(0,)8 b(5)r Fg(x)1977 186 y Fe(2)2024 220
y Ff(\241)i Fj(2)r Fg(x)15 b Ff(\241)10 b Fj(4.)-246
420 y(P)n(our)17 b(tout)j Fg(x)g Ff(2)14 b Fd(R)31 b
Fj(:)1388 519 y Fg(f)1431 485 y Fc(0)1452 519 y Fj(\()r
Fg(x)5 b Fj(\))14 b Ff(\306)g Fj(0,)8 b(5)i Ff(\243)g
Fj(2)r Fg(x)15 b Ff(\241)10 b Fj(2)g Ff(\243)g Fj(1)g
Ff(\241)g Fj(0)19 b Ff(\306)e Fg(x)e Ff(\241)10 b Fj(2.)-246
669 y(La)16 b(d\351r)q(iv\351e)g(est)h(du)e(pr)o(emier)i(degr\351,)e
(donc)g(pour)i(obtenir)f(le)g(tableau)g(de)g(signe)o(,)g(il)g(faut)g
(r\351soudr)o(e)g(une)g(\351quation,)h(puis)g(r)o(egar)o(der)d(le)i
(signe)g(de)i Fg(a)33 b Fj(:)1809 851 y Fg(x)15 b Ff(\241)10
b Fj(2)15 b Ff(\306)g Fj(0)1693 976 y Fg(x)g Ff(\241)1812
992 y Fb(\001)1812 976 y Fj(2)d Ff(\305)1929 992 y Fb(\001)1929
976 y Fj(2)i Ff(\306)h Fj(0)10 b Ff(\305)g Fj(2)1925
1100 y Fg(x)19 b Ff(\306)c Fj(2.)-244 1307 y Fg(a)j Ff(\306)d
Fj(1)i(\(puisque)k Fg(x)15 b Ff(\241)10 b Fj(2)19 b(signi\002e)p
1 0 0 TeXcolorrgb 17 w(1)p 0 TeXcolorgray 3 w Fg(x)c
Ff(\241)10 b Fj(2\),)20 b Fg(a)h Fj(est)d Ff(\251)f Fj(donc)g(le)h
(signe)g(est)g(de)f(la)h(for)q(me)45 b Ff(\241)18 b Fa(\036)f
Ff(\305)p 2226 1225 262 4 v 2226 1349 4 127 v 2484 1349
V 2226 1351 262 4 v -246 1472 a Fj(On)h(en)f(d\351duit)h(le)g(tableau)f
(de)h(signe)g(de)25 b Fg(f)1031 1442 y Fc(0)1069 1472
y Fj(et)18 b(le)g(tableau)f(de)h(var)q(iations)f(de)25
b Fg(f)51 b Fj(:)p 0 TeXcolorgray 0 TeXcolorgray -19
1640 a

 -19 1640 a -19 1640 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -13.56602 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a 168
w Fg(x)-19 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -36.66914 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a 111 w Fg(f)135
1610 y Fc(0)156 1640 y Fj(\()r Fg(x)5 b Fj(\))-19 1640
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -70.33508 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a 122 w Fg(f)18 b Fj(\()r Fg(x)5
b Fj(\))-19 1640 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -22.6787 moveto

 204.10854 -22.6787 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -45.35742 moveto

 204.10854 -45.35742 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -90.71487 moveto

 204.10854 -90.71487 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -90.71487 lineto

 204.10854 -90.71487 lineto

 204.10854 0.0 lineto

 closepath

 204.10854 -90.71487 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -90.71487 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 50.96643 -14.40787 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a Ff(\241)p Fj(2)-19
1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.29675 -14.40787 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a Fj(2)-19 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 190.32938 -14.38297 ] concat

 pgfs


 -19 1640
a
 0 setgray
 -19 1640 a Fj(6)-19 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -35.44627 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a Ff(\241)-19
1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -22.6787 moveto

 124.73297 -45.35742 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -37.06345 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a Fj(0)-19 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -36.57706 ] concat

 pgfs


 -19 1640
a
 0 setgray
 -19 1640 a Ff(\305)-19 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 52.27333 -59.46468 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 54.26588 -57.47212 ] concat

 pgfs


 -19 1640 a
 /pgfsc{}def/pgffc{}def
 -19 1640 a
-19 1640 a
 0 setgray
 -19 1640 a Fj(2)-19 1640 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 52.27333 -59.46468 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 54.26588 -57.47212 ] concat

 pgfs


 -19 1640 a
 /pgfsc{}def/pgffc{}def
 -19
1640 a -19 1640 a
 0 setgray
 -19 1640 a Fj(2)-19 1640 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 15.44226 117.01184 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 119.0044 -84.68742 ] concat

 pgfs


 -19 1640
a
 /pgfsc{}def/pgffc{}def
 -19 1640 a -19 1640 a
 0 setgray
 -19 1640 a Ff(\241)p Fj(6)-19
1640 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 15.44226 117.01184 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 119.0044 -84.68742 ] concat

 pgfs


 -19 1640 a
 /pgfsc{}def/pgffc{}def
 -19 1640 a -19 1640 a
 0 setgray
 -19 1640 a Ff(\241)p
Fj(6)-19 1640 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 64.96579 -57.71567 moveto

 110.95607 -76.13242 lineto

 pgfstr

 save

 [0.9283 -0.37172 0.37172 0.9283 110.95605 -76.13242 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 188.3457 -59.46468 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 190.33826 -57.47212 ] concat

 pgfs


 -19 1640
a
 /pgfsc{}def/pgffc{}def
 -19 1640 a -19 1640 a
 0 setgray
 -19 1640 a Fj(2)-19 1640 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 188.3457 -59.46468 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 190.33826 -57.47212 ] concat

 pgfs


 -19
1640 a
 /pgfsc{}def/pgffc{}def
 -19 1640 a -19 1640 a
 0 setgray
 -19 1640 a Fj(2)-19 1640
y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 136.30339 -77.02061 moveto

 182.29369 -58.60347 lineto

 pgfstr

 save

 [0.9283 0.37172 -0.37172 0.9283 182.29367 -58.60347 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 1946 2415
9 777 v 0 TeXcolorgray 1992 1721 a Fj(P)n(our)16 b(compl\351ter)j(l)o
('extr\351mit\351)h(des)d(\003\350ches)o(,)i(on)e(calcule)h(:)p
0 TeXcolorgray 2161 1821 a(\225)p 0 TeXcolorgray 50 w
Fg(f)h Fj(\()p Ff(\241)p Fj(2\))14 b Ff(\306)g Fj(0,)8
b(5)i Ff(\243)g Fj(\()p Ff(\241)p Fj(2\))2849 1791 y
Fe(2)2896 1821 y Ff(\241)g Fj(2)g Ff(\243)g Fj(\()p Ff(\241)p
Fj(2\))g Ff(\241)g Fj(4)16 b Ff(\306)e Fj(2)p 0 TeXcolorgray
2161 1920 a(\225)p 0 TeXcolorgray 50 w Fg(f)19 b Fj(\(2\))14
b Ff(\306)g Fj(0,)8 b(5)i Ff(\243)g Fj(2)2685 1890 y
Fe(2)2733 1920 y Ff(\241)g Fj(2)g Ff(\243)g Fj(2)g Ff(\241)g
Fj(4)16 b Ff(\306)e(\241)p Fj(6)p 0 TeXcolorgray 2161
2020 a(\225)p 0 TeXcolorgray 50 w Fg(f)19 b Fj(\(6\))14
b Ff(\306)g Fj(0,)8 b(5)i Ff(\243)g Fj(6)2685 1990 y
Fe(2)2733 2020 y Ff(\241)g Fj(2)g Ff(\243)g Fj(6)g Ff(\241)g
Fj(4)16 b Ff(\306)e Fj(2)1992 2169 y(On)j(peut)h(aussi)g(fair)o(e)g(un)
f(tableau)h(de)f(valeurs)h(\340)g(la)f(calculatr)q(ice)o(.)-246
2646 y Fk(R)o(emarque)d(:)k Fj(La)f(courbe)g(r)o(epr\351sentative)i
(est)f(une)g(par)o(abole)o(,)g(dont)f(le)h(sommet)h Fg(S)j
Fj(a)17 b(pour)h(coor)o(donn\351es)f(\(2;)8 b Ff(\241)p
Fj(6\).)p 0 TeXcolorgray 0 TeXcolorgray 908 3778 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 250.95338 a add def
/d 0.0 a add neg def /h 123.20035 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 908
3778 a 1466 3041 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -85.35818 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 183.8049 0.0 -67.14848 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 14.22636 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -56.90549 0.0 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 34.42776 0.0 -88.77258   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 183.8049  0 -67.14848  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -67.14848
 183.8049  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-88.77258  def /maxTickline 34.42776  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 34.42776
0.0 -88.77258   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.8049
0.0 -67.14848 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 34.42776  0 -88.77258  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -88.77258
 34.42776  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-67.14848  def /maxTickline 183.8049  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 14.22636  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 14.22636  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 34.42776
0.0 -88.77258   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.8049
0.0 -67.14848 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1451 3138 a Fe(0)205
b(1)g(2)g(3)g(4)g(5)-1469 b Fc(\241)p Fe(1)-309 b Fc(\241)p
Fe(2)1377 3060 y(0)1335 3178 y Fc(\241)p Fe(1)1335 3296
y Fc(\241)p Fe(2)1335 3414 y Fc(\241)p Fe(3)1335 3533
y Fc(\241)p Fe(4)1335 3651 y Fc(\241)p Fe(5)1335 3769
y Fc(\241)p Fe(6)1377 2942 y(1)1466 3041 y
tx@Dict begin  gsave STV CP T /ps@rot 0. def grestore  end
 1466 3041
a 1466 3041 a
tx@Dict begin { 56.90549 -85.35818 } PutCoor PutBegin  end
 1466 3041 a 1466 3041 a
tx@Dict begin ps@rot  RotBegin  end
 1466 3041 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4. def /x1 4. def
/dx x1 x sub 49 div def /F@pstplot (x^2/2/1.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 14.22636 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 14.22636
mul gt { moveto } { dup -1.e30 14.22636 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1466 3041 a
tx@Dict begin RotEnd  end
 1466 3041 a 1466
3041 a
tx@Dict begin  PutEnd  end
 1466 3041 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0 0  setrgbcolor  [ 56.90549
-85.35818   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1466 3041 a
tx@Dict begin { 59.18175 -82.51295 } PutCoor PutBegin  end
 1466 3041 a 1 0 0 TeXcolorrgb -1 x Fg(S)p
0 TeXcolorgray 1466 3041 a
tx@Dict begin  PutEnd  end
 1466 3041 a 2992 3778 a
currentpoint initclip moveto
 2992
3778 a -246 3861 a
SDict begin H.S end
 -246 3861 a -246 3861 a
SDict begin 12 H.A end
 -246 3861
a -246 3861 a
SDict begin [/View [/XYZ H.V]/Dest (exo.2) cvn /DEST pdfmark end
 -246 3861 a 0 TeXcolorgray 116 x Fk(Ex)o(er)o(cice)14
b(2)p 0 TeXcolorgray 42 w Fj(On)j(consid\350r)o(e)g(un)h(segment)1052
3978 y([)1084 3977 y Fg(A)s(B)1190 3978 y Fj(])1233 3977
y(de)f(longueur)h(4)g(et)g(un)f(point)i(mobile)h Fg(M)25
b Fj(pouvant)18 b(se)g(d\351placer)g(libr)o(ement)g(sur)g(ce)f
(segment.)p 0 TeXcolorgray 0 TeXcolorgray 1382 4460 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 136.85764 a add def
/d 0.0 a add neg def /h 44.95538 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end

1382 4460 a 1240 4524 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 28.45274 28.45274 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1240 4524 a
tx@Dict begin { 83.08195 42.67911 } PutCoor PutBegin  end
 1240 4524 a 51 x Fj(4)1240 4524 y
tx@Dict begin  PutEnd  end
 1240 4524
a 1240 4524 a
tx@Dict begin { 42.67911 19.91682 } PutCoor PutBegin  end
 1240 4524 a 1242 4562 a Fg(x)1240 4524
y
tx@Dict begin  PutEnd  end
 1240 4524 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.26372
39.83366 91.04869 39.83366   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
39.83366 79.66776 39.83366   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
17.07181 39.83366 17.07181   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 62.59595
17.07181 51.21501 17.07181   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 28.45274 28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1240 4524 a
tx@Dict begin { 24.185 30.729 } PutCoor PutBegin  end
 1240
4524 a 6 w Fg(A)1240 4524 y
tx@Dict begin  PutEnd  end
 1240 4524 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 142.26372 28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1240 4524 a
tx@Dict begin { 143.97081 30.729 } PutCoor PutBegin  end
 1240 4524 a Fg(B)1240
4524 y
tx@Dict begin  PutEnd  end
 1240 4524 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 62.59595 28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1240 4524 a
tx@Dict begin { 64.30304 30.729 } PutCoor PutBegin  end
 1240 4524 a 2 w Fg(M)1240 4524 y
tx@Dict begin  PutEnd  end
 1240 4524
a 2518 4460 a
currentpoint initclip moveto
 2518 4460 a -246 4643 a Fj(On)h(note)i
Fg(x)i Fj(la)c(longueur)g(du)f(segment)946 4644 y([)977
4643 y Fg(A)5 b(M)1107 4644 y Fj(])1150 4643 y(et)26
b Fg(f)19 b Fj(\()r Fg(x)5 b Fj(\))17 b(le)g(produit)h(des)f(longueurs)
25 b Fg(A)5 b(M)17 b Ff(\243)10 b Fg(B)f(M)e Fj(.)-246
4691 y
SDict begin H.S end
 -246 4691 a -246 4691 a
SDict begin 12 H.A end
 -246 4691 a -246 4691
a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -246 4691 a 0 TeXcolorgray -141 4787 a Fj(1.)p 0 TeXcolorgray
43 w Fg(B)i(M)23 b Ff(\306)d Fg(A)s(B)e Ff(\241)e Fg(A)5
b(M)22 b Ff(\306)14 b Fj(4)c Ff(\241)i Fg(x)5 b Fj(,)19
b(donc)1688 4969 y Fg(f)g Fj(\()r Fg(x)5 b Fj(\))14 b
Ff(\306)20 b Fg(A)5 b(M)18 b Ff(\243)10 b Fg(B)f(M)1845
5094 y Ff(\306)16 b Fg(x)f Ff(\243)10 b Fj(\(4)g Ff(\241)i
Fg(x)5 b Fj(\))1845 5218 y Ff(\306)16 b Fg(x)f Ff(\243)10
b Fj(4)g Ff(\305)i Fg(x)j Ff(\243)10 b Fj(\()p Ff(\241)r
Fg(x)5 b Fj(\))1845 5354 y Ff(\306)14 b Fj(4)r Fg(x)h
Ff(\241)d Fg(x)2121 5320 y Fe(2)2157 5354 y Fj(.)p 0
TeXcolorgray 1930 5895 a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163 a Fj(2.)p
0 TeXcolorgray 43 w(Le)20 b(produit)f(des)h(longueurs)26
b Fg(A)5 b(M)19 b Ff(\243)11 b Fg(B)e(M)27 b Fj(est)20
b(donn\351)g(par)27 b Fg(f)19 b Fj(\()r Fg(x)5 b Fj(\),)20
b(donc)f(maximiser)i(ce)e(produit)g(r)o(evient)i(\340)e(maximiser)i(la)
e(fonction)29 b Fg(f)17 b Fj(.)j(On)-38 -63 y(\351tudie)e(donc)f(les)h
(var)q(iations)35 b(:)18 b(pour)f(tout)j Fg(x)g Ff(2)1380
-62 y Fj([)1406 -63 y(0;)8 b(4)1514 -62 y(])1548 -63
y(,)1594 120 y Fg(f)1637 85 y Fc(0)1658 120 y Fj(\()r
Fg(x)d Fj(\))14 b Ff(\306)h Fj(4)10 b Ff(\243)g Fj(1)g
Ff(\241)g Fj(2)r Fg(x)21 b Ff(\306)14 b(\241)p Fj(2)r
Fg(x)h Ff(\305)10 b Fj(4.)-38 317 y(On)17 b(r\351sout)h(:)1863
614 y Ff(\241)p Fj(2)r Fg(x)d Ff(\305)10 b Fj(4)16 b
Ff(\306)e Fj(0)1747 738 y Ff(\241)p Fj(2)r Fg(x)h Ff(\305)1963
754 y Fb(\001)1963 738 y Fj(4)d Ff(\241)2080 754 y Fb(\001)2080
738 y Fj(4)j Ff(\306)f Fj(0)c Ff(\241)g Fj(4)1961 857
y Fb(\010)1990 843 y(\010)1969 855 y Ff(\241)p Fj(2)r
Fg(x)p 1969 892 142 5 v 1984 970 a Fb(\010)2013 956 y(\010)1992
968 y Ff(\241)p Fj(2)2135 911 y Ff(\306)2214 855 y(\241)p
Fj(4)p 2214 892 96 5 v 2214 968 a Ff(\241)p Fj(2)2076
1071 y Fg(x)20 b Ff(\306)14 b Fj(2.)-36 1293 y Fg(a)k
Ff(\306)c(\241)p Fj(2,)20 b Fg(a)h Fj(est)d Ff(\252)f
Fj(donc)g(le)h(signe)g(est)g(de)f(la)g(for)q(me)46 b
Ff(\305)17 b Fa(\036)h Ff(\241)p 1472 1210 262 4 v 1472
1335 4 127 v 1730 1335 V 1472 1337 262 4 v -38 1472 a
Fj(On)f(obtient)h(le)g(tableau)g(de)f(signe)h(de)25 b
Fg(f)1160 1442 y Fc(0)1198 1472 y Fj(et)18 b(le)g(tableau)g(de)f(var)q
(iations)h(de)25 b Fg(f)50 b Fj(:)p 0 TeXcolorgray 0
TeXcolorgray 137 1640 a

 137 1640 a 137 1640 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -13.56602 ] concat

 pgfs


 137 1640
a
 0 setgray
 137 1640 a 167 w Fg(x)137 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -36.66914 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640
a 111 w Fg(f)291 1610 y Fc(0)312 1640 y Fj(\()r Fg(x)5
b Fj(\))137 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -70.33508 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a 121 w Fg(f)19
b Fj(\()r Fg(x)5 b Fj(\))137 1640 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -22.6787 moveto

 204.10854 -22.6787 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -45.35742 moveto

 204.10854 -45.35742 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -90.71487 moveto

 204.10854 -90.71487 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -90.71487 lineto

 204.10854 -90.71487 lineto

 204.10854 0.0 lineto

 closepath

 204.10854 -90.71487 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -90.71487 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 54.26411 -14.38297 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640
a Fj(0)137 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.29675 -14.40787 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a Fj(2)137 1640
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 190.32938 -14.40787 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a Fj(4)137 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -36.57706 ] concat

 pgfs


 137 1640 a
 0 setgray
 137
1640 a Ff(\305)137 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -22.6787 moveto

 124.73297 -45.35742 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -37.06345 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a Fj(0)137
1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -35.44627 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a Ff(\241)137 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 54.70424 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 56.6968 -84.73721 ] concat

 pgfs


 137 1640
a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640 a 137 1640 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 54.70424 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 56.6968 -84.73721 ] concat

 pgfs


 137 1640
a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640 a 137 1640 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 122.74042 -53.32764 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 124.73297 -51.33508 ] concat

 pgfs


 137 1640
a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640 a 137 1640 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 122.74042 -53.32764 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 124.73297 -51.33508 ] concat

 pgfs


 137 1640
a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640 a 137 1640 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 62.47359 -81.90782 moveto

 116.81953 -55.225 lineto

 pgfstr

 save

 [0.8976 0.44069 -0.44069 0.8976 116.81952 -55.22502 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore

0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 190.77661 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 192.76917 -84.73721 ] concat

 pgfs


 137 1640 a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640
a 137 1640 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 190.77661 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 192.76917 -84.73721 ] concat

 pgfs


 137 1640 a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640
a 137 1640 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 130.51335 -54.17204 moveto

 184.85928 -80.85486 lineto

 pgfstr

 save

 [0.8976 -0.44069 0.44069 0.8976 184.85927 -80.85484 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
2050 2415 9 777 v 0 TeXcolorgray 2095 1721 a Fj(Il)14
b(n)-6 b('est)14 b(pas)g(utile)g(ici)g(de)g(compl\351ter)g(l)o
('extr\351mit\351)g(des)g(\003\350ches)g(:)g(tout)2095
1821 y(ce)k(qui)g(nous)h(int\351r)o(esse)o(,)f(c)n('est)h(la)f(valeur)g
(de)h Fg(x)k Fj(pour)18 b(laquelle)28 b Fg(f)37 b Fj(at-)2095
1920 y(teint)19 b(son)f(maximum.)-38 2611 y(C)o(onclusion)e(:)23
b Fg(f)34 b Fj(atteint)16 b(son)f(maximum)i(lorsque)h
Fg(x)h Ff(\306)14 b Fj(2,)i(donc)e(le)h(produit)21 b
Fg(A)5 b(M)11 b Ff(\243)t Fg(B)e(M)24 b Fj(est)15 b(maximal)h(lorsque)i
Fg(x)i Ff(\306)14 b Fj(2)h(;)g(c)n('est-\340-dir)o(e)f(quand)-36
2711 y Fg(M)25 b Fj(est)18 b(le)g(milieu)h(de)594 2712
y([)625 2711 y Fg(A)s(B)731 2712 y Fj(])765 2711 y(.)-246
2904 y Fk(R)o(emarque)14 b(:)k Fj(C)o(et)f(exemple)j(est)e(celui)g(qu)n
('a)f(choisi)h(F)m(er)q(mat)g(vers)g(1637)h(pour)f(exposer)g(sa)f
(m\351thode)i(de)e(l)o('ad\351galit\351)h(\226)g(anc\352tr)o(e)f(de)g
(la)g(d\351r)q(ivation)-246 3004 y(\226)h(pour)f(d\351ter)q(miner)h(le)
g(maximum)h(et)f(le)g(minimum)i(d)n('une)e(fonction.)-246
3087 y
SDict begin H.S end
 -246 3087 a -246 3087 a
SDict begin 12 H.A end
 -246 3087 a -246 3087
a
SDict begin [/View [/XYZ H.V]/Dest (exo.3) cvn /DEST pdfmark end
 -246 3087 a 0 TeXcolorgray 116 x Fk(Ex)o(er)o(cice)c(3)p
0 TeXcolorgray 42 w Fj(La)j(fonction)k Fg(g)26 b Fj(est)18
b(d\351\002nie)g(sur)f Fd(R)g Fj(par)1438 3402 y Fg(g)10
b Fj(\()r Fg(x)5 b Fj(\))13 b Ff(\306)i Fj(0,)8 b(5)r
Fg(x)1823 3368 y Fe(3)1870 3402 y Ff(\305)i Fj(0,)e(75)r
Fg(x)2129 3368 y Fe(2)2176 3402 y Ff(\241)i Fj(3)r Fg(x)15
b Ff(\241)10 b Fj(1.)-246 3602 y(P)n(our)17 b(tout)j
Fg(x)g Ff(2)14 b Fd(R)31 b Fj(:)984 3801 y Fg(g)1032
3767 y Fc(0)1053 3801 y Fj(\()r Fg(x)5 b Fj(\))14 b Ff(\306)g
Fj(0,)8 b(5)i Ff(\243)g Fj(3)r Fg(x)1505 3767 y Fe(2)1553
3801 y Ff(\305)g Fj(0,)e(75)i Ff(\243)g Fj(2)r Fg(x)15
b Ff(\241)10 b Fj(3)g Ff(\243)g Fj(1)g Ff(\241)g Fj(0)19
b Ff(\306)14 b Fj(1,)8 b(5)r Fg(x)2514 3767 y Fe(2)2561
3801 y Ff(\305)i Fj(1,)e(5)r Fg(x)15 b Ff(\241)10 b Fj(3.)-246
3950 y(La)18 b(d\351r)q(iv\351e)g(est)g(du)f(second)g(degr\351,)g(donc)
g(on)h(utilise)h(la)f(m\351thode)g(de)f(la)h(classe)g(de)f(pr)o
(emi\350r)o(e)h(:)p 0 TeXcolorgray -76 4050 a(\225)p
0 TeXcolorgray 44 w Fg(a)g Ff(\306)c Fj(1,)8 b(5,)19
b Fg(b)f Ff(\306)c Fj(1,)8 b(5,)19 b Fg(c)h Ff(\306)14
b(\241)p Fj(3.)p 0 TeXcolorgray -76 4150 a(\225)p 0 TeXcolorgray
42 w(le)k(discr)q(iminant)g(est)g Fh(\242)c Ff(\306)h
Fg(b)838 4119 y Fe(2)882 4150 y Ff(\241)10 b Fj(4)r Fg(a)t(c)21
b Ff(\306)14 b Fj(1,)8 b(5)1268 4119 y Fe(2)1314 4150
y Ff(\241)i Fj(4)g Ff(\243)g Fj(1,)e(5)i Ff(\243)g Fj(\()p
Ff(\241)p Fj(3\))17 b Ff(\306)d Fj(20,)8 b(25.)p 0 TeXcolorgray
-76 4249 a(\225)p 0 TeXcolorgray 42 w Fh(\242)14 b Ff(\310)h
Fj(0,)j(donc)f(il)g(y)g(a)g(deux)h(r)o(acines)g(:)1111
4571 y Fg(x)1152 4583 y Fe(1)1202 4571 y Ff(\306)1281
4515 y(\241)p Fg(b)c Ff(\241)1458 4449 y(p)p 1522 4449
55 5 v 66 x Fh(\242)p 1281 4552 296 5 v 1384 4628 a Fj(2)r
Fg(a)1600 4571 y Ff(\306)1679 4515 y(\241)p Fj(1,)8 b(5)i
Ff(\241)1917 4455 y(p)p 1983 4455 191 5 v 1983 4515 a
Fj(20,)e(25)p 1679 4552 494 5 v 1814 4628 a(2)i Ff(\243)g
Fj(1,)e(5)2197 4571 y Ff(\306)2276 4515 y(\241)p Fj(1,)g(5)i
Ff(\241)g Fj(4,)e(5)p 2276 4552 350 5 v 2431 4628 a(3)2650
4571 y Ff(\306)2729 4515 y(\241)p Fj(6)p 2729 4552 96
5 v 2756 4628 a(3)2848 4571 y Ff(\306)15 b(\241)p Fj(2,)1111
4803 y Fg(x)1152 4815 y Fe(2)1202 4803 y Ff(\306)1281
4747 y(\241)p Fg(b)f Ff(\305)1458 4681 y(p)p 1522 4681
55 5 v 66 x Fh(\242)p 1281 4784 296 5 v 1384 4860 a Fj(2)r
Fg(a)1600 4803 y Ff(\306)1679 4747 y(\241)p Fj(1,)8 b(5)i
Ff(\305)1917 4688 y(p)p 1983 4688 191 5 v 1983 4747 a
Fj(20,)e(25)p 1679 4784 494 5 v 1814 4860 a(2)i Ff(\243)g
Fj(1,)e(5)2197 4803 y Ff(\306)2276 4747 y(\241)p Fj(1,)g(5)i
Ff(\305)g Fj(4,)e(5)p 2276 4784 350 5 v 2431 4860 a(3)2650
4803 y Ff(\306)2729 4747 y Fj(3)p 2729 4784 41 5 v 2729
4860 a(3)2793 4803 y Ff(\306)15 b Fj(1.)-244 5098 y Fg(a)j
Ff(\306)d Fj(1,)8 b(5)20 b Fg(a)h Fj(est)d Ff(\251)f
Fj(donc)g(le)h(signe)g(est)g(de)f(la)h(for)q(me)45 b
Ff(\305)18 b Fa(\036)27 b Ff(\241)h Fa(\036)17 b Ff(\305)p
1258 5016 432 4 v 1258 5140 4 127 v 1686 5140 V 1258
5142 432 4 v 0 TeXcolorgray 0 TeXcolorgray -153 5266
a

 -153 5266 a -153 5266 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -12.14816 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a 168
w Fg(x)-153 5266 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -32.41563 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a 106 w Fg(g)1
5235 y Fc(0)21 5266 y Fj(\()r Fg(x)5 b Fj(\))-153 5266
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -61.64621 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a 116 w Fg(g)10 b Fj(\()r Fg(x)5
b Fj(\))-153 5266 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -19.84302 moveto

 238.11656 -19.84302 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -39.68607 moveto

 238.11656 -39.68607 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -79.37216 moveto

 238.11656 -79.37216 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -79.37216 lineto

 238.11656 -79.37216 lineto

 238.11656 0.0 lineto

 closepath

 238.11656 -79.37216 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 39.68607 0.0 moveto

 39.68607 -79.37216 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 41.63185 -11.9539 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a Ff(\2411)-153
5266 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 103.40654 -12.99 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a Ff(\241)p Fj(2)-153 5266
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 166.23227 -12.99 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a Fj(1)-153 5266 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 220.21606 -12.47694 ] concat

 pgfs


 -153 5266
a
 0 setgray
 -153 5266 a Ff(\3051)-153 5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 76.0774 -32.32106 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266
a Ff(\305)-153 5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 109.13673 -19.84302 moveto

 109.13673 -39.68607 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 106.70782 -32.80869 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a Fj(0)-153
5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 135.60873 -31.19028 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a Ff(\241)-153 5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 168.66588 -19.84302 moveto

 168.66588 -39.68607 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 166.2381 -32.80869 ] concat

 pgfs


 -153
5266 a
 0 setgray
 -153 5266 a Fj(0)-153 5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 195.14009 -32.32106 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153
5266 a Ff(\305)-153 5266 y


 pgfr

 restore

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 47.61504 -75.38705 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 49.60759 -73.3945 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153
5266 a
 0 setgray
 -153 5266 a -153 5266 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 47.61504 -75.38705 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 49.60759 -73.3945 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266
a -153 5266 a
 0 setgray
 -153 5266 a -153 5266 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 104.71327 -53.79332 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 106.70583 -51.80077 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153
5266 a -153 5266 a
 0 setgray
 -153 5266 a Fj(4)-153 5266 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 104.71327 -53.79332 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 106.70583 -51.80077 ] concat

 pgfs


 -153
5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153 5266 a
 0 setgray
 -153 5266 a Fj(4)-153
5266 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 55.43437 -70.98253 moveto

 98.67314 -53.06723 lineto

 pgfstr

 save

 [0.92378 0.38275 -0.38275 0.92378 98.67314 -53.06725 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 27.59682 154.86748 -75.38705 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 156.86003 -73.31482 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153
5266 a -153 5266 a
 0 setgray
 -153 5266 a Ff(\241)p Fj(2.75)-153
5266 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 27.59682 154.86748 -75.38705 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 156.86003 -73.31482 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153 5266 a
 0 setgray
 -153 5266
a Ff(\241)p Fj(2.75)-153 5266 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 117.42827 -51.73431 moveto

 148.7563 -63.08159 lineto

 pgfstr

 save

 [0.9402 -0.34055 0.34055 0.9402 148.75629 -63.08159 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 226.20248 -47.65628 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 228.19504 -45.66373 ] concat

 pgfs



-153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153 5266 a
 0 setgray
 -153 5266 a -153
5266 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 226.20248 -47.65628 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 228.19504 -45.66373 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153 5266 a
 0 setgray
 -153 5266
a -153 5266 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 186.30136 -62.99704 moveto

 220.16368 -48.9875 lineto

 pgfstr

 save

 [0.924 0.38228 -0.38228 0.924 220.16367 -48.9875 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
1946 5664 9 401 v 0 TeXcolorgray 0 TeXcolorgray 2161
5347 a Fj(\225)p 0 TeXcolorgray 44 w Fg(g)10 b Fj(\()p
Ff(\241)p Fj(2\))k Ff(\306)g Fj(0,)8 b(5)i Ff(\243)g
Fj(\()p Ff(\241)p Fj(2\))2848 5317 y Fe(3)2895 5347 y
Ff(\305)g Fj(0,)e(75)i Ff(\243)g Fj(\()p Ff(\241)p Fj(2\))3332
5317 y Fe(2)3379 5347 y Ff(\241)g Fj(3)g Ff(\243)g Fj(\()p
Ff(\241)p Fj(2\))g Ff(\241)g Fj(1)16 b Ff(\306)e Fj(4)p
0 TeXcolorgray 2161 5447 a(\225)p 0 TeXcolorgray 44 w
Fg(g)c Fj(\(1\))k Ff(\306)g Fj(0,)8 b(5)i Ff(\243)g Fj(1)2684
5416 y Fe(3)2731 5447 y Ff(\305)g Fj(0,)e(75)i Ff(\243)g
Fj(1)3059 5416 y Fe(2)3107 5447 y Ff(\241)g Fj(3)g Ff(\243)g
Fj(1)g Ff(\241)g Fj(1)16 b Ff(\306)f(\241)p Fj(2,)8 b(75)p
0 TeXcolorgray 1930 5895 a(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -163 a Fk(R)o(emarque)14 b(:)k Fj(V)-5 b(oici)17
b(\340)g(quoi)h(r)o(essemble)h(la)e(courbe)g(r)o(epr\351sentative)i(:)p
0 TeXcolorgray 0 TeXcolorgray 996 959 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 229.89821 a add def
/d 0.0 a add neg def /h 122.06221 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 996 959 a 1959
470 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -56.90546 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 113.81097 0.0 -116.08723 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 14.22636 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -113.81097 0.0 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 63.16508 0.0 -58.89713   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 113.81097  0 -116.08723  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -116.08723
 113.81097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-58.89713  def /maxTickline 63.16508  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 63.16508
0.0 -58.89713   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -116.08723 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 63.16508  0 -58.89713  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -58.89713
 63.16508  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-116.08723  def /maxTickline 113.81097  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 14.22636  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 14.22636  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 63.16508
0.0 -58.89713   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -116.08723 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1944 567 a Fe(0)205 b(1)g(2)h(3)-997
b Fc(\241)p Fe(1)-309 b Fc(\241)p Fe(2)g Fc(\241)p Fe(3)f
Fc(\241)p Fe(4)1871 490 y(0)1829 608 y Fc(\241)p Fe(1)1829
726 y Fc(\241)p Fe(2)1829 844 y Fc(\241)p Fe(3)1829 962
y Fc(\241)p Fe(4)1871 372 y(1)1871 253 y(2)1871 135 y(3)1959
470 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.08 def /x1 4.0
def /dx x1 x sub 199 div def /F@pstplot (0.5*x^(3.0)+0.75*x^(2.0)-3.0*x-1.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
14.22636 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 14.22636 mul gt { moveto } {
dup -1.e30 14.22636 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2904 959
a
currentpoint initclip moveto
 2904 959 a -246 1042 a
SDict begin H.S end
 -246 1042 a -246 1042 a
SDict begin 12 H.A end
 -246
1042 a -246 1042 a
SDict begin [/View [/XYZ H.V]/Dest (exo.4) cvn /DEST pdfmark end
 -246 1042 a 0 TeXcolorgray 116 x Fk(Ex)o(er)o(cice)
14 b(4)p 0 TeXcolorgray 42 w Fj(La)j(fonction)i Fg(h)i
Fj(est)d(d\351\002nie)g(sur)1131 1159 y([)1156 1158 y(1;)8
b Ff(\3051)1357 1159 y Fj([)1401 1158 y(par)1660 1358
y Fg(h)t Fj(\()r Fg(x)d Fj(\))15 b Ff(\306)f Fj(\()r
Fg(x)h Ff(\241)10 b Fj(6\))2109 1296 y Ff(p)p 2173 1296
47 5 v 2175 1358 a Fg(x)c Fj(.)-246 1507 y(On)18 b(utilise)h(la)e(for)q
(mule)h(pour)g(la)g(d\351r)q(iv\351e)f(d)n('un)h(produit)g(avec)637
1690 y Fg(u)t Fj(\()r Fg(x)5 b Fj(\))15 b Ff(\306)h Fg(x)f
Ff(\241)10 b Fj(6)884 b(,)h Fg(v)7 b Fj(\()r Fg(x)e Fj(\))14
b Ff(\306)3051 1628 y(p)p 3115 1628 V 3117 1690 a Fg(x)5
b Fj(,)637 1860 y Fg(u)688 1826 y Fc(0)710 1860 y Fj(\()r
Fg(x)g Fj(\))14 b Ff(\306)g Fj(1)984 b(,)885 b Fg(v)2868
1826 y Fc(0)2889 1860 y Fj(\()r Fg(x)5 b Fj(\))14 b Ff(\306)3137
1804 y Fj(1)p 3082 1841 151 5 v 3082 1921 a(2)3122 1863
y Ff(p)p 3186 1863 47 5 v 3188 1921 a Fg(x)3243 1860
y Fj(.)-246 2222 y(On)k(obtient,)g(pour)g(tout)i Fg(x)f
Ff(2)629 2223 y Fj([)654 2222 y(1;)8 b Ff(\3051)855 2223
y Fj([)913 2222 y(:)1389 2405 y Fg(h)1439 2370 y Fc(0)1461
2405 y Fj(\()r Fg(x)d Fj(\))14 b Ff(\306)g Fg(u)1695
2370 y Fc(0)1717 2405 y Fj(\()r Fg(x)5 b Fj(\))10 b Ff(\243)i
Fg(v)7 b Fj(\()r Fg(x)e Fj(\))10 b Ff(\305)g Fg(u)t Fj(\()r
Fg(x)5 b Fj(\))10 b Ff(\243)i Fg(v)2389 2370 y Fc(0)2411
2405 y Fj(\()r Fg(x)5 b Fj(\))1575 2575 y Ff(\306)14
b Fj(1)c Ff(\243)1759 2513 y(p)p 1824 2513 V 1826 2575
a Fg(x)15 b Ff(\305)10 b Fj(\()r Fg(x)15 b Ff(\241)10
b Fj(6\))g Ff(\243)2301 2519 y Fj(1)p 2246 2556 151 5
v 2246 2636 a(2)2286 2578 y Ff(p)p 2350 2578 47 5 v 2352
2636 a Fg(x)1575 2807 y Ff(\306)1654 2693 y(p)p 1718
2693 V 1720 2751 a Fg(x)16 b Ff(\243)10 b Fj(2)1880 2693
y Ff(p)p 1944 2693 V 1946 2751 a Fg(x)p 1654 2788 336
5 v 1747 2868 a Fj(2)1787 2810 y Ff(p)p 1851 2810 47
5 v 1853 2868 a Fg(x)2010 2807 y Ff(\305)2087 2751 y
Fg(x)15 b Ff(\241)10 b Fj(6)p 2085 2788 163 5 v 2091
2868 a(2)2131 2810 y Ff(p)p 2195 2810 47 5 v 2197 2868
a Fg(x)1575 3024 y Ff(\306)1686 2968 y Fj(2)r Fg(x)p
1654 3005 151 5 v 1654 3085 a Fj(2)1694 3027 y Ff(p)p
1758 3027 47 5 v 1760 3085 a Fg(x)1825 3024 y Ff(\305)1902
2968 y Fg(x)15 b Ff(\241)10 b Fj(6)p 1900 3005 163 5
v 1906 3085 a(2)1946 3027 y Ff(p)p 2010 3027 47 5 v 2012
3085 a Fg(x)1575 3241 y Ff(\306)1654 3184 y Fj(3)r Fg(x)15
b Ff(\241)10 b Fj(6)p 1654 3221 203 5 v 1680 3301 a(2)1720
3243 y Ff(p)p 1785 3243 47 5 v 1787 3301 a Fg(x)1867
3241 y Fj(.)p 0 TeXcolorgray -76 3515 a(\225)p 0 TeXcolorgray
42 w(On)17 b(r\351sout)h(r)o(apidement)h(:)1438 3648
y(3)r Fg(x)c Ff(\241)10 b Fj(6)16 b Ff(\306)e Fj(0)29
b Ff(\()-12 b(\))29 b Fj(3)r Fg(x)20 b Ff(\306)14 b Fj(6)29
b Ff(\()-12 b(\))31 b Fg(x)20 b Ff(\306)2510 3591 y Fj(6)p
2510 3628 41 5 v 2510 3705 a(3)2575 3648 y Ff(\306)14
b Fj(2.)p 0 TeXcolorgray -76 3849 a(\225)p 0 TeXcolorgray
42 w(Dans)i(3)r Fg(x)f Ff(\241)10 b Fj(6,)22 b Fg(a)c
Ff(\306)c Fj(3)j Ff(\251)h Fj(,)f(donc)45 b Ff(\241)17
b Fa(\036)h Ff(\305)p 925 3766 262 4 v 925 3891 4 127
v 1183 3891 V 925 3893 262 4 v 0 TeXcolorgray -76 3968
a Fj(\225)p 0 TeXcolorgray 42 w(2)37 3910 y Ff(p)p 101
3910 47 5 v 103 3968 a Fg(x)k Fj(est)c(str)q(ictement)h(positif)g(pour)
f(tout)i Fg(x)g Ff(2)1396 3969 y Fj([)1422 3968 y(1;)8
b Ff(\3051)1623 3969 y Fj([)1657 3968 y(.)-246 4117 y(On)18
b(a)f(donc)g(le)g(tableau)h(:)p 0 TeXcolorgray 0 TeXcolorgray
-19 4285 a

 -19 4285 a -19 4285 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -13.56602 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285
a 168 w Fg(x)-19 4285 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -37.04672 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285 a 85 w Fj(3)r
Fg(x)h Ff(\241)13 b Fj(6)-19 4285 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -59.78375 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285
a 114 w Fj(2)135 4227 y Ff(p)p 199 4227 47 5 v 201 4285
a Fg(x)-19 4285 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -82.53096 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285 a 99 w Fg(h)130
4255 y Fc(0)160 4286 y Fj(\()189 4285 y Fg(x)233 4286
y Fj(\))-19 4285 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -116.1969 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285 a 110 w Fg(h)149
4286 y Fj(\()178 4285 y Fg(x)222 4286 y Fj(\))-19 4285
y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -22.6787 moveto

 204.10854 -22.6787 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -45.35742 moveto

 204.10854 -45.35742 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -68.03616 moveto

 204.10854 -68.03616 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -90.71487 moveto

 204.10854 -90.71487 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -136.07234 moveto

 204.10854 -136.07234 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -136.07234 lineto

 204.10854 -136.07234 lineto

 204.10854 0.0 lineto

 closepath

 204.10854 -136.07234 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -136.07234 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 54.26411 -14.40787 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285 a Fj(1)-19 4285 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.29675 -14.40787 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19
4285 a Fj(2)-19 4285 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 184.78508 -13.89479 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285 a Ff(\3051)-19
4285 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -35.44627 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285 a Ff(\241)-19 4285 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -22.6787 moveto

 124.73297 -45.35742 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -37.06345 ] concat

 pgfs


 -19 4285
a
 0 setgray
 -19 4285 a Fj(0)-19 4285 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -36.57706 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285 a Ff(\305)-19
4285 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -59.2582 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285 a Ff(\305)-19 4285 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -59.2582 ] concat

 pgfs


 -19 4285
a
 0 setgray
 -19 4285 a Ff(\305)-19 4285 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -80.80852 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285 a
Ff(\241)-19 4285 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -68.03616 moveto

 124.73297 -90.71487 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -82.4233 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285 a Fj(0)-19 4285
y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -81.9393 ] concat

 pgfs


 -19 4285 a
 0 setgray
 -19 4285 a Ff(\305)-19 4285 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 15.44226 48.97566 -104.87193 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 50.96822 -102.82957 ] concat

 pgfs


 -19 4285 a
 /pgfsc{}def/pgffc{}def

-19 4285 a -19 4285 a
 0 setgray
 -19 4285 a Ff(\241)p Fj(5)-19 4285
y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 15.44226 48.97566 -104.87193 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 50.96822 -102.82957 ] concat

 pgfs


 -19 4285 a
 /pgfsc{}def/pgffc{}def
 -19 4285 a -19 4285 a
 0 setgray
 -19 4285 a Ff(\241)p
Fj(5)-19 4285 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 13.83826 27.93555 110.7652 -132.08723 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 112.75775 -129.09691 ] concat

 pgfs


 -19 4285 a
 /pgfsc{}def/pgffc{}def
 -19 4285 a -19 4285 a
 0 setgray
 -19
4285 a Ff(\241)p Fj(4)76 4220 y Ff(p)p 140 4220 41 5
v 65 x Fj(2)-19 4285 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 13.83826 27.93555 110.7652 -132.08723 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 112.75775 -129.09691 ] concat

 pgfs


 -19 4285 a
 /pgfsc{}def/pgffc{}def
 -19 4285 a -19 4285
a
 0 setgray
 -19 4285 a Ff(\241)p Fj(4)76 4220 y Ff(p)p 140 4220
41 5 v 65 x Fj(2)-19 4285 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 68.28064 -104.11165 moveto

 104.67169 -117.69301 lineto

 pgfstr

 save

 [0.93683 -0.34961 0.34961 0.93683 104.67169 -117.693 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 190.77661 -98.68509 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 192.76917 -96.69254 ] concat

 pgfs



-19 4285 a
 /pgfsc{}def/pgffc{}def
 -19 4285 a -19 4285 a
 0 setgray
 -19 4285 a -19 4285
a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 190.77661 -98.68509 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 192.76917 -96.69254 ] concat

 pgfs


 -19 4285 a
 /pgfsc{}def/pgffc{}def
 -19 4285 a -19 4285 a
 0 setgray
 -19 4285 a -19 4285
a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 142.5386 -117.72867 moveto

 184.7506 -100.0574 lineto

 pgfstr

 save

 [0.9224 0.38612 -0.38612 0.9224 184.75058 -100.0574 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 1946 5438
9 1155 v 0 TeXcolorgray 0 TeXcolorgray 2161 4366 a Fj(\225)p
0 TeXcolorgray 42 w Fg(h)t Fj(\(1\))i Ff(\306)f Fj(\(1)c
Ff(\241)g Fj(6\))g Ff(\243)2746 4301 y(p)p 2810 4301
41 5 v 65 x Fj(1)15 b Ff(\306)f(\241)p Fj(5)c Ff(\243)g
Fj(1)16 b Ff(\306)e(\241)p Fj(5)k(;)p 0 TeXcolorgray
2161 4466 a(\225)p 0 TeXcolorgray 42 w Fg(h)t Fj(\(2\))d
Ff(\306)f Fj(\(2)c Ff(\241)g Fj(6\))g Ff(\243)2746 4401
y(p)p 2810 4401 V 65 x Fj(2)15 b Ff(\306)f(\241)p Fj(4)3029
4401 y Ff(p)p 3093 4401 V 65 x Fj(2)q(.)p 0 TeXcolorgray
1930 5895 a(4)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
