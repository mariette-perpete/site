%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: CorrigesTerminale.dvi
%%CreationDate: Fri Sep  6 15:05:11 2024
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold Fourier-Math-Letters-Italic
%%+ Utopia-Italic Fourier-Math-Symbols Fourier-Math-BlackBoard LINE10
%%+ EURM10 Fourier-Math-Letters Fourier-Math-Extension Fourier-Math-Cal
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o CorrigesTerminale.ps
%+ CorrigesTerminale.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2024.09.06:1705
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F607E0F7863C43D7F6A91917EBD66730DBD642DAB8769849
47384FFFB4994ECF216FFA8140397695EE5AD63F1156720A01BBFB15AA24FDB8
2F2A8F541C7FC860E03F5E4DE80BCF6891263C142159D5879CA0A1883A9B6C50
CBDA9CF0C97E761E354C39527F070E680B42E6732896B10E6A7600184B156ACF
57BD9A98F613FC166F47C3D1C4E5E02BAB648D74B078EE3F0D8148D981451BD3
918C71284E6154BEDF8D66BA1261A7459F64F133445F9BE19A2B8DB77722B4BC
7CE51A6004362D6B0DC62CBBF70A069C53B682FE26B34CE16CAEEC0DE8C53BE4
DCF4CC48B04D6F6E6EDF07FAA75EB2DD9483FF65455FACBB4CD279721E852D63
33EB1DE80F1DD1408BC91BEA00E3D7C9121DAAD9A62E705B6DD2AAA6452B7A38
14DB40B124C8448D5300BB08D982B2D8DB1A6AC943BD077932E330CB226F6720
890E2178AEE43426A07F5953480AD26475AE504F80EEEFF55CC6B4C7F57B854F
2A2925AB5B3DE156DEE119BF480DF0C55A5446AE79ABEBC97B88E95260E9C898
AF9BDC3D07EB118AE510A5A4B1895CBC66B7C01366ED9033081FE5A2F5462431
6B5F26BF0BBCAE90AEA391E27D68B61D026F0258A0214124A76F939AA87DE46C
2FF078B2D9C098C5A842FD5FFC4386A7C0B1DB9071B22082A3EB22E3422EBA76
88474F316932835519C40FD55C952243134FA0A73749CD7157D4F9FD0EF0E46F
1EE3BFAEF1FAB900AD2B413DABF18F439DF3DA989F807C79D170DE44B561BDBA
CC594B3357CD0A4257311CB54849FE61934F7F4E8E90B0671B5EBFBBF67FF83A
5661CD2AE2ABCAA2E370BF5CFC1EE11AD6433FD42EB69668A508FBAF96C83258
74680134C2470B9811A0F51294C6DE9C02A7C519BCE1182B5E1C0542A01A76A2
B682699067D72DE3554498DDB4EB028C26D540947616915EE191672767E236BE
27B3B746851CED84D33E5DCC21D16735658577E3124C3A28A2B740DC2E257888
7CBFC1EE153B96BAAED95649F42BA00461E8A7DD297424BD356EA9DD088FE3F6
1360797BD98C9EB73D6971972FD93DBD3F12E38D52DA4A4FB28E8DAB6E1D5AE0
F672BEC2972DDD7924BA79A4A237EC783134B6EF54857375646D4AD48D6DB4E1
F9EE2F373E44D164D0D93532F711C9D8A08DC27A3B771F3E059BCD0C4BE3B348
42AFC2F3BFE07548919412D6FED8F96E214F085C3CB1A9A3A6C4A1F6DF622880
EB4A142B1C3EFC4DCAF1853415BDE2FEC6B85D60691E8863F3D741C75D36E9CE
798354CD923E9C91A2A5804AB8F7A4EAC23087AA1B0D3E5ACE87AC1F233E8A6C
43D570A73BFCF8EF454A0A41DE886C3AA6D9B59401717B9D33A0B74C3F9A50B9
74001D025A1987DDC25E7005EED3798EDA35F63939C1A16FC5AB991AE172BC18
AA67210B736C41B969AE6A4D83FAAAA64996625F6FAD6A231A68D1EF86E7D898
C921BFE7C68E3434BA3A8113C5F886C67C38765D8FF2E7411B84578A45EA1B9E
3DA05C541E149D78F366DFC17C4837CF87D4425A6DAFC7E0EEFDEEA02FF46DDA
38385B3EDAE044FDCC9EB9BE940E05C73DE2FF1913DB07C21866357D5966DC7B
5D01FFF15E7A610CA183B1D1549986EDC522C73846DF74E0240022E43BAAC642
E7199EB0FE8BB161C5CF7954D408A64A560A0EE40869A97D7A27CBD0B493367C
1BAB3BF2EE7AB6BE273B39B9B4CE681A26313CA8330443699DD44EB86047BEF3
E65215533E6A119B0E7CAEA382D8EBA66BA1C4FE593F29F665CAAD81B406E072
99F792A4C0978211C0CA7FBB47D2C3A8E4271A9098113FDEB96C513E0ED96F48
9B4C8BF80A78F5D033D38B24794111BC170D2ECA5A8A5D7CC64BDEF45D1190C8
9A39F8A8D5F2D5B9CBFFD71977B9ECDA178687006111B9B71B765BAFD4E44673
A5498FA00390ACAC952FA6F3AA8D18EB165EBE1CDD7F98A82465238F3B80A0E3
94F293517DB3DBCF20537925C1F2F1662E5EA3CB35947A74330280B26EC33114
CCADB5C194A218EB1413756A789F91312116A098841B285797C4C72B4779E4C5
A590CFEC4DAD2CAB9955D106717FA73ECA9D10D8652A2FDB83830ED3C6B0FD77
7C3D186614F45671DAA23F5963FDEC2E33BFFFC49FBCE2E1C170552837B1FF9D
7CF366B627B992CD3CE74980B7A939438753833B01FBC5863142453671FF2667
0C50DF969F3B5AC5DC4943C1B4681BBE37379EE45F16052C290B09140EC2292F
766B7C6A9B3D90DE7D27CAD84774706463C001E91064D52A3B53A79A62F3B868
8F3B43E35DFDF3E5638CB9DF7A59305DD3F7152F662C3D7E4823B3E51C530A11
1B7A6E3F903D804B75013A692E04E17D8EED669753D65FAD019B55099BD0B45F
FA231163EE81936757A0EC7939A1797019CD90C608D2309CF4D92F1E3379E1A8
6B004BAC5C0B20E59B1AF055B1D696E4367A472AD2E9982AC787D23674197E57
A9BF2178D252686B8EE21BCC4BA385DE0668C054081D52170BDA2A084A0A73CF
7B748E0DCA7FB1F8D17C0E2BBB48A0C8CB5CA1A09501005212B8D045ED02CF79
4D2044E9B8DE4F8BE2E12445530F42243FADF504FF7BC17537317509B5561A12
3233B7F0C82D7703BEB6796F0958AC31B011E3547453B32D6E26AE354263C088
3C4D23FBADF96FB15EDDF1F1AABDF27F8F1056727E48614073130652CC807452
88EBFA21BBC853934BFB6951DEDC465DE55D8B73CC74C156B9B4EA30F6FF357E
8B410065D48AE23DD21EEEF2002FBF9F21B73A951B8EF5B6F38C24FB3668C231
EF31A4E7A39AB615F95A640E00CE56B5FCC4F09721BD57F1E5AD91E177960244
C5C6B7B5B214A96AFBA73D0C4E9DF81B2CFB5DC879F694D7ABE1C78064A19168
4EE30D969A12842CBB518D7EF67B140F2161AC70A00E7984B464ADF3E2E8CBAD
7C41A918DB600D061DA9C6E5800007FE0AB4DB544024D535463839224000F2CC
36B34E57EB49CEDEF6E01D909407C93601C996C809B5CCE6901F2861A9BFA0C1
FB605EBCF3DA74444A9F6190D2CE0DA3F60DA74C643821699DB3A60BD3E720E4
A39F2EB93BEA65A07AA6EF1D23B50C2B3B29882139C2CB3A80551B9C4F07DE85
41F2833D1A95279D9771E50F7CB60BE218C2B93FC881006243E3E8288B4E500D
CE4DB3D39F024AA5C37BAE313990D5184102341ECB3E882171A60B63613DA7C1
08DB15C1B9B9D8755ED03D7C400B0E07265570EA404F5202B8BC39F53DD1EFD9
C815BC5AC6069E371FDBB88E16675E31F93E99FA0E869A4AACD81A6480467C07
950623603F7AAF697D0399FA72BD2941B3FCD5A16711C7658A59C94BA7FF5005
D61B2963F743EA94C27BDE3F0661DD7CD6C2A765E71C9D0867043566AC790A8A
3FDBF8F1AF4FEDF845F1BB55E3D3B5274739047A2E2837A23DAE2785EA965834
C8148664D6B446A8D655672F22685F9C4EBD337BC8C44E652068FD1DB8832015
44DC7A39520B0DF4AEB6AE1EED2A60C6C7AAC6755FCC82AB3D1E36FE530BC044
1E0D0677CD16D0EB243F926513AF92A7FAEAC061B2C0E2E6DD2FEE9F230345D4
D0841D491AE0F7E6694AD1DE58FC6F22A3F7DFFEDB3327B949ADEFF0445C53FD
00F8E2C46B4CA55E0FD41B45FA21B954674C4E262CD6044C17E29F915A6566B5
824B751DAC4CA5314CDC9724B738DEB7E4315086C4DFFB40EED36C66491A211A
24D9C5667931FF39DA9FF8D2E381AB307A8CB3665AF8A5A7A945AB72B1BC672F
962C18EFFC6774C430939CEF9EFB34C305B5D346F644A39581BD6B5563B3A0FE
97C127E568F01440F69D90DB978A395C56E86E5AE79F74B1FA23AF490AF11A16
1500E15ADA370FE36D559E4FAEEC10723C4D0CB0676DDA7A420EDC04D80C5DA6
F156B6D37EB6951CA96E951AC82C2D475C0FF63C8A17637B9F42015EA0E53E59
2C5D30B09D977E32CCDC0E99104C4095D30C2F804965CBA5ACCD6A327AFCA6D3
D0EB70921389F4BFD3C5CB53AAB37656B54DC757EB0D80C2E66069AA031FB0BC
61C7A262A650EEE33F12C2AD00A37A4B7E632424F98BF1D9F6D9CE2E7B2B310E
2C617868D4FF7F5D71A1206B2E905C14979D53F052FEACDBDE4F8DA06211DE16
3DD6384503D8020CD263D35DF4BD8397DDE230434D411596161034B09F44B755
964FE0434EB9ABBB5AFC1D04E67EBD50DC53426FA0859E11A2A7C612D1ED26A0
CF2196C827C6108722EB694244F640E90024F331FE72D5328776F8B18AE468DE
7EB5DF7DE7BA0CB091D4575FAFAB1D5780045579271E52EE64D6D274860C3BF8
80EE09F99ADA972B1EF37A6A0AFB268ED0AD98E9E8AADB3B4EEC2651C521E65A
9BD16BB36D7EE450BC57C3F22F5F307729339B6F33F62B31CCCAF94DD12B4996
D2B04C92757F900B4A3D12D749F5BAD28147DAC67E8A0768758642CC9EACFF56
41827219F24544F83FFE202A31A235CFC386D32BE793EE5B7F4671122F21CCAE
0FACA78A9D1237B30318C67B6E2D7A8C97E9EAE1FD71A5844B365101A04E8AC7
88B282185F484C41B05AED0C46468A6171AD2FF3F7615C6AF2B83590B2F19E2A
B9AA33458572880F45680B6551283D153D8785EFC4A878B80D770DC57326BAB8
CC35AFF83A7BFEF98C60E797C1BB70A5556C01070F67D832FD290A6EC9B96A21
D64DA4F92470860BB7274938F9ECC8E5E4F93B5470843F85B06B695197A52927
0B525DB06AC0C9283124FE60C9C035979AF5B35EB9C62843B4E0E181793AE4F0
B9542127C8D829C45AA9976CABB8D2D9ACFB3082AB0165E303B649EBC4256827
6571E8BAAC625020B56DA1BEA9494A20B9206B57A0A35C4C8596AD1070F88ABC
ACF349EDCE3EF15B811E4F136848BFD3D03431FA13B33040CC4BB93B61420F55
3FB24087CD57016BD78E48AF85B3E30DA2CFA6C9203DF2ED2DF2AEF4DD99DD79
DA92442FF7AF9B7CF71ACC9470291870838F4ABD35494B95E7922F32183D30CE
80C424CB1A9889DAF8A3F4E16FFA2B435075E5818862B9482168509FBBD85CE0
BE9D5F10B482611F21DC0446A24905B1E7DFD42DDB25F1A7DB9D5A0C99849375
721D341AFCCC468011824B5503F0579FD30504A2F8002B1B21F6246BA012FA35
D7DC4856501D8F993C87F2C75BE5CF6C2522C96DD6233BB7ECE6BCD783C1E204
1480F4E7789EF9899D307CD97AC626B530E08C4AF6C4535F0867405783A94C99
CB62132420A374051DF40971A310AF0867C9AFE0F00B55565A2907C704167F82
DAB6DB280E5CC38793AFA40CC1F1306D865C491EADBE137FF13443464463D9E3
33E1FA743DBC3E11E2D6A1B705CC49DC25115E6B27BA910C94624EFFE6B1E94F
2F631141554C3A89C1F677D39D285D38E74A9B7603A531ADDAA4018FBDB60E72
5DE68BD62783960780B3240677F64889D703C9889AA3076380885F9C357433A8
71E3F0B4BC352780680A8427A3921472ECF6A74E7DD3F9F90AE53ED843522035
CDF48881C06314B934A4C960053AD6CCE9481C645BDE31536E9087CCA80922B7
5E7EF41A490669E4DB5960527A3DC4DBE01383A1569DE0120628C38006D5775A
2DFF5999A8A0A26A2E9041682E2C574F5D721319C6ACEE7552736029B3B36ECA
F512EEA86DB5213693F92739A73F7CCD644078A37FAC420C79470CF5A4EB26BE
C9CA2049211DFC55218B63E2A340A832D2EDCB455AF0715C86542212B8548A7C
45FE191989AB9527D79FBF1E9DD09B987DEC1E8738CCA25A1AA4E7CF22BBFBB9
B81E57DA1D71486EA9D2299BF3A86E04D180F63197B8191D0892898AD3953256
B49F0AC1BC2D08A9BA7C5774CF4579CD57B74F4D4C6C11BB7D04BD4B3C05668B
B381B842EA2ECA72E2EFD7ECA37A7885395650C8CBB7109522E54DB9EE2DD1D4
0D2DE555EC61CBCB57466803DF558672D323718C72973A194477E4CBF2F634AE
7A1D21B66011C6813D4C5EE7900ECFF4964CCA001B312141BA5E41B5BA06E192
A9F4B6F1078E0B95C4224EB4174D1BD9126BAEBC8F8C5847C73B333FA0192B01
7D5D1A531709D0C336E8DC5FA8DDD0B688649DCFCEFD969C4838B94D02F5619D
708489D18F4406A6B0B1DF3BF39DBFE5034F8849C7CDE03A2670DD71D93F9691
0C918FAD8DCADBE15249A2E24D1F896E03A0A117C1419DCB6B366370BA0D98CB
5CACEE7566BC6A6956477E8B4FE96D04B6E9D317CCEEFCC170477C1F9FA4153F
56EAE2C50ED4DC55DF0B2328E1CCF362F90A0A80260CFD404204BBCE6F2ED8F4
25505D72EC8C4395241C79D76278604A4001C41EA76B9E72C238AC1A373333B6
BCE260A08980D4F6091D33CCC890ED13D504E6BA0701933C63DFD34DE8C79DE7
C9AF3BC9A0DFA23EE1A41E73A4A2B6C88E25B46B2BC1FB8F2C872D87E0D062B6
330B972958328E376BC38ACEC1F3F4AEEF2B4BCDF40EF7C7866BA9DCCEA13CEC
8D7CED4CFFE889A94734D2F80488457D1080A7D65C6F7015384EFE20C74B8424
1A7F524988FB61E7D5125EDFFF1F486B78D68E217DE2197E5C96CCFE0B3871B5
681C223F493D0FA5B582009507CA193E42D65547DF0967A9DA37A6E22E4EE2E5
F3F0D68FEB43948F1B79DCA8B54B457DF7CA71D121B94CEBA1AB9B4E5FFDE1D1
885514E2A50938B0ED97AFF68EE134690A4FB45EB8EAEFEFB6AA49B0045B92A3
2531A2AF236886E20060DE72E0CF1737997A5F8CE5847F75C8DB98963EDBD87F
228AD470701B3F8C61BAA39B0BE3EBC46C10372F8406C35173ADA1039BA22A2D
2F35F21580735B6A5D49ABEEAD5264A001507C04521B40E3A348F9ACEF3895D4
7619537388ED4253089649CC99F4251FBE773CBC3D5940B02F9EF74CD4B4BA6D
43CC3E658176D7D7655255F4D58441CAD95A2B7A44BFA0403861B1434E2BF94A
98902E60B0413EF195DB30A39372A4D4CC2D8E03373577B6D28D84AB3481D796
1700E32B7AA829A4C185B878B8000CFC63A7179906CEACFCF0BD2EC8AF34B16B
23EDEDACB086344F83FA0B7612CB59CF6B2E2AD3FAB240725023D5BA3A98FE72
2343CC30FEC15C4A10CFBE8D099CB33DEBE5B192893691CA08049A61EB74E6D3
4511D35438C802FC77FECDE81DC74C9B2ADE092680B141B9AFD2F9DD4BA03DB0
42C526BFC2502D337D14A87A4EB9E63BE5CE2F86C21367C1C8F2F6DAAFA24CA6
E4C6928D836F4D574643BFB100CCA5483D3A1193300C1A6E25FE59276A433372
78F5568A8D9E0E116FF8AD54D20B08B89B8E77CAA460C862DD34E1A0E1CD6566
7EAE5CEDA8E167E0120969B233F3D79F9225E9BEAFAA1CE8A5BACE82001D4AFF
260C6712BC3C739279C4E93DF661AE82DB7EC789F3771500BCAF4C0C589D604A
E446612C37B6AD9F909A5EECF0494FFED177CFD3E75E115E3D4A300007A92170
D574AAF663A9E432B9CB2998583027062E32065147F57FDDEE871078D5D183D4
CE2EEB1F75EB3A99BA6BAEB30CA2D8F15D8B6F4321C07CABE05E4B8059900873
1D3B2661AEE79EC3C1CA0BDA0FBC55BD70A25510277B9B4E461E660177F03486
8B71DA3251F558BEE775E19081C900B82055F3AEF7B3423A1728DA3DC9A63A2C
7CB83563057E128C4F4DA3C41ACD50F52CF415310A1FDD50829272BF7694371A
A624B5450B5BF48BD15CE9C1913C2AE7E003AEC27DCC2FE096C5515BD386DC20
9880CB1E4463CB90EE54BAC37AF9DC61763D56A8796FD9B2F92A23E25B6B274F
941226ABAD874BC9DD97E06A4B2E4116C45D790984A6E45C06BDF51CF409245E
622D47714FCAAE24DE53C274D9BC10053DFECF6814C3A90F49453AEF271C01D1
6A082309133A72D232DC599B7A3F3F6A50734BEDBF87194CE2751F5FE1DEF888
6BFE24E860B288CA4D12F0C604165087D14FC8A1A22855AF1F74050C73B7D0DE
8A9BA94388009CBA7143131E9EF7C135F3D08BB24CDC6818D9F6DDABC8F9C034
A265FB40962D0954A723B0D4ECC445B57D1EBA4F95D1760DEA1116CEE9E71A12
00A29490E16EB410AC02FC7722B39E5C676C2FFACCB6239BF7D67F61002EA275
9E35CA8439009C2ED36A33E97F6D285642BE31A8B0C021846CE30F86BA509504
5ABA796055A9DF7A5BB9EE5D9FEB0AF8CCE45B9ACB7650520DA0DAA6E9595046
40ED60AABD190E830430FBFAFECF1A16E110BD5B2B127B58E59DBDAC801F55A9
751A28CD81F314738808D70DB7F98185EF1FB1B3856C4A80F4ED4CC24FC04372
37A8521ACF693A98ED00A4166BCCC5983673A80D0C5239C09BAA9B0620A5F8BB
070D16A47CCD4017C15435D66577C3B13308E3EE9010DAF1BABE9566F99806BA
0AB0FA53FE6F2AD57FEFC2BC985FD6D82065B9C58CE632186CC7F5C583800E4F
53419F888D863C49E180781F68652D627AC788C2C48FD775CDCD047C411FAB34
8BE3FD59A379CF0B02A5492BEA01CB10E1C1B41B3B7B7A522D011801FBD17483
437A63D07F3308046B88C34FD0A1137E546B2517985F5A224284CB2290D99B34
20287CA6D552A59AFD1AC415F5A9A3AEAED0D73162CAB5DDA10D7C079FB59232
8AC9F57904BFD05A4E26D42E7B65AC7AEE90F52A3E7776D1C7D55D9809FDF190
919313644D049517E9507AAD302EE80F1D919CEF658DD1A4DBC4DA5116534450
FC538A0EA2E76E2D766105E7EE951DCD995F88F687BA2FFF1155EDDEC8275667
72F45B13E419E46E2E8D10F4AF6C452A75E81C6F2BBEFFD696A018AA25CFC778
889B8F5903BE006B47546AE7BBC1D8C1576210864259700171C639159A14860D
1631D21090480C82F2BB97BD421CB48627A2B65C1EB2744CFF9AEA2F6697EC6E
8DC1FCD37EE773B8CD0C08DACE9B64CA3BFB4DBF12A7584FFEE74A5A333E787C
2C057B0DDFB45FCCB487FDEBB3F2F677EED0134E6E528EC99BD9257DD9084F9B
0F4286B179E217C3BA758316044F4667C0995E54B3E9C3C40F2D73104620FE9A
AEC1BF7914BE031188C0BBAE61AE6DC485373A9C15E532BFF8E27D4B19DBBAB7
48490AB3DDAAA7EC8501B347640F7A0ABF1A4D6A11D8C2D7DB41568683FC5D3A
2ACB8AB0EFBDEF3770DD4F193A3CC5C8BB1A4E06D488C96B651AD7FD80C9184F
99AA273579B165C2C163CD6FFF2822CB297873C16A4CA2BE0C848DCF1A994E99
B643BA6972A4585183578CC350251B767C3C170374655A7AE622310EEC768350
919E6C0DF82300C96FED2094634B8553B268174A661C774B555EEF08BC5570B7
F4681D3C427AC650BB6138C7B9F98791191B962D64DD245A2E414CFF01F3EF4A
B060ACA7C3F2E98CF53AF1B5E8F85B5163955EB7788EF33DFF281769A7A92D14
58F72E409D882EF5183BCD53BB9BCA3C84239CB729AD51EF07FAC26C11FAFA4F
77631670CF894D4A17700F4D694987D9A8FFE3FC1FE8AC7A6252ABC9A5FB1606
86CC70B69BEF7F4EE09C574AC1C3D5812793A7C6A1F2A478CF635C4EEEA88538
3D18A235D5FED2141242589D072321AA927435FE2D25B1ED563C24BCBCC95E85
8949D37A6073789C3C32B266A48D168A49FE2896541CBFD6764B953CC4410F8E
ECA36492581BFD622119B7C44C7D5F5944D397194B2E1A6F69B709385B88D9E5
BDBF54631BAC2A829FA69B8F87FB925D4E8869D9BF43DB5CDEFB36CF7031E163
9BEB4A399AD3824099C0CC247210E75076DB3DC6C33DEBA8AE14D956CCA4CDD6
3CE4EAEBD2D46F72B68B143D124AD0A3FCAF8B64E021E5B70AB4D8CB29CD230C
37D3DA0A592D1C0A3D88BBC0CA2AB40F3AACF5744457EC281AB2A605D1E8B6AD
A1B48D397098696008836909EB94DB9F106E2FC611CE387BC98312871FD28468
BFD4E495F8B3A4749B270E6F7BB58208CB23662151FB0352F7ACA0BBD815AEB7
A4DD36352BEEFD6F0B32E15BFE739DB818BECD829ACB6C0FA38C2194EFBE73BB
A5CB7123E73258C29E57B94CFFF3EECEE98DB8E6D1C524244CC3B1CFCBFE3FFE
E6F3867BF79276E4396309C19D57FBC3056E774ED9BA7FBDADA30EC26A85E70A
D208F6C5191FBFA4FF4E6111CEE2EA593E7D2CB41057CAFB3AE67900F013A999
7BA9D4DC30D73EDB6CC19A6F3D3735AADE956BD00E2F2C5C98A566435B9943F2
B3B34CE47C477208DBC8B4CB010C0044BF26F9714A684381EEBF0FB695968E32
C22E4F240B048DBB6B3E9EC2C951DBE9D1202AA64278D56B44779BD6DC5125BB
B11A85A7CFF5E25DE96371169A5CE55D51A68EAC81D8A8014794FF7E4F0188A9
A466462638DFAA41C890F2C9515017BAB35DE03CB9CF4534C3EA43FB8C173A7E
AD30515B41D47C520180CB43EC1C3D54B80AD13C0DEE8FEC454E0F55204FB97C
77C9B1866F5AA9F05DF751A861565EC45A9E731920A368A3F47905FFB9324B91
BFD99089E727942D44DDAA229509790FD78D5C08D96D7E312327263012F9F28B
53A56CA5C3B31DDDD0176C22E67E59C7F488E6908AB440B60217981D5F4840F8
BD0B8CF4CAD765B385AF976EF328D6E8C7C46651D99C9B738ACD0A82B151791C
C351724CC7DEE5F76DF95FFB14E4689727385DBF15029FF770A212A9D816D301
2B80AE48D82FF078B00956F5E9D0D84CC312AE5B99CA89CE44379C031C3F363D
C5E2DB69636F31A96CA9C1D65D01D4340A4E0B10FE5AE18C2A4335D79C7588C7
3A772388B120C0F8775E50D00488353ADEE04E8BAF2BFDA211BEBF0C980A5B7D
93D6954B0ED6EF8468BAF4D699D276EFD8D043B0EFC66BBB02546DA4F0E836DC
2FF2BB04C0D2906250C3B0C3EC1B3387BF794ED8CFF93ABD9573892878ECF380
1E5C2673FE52EF686CED5698E3D6ECE62CD758FEADFCD01A6F27726E14F87CFB
D6DA80780B7F35F21EC61DD5A4699A1EAC331FCE0C315723B65F76E27CEDF45D
8D716D62A2A9C88F46110EAB9D6B6B0B0975450F08D31B534154533DC7F7D760
1B4A35293BF2D0B7C62123A8AA468881BE8022F67FB4AE0632E23DB37BE433F9
8104E39C91A04101CE4C60B5070413E5435DB3953E0E64E05716492A504CF2A1
8F865240E873883437ADC1F14999A54BC260662DC40475CC3DA7EA0AFC65ACB4
E08916E879A232B7A7E7F11898B3E580BC4844006175EBDF306EDB6319D2894C
3EDA11B6ECB8EB6AC6B7EA67D0536CA1FE668146E6B0FD2F50F275C5EE5FC6A2
0E3D2143973BAA383357F6794E4F864A6D3B0E68492C4AF9A62F7A0EB824B647
B4E462D493FD69376EB49D654039F3BFDA839413F29F45071331080D55C32039
08C0E97AE8BE10804B8E6241A8CD0B56284A8B6E1F5151D7118F15514B70BD66
A515E3276174C088A5EA75D82BCE4EB9C95242E5470B1B5CB3401B00C371C1CF
1B61D6044A38B36381B3AE7BB46B99FF7EB5A12317B149BF072313D6C2012FDE
B535C54BC97C3F7042A44273540F02ECD6B4C39FC05B76A47DA0C8A09B0C4259
37026495F4C1DE9AF44BFA0E1ED0AF04FC6351C6BA9E9542715E1E52C7D83201
14BF4C8CDB7C15FEA1E28BF287023B50182255C6BCE7E93956EBF956C86E4729
7529552A5BB55CBEF86050FE6F4F883638BBA025067980736F1E647BA04A6FA3
5AA33B5B047A6170E268F1D4B5CE7F3BD3622ACE521DC2DB4C4C55C966825BF2
EB02912DD5FAC01CA06FC1ABCBFBA386AF16D4A1F07E63F4E553011252D85B2A
2224FC3BCD9ED01F42EA1DCCC49D20965F7FF7BFFB6CB645980C30A8B03DAAF0
AB4FF6472441E8737F58B79F2305CBDABBB95FC9F9A28F677979A154E589BC3A
AF85B5A4BA1D6E9C3E2C7B2EE2F03DDCA88C32B778B99B2C0C3D8ECF1E915436
137CB6EDA495A701C4AD68138EECD08C67F351CC0D93D513E1703D32D6DF6C21
528187C184BE97BA9D59493DF9ACE7C4A077F5B3A7994D1ED76A71E005294E79
8DAB6FB29DF07E7FBE7E1C068352E0B5DDF88FB2842DCF0A79D1451F318B170B
3C53BBCA6B1C7ED0CAEEC0FB3F3B73FBFC149DAA869909CBFCD273EF649B9079
103C3463DEA076D630D57753F7961BFB318BE1AAA4D6901E8546C580471E3CDF
6718118D2892800E72AA6800BAD08CD61F187662B519FBA491420D401FB487F3
2A7BB5B0664043BF0B5B58DD80BB29E36A5641058725777666DE450B4FD774FA
69835621CCE92FCEA136799D8280AA883EF9BB25C42958964F4B342BF0411CE5
9FD7C5BAC359A30CF7750803C75DFB14A11A9B59B39FDD5804E12282BFA38BE6
1E8F0C1DE04458A5D2D6DC8B96C427C98FEEFDD2C398A27805977D9CFA2721B8
8C1AAE7233C06D4119AC5A354555AF8929BDD5FF57DD767A80F33C58FCA9B8C0
EFF85F8D602F16E87635048B1F24D3DFF0782CE166AD68239B6ECC63C5E1A4E9
28B1A29624B70E83282351B8F1DF95F3FF204077FC36122027657FB466A80A03
C30E0662DA183B416A8ED0EC0D876B1C799221F342C19E3FF360983D5D37C08C
DEC76CBA97480D55F74307CCC6763AE4E37ABA077B0AA328D16F0539158D31AA
5FFA1E9B82FE1D09F44A31F7D8B964B980FA031A33F0088E8AD7CB2C62EBA6FA
16C796AD22085E449D59EC106657B45CB83F531E1DBF4B5C57B4C992D2897479
BD1822B48DFA6D712B5E4C996F2B335A06D112DC3AD4A69CD890BC2D60CBC3FD
7EF6D0B5B470A584F81C6C22BDDB72619F306B9286980ECE516C5091CC747BEA
B1BC3D11DE54C059D91ADDC1B970904F8BE8D4840BDB1FCB3ECD6C3FBC105C1E
1DA1C0D98C8224D2683E7C4EB5085B6BD27AB1A1B6D78D0B4EDAC8DD8D2CD973
BB746B7E235C103498B1B3861EA66EF8138B00A6C9829080DC121F1F49E796B0
452BD8FC937133F7564E32D9C21CDC35DD4924475D43F26C90C78F521F5FB6A2
F82E42D27110F40BFDE0B776BB29767C1A07738F09BD610FBF91CFF040B4B329
FB463D8C8FFFE2067C399BCF90E2897690D40182FFC652D3CAF21D464532D786
8AF7C938C26988E94A0DC40D18EF06E37B862375EF63D24F2464CC45DD9D8D7B
5780B54EBAE4880D0CB5E0D9380EF02E2792EBB5BA8E4F8ABAB18C940C38F543
EE95440FA1F8EAEACFC2519D153AE2B38F253DB2EFAA60BB2C18959041FE42DD
3B1F14C3BDF0363A3A154C8F37EA53E08717633F544D9823B06E081FA5056DF9
1C72340C5D5FFDC72F9E3653A4BBC53C52A7FC71063DA2B298D5FDAEDFE7AF84
E17745B81349B41616088D7BE2714011D3EBDAD4F2AF6DA0B01BEB95EDD84277
6B3D38ECCAD2422877E5F5C7B32DCFEB568F46CBE9AE291769E01F45E37CEF64
7886273815A7C0E87392199EFE962999E34C646A05248B54A406035D22A87B73
60A8790F981AED1E27357C7F0EE123D45B6333C19C934887F463B80E8E0F4D67
B313D3EB28E320D81E44480AACA92E8C4B3D18FB1B9520D8CE5AC56965A533E6
707C72D47BD7BC960D1ECB3F8570D5DE0C4A5A5E0722F324A4784CCEC896295A
1A0CBC029277013D89DC6BB132B5866D4F9DD0263352CFD0B4AD5A702CF55BE0
866C04BDB37D671F2CD8081E713454C090E2740428D59EC974EAF5163F839CF8
C96D506C88781EC39A38778714A8D7AA76AB8C52681BAEE40F9AEE87EBEC852E
6D4B219D0192700ACAD8E57391C35AB03F2063F7D60580E8F58A47FF90BB61B0
D397EAEC567DF6D9285C05DFA17BC810CE27570E544BC37005240BD950966DE4
4198C3985F249E32CD2AFF1F13278225A936D90A942C67E94978BB1C923B5BE7
2396F667002F1FC068190BA0B79674884A4A9A30900BC44F83B08544E18D0760
CB7CE1445A3E615FFDDCF26A8EF2D4040BDA48A31C776391A8EE61D78AB11CD5
444A5ED6FD67F6FAAFB43E152DC9D2CAB6EE77C420241454891D5C6CC038269C
F4D92F1E28F5AEBC380435ABA0FD339AAF083F4B2670C174271DA015319C8298
6DE2A072CFEAD6DC31391ACF0167940562730F83626C219847A28EB812FD57BB
E25E84C4544EB9C4DAC73CC77A864E916EC22135CA5D5E56080FB357B241841C
FD7C015782061D68AA67C1EFBE12FDC79E682FD3407CF370AABDF3D09D67FCD6
B821AA8DCAECEBB6C57A7C1A9F267B00117DB5A74FB5837B809BEE51FB26BBBA
48FDEB109E071CF1546358EDF00E2F1AF4187781360A78BA9353DB93AD4192E5
E798332C62C759F1DA1DA7C4C74F65944446103B0F1B50D96F84908999EAC7BE
4C869BD0EBBA308E1CC065A2A5AA74F044FB4CB503543A09EE2CED27C0E315C0
091162F69B67FCE2179013D7984B043A11A47C65D20672A0F45862B5F12B2372
D252DDB028BC9F7E17E6A175788EF7CBC188EAA89F053587A9F48A9384E34292
1998284836FD4DFBF3F24F8919797A630C14CB4E8AD792295551E6506F1F5D51
3F861874866ACC63911281F82883171C9A9A2ACDE9A8C06ADF852D49267F6470
722AA032D650CBD2EEF23BEDE90E7F883714E2FAD619ADA4B1FC4AB3194E1757
55A20011CDCA3CCF8A147CA917D75EEFC2F3095CEB76B0242049D46C6BB7E5CC
B20B6E9B21BE16E814BCB66DFBB43F56A3D6136AC1656D3D900B517DDD09DD39
B74D286E7A3A27E6CE02904CA5FF254239258FCA3213A7E6ECD41D1658CC978F
EFF5526F298959EBF3E658DD45363907939CFA42B8C07B25AE5956D77E7BE13B
A5B67D70A612BD6945DA8BD7D94C9256FE62C0522502DFABE1C0DBCA9338DBD5
274CE4676840092658B77A6BE6047C3DBCB1C0701B5E84B164FE1098F20076A8
E80FEB2B021FC7301FD015BEA77BE25E29EA27D1714EB722D4C5618EEDBD9488
7C7C07770DD842021EAD2EDAB7FCA5B4E7FD36D9FE9F267BCC2F10CEB81416EF
0CA48C6CBE4621357C623383059B9A4A377184F5A50FE09B0BEB74F18823068A
BBF3B6AE5214C1E313F667EF59A699E2F5C801F6A7F538102CF90AA2F036BEA4
141B37FB5A5F08BE1EEC93C903A359F5E3378031179B69A608971D98CCA6FA01
4BA8E8B01D7FFCF4A03FC1783760F1435DA868CEC15388292311A7E61AE26706
606D642F96D8C3A6B18D0CDD9DA80E3B8AD9EE7EFC9D0DC564B99DEBFF150067
C5D3B676873F06FC3D92F94C72212FC5AE6E4CC324D2A479648BF7CF2058778D
8E096864ABEF9344A28ED875E6F354AF705508EAC4926E571B57515198405BAA
3FFBADF48CFF22A26962CF0406CD2CDD3FD00BE02E15645BC1ED994C788803F0
BC5A420A73AB648C7683522E96B9EC6EE5C47067E9AD36BD822451E23EF19CD8
92F142D840398CDBC977B2EEFBCD22F631AC822F7FD973B2D40B3C57C86B1D07
19E7CF9C4E1D79B669A17DD441C0EF0C3FAFB7AF26DEA3BEAF15B7E97E03A7F2
FAD457280B030BFAED7B0BD3D6C26E27843B020B88560B0057C4EB637A943909
3EBD0D04DE8B32F73DD479BFCE8F28B605BE55E0227B51D2E4F367D24D041F2C
276C5EC3DF469438CBD1F4BB027D5816E1138FCFAECC8F96EF3312D38A8C4140
C75C0094A676B2F9854B246C5C1AFE456EFA8C1F42B47E647DB35AD9E4645324
9FA0A4B4F69A755ADC19922B9B1A5183554E6BCF920EEA1DBCD108D514D24B84
ABE0751C404FA2F43128C0918860ACA4130B1AEC8944B3DE64008A2970099FE5
A55C2358499765B5C864A961BF77C37B738A2C90AE687B9D57BEF7105F2D7682
D65FE659143C10F20BACD55CE821B203908F900D7A79283128F3C94D4DDDA512
5CFB0B7C330C63CC467EE6CD727B250D28BE7F1F3EBC5FEAE56CD79C9F5F52C1
69037601D5D3DF3BD1EFA1562BABDB8ED81194B4FD42500E36910F1246957ECA
B92DB99B31DA9ED96D875760CA8CADEBE6F617F8666773BBC2DA0E2486A6D2BD
1E90D49D886C652F2448A613AEA96112FB49DC296F18DE5CA922CBD56D2C7C03
434A1A2A374869D7F0D40A7ABF01115DD92EEEF73525D092B1270B0A72A32970
386C36C47CB3744B0B139E6D4314E51F84A1D21AB4ADF39E78B04CE8CC0D9E85
C10533F7B1645B58BD6DDF43F1FC23368BAA228BF8C37B675E4D680ADC73E9A4
A76FCC81F3A1376AB6CED0C794E273D557A2095EE3FAFA67FCE21721128A8EB8
CE8D45AD08CF367EE80C45997AE175B60C68958B30BF04DBDD12B252BC2AFCB6
BDC4A9721BA52F3A13B02E5DF525EED2A9B266697E10BD7CA3DF7B7DF03488BA
D6704FF0EC9D066032583C41037E9EB7B060D5EBCC599BA4A69672B7CA487203
106E95A7CECD0B3AD492AABF2C80AC22E09DF84D2FABEECCF4EE7CD3AEE7C92E
0FDF8200D2CC7A6E989376C0308828AA1C88B7D49B00C6ED155356C4BF5A17EC
FCF8938E1194A6E8E545F2FE710DEEFEDAC574E7E83D87452BD352A36EF9D1B5
9C8E4C36ED48DFA12DA37B29DC74FC963E84279A91B6BCC517F7A31239A87268
0C039C5C8E698755EED5DC356FF89EA133FDFACFE20AB1C19499700F9D81440C
05492EA7196915D53E44E421D4A4DE848DE71B6EF6FF37937A5965D754813865
9B56206DD35D032BB7DC46938C4EC0BC45C0841C025837EE2653A9003FBC9DFB
08E1A045012EB4BC1763009734692C38062A62F0723C3E20AFD8A0F4B330C018
CDCD8EC53EF4766D6EA2AA744E2187028F1BDB2789FC272117E1C0DD045F8151
84A98FEC2DC06A57F8CE92C4D4E5DA50507B4DB57545021E40ED97C865FCD71E
8A230FC02F99C6198B33BD63EE0F6602C62811C9EF0E8BA8A6353187D7FA29D2
CE73216FFDE357EE4B9D3368533FE0CE74B7B31BD64379FB35D519713DD12E9C
B82754C151387DC87FB09A1527093808038858EB3544FC1E088B0907468A0362
7779F57CCFB03297D60D31FF6DB1EBD3125C1FBB189A47917E6AA25513FDC0EE
AA7563B6510BF3E4B6FDA117C1CE8EFF6A13C0DE99BB50F3743A8F462C3CDCFA
C1B89BAF729BA87FBD045A5AB32A438B3D5D7BE4110288CD6918A3ADDD3D0904
154702760FA675B1F32838735B2A93FED9D96A31B914F6C77FB558C0B9797016
B5009A625449AF9E8064CD5B8BFE743F87539998CDFEC781273A759F6CED9716
5D80C651D23DEDABF87208E1E78C95D21D6AE9BADEF3215ECD0A61E63ED40F8C
6991A3DEAD1420BA55E9F1296987A72F14823E56142285EEC58D0ABE905573F3
BB67121373B8FB932E155A080CA94550E0F8AEE038BB8713F4488FDF3B90D201
7A960D9552A147A62016B05632B1FCD158F3E8E57376E367AD088DA613A74D23
885AA28032E2FA6EF94B085B7F763B005563BD65274627BE0A38F2E5E888AAA7
EF24E4078380FBF997352B7185B74B6A1D1CC37FD09717C6CFCFB9F7E2ADBD07
B68C4F1CDED2EC207011C2BD70B97D17D407819A93F80C157132923DA8D41FEC
4D4562A65CF4DFF0F2891BE62FF34428D4F58A005277A3E76E87B8DFCEB4BBA7
AFDDAAE41B9722866F138004CD5B26B19D9A97D64F3FC7C87676AC1D8754F8E0
DB750FE554E0DDD08F822CEE2775E19405071C92A20187C88EEB2553B1D5AA96
975EE8BC7C1AB3A15AA43AFD4523B8F3E0F955F5F9D7632038BEC13E2CEBA621
6B9142F148E877B45A79EAB1F96BE165A5BC0FEDE305CF561794C466574E632A
1C0BBA8B03AD02121DEC89346681BB920590EE02D6DDADD1C01A9DCDC8134AD6
4C73355BD49284698A72355E9D39170454F1B2988F1E37FD4E14BA6FD395DCB7
2AA3A9AF0702A11BB65D4BC1722F002FD965A6DA867B7E3B639C6D2242036807
A9679E33C3843DDDA62F8C43AE52010DA1E43A06F4042E88352154B3BED38D0B
6DE84A3F43CBF72F88685095CAA31CA510760A2BD4975D856ABFC9F27AAE1CC3
BF883B61B257B2350244BE4A359F3B08E9EEA5B7181846F9D45E4E10FF23879F
1916C532AA0F339031C512408CFADD0A35F368EC518B941624325A880EBF1292
D5E2742ED9A8439463122BD5F120F2FEF4BA222D885E03250440B9CAAEADEA9E
478518BEDEAB93A42CE84EEF754AE82A795DA7AECFCB09A4407FA1FB7234F836
AE292CB8EFDB5C4153E25ED98D032124ADCDB47A05F807434AFAC2B2721F4783
51A8563FE36155A7B0E48FE8C4FE4782C74491AFDC7330E011E0294A8EE213DE
13C839E853DDC4FE94D055C94836FF4B3984F8FFD30822A8CE94CF1A4FFDC7BB
F23849D1F82106E9DFC82C7E1A468F1EB87A0DDDEAD161220D50A767F981ABA3
38906B3DF4B0725D335D86C2A64363DE7DDF6A14765C620D4B8E7A7B29108BE7
611AAEB7E4860BA2156CA90BB4A7E90DB5600AD307380226744545C3D6189426
0548E813D6B4F874390FC1CB2E96D61B560FD541FACDE60131E0A5331CA6319F
367D61AD62F11911B9CF9760037C1AF2EDB9DCF428D7FF0356B0F067192C7464
A30FFBDD45664B9EBD352DEE32B21265C949097274280C5EE57C2E0D42E24547
1065B42ACACF3727C4C360EB728D45FB7A4674834F6ED4E89ABCE95F437717E0
5B63EE05FFA31F0164EECA16BC580603138F9FD2AAA281868C2CD87885337538
D5FDAACCCC18DB4F70CA229940AE064BC56D550ED11FA3DD65F8E27F2168FD7C
8B8B2F569E6A157495C9B5C0F14860E056ACA9849797303A6F1F6A9421D182CF
7561F57A6B5DB6CBD83835A5E609BE379058905D248D42A54287304E8D1988B7
CE00F19A892CD8BD7A2566FBF4998BE750F9E44785B8F37E4AFED923A08948A1
7CD1D10382E6ADD1CE8ABC24FBF68A6292F9C7F3D9FF5997D304AD19A7599501
AD63F0C33C9184CC69BAADB7F71CE5F4BF60218E864FF28D900AC590AA44DDE2
E4A7CBB1B8BECE6AE8FADE7DEEC2295F547AE6459EE6C7B91D937A445C6164B4
36249A30C9C843E0A0579D578E583D1B835172C7D59044CCB403A5AA563C0A76
B8F3BF76F3FF08488DB63569BF3054552ACACBEA4B1A9427CE96345CF9A7C766
EF60838FF9A393D5B5F845EE4D9E635A17D88264A12A2478D4C1C133AFB20E3E
88BEA47B3A312B987B0D6CFEDD87B42AD82510FBCC484F633342A170972749C2
972EE2150D36B752CA3A1E483A65DF693B6F379884E6A425B648CDDD2A972EE6
D3A0800A74C668A985139FC3A26CF61493B20B9B60EFA6410ADC4E9A107C15CA
A0FC26730BB7E6BD00971F3027D3007E9F60F8F59E21CBB6E516CC71A5784F65
0E147C7E2EC5752943377580158D9107E4A2DA1478DE183F13D17686A124C86B
77D8F5E1B41D4F5B2B349D42CCA864768CD5A6F63A622A69600F8F39EC9621BF
4410413ED75C8704981ECDB7094DFB8C54732FEA75261938CA74104073DB07DD
AC6E95154E5CAABCAD23736CF8AC7F66B8C442CCF46A34E7D57DBE13B737CA78
B2C88145B5D08FCA6A59F05E5AA2A998F58F8392F0D8654FED6D6A6C87BBEBB0
CC07BE9DC8A906F7600437BF1EB4E387BD3B6595C8C8A40E4EC1D1B8145B40A6
39E3E36612EDEEE33885132ADCF54207D6163F31EF8BFCAABE4B9C0C904871F2
9045806564388F8699B536ECCA8DC48120613C1617637A99383CF57DFB63550C
BA95AE7DB4C032CEA70158C2653799F82A82CEF6395E60F3AE468A5806E60F84
A3AF2BA68EEE2E38DF4A11C16CB10C156BF34B6BD2BC0CF0029A0FE7B995CB14
890C489C86382DAFAF2345888A0835E7039870905FC5155552C56DBDE3DD2E51
670DD46DB70CD07F45E8FCE19F1EE454EA9672950405945D108AAB1C03C6C4C2
8E2163FB7B3B0329986476E41DD3352730D52D60D66DA0A737C06F528F172468
E0252EA959D2BDCB84FCC8B39210662471787B5E0BB74FA822700872898C1C27
0C55F6BB8A4ABF5EE3EC0826FFB2B706C6EE4E8593ABA468EC24C74BB7251D8C
0E7B06EBF8DD1A5B085CC8B172FA925EE8335A0892DD77F095C39CFBEF77C8E5
76EAB09FCE4ED122ADD557A99028B4051D374E47313FDB053416242704E6F36A
BFEB09E981F95B875C343F3DDE7797D7564109B4D72259512324E942679EB805
C585BD5935D6E0E176CAB633F8AD87DA2E4E4F61A8EDA4CD51F70007B0634132
59AB70B3B51AE3796F3EF737A3FC4F90334FE5D9ED64B4BCB670E416D2393B8C
A63B5A65EFAFE8669CE98326A15D708769B39D2F88F498BA774D35B3AE37A7FD
17113E30E8A6EFDF88C9916EB3DA3AAC5DBAB92AC700FF7DD45BFBF33F9F7475
04486F0E4F022C9EA73B3F8AF39349E6D051A00BB3389CB29875CF3C960D9928
50CC321C3BFA79608BBBD9F906C69944E90372E92F58659AB0C4E7C729CF6872
E5EF69F5A5B1EC881A4D13A9E6575F37039DBA239164F49A55319CEEE1BB79E0
A566E658CAD883CAD19E58C14F4B76C3EF6EF91D499CE1CEA86A010D17419E88
89E33BED35AAC58167B67B699B115EC2D5798150DDA53C59163AF5C5E6C6CE70
8FF7EDDB585117C0A37CFF54D8B8C21E5162C75C1C885769B32735E9E8E1343F
85D11879D5C1D38313E14177F04347430F99C5535604E03861060CDAD6E3B750
FBEA16D40F915AE84C94130CEB634EE48866469724A7DAAC00273C6E62995452
C5207366F8B50FB8F60919164365AFF6B5DC1707AD1A27550F5B912C818B93C2
E280165E758C29B6DCEE7BBB479C42787127D923CDAFBFA882C7285D47A226B6
A68D4910329EA6A6458F4E65608C70F474D1FBC80F4EFA8B2B6C9635E3ED7183
71540CB4403AE52F31ACD77B4655D921833DD1123A3509D0794A421005AD3956
232719E937BA747F3A3E04C0B6EAC61385DF3B61D3CAEEA7DE206B983EC4FBF7
F994F6B67C6A9A6ADF987EA9F7F900ACF017E485852B691C9840696F8D0AE593
8509FA89E77159C25EEE0AB21BA4ECA25C6859009ACD4D00D4F9EDD59EF896AB
B5E909975A8C0231753342E67D5F306E6DB308E1548E9C2B5496D73166579626
6BA6A91B82F4719F68D35D806347B92C76FDE530AA8C4E739DAB776FC5013E9F
E4E4D4FE6EAA3B220CEF5CF8A28F524A953EACD04C0C620FD3F3682676BB1981
A3E450660596C54F4DBECDC1FBBEEB865EFF86ED4C542ECF493D309585C81A56
1B421BFF810B9B9CC27940DD5AE92E606CC78F3039D7EE9412BFD86E63D030FC
06F6800B5C916905837481310CDE0FFD6EC2574048462849A5D7E372916D4EFC
B7F8075277A3E79F0663B6A18FEE63B68D5C0C2E067C4FB3D34D5D44F75E1E50
009436A33103183453BDF0CB470F2C82352D8D43A0A86752C21E7552E56C431F
165414AC2BA8F5CA3CED2162EC629855843F326EEACA1F9B65826D9529A6A857
526BC4D41B148A675C5CE7D8048B42A6063DAD30942827B188F6E47220B8F8C3
8DC07B496155A830D527A322FD048A1E194877AA09BCFB06AC11BF3C3D33D330
737239DA65A57288B85F5818EB86577BEF25E2F05ECFC0E93BB09DF473863704
9C0B35E5970CF130AD7D8216C4A5D13F3C5C786711EBA01F6220EA17CD3D0041
BDFBE561F2F48062370D8E9D65C4C68B79CBBABB290085237102C34CF184E723
1CCE8D1266E3378A3BBCFC5AE714BEFB5D30FE08D3CC9102273669DD30F2694E
A405CD7B2F701BA7BED3D9A0C59BFA0A9F7DC6BD042C344B4C9F31F55EAA1034
F2F32E560872AB9C96BEC38FFD21712F94E3390434249E87EAD83A09079F4070
B73889328D48D56AE84D8733CA06A9CB793B0DB7D89FC519265EB80BEDC90349
CEA24A7FD9CF63404358F14595706514C113B923CE273079F0318486B51B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
52978AAF95DD252EB0D606F78C7E295BB640D1153A3A0AB2A191B9458436471E
A80334C07C23E3D43BC2A56EE61DFD9FFDF3329FCD4DE9A7CF92ABB65FBCAAFC
7EA124656746FA3B8D5E8C9B51642207EDC0600CA659E44717F2BE08C400AD76
EA2E4F62AB149858C2DA5051009ECCE091A6E497D4729FC9924FEC3FB6A9133D
6B463F7C7EBE4EF91B9B17160941AC0087818BC60EB64E687E9349331FDB33F0
7E1D24C34E9E439FB6C392AFD85238CFEA21292B8E1D0991D029790B7831A2EE
2FA82A3B52599EB0636EF92E5D7C13FB08C67361F04482BB6BFD44CEF14F39F1
21263707E73B9BCFEC74AE58A63D5C3D4D773182258E76E62A5EC2865FB5951E
70F9FDECC6604E7D7A3A56648C90B4F400CD61B0B1ABB6B2EB9F977F0DC1A090
109733A75F2CCFBDD27403DE02C363DE41F7C24249DA6FF6A943A97302E113B2
7C840C2A6EFF6442DD52B43E21BD247CB559F781ED48E700C7C6818380E335F5
C15409940D60BDEE0EFA73595159BF5FA6EF014B844C996C73F53F63A48C7F4E
CEE23E1680B0037EAE119E8C5E67E32C964A18B5D20E9DA6FA4E53156DD528AF
830015D7D80E0A7974FC52EE48924BA4AD2AEBA3156D5F5916537207EB369B2A
6B80A8A4B044164ECE1C1FD5A30B240DE3246DFCBBD6E7EF71B3F46D35AF2EC6
76BF005985FEEB5D4A9ADD84C49132594E273D0A94C8C2DE65B5AA436EFD8768
EC53F2288DC8C1B20D1AD0FD1CBCEE7CB7349F8A7414179A76BEB45D64F98101
3705AB6F7A67D8551E4BC879A6461046CD604D79E621DD382967329A7EF603C5
0A96E000463F8247D7CF06FE08AEB09A6A8F4B0CB143A6C10B1412E1AD8276E4
A5A5219AECB4DD34412429A21E2A5209AEC889B4F6866F253445C88F41CF25DA
60A179B44F4CEB366A028D673EDC34DC2C6159ED9E284CCD6B34405C76ED44A0
341DAF52E65C1FB38B5301B2116C44955C2915D4B7B798E25A751E3F95B9158E
480257B3D8DE09668BC0E0C89032CF57B92D032B79403597185A78357377ED04
7D4387CC8327609532DEDF15400F35F789FFA040283ABD9B08630AD51B3E4D3D
38BCFD0A94E815B399C2439DB0ADF6152327F76EBD2DBA3976D9E1728F408B8E
C29EBAB733108E0A5CADD280D58F1AF1544E5A4D7642235392766C1F7AC9E31F
EC9717679ABA8C356C365DC35EF11EF0CDF28573B596FE57C97EB0DAF50B8A5C
F69B108D8678E9172B031D8B7F9C0DCE3619013BA44CFAAC55DEE70CC5523654
42CFEA7B93B63A76967445BAA85754EDDFACD00A2049924C2796F80122B3ADCC
0E79E4EEED18A99CE066A9080D458DCE7E8A42EDF647251781DFF83E7AF220D2
9611A8915063460CF17342B3EC70B0FEDD062F3BA8699448540C4BABEF2C617F
59015594C697B288FEF77EC8BF4B0258CA9A813FDB8225F281D32B52893DA64A
7E11F8E45D5A2095DD7245E5D0CD32FD2264C613B6238347EB74948A27E54329
B65E14F5616F4CD4F521AC543753969AC587F31B62E3BE1F4F43D9F2F7A380CE
FD9F6FDD519F13FD8B3F70D234883D924A5F84149C85FDA1FC2B749BBF6077BC
C8830DEC2D51089F1DEDD57F8B4881FEE3DAD531A917D716CDF0828C25C7DD41
2D8AF3AB7A8D39A7DA6D10A4ED2328BA1B1FC19F34427AC97A386E37C87011B3
D4AB92C1D146D29D2DAE41A66B44E501641176680ACB0918A3D4EF908D5C3572
A8423403AAA6191318AE40ABA430D2FE2A391271406E252590A468C04EDDD4E7
500ACFD983624D1007F6A30034602AB14B296CB735C41200072E0A9B70F4F097
D1A20E9BCDC43A04F65920D133F1E0AA7F6E7ACED726EBDC0778FBA4AF83213C
D6C576EAE7F028BA349B799666A88307D67968C5A4EFFB389A2A93EC4BE592AC
4E6BF30D2CD748F611BAEDB195038D1976C2B2E1C9A5B9886F253B17F68988D2
68D152E97C2433AB1642AF316C70F2FF7D5C7E8DD9DB7393BC7ECE28A4AB6851
80C6515CBCE164F18B623D4EADBCADBECAF085D96D3E3E53237ED455093C4B5B
EA3876CFD75161A704F9605773A16D59B102F4291DCB9927456083A6FB01AD82
DB9A9C687D1BEFFBE6069842FB68ADFB7558DD92AE49D361691CA8294C452A3E
6A5C46115B7083025DF04842FFACE6FEDCFBE292902D979BF4D84695BD0DED88
8AE49D1134454DDC880DEFE6853F86ABAF27782BDDB7AEEAB5E745E5CACB7FCB
36CF08F4159D067F9895AF0BF7CCD4D9AB62FE26D2A5AFF529818D8B6953E9A2
5E02AA121B19877F54B6215B41EA0F9535D834E9C8A35655F3F63E76BE9897BF
BA00BE512F431288AB7284B078CC532181AC9591A93220D2ADC1925FB96349F8
D94A2C3F4FA17368EBA5F5A4C0D062FF17A34710080E2DE58623B2BD2A3A2379
9130B7A4B741D98D6F026F664F2CAD57026E9CAF83DE13315C7BABA40D04EEAC
691DE585B6B38CEDDE1CE020A0FDDCC049BF7F3E93E768E0A135835B3FA6DB46
1249DD27D568A47072D269664C9E5D00F8D4D1873495FAA5C7FF6F9AD39C9FC5
492F8AE3DEC8A2AE13FBDCC28110D942825870BA74D75C8A72CEACAB07941924
003352DEBC9DFD9CC72C7D619F92612E0FDDA6ED168DF3B656410AFC0B12DCD8
3FC982EF865BE434333D97C0E5F91568583B7DBDDBB71C085D2EB95A37E6CA54
78991E3FD33F498CDDDB704CDAD37E0FEA6C0E7F38B995A2FF1E6140E4694A1E
08CA0E60D053C9B39B90DA73C2C28CD91A368B0530DA35E37FA1AD7AD1C68EF6
9A0E7A301F0C2917EBFD3D26422AE41F0BEA1FDAC19F7DCD5CB57AD9A0289001
CF4634179923501ADF3EC096903F9554C664B7E152E01602AB9515E57AE9F200
D985F632B55E4A0E3AB08D3FAC17D94230C074FC0505D854A97915AF573EB430
EB1C2B1CCC95BB47B6171AE9C86737AB82D189B02AA469C3384607C580F16F15
B8493B5F757C94808989A8E045D37C587DEB811F57260E4ED34528238FB664C8
408D38C8E6A15DF7E29864DDD8E8EB108CA188FC52AF9EB2A583489E224415AE
3DFC1D7F5B9FABFB3165C98E4FC3A6969DC18594368A2D56BD802A94326F1813
FEBEE653648B32E48D57014CCA09D28C155A21A4D5FF6A4910A318409596D179
901650F5941749961E18990A3C531C6320E6C4ECD0AD3FBB58A8EA00006DA311
57ABA1D95482ADFB51E5ED7983B2D7167124807B68BB21A71950387D6829BED5
0C4FFD3E9A4D3D043B542DB39B1D863AA6DBBDFFBF12B3200FFFF4035C26BCB2
EF1553500D4336333A8D5B251EF32A32A876B9275789BA3B756CF825A4A5795D
B3D6A419D8192B7963829017D43821BCA3E9D4B61B6A2C9887A5E28267C80C7A
C68F4647C9847F231C5A0BEEC5A1AD1E2CD9ED269E804D87BED5EFF18EBFA7EA
057D586AC7EBF6977DFA36E043839B743E8850A697558AC6061813A413A9FFE1
D0E1B629E2D075CC85E7CAB9173DD926DE12D88C355D6F028579C7C682BF1512
8993234D2B6AE5D6AAE822A453A1060488E8C971CB07C66E297DE8158DC15CE5
54976ABCC9D94E0C10896BEDBF1726CB5F05EC5FB2E6FF2AB14D5EADB2EF24EA
02CFA52143A3166E8846639790101FCBFDF31D90D499E3AC172D12AE96F198E0
CCE0AB7E5E104BF95D06AA6695C93B141878563E4D53BAA0FE28119768A161F8
C244EAFBCB63B91DFF757B975AB33F862E70D7E93430DD308A23BAEB27F8F753
CD267E30E723D17040EAD11A4BCAB97DA3AD03C72D816AEADC244A76684DE444
9A91166245A8E6ED51B06A175FA8BFA2C1B801780828FC2A6D8B6286A4706C48
AC8097461DF6E344FB6FC8FFEBAF16DE4A46DD4059D7E3973B7F0B7478DD4748
643888AC42C7DC3A6ABEF4C28472B839065284ABED85A3BC3BA69BFF2A2279FD
38424FA41BBCE3E180E05D07ACEA1E0F813FEA2C9A17B198FAF4591AC49A918C
EA4AD8DA1B8A20B6EF8F990380ABAE1CB6A67A8DA606F7BF9654CE99FF894025
42E543BF8C6CD4A24AA61A47B1A58A5C888FC99EC293EC88FE227624914B2D12
9169D12444EDD77912D9BAFA8F453BB48A71CA720DA5752960005A6D79880EBC
4D17BBDC178AFF827C9E1E3501B8CDFF567D31CB24F3D43E18F802B514EAD5C8
185DB0C9297C55A73024B3462FCE34CEDBB49314E16192248F75F1069890939C
4BA8AC40C1E27FDFA3919067E40A8FB4A5C0A922112381C573C14131352911A8
E502E03E44B900A51D2D90ABB66D7154D88D27831269D43F0CF2954FF8C156F9
7BF607D65A5E9F6B5245C352168584B238D132A8CFEB282301A4D18401DE1CFF
61635E77C969E8157A8D23C21F63B456273B4422C591BC4A6679DA95EE2C37CD
1D6C5554768BCDA1771DC1749BDAEE6E19FCAF5B2A59F3688314368A21E37A31
D87030FF26DE63C0A9F9A1E08F5F688B318C4210875C62AC704A10EAFD3ED1A3
5B28386A900C1CFD1FCD4D7902611EF8D17520EE266E21EEBA7F6F5C9216D1F1
EBF431C443840C99138A50E5C0C71B9654C0CD0D53D915475B843463FA6FAE3C
7562451573502E9A92D7623C9E96D31847B221DC3860572DD50F50548792E343
CC57607F420B99120BB47C8A65F002E1148BFDD781C61E38A796B63990C31F1E
B7E810D7C7DD6EE55C9EC64AD1CA5C0B9469F723C845710FE2D708B724364670
A916E86C7426FB8DCA85CEEA1EBBCD7164DA7B602475EF2D509F7AD6B6E558F1
DB46994341A37EC6A89D307A5020DEDF1292F617921C5F3881436FF74B5ECC80
3231224087B40585F1CE6675C83AF12492C9510AE06704D6CEE6CE7F6AD03596
11F6D5EE1BAA6AD1309FFACBE40AF2EE31FB1205F87671678C8F5BF730012B5E
A941F3AECCEB7EB1C144EBDF1EFABE4CB91C005D62A830F732339935244C8D0C
05A9672D280CF0A22D0105BAC9C7F3EAAB68390B3A9908AA71E4AD41B5A47FF5
507A3F0DEA8B7F4FB29E1F8964039E0170FD2DB47F7F773BF93CE143AB31A8E2
BB5C885DAD9F0C407E298AB96427794FB1D23F15A776E257924C83F19AC603F4
5114AB201F66EE2997CBD2D2F885F480C00F2C9F9D201A69D83BC517C2BED52E
7A45C7DDC0DF2E6C47FCBDA5A093F493F52946522A5801B23B030279B43E1DB3
13128359FB834E13CBA49C02D2151128DBB60B53313B6255925F7CA2569D3D3D
C4E421D8CCE9A48B197B195EC6E4FAD1C1778BA9EA1C37452C64C158CD8B2120
3363B2AFBACE43314F53B604CE2C47BC755151715EC491033B381111DCFCC739
1881B37859B66390BD938949438A3D0722F8F3F72460B4552CF7B1C3BEC3F7B2
77F2391B2C0D8A3386EB1AEE41BBE40E71FAE08549559AE4BED310DD87E3187E
EC469A99F9E7E2D1FB9A9903452B13FF17D31778566B5F984FEACB41D40C3B58
D8A7F66F4555D99F2E2F9BA57397A000CC652FC3F2D13B57C8AC043A1A15ABD2
050A46BCC24585667825E5DDCBFC7F94C8534E7559EC668B243CD48E98D78E01
B81DD179F660C4DD190527468A19E15C034A7290750EBCBB8A464394EA84D388
0919E999FB71D29A74A310284CBF2E1158F051FF044EAAD1C795BD95D136728F
DC2DBF9BFFA80902C38259BE13E71C7D81A69837ED9436D3D3FB7699F4A3EF5B
FDBDE28AABAC9DFCACA9412AE6C02DD94BF7BBEABB900A121CF886D8AC8881CE
E42C1981EB8E1A184296C711493B1139E3F29A74CCC53DEE5AF9E6B7B06CF986
D59C627979906E7215775E279BC3B0D28DCB873825FA2B2AE666C27F082A4712
46E8884A783693F964EE958BB8AC05E8950AE2BB2230E7A4A75692FF36D54CED
AA7476AF0CEA8A936FAE2CEC255B464BF26C55981C3EE27952FD2A0D1E613F3F
A299289B21160A2237C6D9D179FBFCE731CDDAD3350BE438066E6D9FE18111DA
004B76574A5049D913E36FD16208E4BAF4F907B91CB207127BE1AA33599B04F7
641BC264B07D197A808487A992CA2D8945B3B83949B1CC8EA52439D438B12B41
D8C717B8A44255FE8ADDB131FA269DB08D8E2CA6706E55880DF024099EE92544
EA213B4B614B36A2F936FCEB51C3C63436EF93CAFB29458E4A320B48F63A6843
0E38009182BA1AC17D7F7254FF910931BD7F55ED160922AAF2C11B00DF5B0D0F
B1E12E5DEABF5B9CDBB5E0039FE7704BBF2D2CDF44BE37AD64AB1ACE526E507E
B057065D7774FD3632E67033FAD2957AE9450D5935040FAC37142D7FF5D962F6
784120B4310A9D1D51B0799A7646D488B020DB0FBFDF82F7CC1F690B6503BC8F
791EBA56C38067C9C0ED749AA3C89898193343CB8C1547939EC05890EA64DE55
FCCA2FD33A7ADCA67EA6C5EC3072EA3FEF39B8BA4FC9F549721A91E9C8BBB6BE
999AC30A0CE1F30EF23C533DB6184290044566B179C91DDAE6B079820BDC7C03
402C5AA28CCF3329C67B7C76F9B896769CD6DF319C690299D87B109B0B15C33C
AB44DBC6BD6B8F8DD116129C290734DCEBA4A9A2F273EBD6C353D691D77BA96B
0DFEAAA64F0CE972003AC25FD8383FED9887D5D6ED9EB9B4E06E198355E8F20A
28A06AF83059A3665927D6DB1C52A71266F35A1D775D9AA9B45DD69A8F2E27AF
490AF11A161500E15ADA370FE36D559E4FAD3E0F747CFAE96245128EE8ED27C7
D56D066F4EEC9CB7B3588774E935385104C7C0730BDD4A2A0A56807478709211
056FEAFA9ED0B02168B31DB34BA5E4BE1BC986D95884306C377780B0FDBE167C
F47D6C1BB06E0D05983F64B5CAB3D7D89FA26498A561F1E0847C94A005C2A2D5
868B60921675AEF8F24E21F842FD0F3FC201A14C24DBE03BB7E25B8BF03C3F88
2DF23070B9F9480F3D1A623982249B72EC6B433AC37C9A52426D710EB4820128
7BA8D4D74D8FE6C0C5D000D37BC69319C408E5147D20CB504EE9C2F39AA1B893
617833CCD671338E0B48B6CD80C062934DD82DBD2E16E51AE05FD7FD719209CD
9438A73C41D92F3693F1D2EA5B3E90F49CCE038ABEE8D91344CEE59EDADDFB64
B9D9450C33CBFCBA0293A742C9E773790AF0B6550CD18A2C12095233DA62F7E7
B03662E043AC1544BE674E4BCA925D230464D09D4671AA3376CC291E45230A08
11081DAA43739F5F278A146D9401C3457BF26AAA2482EFBD804FE8FADB457489
5BC47DCAA01C4F097C7FE33A7ED13CEA6C8003858307703A6F799EFEE232D419
205CFF8BAE37C11C32485155F92D59EFB045FE299481B46CFAFA9FD538E3DAA6
2B3FF0C1B61C8FB7FD939435963C5AFDE49FAE134145C9BFEB3C108AD5B484A1
D9C88C23F850FF698A1E383942D0F4BF68483C3D25723F38E10193B8C2DA705B
B5069F2B7222B339700ADBBDC3120AA518C223E09144C1EF28C7D7C7E4F64CA4
3F84CCCFD11F23AC377194EB6A528D3BCA4D5CFC478AA031662157FD60456618
134FD1544027B8FC8157AF9DCF94E0A40106318B7615AB2869CD2C2B0F0B30E8
D19B8552B1662774B9A1A88662B4FFFB23F2FD830262FBD400C843A71061D214
8F2882141250729CCBD175F000EF5EBD83825D649F9544B1A2F756D828EE0553
402D137ACC74EA13F68ED3EAB2BABCF692BECC8E5F6BAFC3D01AA673FCFAB02A
51B946954166B73A057FB5FB51DA856908120A07E83764A5689E33E445E12F2E
0E1DE07894CD0792116AE5F9E08073253566B030D919C7F7B1BFE2E98D8717D0
2A15FF3773ED320D61385C6BDD670F2F28990918D93456C5DAB6CBF79EC2687E
277D163F19945DB897A380E37993DA43092467DED049E80D332113F62237E9FB
24CA26BA111333C0ACFDE3218835C4F50F6DB5CBC2BDDF6643B862DE9557DBBA
8D1243BF04609E83CF2D538F69B5FADA0C6018EF7661362D57E728E6BF7FFF91
E7D616E5DDE06EC83CCE7990E2FE638799B9CE8706938E6E053F20B63FD2AA5B
A6B76C268CDDCC59AD3E464CE3CA0CF35735986EF0241F81B298300129709731
747501F9878A7E5D1DD784C491F381E43B28823129D1113BB525E867E3B31F5F
5556B5034D3187575598C6564BC512BA28FF898D2A7A2B17AA406C1D10C8EE6E
C3650D2C08AEFDE0F59E80EF4B771823CA65D6445F2C70038B6FBA61C95E1530
0FE168CCF435AC4FE8C3371C459A467DC654770E2A8D81BD746AD5E371AF164D
5180376B15C3E11CAD6D608AFF44B4CDE2FE41960275FF2636E38357B10846D4
564CC9EDA25DE5FD4164FD7C5D739F8312538ED194D70F382FDC5D311E20CBB2
203963B8375F9979B2535B14D2C47100AFC2E90690A7F00280282BED7392C7BE
19A79D2898CBF6C1ADB74F34BB9D679791D474BC0B4B587B2AA2F541FB5BB5D6
06DC2D2979A546051AF85CC50FBFAEF60BECB15133DB46444750D7693E51E8BD
68F7A2C3061F0E947971638EED083B32F1ABC7F231D39E8551784ED56A14DFC1
94CDBE4D0A063D6DEE027E9C59D781DA3B433D97EF143C51BC89E953E1E2F799
BD2AA631D3A44BC9E39F564B0C5D697B73BFADEE2EA1126C66C81C4441198618
36178DF2D33041FFA19027432992ED0E290F907747E74D0497009ED4E79AE618
70B7F94B748051FEACE2AE27EFFA6607A0D7DC3F37E961C8A042A169DA6F473D
67E74B4C2677B680AF045AFC9B09E62C7B6BB2EADB1E24D96FCC065A1EE17D66
CEC4218F6DE69C28D6A3CCC4E4A34FACE3F9327CBB8F27739D6F97DDA7E02964
D3CE080748B3242541D78A7142F326F05C30E457D8ECDE4A547C04A164426044
2D4BB1370998ED821F2179A09DAF74F3267B2F1ADD3398C127B0CA61A9FAA753
C5FC5C0A20F53DD57E53AB4918EE613D18FF4A3E82A6825975EAF495CB6D6852
481697CBCEAF412010058826E86802721D05A24A789A87AACF60867AA8736231
12853F75927C8E0ACEB97EDC62AFBB8839FDEF871F3BD4C83474D09ED0787604
7925512EF8DEC80EAB89BB1034B49083585B885888D7C92ED1B66A80809CC801
EE9C0B4DD91FCD9EDF3EA7F4CA62B91A3A28D4299682A32FEBF0AA4D566F5C53
24AD5DA419A9BE399F62AC6FBAD2A4C04C6B64E5061A52E55695DDFD508D5480
FC928CAD1438FBF0BD10A4388A87B237BE6AE3A7B6DDE7BDFFE243981CCE9FAF
EE73977F93119F2BC3F9A63FC847EEFD4006211444A5F10AC3D531258FCCD90B
2BDC8C064B62BAF5C7D56462C874B4988BBF7648E199367C3DBCB7A16C17888C
2D0C0ACBAA719A9EB93CA71FC9F2DE4BA2E2353AF03E4C31E6D07A9FA8975232
2D7FED243B45A3FE37830E624684E1DD3D9E640BA6D2C2E710CA128E8B9F9611
44A1EAC0693CFE9712A378B708BD9A18C85C1ED3D24B073A42F9904957E07C9D
708E16F2EED84DCC920CE71FC395F57F6829CBC9375FABE34D60E788094EAEAB
740D3046EC505200B4531DF85ABB7972BDEFCA012882795B81E55065DC2DBF9B
FFA809011D74F35FCDFBE51AFEFD009EF026E0CB9F62D7A952AAE0B5B52360F7
66ECD2AAC2F2E105B5614B90EDDA01A927A35EBC6E994E55554E8CF3E58961DC
0CA5E3CCF12A504A117D6FBDBC9D5C57F4B14DAF63A66C2C44276B7D313B850A
A481ED60A3C22CEC79C49014F66BA43D37BC6BBB4ACB522CCFD475902544CD1D
24E8D412CE2B0572D4583CAD727AB2C73AE7072D80C54C79F886F1A24B398CF3
2DB1F7AC044A8256F3C8A4C044755DF843989B5E678DB4EE7B615F358E7F80EE
2EB169017389C6F4032618E40271EE569F0CA2548B012E70199EDCAB0667982C
C79F72AE0BC948D51F2032BCDEA0D444E5ABF5F2ACC31F540F42095D7FFED5C2
39C53A769D991F31FF6934248DE7623E37B5B9EC758792E6234F8C0DD36EBA39
E82B54831890233509F4C8B70A8C5D57CEA91B0BE8DF98C62C074F3C2FB0A15A
C97935DE4A7AB83A02ADC95AAEAAFE5C6DEE16CE74822D84B0E1D6193906E616
44E74824B87EAC62715DE4648266B5670E728BB266A756B70EBAD073EC7B1E80
170E757B506D70466A8BE40C827535B57BE86626865C2C14F935F29F2436D503
6A2A9611739C403A8A32AE2FF97FA357A57CD83C2DA646681B6BDCECDC821220
8952D45B7877077E4213A0C9D17543DA8205B6C834F40C51B6D6E78C4DDEFD25
3B7823104B6E89FA192EA5820C2D9A912152095CE1FC019B4089F73D51534990
AB66AC4B797E43F7396C1AFEB828EBF5E2D2CBB653C8781D6C8DCE8578CFB30D
DED98FE09A674DE89D434BBAAC2CD397685A105757A59986B5C9299158341B2F
76C9D0C07936B6D210E2B4D77154B204A3C247CDEFDA7CA047CE7186A1DE3496
DAAA87A7C003FD266069D96C57CAFCFA26555F767B7922E2C15741D8BA25067B
1B42FC299C2BC23208ED4C05755C80815C1D366F0C48860C52FEDD7CE3FCD6FC
5EF2C8E6634A9F1DC97A719B36E635F465E1F1BE183CF4CC0255CFB8F0E10624
C49BD40D79D26D32D22F0A312EFECC9F48D3DE0EA4B1F4B5A7B4C1DB492BF7CE
C27CE0B7DF9912C7815447E0701A8AF8971E19B8C1EC0024EFA3FEB126888D06
AE14952418559C074CBD8554D30D141AA7D2DDD0ED39B39A36FE52A4DA36EBA6
492B7AC8980E5CDCF4D6206BF002948406AA5DBF9C093C8D6972BEC6F4580AB5
C7F3767BECF1C52C67B67DE7180BC8E4823681C0A62CD860BEFB0928E95A724D
54D108F796F8CE5ACC4F7B5D56000265B726AA896F0C73701B0B3B5885EF51FA
126FC299E72142696731ECC2FC8DF80EADC88431D25B5F984F5B11130C45C00F
A6B866F10BEF648EE8F59C2CEA3A186DFAF39EA4A876EF715FCC774D966A4632
27F029F210B0650F1AA62567BBB71E531084DDAF1D0CA7E53DAE188B9336A54B
04CFF5562318143B2612EB30ED7997C7CD03F3643869DE338A3B57A9BD44CA1B
3C813AEF58EDE15A5D5BF2A7957D95FF33E1FB1F743CA0A55669D173952966F8
F5DA8E7B447AD731198DACE0B04765E3053D2167805EB6FCF3AF593FC5ABE665
8F935FB67016A5054A73A3DF9C591C64933B074191CC7578F783FE3E4B35D865
9C1D20083B579B43CCFE740CC72340F02646EFB7ABD5CF821BD88DACEC859147
0BA58A43C7A4657523E8D7A673C3202CD56A6C9264917FC8CC58268470F16695
3A17DEAC6FAE6F085AB9484989D62BC26AB7FD0EFCA2EC29E036A55DAA88183F
D9E2B286FC7C77E8DD1CE2A53A27111D17359EC26FD75901921AAFB847346BF8
1121F1F2A6B7DFD8506411232CCF382FCAD37A8CC5C1BAF659D0673143B72F90
A7667FBC53EF8568004444AD72A716B1CE51D995643B12CB1A4C0B619F2A1B74
CE49833D7F01048F55CC3673E98956DBE9C063794BFC06055E06FD8272E09208
21656E4970CCF131D90DCF5EA55C1221AE542F7F103D116B2A01104F811B617A
FE301047C956FB2938A9F76B85E8013FA04D895904E1A93E1632B8BB3A470838
EC7FBFD06E49C8FCCE805938270B62AD4CBF2A6E724CA5B0B05E30A6AEECE372
6EEBBD53CAFC06369E709275571F6B7615835D53AC484C564C84ECEF9D322C21
E2B0DE3A365FAB9608163AB9DF5A50E3FD1188ECEE4BB4DA70CAA9C68F5A34B5
008D341A1D4EDDEE1E08F8467AD76C2C39A36BC1DB4FDA13C6A837BAF2779ED8
0370748311C9CB8248F072D296405187404A4ABBB490E6ABDF8B746D4FA643C6
450EC0956E8101B910BC71D8D8ADAB1CCF64B2D36AE65CE301E0FC05536CC66B
7D6A335F4257A7D8989FC5C093A8233A5205CED3B9DAE1A4D52E20ADB9E46B2A
9DE768B9B34E9A99F9E7E2D1FB9A9903452B13FF17D31778548CECF8F1B30EC9
DC1CB0740B3FA180C4F8B1F8FB7EB4E6C18E3A6E15158A299E13B3FD6A201EB1
A40B89EAECB31E80DB004C92029F39B1BE6E2D7570CAC22E1BDD12FDD4C5AD6F
AB063F933D963FFA6C7C3F289C90B73D58C3926E979E84CB8B58D9C695633FF1
73464EE2162ADF70D39EE42912D6655426DAD7B8755358B31F6AB4C854F752CE
7412AE71B5B41D37D36318033565C0193825D5A6527C343F925A7B606B995A19
5A0ECD0A33DA963F1248D0839869029D03DFA5D75A8F255CE62C658B4AC4F591
BE8D6776212E4C21AA3C0DF419FD6117DE25B0F3B5146260D5871645255BA411
3C3313CC1DB916D90DAA3BBB7B867BFEB21BD1BC78D3FADD38748C57985A4A5D
772FF3A9698AE84CBBDD04E235624A248C2DA92BEE9F2740848C3B02C04CEA5D
850C6AB006C54225EC06E4023CD7770583AE6D6281C00F2C9F9D201A69D83BC5
17C2BED52E7A45C57B84282A6246DCB244E66A85437E1295668DD0484A98DFE2
DE916B1E2BEA8D983F72A8E7538A784024EF23DE090ACEF799D96D248FC55A2C
FEBA5C5F8C98CEF5CB6F312E0497AF09AEAEC8753049CC73DA9A15401645F1A1
B7E307405FFF1FE0ACA4AD13E84E11690038C869F639AA5DF6B503D2214BAE43
09B34137B90F0BF0466C28D61DAA603E55CC7228C2A83512FC056C339999900F
3B770B6AB3CB42D631A24FF1964DD14848DBFCB8D65A2700E436FDDD695C0C99
7996F81E3FFCC49CFD2C63EB96CDE014254A567EE5383B1F10B09FD19F88862D
3EB18FED41B26139685B5C469DA2F7EB0ED8CD761AC4539A8F6DA92FCB7E298C
6B57E2F33B91A2ED211ADE0D0C589172D9C42DA780C3FEA060E9809D2E31AB48
DDDA68BFE2F0DEF03E1B67DDC3220969FB17E1B4B501FAAC94FB8A5E365DAAAD
7D554BF6493635355D22E15F65DD93234E50171E976F9FA037C566253AA3C586
ABFCE5CD4A0FE0C278EB61D8A7F3AA96BF3350ED594840765DAA63C4BA6A8C0E
F4535D898DD3415E36D80687B85E5401A8C68512173924A7C8A6D1923300C25E
B5612D558695FE2DAF2080E281E747EFD608F026E100A3550EED5F0E3D60DF1C
566EA7DDC84526F78C46D061FA439EBCD0E50CA065AEE3D506B8A6A2321E1E7F
045BCBDF403E8D0ED1DCBD1785D1CD1B036E52DB9DF615D3973567934DAA1EE6
1882840B17DA7DD2B84B9AD1A8AC4C15FCADBEF53DF25804711D241EF29EB712
4DE74BDE317F624031649BC26675710B0F99A023C9A0BE26A1375FEB2CBDF5C8
1E1BE5A0252D40FDD265699BE3D21647304B7181724BD5E4F8972574A35EC702
D6DF70E3CDC391AFAEFAE500BA64604B69C3026DDCB6D21D88E39B68799B4B0B
1470AD34B227E16C446D46F0272E39A1708BEE899A274718431529A853F961D7
72BBC20F34EEEA06BE588ECAAC8DFC50BFFDE6F2DEC447E137B33BE590DF8210
718D582B47D1AA7314B23E364631D3F500A6F1002581C6CA1D5113FC145A468B
F8C8E7249167B37393F6000D70740A440806A8C8308E1B576ED5B7C78144BBE0
6FB6D827195CB2D261B0404C504CFD56A19A2456A7DF869D7719DF82D8488D09
F47DB09AA0BA59852CBEF02D65930444224F2776D774923DD82A9F5BF09E0CF3
1D6F793E137B11F4378770656C4F25AB49F55E0C2E7958543B93760500C0FD35
34AED316C81E974BA7D2D638E3E980A7852FC1E860F9980D4AECD5523D0A2474
75668B911F661ECA4FE946E9C7E5B093FB3CC9218C43E0881E3722ABFBD0552B
30547DB9B263E74501150AA99BBEF5A941C46FE1C2D2A885DAEF6BC29994EAB9
E1E9A548EBCD1607A157025A93AAC9F765D607985DE94F48EAA929AEEF6F7FF3
E382BCB3018364A078197C3A36D1C06C6D12B3D1BF9856365A1DFB5A418D2EA4
05D4DCD7D1E30CD3D4808A69EAEA0E37E4D2A0B9B00D794416F6DA99160E0323
2E4F6DB73D9FDA9FA3F2C19312F3389071D526B70E022396E27FF2349423076B
2533830CC84162B7DE009F85C289984959CA8CF322C54D755168E53B7EB29822
C74BD69CBC2D60CBAB5F2C0242519FF6312AF4225384F868EAE8D829DF538CC9
5A88EC723B9DCD2F5D243BDBBAC2D7846FEFFA9E43E4BF104B5CA1FEDDD6C2FC
2085682A58CB53AC011946810B101D6AF4A3B47E2D28D75FBCA261CE5D557EF4
863E96C117694785E58A0DC5393222AA567E0E57BC1A1FFA64BC3691F8F4A3D9
9BBD10868A01DA1CB99E4EF17AB5EDFE8EF5529D9EB66005172B02F2235F056D
F5B099E605BE032C02A7F01514390D06B04A2D64E3A579D2B58E092A89CFAAFF
5F39CFF3A9A5DF9A02E7442C54428AD8CFFBD56E7966FA3ADAADCA3134FB88B9
D6FBFC1C087DD921061C0FA8E0E553332470E71A1CE8DC619AAFD0C32676A16D
03FE8C7B71540CD8D73D34E53B441058E04B5F911747239EAFCD976DB76DADC3
307E6393AD7BD61652EC0E181C8834D0450642E8D107E2199518CB6272677DE3
D5EBBACC8C87708982093CBC4F8A38572573E04099FF28220D0B675686331577
C08982033A0AD90B3C09F1A21972B52142E53D1D5F87B41DD3DB3DC5625F4BB6
C328B6BC50AC44B35F1ECA7C67D460DA23ED9642F637D21372C9814E17144AF4
6486D368AE1C67F09576091CE4741655A42945FDCB3CEC9EEEEF54472B0CBE3C
F185647A953893BC2ADCF167866AB5C4B9D303EBA25794D2EA8F440AEDE6EDD2
25F21837F28ACDA419F0BB481FCC7CCCD28C3CAFC92AC23021025256AEB4B5BE
2EA14355A083829CAD695855ED81FE48B224874A53AE2F3B9E67481DBBB4DEB3
C1E4F8E52B65E0350D3D8EAE93E7754022C8C01ABD27BA2F3088B9164B6E49DC
24D682A22FE6CF23C1513FDF148648D009909E8A166265E7E96314D1406402EC
85DE156404F02C7B5D83683C7A3EE8B7E201F9879D6D30242E5B545D13B3A5DB
D055B16CECE54D04D822F0A0AF75AE5FA6A3D833C3217DBAFBF44186889F64E8
1E65EB6117742875913D569A837E5E4BE75FAA437544E5199FCB9A7C29852705
D1B3BBB2BEBB526A0462DB8C44BF13FCCEA376DF14714D859BFEF93D54A3C2A7
C6AC25085E3C4C8BA130AD2B322D68014ADDE2946E71ECA9D4EB50D1F4663929
B6855FE5F0F5F458FA79C6AA355A1DBEDE60A1ACC6C806F4627F3A0C2617BF7D
FC55306F471325EB6278FA7E417FD68C569B405DBE1E21804C27F715565F1793
9854F0787B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Extension
%!PS-AdobeFont-1.0: Fourier-Math-Extension 001.004
%%CreationDate: Fri Dec 30 13:47:17 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Extension) readonly def
/FamilyName (Fourier-Math-Extension) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Medium) readonly def
end readonly def
/FontName /Fourier-Math-Extension def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 179 /parenleftBig put
dup 180 /parenrightBig put
dup 181 /parenleftbigg put
dup 182 /parenrightbigg put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-32 -2960 6882 848} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F6FC13F6
FEDF4B792B4382E1B8DD4D6B66F7698F4BD76CD673F74E2FFCF34A3EACBD4F3C
C6A935F0007CEC07779EB225FD87A32485FCF1300A8B140DF1FB601966E239B5
C97A004A4205CCDACFFC747D59C0AB62F98C58566E92367FF923A747FDE768F2
BC84EA22988D2856786B73BD956D58D8E1DE05E3B73798BA7BAE21AED1D65A51
3E8B275C326E384F909CDD630CC3B3D3A664C6BB0A43AF3EF5B681E8178A68F4
18925BF7234218D39BD091D0B241B2FB96B24A302B7A2C3648C0BEBA299B1422
B2A246F4DFA5A9BA475E9963604E772769D365D898BAE237E423E657C64198D6
C50DC4E23676D32A80D9FCC26CB7EE5882A7CD7515BB142652043EFE62BF1296
C02D6A59757DAE8B7ABECD31FB3886ECFE4C018918AA771BEE2AD4BE22C921A4
50F44C875C97D243655B17F1C1C4E4C34EF324C3BBBBE230EC9D5EC568CA45C1
F0B2F8760CDD8F8CC7A19377F15ECE29BAC75C965984E9E5C246419CAF94119D
CD396DA99EBBDCD62D4493A16F9D040A24BA632716AA2CF3E8527A11E08CD983
08E109D5F610523FC1A976251F5BDB7C51EC9559890B4E838A6B7AD783AB3E61
36A0752C1C9586BED6F91B6B2C31BB5EF83E54C2E1A67785891B6161DDC05BAF
0C11DF8939F72ED4C1CFD293B9BBE5D7BEB0835695972221F1D1BD1D197E1A3E
BF18CEA3EE0C05151741C87469C417F1331BA729FF30D6CA8AD4B25572C230F9
2E250FF7F828D5FDC41884B337483286EC37AA4563EA5AD6F28E5227E8EC3AF1
6038BEA4475B0CD36D674A344E85B43BA3F22462B286886B2FD9B2FFFE1A996E
B0F752104862EFB24394FA6D39DCDA3FB70D93E95FE58AC0B21D109900667349
5B2D43FDF1E4EE5CE4F0CA7062C6BC568A897DFD9185BD17E8FB9AFB68659C86
242E30DE8D95EB6A9E9CB42398895F1F95D5F191D6FF2E3E78E08934514C342F
45D4DD4D84EA7F29299E3CAB95D642A2CD023A1848E1121734CA2C9DBDABE605
9D2BB65CDD36BBBF12F39BE5C983F24BB65ACA13B9F7B1FF17B69D0EE8CE3972
D043EB13A26A660AC9EDD0A45D2CC21CED6DF5E88072968C24099B25AB9C8607
6E3055C930DA042F2D81C22C8CDCE3C86379ED939FF99676139B0DD6CAF03EC2
C70842859EB9EE93C0A65A8AB63AE791458008235E914647D570A7925CCAC95E
D5FA91FF79E608F7609C283C07438DD008F5F7C9D70F1BB997528AB4D9088A4C
87363C0605194F9CAD0FC37F03145F8EBD05AF3C9BF48156CCF02C3B58C69AC2
8E4B1906519AE6A85F6ABE12F0BB2DFC9ACE52A56C2FB6FC844CEEE0F1C66699
0EE719FF527155C2269932866021518B0FE0519B859D7F4C567DCD3B26C63670
53990BB5F6DDE2CF7C775B2879372A479036A30C27FB98E9AE14ECC1E98E7E87
19BFC72E1165F394420F9A44FFE39FE0800473D8548705251240E63429299D53
5E06ADB6676B74BFB6EBC8E48F3BF1DE79B81618A0E78B6994E59C3D954D207E
AA3658B89C7416C63F6161365ADC6503CB3980FEA00CB7C2FB40070B4E625648
BC8A6C59C5322740BA4E2B6D829DD37CA3728DBCD244C104FEB60469EF5CCFCF
81DB2F20F127B401DFD57A469A2E8DF4935220B717E4D43AECBAA7760B510A67
A37F385CBF5758779952459DFF50FD32FAF8B8E108639EFDD01209F86DF4032F
0C55F063A49A148706EA39B25E0CF6F915067C6C680DE671D8A0A1EAC22A2B4F
69CFE179777971AD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: EURM10
%!PS-AdobeFont-1.0: EURM10 003.003
%%Title: EURM10
%Version: 003.003
%%CreationDate: Mon Jun 13 12:00:00 2011
%%Creator: American Mathematical Society
%Copyright: Copyright (c) 1997, 2009, 2011 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name EURM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (003.003) readonly def
/Notice (Copyright \050c\051 1997, 2009, 2011 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name EURM10.) readonly def
/FullName (EURM10) readonly def
/FamilyName (Euler) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Medium) readonly def
end readonly def
/FontName /EURM10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 30 /phi put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-32 -243 1060 720} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F41F8A25
49C1ADDE0F25E4C2E5C990C47FF040F896D567264EF5C3F584F56F343C2737E9
EBBB4521049C78FA1A7314E86D532BBC544FE600AB25D177ED8281150D633906
8BA0DAB861A70FA9DB57EF3CE0D91C6A618A0082E595C1EA7E42B3C16842A9CC
7B8D943FA5D2384E3A8E797C334EEA52719AF615796D2EC131ABFB18606909F5
6192412A0320AD88B47D26C2D51FF38411F77DA84D5176BFB243447977173EAA
EDFE34ADC06154B053A3D5620C5F9A35B6BB5FD64B5EBDD13DEE096EC7543A55
DD9D1438D1746D8BE4DCD1D4A173DF9943C66B5128C3FA98E15C0C94FE411BAD
E810EDB7B7273FDEE769E94B6C49F09E74A5D89D5F6D776BA691DA3C5D59F573
5F1BF23A503258D642835A52BEAD40E16329D85497362275CE42FE13DAA19CAB
2C81DCF4644C65D988C1A27AB4E0EEA3D97D1076913836CB837FE42F98D80DA8
6A792B3CBE7587CCA83AA8A0722A7460A6A20D8EC0A70789C0CF4689C4113AA3
D42EDE01909AAA83450597B2D62195C5FC6B85075B31722E4919C9255D450036
BC434E6C05F32F0AECECE4CCA9AB7372C14BA99F8EEF9A240F0A537E75ED2CD6
B884FFE9BA738EFF3883E754E8C9A4647EC368E7C9E6CE86D8CD5C94B0FFAD7C
8C3C95053EE6DC3BADE68D985D9AAEA241F2BEF8576A74B6E46C635C20A5FE3B
BE83FD7FEBA6A21114FE25CC22437163B3504F62A1A1E3B9D81CEBA885B23678
8C1EF18A1B7FF384B08E6C857BF0AC2DE0AB368C5C6658E743AB02998152F9D5
29C8A78A2D7A62395617F5D533F38A68C2F94CB35E68DDBE2B94487C26E16241
531924C936DEDCD9B5DBBE867BFA34243DFE8C08F1CF1DBC72C01399DFE33EE3
F5A26DBD9409CC8E4A077A6576B662AE7BE7BC9D7D1A4465FD0E819964F62EC5
B0ADC909F6DA228DE32F694FD027CE76F45C623709187300E6484980A062C05C
9B352F6AF5BD52FE1D7944260036DD3A631F076DC1B3D3933900D3F1D794EDE4
DB65719A00D03B33502E1F59F53F8A02D005A3124555C19DBC80FDE4CD173B0E
3FCE02D064A6435322199C983565E8D4445637ABE216E1F84089E6E0A57A6AD5
25B4FB46B776DB2F8385EDF530FE6CC403B268CE34B1BA0BFFD785EC748BA3EB
9721AF8DC3C5D5D26A75FE580A3DE8992CBDF430E117B0B7705A43DA4915B92B
9E369A913488C8AD37E731BAEDCACFA8006A049FD3B350741EED5151973D65DC
6DEFCE17AA397770D733037F72F599C09F35A16CED0DBB36DFE3578097AE3D23
990AD071833F236088CA0A33565C584726E4C1D5953CCA29EFDE324D10D9FC0F
D7AE521EEAF6E21F32513DBB6E269218F5D2E1CC0FDEFF9D05A29D5C3B6B8195
33D642BC08CE5DB97909ABF5B87C7C7F2A4091C819F03101571DE8126C7FB3A8
37CB9A9ED232C3A38321DF1410C805DF50C579E56F70A0DBE768CB20F2FA7C22
A586FD388439AD34872C17033DF2171B7DF7262EDBF5846D9B15FCE42A1BBE9F
6CB869604CA74FA846B4DD4C71DBB4A7CFFEE7BD3B1F81C3A34FEB6A4784E271
2B63A21EBD61164790F7D8DF24CAAD82C8D28E2254129701A145381FB0D6A5E0
745308C7E1935CE6A7EBE22A23A5BC68F3B97DDBB0952E11
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LINE10
%!PS-AdobeFont-1.0: LINE10 003.002
%%Title: LINE10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name LINE10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/LINE10 known{/LINE10 findfont dup/UniqueID known{dup
/UniqueID get 5011940 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /LINE10 def
/FontBBox {-150 -150 1020 1020 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name LINE10.) readonly def
/FullName (LINE10) readonly def
/FamilyName (LaTeX) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /a1 put
dup 8 /a8 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE366EF37D4823F376DD9F7E4CBB15
DA8E93E91E84D36BA5A5B06F3A46B45692ED11C8FC76C0B0B3157F699878E2ED
D89511CBE105EB42FD76309DA91EEEE85F1AED9920648285111A1690C4AE2638
C0601A7DBC8D2D41CA8C4F9DC7A6AA5C51015D8BA926831892381DCA7E61E230
5BB3BD5632D276B929D97D4836F9703461BED94450CDD2660430A0D13F49EB47
72EB0371E38B92F488FD6E19C944811D4AA52CCC359210320B484568E5060BC5
4D2FDAC73C49BA0168EC70388AF54EB24A30387A41246830C10472DC40AA0BA7
BFD5FA9A7730D9FDB4B639665275683C8E3CD7E719FF53B6DE1F5835C06D1671
1185AE2114E4BF5C0836BBD5391FB7AC5793DB4D3C5535ECB70119CFDF567D0C
A390B1D9A992250D535CE1C36B028E3E9CFEF1DC5E0626C58FB0F25E04DC1FFC
DB6A1C67E40E6435D2994BE814C695B48D64DE30E3F9A38D4547B49FF66829A4
9AA4FB9432DD10B6AFA88BBC184BE95E34A17076782DCDFED010CC19715BA5D4
5D525F33A6065EC6C6811F7D8AC94F27E4E2EBCBBDC3AF1AED1016C343825BA1
1DF58B80CA212DAA2F4EA1889F989C99972A5FA25617CABA3B52190EAA98C27C
15717FD85CDC8CAD43292A21B341CC2A04EF383D978142D16B4A97EBF22ED674
0B45CF5B2C3F151029B75CFB6FD2C53AB88066DD793B85CB7A7A13694C0B865D
BB3315043A4986FB138775B7354F4AB89AFD27D52E0864D384397ECD9A850511
E96A85AAC591975E185230AD05DD19D2C6883B2AEE9107448928AC6959BB66AB
7F8F7C4BE5E6E4F88D3BA98B117C9F0F58BA8D4A7B88413ACF98B0ED4A5FF6C2
5F96EDEC0AC75AAA7C2F27FA3DDDD0B3BA0683D98F99A282C799183C0952DAF5
A900E23342D083E8454E64F9984EB44FE0929E8C1605B8B26C37A219ED8A04A9
D7D6FDF3546CB443BB11B2E4A1015E59E8AEA265CC70DEADB42D8361F4F54979
19ED22A9E83B7C851A296D1B5F44AC57AB4EC29FFF3C75A20CB3C1B57EDFB4B2
1AB1FC26A6D947D45EE8221185749042F2896A43FF932AD70B16BC2AD7982D51
C390D752102D4A6D49F0205253618EAA62D3616BC1FB3B7C5F3EE8F00D3EED1F
A096AED8381876AD3B6904E0AF7AB1D15ADF3AE26D38FD979F820B4607A4458A
FE32A61551AC882694E29AD2156E5D008591A02C59FC1DD6BD2F52F0FD868E8A
FCD67B5AEAB0025C012E85B2B1C1A99F66C67287B1FD75A0140EACAF485EB377
7E5C58B9E2904060FD815725F149D6B8251CD6DC34D3675B815D73F7F1F16D87
287341207E5791D6D8AE82E7BE370A2BE4C5F73FAB72B1F4C2058CA4994F6AD3
FDEF96183821964ED7BAA607C483A436C20C2EA50F45951BCD5A4EE21805DEA7
071BEE4216E8B2913E7743BFB58EC4E7FFB7C31E873147605D83D955B00B6B29
F8066EEC1E7091BF7F1D9E261658AEA6A81ECE5051E75695D5631C7398E77F98
08580980492E302486A98593780638B6FDF3C54D55FAB1271BC5888F18F4595C
2BFFC548C8BC5205962144EBF08C53026135AC215895CA9277DC7FF0ED5564
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:50:41 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /arrowdblleft put
dup 41 /arrowdblright put
dup 48 /prime put
dup 49 /infinity put
dup 50 /element put
dup 112 /radicallow put
dup 161 /minus put
dup 163 /multiply put
dup 169 /circleplus put
dup 170 /circleminus put
dup 197 /plus put
dup 198 /equal put
dup 200 /greater put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735F731DA07EF3D6E818628
AF05166460DA5B83052A083336C23DE3F4916E3E60E10509910166E063832CE3
29E5DF2FDFD0AA1DC9F1C99A95FC477BF7F113B2CF4626600B1B5DFF712EB302
AFCB86EEF4DD29EA456833CF29BC0C5CC42C0BB09735A0A83143A0560B03DF25
B27B0B383BD641B85E8F6790F6ACFA6A03C77D60425F8B515C48893EE05FFD60
CB40D1B9185FCF7D27FAE0616B15007FBA17D23DBE9347515CC3A932A96246E1
85C477A9D6665D4F5D8F374CF4C0F4CDE76C57C8F7BD4A66071AF94604FBA047
80C65D0357949E03600E099BFE0ECAEBC6E6A636BCFEFC0A9035532476354B49
DFC61218068C10E8103BFF464394C6A73A86807D46452EFE438C9A865EBF163C
2BE2F7A043E0A9B96151E873C29B35113FFE3AD8B523995FDA676E5E4BA61A30
BCC6474B5F42D86AD64519763339CE70EB7406E7871950A04FAFC741B0617228
0AD858F952B73B4B2933756C1867A7CCC699B285D06A804D32B266AD654882C9
E35840DF31D02B962FD94F42B64D6F31E231B9E57ABE49CBE058D73981B01E47
EC554108102807CC94F9EA2AFDCBB5A39AEE344A325F58A3D16863648D3CA4F1
2C34289CE42CC3086CB2093B8E8575D620B9537907B0F68A94C0CBBCEBE67484
91C7D1B40B3F4E942F35D0856CB9376787CEF6D08E1183223FB703DDE63FEEEB
048FC63AD8F0ECD2BC6FA7B569DF2124BA078D31C5EDAD52C5A17B6CFF65EF69
8AE4F80D603448514CC63F668B413AD209D6CD7CEF2CEDBB3DB3E2AA1F4BDC98
4D848C146BA09A1FB7CA90161015B1C8730B440A23882132E0D02EA6F48912EE
5ADDAAFDB972E3506BB493602D94FC95122641D360EC1EA6A7C2E6F4BFF972A4
8AA1C32FE8C01D2EE0C152D28E8E0CC8755C937A869CF59EEDE9D609E8A7A2BB
78F30300724AE54BA2CC150B0704F8181703CED494B16DE6D6D8C80000AA7B3F
F7EAAB5293F5E8E566538E0BB3899722AF9BF0E3F40ED6F3E7738AA8E154F2D5
94F1C7ED95F5874EA12BD86EF2C15EEE23BD34B7A21D5C7EF6E1F356E1433E64
8766260282A606A5F17A0725F9F05DFAD57443456901CB49C37050BFA77FCC94
5F9E420221DA80B42F8A228EB86EEFC390D4A57FCCB5D5BB98ACD61003DA03CE
AEF77BEF1FF0495F17C5C4D023C6E9439AFFB0BD2959E8BECEE9BC309FE0ECAD
FA004086BBE4A5F979D62FD4BA95AF61C542400555A254980B0C8039C5B0A925
3877C995A5197951F2F92C4ED9D1EF1D09C4584CEF587BEBD99C417BA3655E59
8DAF6B24A575D898BE993DC955AAF4312F9BC7CA57A9C84A2CBA0841E4EFE92D
2FE07EBD7E1106CB7BF3FEFD6B668EA5600B416160AD659460EC384EDC6CC91C
487CE18EF365FE39A4C66C2593230637D9B0E2AF68684DC788DEC5044DDCB26A
E7D693778F56CE6B916CA56EC76E4071DDC8834A038F6A360DAAD16CE78A9F70
746410100570FF7EB20314BAE732602DA28484D6EC533D120DE5679F4F833748
0E18957EA41186923E44C2AEA09494FBF405BF8A7AD7515A95B8E317A5027FBA
B5A528BFB2384E004336F85089062EE0E2BEA4B6B86A2339B4803BF5CFE6BACB
76E54994FBDFCF77064D7D4EF6BA60BB2CA6ED00D962038EB7E1E02449443A84
82B0268C3DEFD586E346C75FDD4AFE716ED18163BA885625EC3BCF94F9BFBCAE
6F42618D023C8DF4A225B791AE84301F37C6493860964E4BC608F55B98693C03
7DAFC444B4FCBA922823F701B323C54ACE746F2F729638984DDF5DCFBA7B3A7A
5B134B9DCCEB8099BE3BB4BADDAACE2A4C7E994995055B9CA085FA51B00CEB0D
C3AE80A51E033674BFF02FA6979163F392B59BCC105634E7A4181B6C1A902089
BCFF3250AFB605CA5928E90696103E8B81C76D2CADDA4D96D1A1DD8E413AE6DD
79D474D5124B8CB2D7AAB75746E1C474F38B6E2329B24E796720AD0022B9FBAF
5C7BD85034F3DA15D7CA8236AAC8FC708E6F9A92DEF46F8E5C670B88D752FC64
78FEEF32B34ECF4D1401C47051C5F475C1D30D39BCE26A167860EFFED0941BF2
68BD0337CE2C6DD945D5A0CE2E4605D1F9F5D535CDB1AABA90E97F946E57EF41
739CC94433916A97C0B2278AAF163F88DD865D6FF2F03D112DFDEC9F4DB95EF9
9AAAA9E527361B3C18A954E4E34594A905F8A0E894133BAD3B25822C22A2539C
69C7BDB896798B83B68E69E9A9AD10549A539F7B149B38A0E6351652FBE96C3D
A666AFA69BA4D9727B6BCDF286683545CFFB23A276FD5DEB299913521AAF229F
D0AB845814FE43D3AE31BE84B888F4B293107D8C3F8F053BD4ACCC3C0027DC87
B705F6FF25F403DC4724ED67148C225E5978CC887C63983D8CBD18BA462FDDF5
712E5835FEF5DA842487292AD64910739B7A73465754A5E4DF9CA061FF2B5057
80
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-BlackBoard
%!PS-AdobeFont-1.0: Fourier-Math-BlackBoard 001.004
%%CreationDate: Sun Sep 14 11:40:06 2003
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-BlackBoard) readonly def
/FamilyName (Fourier-Math-BlackBoard) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Roman) readonly def
end readonly def
/FontName /Fourier-Math-BlackBoard def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.00100 0 0 0.00100 0 0 ] readonly def
/FontBBox {34 -199 886 747} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18A96F6D1C771F81C4B3B8CF0CBC2E8
4B44D923DDCE84E17DAE82547EA9EA5E732D78F03AA245377BF0780A3752527B
6E63F6A41202E7A6C4E4F9330A0AABBD04387E12F2ABF531216BF498DC6B6BE6
06DD50B385DDB864515170905E2BF225AB9AEF29A2181200040460795735C124
59C90AE9BF9F01F42A2ACC5A5D97D4F6548FBC903ECEFE9FBC8492EFEE55ED6F
F29A7BB50432A42FF30DB3CEBFE1C2BF83D613F2C846B7F2173F00B4EE5FAA8E
12EDC39BDDF670F50F6AF072673281554416E77FF134014D5C465127C28647BE
3E810BBD9EC9F9580C21D2E9479B8F0435749734B76F4C06995E769710828768
3141ACD67803BC92D5B405AEBD4B25D5DF255B110F1EF1C35D45D24AD0B1E0C6
8816579DF17721764D5D2CE396276ECE1E6142DC2EEDF83FD7B65717064CF671
051D92A9993F82D241AA1C3254DBD3DC53886264BDA18DE9FB8F584DEC9A32F9
82A6131D7140BC7926C074E26639A7141B87ACCD64E61A25DD7E26F463FD7834
964655DDF83538CF1DEA3D6363DE79EBBCDB429279F84F5DA8035CE823A76FDA
C2FE77036F5B9D71C0CBB063689C0C9770514E550CDBB1BE97D763729B78CFE3
DD162726B3F3190F0003F4812E9877545507664B32A1BC0E6C933BA64EEB3563
39606495CEDCB8EA6E63ABEC9F3558DAA0BAA350F45A6E9B145480D9513B87EC
14F7551489E0F96B698A104DCDAEF9160549D551093AB3F5F7EBDDEBCAA3ABA5
F0CD388ED13E9611675BA045A8E99C002616ED89D1F3EF0537C6E787DEF9B5D3
F20879DF1555A646A79400D3EB80A209937A45A6345C4E51748D3A5C523F9F93
FCA3628D463FABD8537A948B3A3715BAAEE70345F5186A550FAC78ACD262E671
AF8FDCC133800B82183CD17B4EA18EB6AD976F91FE3C1447EAB9EACE7CAA00F8
69C9D899C80FDAA551B57BDFD7BFDFE5BE081D0AE6FC30D89B49C43AB5C8F923
13C1E770F0905663C6B7FF3B02723580D7B1E8C0DAA19968884E622821BC174E
58859FA90DF4D140C225017AE82F1C01CF0FE1952AC0CBFDB2B2AE148026C116
8E9D2D51BEECF04E3D194C3B62EBBA84552E741659DB3BEA3EB1887DDF2FF5EC
E616B5DDDF84603216ABD3CC62CCF91FCF4BBA041DB075C2A7DEFCE18F39B173
F296A12AE1CDD8B0C1DAD85E3F73F5D378EF9B3E44241869EF76C09CDA729288
046DC05F6A8281F31175DF235627E657CD3BACEF2AD0B700ACD6976C54D0B1E1
803BAB50CC45C5102647D7D2B835491465DD1A2507761E496334D370804A5E4A
5F1481C6A20C9AAECEBA628202ECD441DDECAAE92151F47AB7999A2290E4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Cal
%!PS-AdobeFont-1.0: Fourier-Math-Cal 001.004
%%CreationDate: Sat Oct 30 17:08:49 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Cal) readonly def
/FamilyName (Fourier-Math-Cal) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Cal def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {17 -274 1252 724} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F78AE14C
71FFD7441F153F65EC489AED623132F7F0AA967C97A2E6C705F58130577D30FE
722A0CE1882455CFC9882D1055821847FF648509DA92A3EE12F984224F7F1904
F3395261ABA61816ECEF5BAB29D1AB8C21A8F46620894FC69C70DAB3226A0DD9
9CE0FBDF78469648F29A99C677B9FDDC8B90082BB7C984DC5C42930D1315FD26
EA08F21054360D1981E79A6EEEF345CC1B9D85A6983CB5E833C9F3CA972A2C88
B6220FBB013192E7B2F79DC214DD0964F4DA52469E9500ED2ADABDB0D259FDAA
648EE5A0339A6EFFDFBFEB97BAC430C00291576483521C8D406E8FA4DC48C7D9
6830DF6FBF39E9153229816D94F6BDDABA2B4759E1FB3DEB54C47D66E283E45F
3BC1B675DA1D8DDC10F24EAB54445658EDD0AC1ECEA12CBA6DA205698F18056D
DB1CCC0A8D93AA9EACBE2B5093275823AB48AD9B7B1A217505522EB1C2F09074
1D7EC269452BD0896C0B1F30769BD683103F7FB568F80576476B511F5ED74F46
E2F35F191BAEAE8C91D87401A8C28DCF476FF0CB9661DE7B93284BC8E2429CEC
A964C815F35C33B2B6E795088998E0EF2CD048D1D54FEC5014B1AD8A46618748
6D1446CEACDF027D1B238173F8FB6C828F10C8FFAEA574888C851EEDF4629C38
4D71F7D93FD74FE5402D7D788D76E28ECE97DCEA9FEDC5985599B679C052E445
3E16B23D20A619B501A088D5A6578CD0F56CCED1F2039876D4FC648DB69CE3CE
9EA0C3B37F27CFD4AB23D96B5BA02308081972E9E62A93B2DC9A37AC4A63E626
F1488017A209F97B3217B85127A8AAB35BD704F9614733E2C55D3004A753ACF4
CBFC509E71BEB3AA1179EC2955F527022F86711D2DDE84B8E350D09BC7C0C88C
B62CF82CF8E9A25EE1A5054F44BC5D2D952510AC6FBC8812145400B5A5F7ED24
B33D2C3ABC26CD5A3A04C9E97192EE0D2D2BD36D10BDD6804000806DDE46E0B5
64BE8FEC1D025776855E711E097ED39AA1BCFDDC6F9D30BF27F8661FE849E6BA
E6E8B396D944701AC384DE80DAB291D030D4B15435DBD2B721516F8158BADEC7
D28729925B82EC8B89271D9A6FA754A922516A672CE969C73672546AF3EDE43B
35792D80CE15A6BEF1CE58179B6475EFF13E12A8EDA3E0ACC243B1073280AACA
1B26B24CD315BC351E053081BEADE92D2E498E8544430383881E5ED0F7F184DB
AA9A394D0E08138E5360640BB17710A5ECDADB2CDB17ACEFDE8AA1B611DB3CEC
ECDC55767C6EC7CAC0E6F01EA6B19E1FCC847EEEBCB66CCA1752308E2D4BD275
6A486BED3522824FF77BB9FDC0F8FFE1838BB65FB3CA607672275271069B0EF9
07B5B3C31CBAE9775E4BE188CB1367F340CD204462679DB3F40EF9D47CA1F41C
E7D9F6FA2AC58D012540E357D08AE98DB72E71DBA225522E78EA5C55AD0D46B2
913617FB9AD20B1EF553EBC93EDB391689A7D6F2614372B035D38873A5F8DCEC
18AD7BCA14212C2B03AA6B9782763A838D9572763E6D0AE5213EEB4D5B7B5250
0C3ACF353EB463351C9716A42EAE4CE7BE47DB9153EDD94CE5FFBA84119E95E9
DC4EB9CD2EFB69F2EC5B3AE5D869F33FF3C4952F378C89B225527C1BB720ACBE
4ACBF7C82CD339AC520CEC8EBB3D763133220D18F85B2560F28087D126F685FC
C39A6642CCE776F59CE4090500E236B319EF6786922666B97423EBABF30F41F7
01F8D2CE117C7E137E5EB8B6D070D062A2427B0A7853CB1746FBC095A8CF91EB
6B681C4D499E6BC1791C6C8D9FF749D4B1E22B4EAD7AB0F26195E6AF7A06F8BB
F098DB8CB4CE9A8268F1B7F9DAC0F4936FE29174A18B48C86D941BCEF0F34203
DD15A564F17A7D9BD4FB945E3A5B0AE0EF01252E48F88C130ED07D2AB3CCD981
FFF8D223E768DE48993AEA6F00B259F31AE9EEF5374CB7EC30C61F98D4386797
2FE0E258C1D02B7F166A688DAAE0A887275B93FECCCC8A1D19C10126AA17A7E0
F9A8A2D9F57CAA82373A20A766C47E1ED00C83A3C627A3BF6D00C6524D91A747
354D852CE1C81EFDC2451F0E53176CE8E446B70700272733
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters
%!PS-AdobeFont-1.0: Fourier-Math-Letters 001.004
%%CreationDate: Sat Oct 30 17:27:29 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 162 /Delta put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -247 972 755} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F78AE14C
72A7B8AEA5D41576411085046EB76258673C5CF40021E812997FA677D59CE155
7C55D36F8B6501F00808AEE2A8934EF6E7DF27A6D20490B6AD5EE97365B26935
6D798248ACD56BE774DE447B7979B08E595DB252D6EAC137A081AB9E002A195F
08D19ABEE28C95E9EB56094AACD6A73761A3E376674258165DCB3565F51AAE71
E9E3BEA4BB485DF2A75CD2A4335B926A3CFA77EC6765989F03A680DA1A20D708
470FD9A1DB35B2C937E5FD9AA6266283CD76E05138D55F0932678F1088EF5E7D
EFA66BBBECD836DE750970D76D32957258C0B88132232100F446B1885E4E29EA
B8959844D652017B77C98E7ED6D7FC65E1A01EB35DC733347DA3B63F9ACE67A6
975D81865DC92F610E531602C57AF9FCAB91E2EB7A5A39DD2EF594A1E2E5570B
896D14CC26EB1A42F74F76F2231DD03A6824AA2D1005943DDAF2910597A36559
E4BD2F9380A95F7FE63996A81EBBD94329601C7B1DC913319E879728A46CC916
CCC5A010A86E5C572AB48BC20494C889CCAA475A1782731922CAB36A7EE9AFD9
7CEA3215DD9F8FC10F8D4C3F94311A56C45FFD85FB0A91F315F33490242094D2
1996C1071EAEBA4792B29201666254BF49CB393ED233BC236B6BD7617A918696
D74A776613FB94DBD590A7893CA7FE1606C576DEB3E4D7DF25A7A5FE84A8DFD0
9BF199780DBAA1832D07BFBACCB7B8E9DDA897665613728537094E1E8933F961
EBB5ED1BFA4EE2856B8982377719ECF1D7B187015A90CA694AE0ECB4E32BB9E6
AB395207397C971034AD10D252B419D2C1D8841ED02492B3F2A9D73EFF9C12AE
9F92D8858A5ACAB071F8E0ADBE0794A62FB244F098A3940C82C391F0326B9F50
39B18EBFD2C105167F452AF2841C1AA728F941530ECE5D9C861EC8569D27AEC9
D0C19F35A3BDA17F09D2293012310B114FF0BD4D1B99A685BA61CD6E4D63D45B
C47199D41B4DE8F7C00C0F17D72EF41B22A92D559DF471E29954893E6FFE85B2
98AC23152C26ED5EDD43DAC6F23F9D3D0E28D770CA6093A1AEB5365720153023
8DBF05303D4B957B2DA2159F8EC25CB9E26D04C079FFEFD11379918708B95247
E9E48D274C2C4566841020BB7935F900E86709518E7A133B75F878084B0AA054
D2A472488B698A5701C5C909102CBA7CD5812333B254F9648A0F4C33016DAE9F
BC9D19EC7A14960514496FDE776F1A4C73BAC8A050A858127B9B71DCCAEE03E0
BB66A003687A85186CA83B34625B87D53E08A6417BFDDA19AAF3806BDC0272BD
188187ED61E72D8DEC992FA4596F4201DF5D1B5462A22CA111C970E138EF3F13
A7B70573C4356BBF79D344223C3C5FFCC2BFFEA3E1E78D794FD29324B3239D9C
6B11B2EF293012F8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CE18407902FB88F631
211565C71652273016BF4C18DFF5C743B943338D442F565DFD196AC27327B183
14D5538860737A5DB4843C64ABDC3BD49E68B195128828C51F1913FF91F62FBA
C772DA4DE386DB5A11549F6616E7FCB421EA0C92CA95CCD6881B87CB00A1CE8C
185EDAEBFC8230B40849C226DD0945788D629725B2D8E2FCC3C2AA988A19EDF8
61A810A30D5E955120D1DC439452087809EBF90CD0A898E021176A17492BEBF8
6CEE0F3B5CF7D0350614D6374437B98ED18F4406403BD9CB1131871041085662
FC5B8637D04DC7898E0A07358DABE69F2695DDD463420DDDC205A44CC4E27917
CEE9E7745FA509CBB2A05E10539338323F06B39D430C204D4E7E517C1141D82A
4BA366936CDFD7CE64E04EC3B403CEA21CE1A1443CB31E874A16475ADBDB2D13
A7FCAFEAD983F6306EA20848A8E5E5E1D3187B1C21981714229DCE84B986E1B4
10285F9498642E0C71655BCF700FAE8D1FF2506033065116BA914162CC14D7E8
69ECD420305ADA12C2B03E59F2C3914139A52556C0CC13CF8DD59A85881F6ABB
978A109D44FB08C705F2E579469F32ED4E36B786187031FF93F7AFDAAD17073F
1C0990F4F0259D7E11B99F7A389BCD007BACBE894217DECA2F2A79AB4F3DA8D3
EEB4A0870D769C05D6F238CE8CFBA9C9A44B32964C72F821E0EF124C119706E8
F6357B11E1B0AAD3ED0B5C4C5BA1691E13A39724DB7B2358EBC0358C376E7110
3D41841BC04CA5D5C9D56C2218507346A006EDDA167A0D12CDF741FC27B0875E
D86B498B360F0C3D93BB151BBF93BDCC6A90E78BD27F7402BB300017EFB11E5D
EC2B7C87191C20F76D668D0D204F6763BB8FBFA685B2B8A33EF2E9181891177E
3F7F6543F71C980D8F22DC5BC0ED0D3E6FADA25A566A3537931943F510C94C26
644AFBCF51611488620284F870F114F43D6F39796552554390F271267900F952
A4DA363FF6B65CB9751E6D23FDCBF55DF41258907DF9D94AD59B64A54D9B6ED3
6626C938A02859C64D59DA9E8F2C069BA5AC6EAA4B0E653B2D0E8EED64EB3E70
4C1635E7396186FF3218383D81DD39BAF71325B43761306C787C056166319AE0
C7A7EDB7D660A1029BD679DED018AFD0C3536C5387F57791159B9AB170F237F2
1C09F61DFF28ED516CA950C3A61BBA2CFECE66C71579F931AA4DD4B20EDB7C64
FCB88168ED817BBF827DCBDC8F91E7C2728499C99EA71DD72AE6E3573DB6FB5C
F9ACDBDE4F8DA06211DE163DD6384503D8020CD2672EE5DE8EDE2058EF35C722
DEA4C2C1EA29EA44F4AD804636326E6DC837A28FDE9E2DF0413547027D7C37E2
0555FAE6C5ACB12FB054952995156DF7F676BFE94D201E20F3E8A2D06FEFB8E5
B2CA2248560C890038C4EA453D65A8C955255DF4ABCAD445E12F1908E4158960
945F93BA6F122737C891A8CB5E7ECCCC4BE873977062E8777BA171C8876C4FAB
FAC2050DD7955708F6DDC9F1BC9BB42759C289C8FD60E47076D39D285D8DAF6E
47308BDAD0D269E1839CDB54C6610787E70F52CF5E0570768D28FCE6B53786B1
414924DB2147BF601E53D012DA2D13F4BDECDDE9B1D8142322B09B2380C0517B
0AF0CC60F3AE3E7D6E99210679A0BA48AF3453BDF12A3CF27D5C9D94B670A990
3100B8AE9369EE4AC1F2C37FB80A05A24078F8FA919F23A2F2CF48FF0CA96215
E136A9BB2A6D2BBF9997611ACD8B10751759BA48EA165B0B1515BCE53A157C51
921368608E6AA95789481987BA0B9C419A69F3E76C4A2F6672A632BF48DDE5BE
6A9D6BC5F3EFB0EA3074B1B567BFB06BBAB3E134E1052932BC6AC99EF357B29A
1619C6D867D2C8F3C9B01FA692F043295CB84390C36B1E75D6E4199AE38F2138
285DF6B5CD27B1281FD397E6B82FDF42921FDEC2D67A1BCBE09C9A77A8C7FC78
2AF509AC4DFEF85C14B05687DE74571B104AB0E863F99A379A9D9BD5E5DBB46F
A040E76B7CD64DB7BC3C6E2D85E9813F2C384EF1AC056FBE63882A3DBA92F160
BEF65F3D7E307E1664C6FCCC866F1414B5006DB936581D956D8E337BA0F05F7E
06B6F67734B5325EC949A353EE00E596D5639F0C60AE2F9DC235AACD2FCBDAA8
44124B95A92E3DAA4FF54DEF7728299E7D84ED67AFE76F964B9F431E7824AD63
23E9343274A50CE66F7C48F312E40D94FC1EA500993F504071EC766391F01177
5CC9C07C86EDDCE369F569D7BDDA8C8E84AA5034CA2325D5E2D9CA89318AFF05
B141ED5B64B7150386FCDA9A26F0839C879CE811355326089DBB39EB6C730ACF
B5FDBF4A41C1D2BC815E1BEC5B4F2E89C89A09CC7FBBC000BEF91E71CEBF9F11
8DA55F6145E194B858305AAE858B2012321CDBB056E53F4E48A987EE70979583
F3B23DFE4F66964EEB58EEDB098EDD8C6DC1A80D36B9E2EADAED78CA661D7954
E4AB28AA760AD2686F34B5A971FCB00B6C643D7D1894E8900D77B385C1524ADE
3C5DB81B9FC699F97C01473581E132FF143F28670B4961C7033B7D2BDD76933D
A61A4FBDA876AAD635AEA3D4D989FDEC156CA294AD20398E67E38F50AD3E061E
42978BF6D1DE8FAAF004D00134325961913085CACDFC16FEA3711E57127B91C4
6645EC17312453E248E4A3939851FE8503B9E24F335BECDDB3233683D148A624
5DDC28FC9C3957EFBB0334C990A0E96D67A020EF417CDA82BA4120BA817AB491
4B2491E83C97193E5E9B30FD11C20FD9971FAC69CBF12AFAD877C8813277746F
5283CB13BFFD898A79E26D03B32853D20785C75ED7C816667BCEE4FF127F77FA
E15BB2C67BF1447AA09C3B00231ED67CADA44C152EC0D6D1524F132A4B881C9B
9AFC37F08E92979341A8854E12F013072DB3D40F0485E4584E53091F7B973888
67694AF23235A9669114C3E1A9003DF1EA7A2F10592D528354145FA289922A65
94866E4EA2BFE86B28A1858D9B4BD4F139A07998E894EE7E3F02C7AC1621F5C3
24DEB56108CCB88C5C01FD6A14109EC81E90075151EABE73505C9C43CB0BE206
D61FBE2EF021821BE8983FF251395CD9ECD38E6E9B6E82660BA7BE221D32E00E
EEF6FCF3B1392FA8302BCA64138054D5918375C1818F6A1D35D7AB874071EAC1
5E43BF7EC95C240E51A9730FB9EDDCED31C96B5D978492F2A9FA7AB757DFE158
0FDF0456328166753A4B480E431BFC329FFFC47FA639D1F0C9B25CAB15F8F54C
84EAF170348EA60512975B12D76F96D2F6CA65966EF357424973D65BDDC72BBD
7ECB612AB0219EC8369B66BA6CE4413A12FB0B1E70DACB1D05D8C364C94281A9
EEA64E715D1C06273B79FBD402CFAC6A20D142F3C6B70266ED90CED66A698E65
9F4D138B8A097F64F90B5E8A643CBE4979BEE3F3B040956D6EA4E0CB4FCFF3B8
645ECC0825A72B9052D3886DA4F8319691A62866F4E857F4D8A0E9FEA9B22361
24202EDF539137A248D6B91A6F82FFCC4145600F809CC19ED9EDF128ACF5E79F
880F749E88E6D784EB2E22762D2D34E4A8E704EC5CFDF85F2BD6317212EA10E1
C6D74EFA3F3767DFE5B2D7E7528FAF394569E04EAC70C8396807ACECFD82FBD8
21A358CDB75221EEFEF2A178169DC3682B0123147E9EBEDBFB6061F8B1DDCBB2
23F10C97C10328969B5A3A90D681246D5BD5AFB83000C98932E6D94408A45E5F
59B4395881CCBD1C09C7F8123778603DCBE9F9B6E914E42C9E9B2D34695481E4
0B91904AD8D2C22CDC8C504DCC3DF5328C4451517A7F974BA68EA7B6BEB3D8FD
3137B815A5A4B712DC0FE58FAA150A06A437F194971E32E3308C05B699B38835
30F2C4E3CD2D3855A82DE6900AC2B65B897CC103AF1F54A653CE57E87281FDCF
9B906EE80D327EEE752EC8933F39BD94F21DCD370A78302026F8540E8DAA7E4B
A3041A8223FBBC9343630EFACBA3E49BC8D485D942B39062D5824C3AF64F4E5A
A9137DBE9C2304FC798837C61DD06BF1493BCF34678484A16D219084E93D6684
58CE61FA4B9A8A1F4DD1510066DFB8BC76A2517288A87BC7ED856A77D171B15D
D33ADDC150460393CE160D32EF0DF8FE6F1FDEAA348233962744D8A7187D26F9
13AAECD098655543E6B1F15FF1AFB2CDE363401FACB54EC69FDE354501DDE2AF
10DE34B7B4E4A0A1B035D69B4651E206817C9ECC49F2C3841DF75950CFFDC487
5E4B83C31DCED20F02C44D6D8EC540F0C615D6B735CD1C98201FBB56C6668E13
76537AB780BB12A1A96D6FE3793AE71C5553A14C59526226DE83048ABD8C4987
222A5CF0472C3CEF1E2910D108DE2D6ACA9F655F878595F4EDC46FA40B544AB6
D618E71B0B038E461933DC9EA69E6DC8CC50E20C5BDED961C4DDC9BBC87E8404
F41256813479BAFFB684E1A25FFD6D92D8BFB09AEC8B7C49A0881C778C74EC39
6FEA069CEBE105A90F247B9FA8941967E58ABF5546696735380AA8A66DA0A76F
E208480B4ABA46A9C3A3E3DEC9A6CCAE798F6C6054F05F3BE196C9252A0441BE
F17B2355AD4F895436AD8E3499BD1FC5191C98C93C32A41AF880B3F2D148CEE3
193CED0B6E1698FDBB416E2D0A27C8F98C999A3AA4706348493F93FE87AC239C
CC760657DE53DD27BC95332D13B3AAD35F95636EC290DA2CAEA7F7BA00E8B9ED
08ACE96BE736EE4ED2A73E6C5C8EDB7F5E1166F3898963471E7EB4BC88FA818D
3E6172F6244AA16A6FE531CCE672487EEAB7641CBD2081307343B8ED8FF0A9C5
094232A2AF75FAEF29C897F7A032356AC778F677810DAD3E3B6ED6BD14AFD86A
FAE4C9AEBA7C84050FACE29DF74C9AD7D4408324E65A9BD16BB36D7EE450BC57
C3F22F5F307729339EF401553702649573DE790E9DED5345530C20E87D6F585A
EB1E8572AB02BA29CF3FCB731BD3EFAEE422E880966846A77DFF242DA4932B97
035BC1E1A1E738988A3ECBE107F02AE44C3A37CF0E52AE242EFCE7AEA9042AF8
B93D264DF8435E646688941CC7668EC6C6759EB96B46A4357B1351919F4846E1
BF724CDF87195868E59E6046DDDB5AF73EB73A7B079CD0F664D769E71F7F8233
1B3BF12241E2EB52B5DCFE7EA3CBCCFAD3F65B2A9FEDB3E59652C98729AB2BBD
9DC974B524345DD32554063EE2A0115AFF8CE7EABA27D325DF0DF6B49B17E0EF
2E32EB43F94C377761C0F2A1DD706972713D5DB1545C7E2F6ED22B5745FF4A2D
6E714578CC88C6BE9385F59775285CCCC1D854C220227D765EBF1744A2EE772E
D59F60B06D75100B33CEA34DB3ADBA7F96E8D539B4821C238EF04DF78F01FACD
379DDDB7E95D65489CE79C86DE6697E6040A79E21A616C8C0378C69B9F6F0A57
FA60C5AFAD3B438D14F2825BB38D8F2A31854440DEDB4DEAC5A2633F39306089
2D53844FDCCAF80BE718ED5951A3093A784A146ADEA4A239852DC31D65D72EA4
3D7C1FA208DD9A3A4323DD37807C37E14FBB28E21940DED1DD68274D6C03B7C2
4A49009EC8B82A16C2190940128A105E7690C1AD441D35D035FBDD0221708103
BB963F6F39A8BCD5C987B669789F2AFB50FD31E1F1D1F093F7A6340C8365AF4D
89632F6F6A8D5473336EEC461C818A21BB7A2850BBB9A29A6ABA722B76981947
B80419F41785B7918E76E532E9CB6AF25C104C10431CD86B81D6246FA60781F6
403C5772559B2F9CF94CB93E36996392AA3BFD27EF657F5F141CD36DA73092F2
1F04C5FDED2C513697AA180FD862763055134A80FAFFA114DEAF61D75DDF7320
372D7357175966D9590049E16895EA3D40E267077CA36DAFB77ABEB6D9486152
30978DCF7D8EA7CAE2953DBBAAFDD30AFB5B8AAF6FAA02DF953C6EC97CB49F47
3EDCAE634270F6A9C95573D068EC79AF7D893F273D6FD40C2F73287512DFA96E
1E6616CD44DBFBF89E5375BBE9CD63AA3CF9B4F1B0917B65092979169918A8FE
DD1C9318D387013C388D0AF3CD383C5896CF2E1453D0EE9FFF6CC707893A4CE1
6FDD7E2DB73C95CD6B7FC623EFBE3AFABED672DE9D121B697778773020440E42
4A723FF0D14A8675EC0B12990194A6B9B8B2639D45AA444C75C0C00F4549E040
49B8C28C8243312F71E3E7E809D8BE872C4E078527FFF8372D4ADC7D1D694E7D
65F346F608ECCD4DFFE465D094B648406E2475EF2D509F7AD6B6E558F1DB4699
4341A37D14588149A4AE88CE1FEC9D31E66B824F2F7798E4406814002D20E72D
7752FCABFE9220ECA8954FC5EDC4619E633B32BC9DB7F41D915514AA3D1C010A
40A2D5B17B2700A96D4DFD1E629A7FAB88AE9103F9CA4A8AB1DDE445587A6DD0
5BBAE7F649386E95EB168EDB8FBA24D207CFB40C4E4BBE07BCB511A59D248BAB
6593AD04AE23F45889DB4D034DB5A0478A6768569FA889AC89B0E039CC79BD9C
C3EB1E8FEA4ACCADF5182E7BC1C7CE2557E635E60A539D53983C7A7CC3BE69C9
AC2C1ED14478399520A77AB23C7F16C7DFC8B36B5105CA23995A4F55E3B4C900
5F56BCC017928672AF8E7A55C526364285BD8C1CF7905F6286C8B2BDB0B3CE83
CB86116038C1234A554F3862B07DFBD1148AC9EA92645BBA3E2BA84376DC6FAB
6230ED327CA534E449057F2141DFE21706324FF5545D0CE8A5CCC086CAA9FABC
A1FF8116E325C67A714A1622BE39602C603E1E14CE73A4F2F126C2803800B5D3
752516E89EF389AAAD272F05D393E83E5EE495386CC1D2537F9FE758E3702D27
757402E830B10FBACF8231EF68C94A30E7A9D769C28FD9F66E5D6BD0E81A89AB
5F7B8D2445E811EC960B719C2782BC1C0C97A927D18847C6B35C477ACF1CC9BD
04C4512A6984A2599AFF915DC4D1D83A8F4AFDE02D8DBFBCAB8543F7B2E451F7
BA7059D70FB9B6B0BF157F890B48D5591CE7AF93AC73862F2B46F6702585636A
328FC5AF20402A30B1C9EC2AAEE750DBBE6E2A1F2EB1D5CBC49429B2685FD537
1214304F6384F007DEA6F0E1E9926203DC627B76F2F0D593E7FB7C76B5AFFE0A
9A765A383B9590B19B4C29CE1D4ADFBAD55ACBB68BC589B6B1299604390769B9
0E41F28700C7824D0685323B524C6030E51E8DD7DE11A9DF560F578890A54E3E
B7728BDB2F3C8E6E69FC2DA66F3A0F0B86940A1A70544781BEE04BC8AEE27D6B
ECE0A5CD77BD2C9EBE1F896B4C06BE5987CF688672FC59E9C805A494EFAF700B
0C3F6F9B213250E4B49D16C55B067A402341D1FA4D56C5D6D0CC601D174B2E94
A7F80246F4CC8C6D5DDD24729C387B43C1294747F39F303D7B74883A7500649D
D3D84C0DEBF05BCB89175E411A29BAD6E3408D9B7DBB19297616419FE511532F
DDD6C9B9AAF83F3992B716695D5AB39E036A9258F253D8CC1845BE0BF8AFAEB1
3A107876C1FFE85D8367D956D6526626C2B8DB919EB0C2F8CD59B30D1FFC83EE
34DADD7D297E6504FEBAD61414C9F06A1D9C97AA35B0769DBBCC8C7E477FCC63
CC8D0BBFCF33E5B47D81EED29F7F78ADBD48129CDA012017D1E5725507CE46C6
A8F091495649C37E2C9165E1BB9C158A1AB243E525633691BA501BDF22CCA850
5B90A7AA4CF7F53668690652F30CE1B95A5734EDFA9475B0625728CD2028D6B4
E3A94522133EBCA774391505AD8780A86E89DF6349DCDDFD47AA3F2D75540922
2FBC9734E5F9DD5CB58D633758E2F9F37348FC39143EFD536D34E5CBDEFD30B8
F02E24471277FA68948C721B688602941DDE902ADF5378E9D3889F946CD30C27
68667D456AD40E83A30861990B1441F58FF3B55B140F6547BE137349164E5DF6
9A34C14804AF242DDFE8230BCF2D878F82020AD871966AC44955B2CF1BF10B2A
9029734171735CAF30474F1401DDAD12C6A7E3E547A418F6F2D48E6B1A0B1214
F2BC536F85A8098B61A2B95929B95280AE4AC8139002609B789BC1624D879263
55D3EB3352C32C03C4D1E4DF255A06A93ED6F7EC8168AE7D0CA627ECBD4BBD5D
C4CA7A115C96352ECD2E216A84B1029A4BEF9B8FD45B0085053F5CCBDD308ACA
CF7FED61BCAA29668DD97D2786788134C6C76227C1A51A13D359983836F3F1BF
309AD9CF8462AA3D124634263A76C6ECAB02B774504C6FD2841783D7861C7883
BF7A7BE5BBBD57F9F3128C2D152DAFE645A91CF294FE6750D0A3713EE5DE593A
11F2D7E0678747DF17B89F3201790402CBC8108CAD7FDAF9027D83090364DAB3
9F57D4806B7D54EDB05606CC53B0BC53BA4790EBE0DC8D53343FA6844ADA6F41
C384C6C4B9557E810B7425E1D0F4835743CD22C29D6ED36F4C1FADBD9A902A09
45389B6CFA3CC388C044283186A992C2F00DF496288F74B0F8CC6425C346BAED
A1572235C73E14C69085F065E662D087806A642A39CA1A051626D636E632B2AC
745298A8697B436242E7FBD03355AE58467019F74DE9712D4A16E76F7CE22E18
AC24D417816530437DC54FBE17AB3EC8F2C8A46B6C4560568253F4A6B7BA3929
99CB163783474931E73BB6F7E0A670219836B9FCAB8F130CC94AA23AAE6CCD6E
54DB5DA476AA5D7F58B4E4AC5F50D320F55E022E5EA54631FC0C5E0FCBA7AB67
38F594EC4DFD4FF8B8C5FB03E9C1EECA7FE3549FE65759489A8C1A60A26CED51
F1B2F4DD36A318630719A09784794753355BF3B07AA2B0C15C30B4478A506A50
DD234EE73CE6B7CDE475BB6646FC506126EA49DA71F92A5D25B74ABC4C9F19DA
422DCA7A2A12AD8EEADCAD37CE1ADBDAD81490756F15FDBC3EAC8DE2DB3E8BCB
45F0E7524E0B8B4EA61645AB17294FAC56A18D22571A783DCD76E9D8750535BD
88C6863FF5CF3005D6662ABB8300DA8A088C4074E04A36147CB94C1F4BD5C7BE
63E6A06F18A44A7E7BC2624C540143A252947B12066ADDFAD147E2A686044136
AB7B0657811581C5960B83A6AC8E8BD8943650FAFAFE76275154804C0863E11A
C50B926BA085DD816B1DD41A93ECAB39E67A701D02969045559A456571440300
F0BB4CED6EA50CB3B2B68B8DDC32EA172A1F606410FDAF958B0E2C85221CE30C
D7293EADDD2530BBF0E1B4D89EAB7797C8318F3589A9233BEE0535188A6E8143
939F8BF89E13EA8788F257E95EFD2B3A23BD8323853BC14BEDFE2D60D1EE148F
781CFA4575D969FBFCF71193B7853EDB35368C57A1A2499AF5C78794A37032DA
AA55E4BA58DE0377CB93B464DED20371FA6F46F76BBEF3F96D398D8FDD8CB073
F77DFD57D62B5627BA7E38FFA7C29EF7F6E2EC0C52A31E3BA24F8ACA3CB0208B
8D679967DC11BCB8F2E9F185E18B038D286943CDBE0771B9E1CE8EE707017EAA
62166BD8A0B8A48D419066CDB8BABE3AE95EEFC198C98588D9B60AD2A50AFCE9
9194B902AC3DAB2EA9CC8475F18D5D97E9EFF3ACBCB42AE69A426BA5E64FABE6
5A0569868C1976D07F17EBDC4077DBD3AFF89C44D1171A71D92CDAF834FD3012
8D65F790DCB15653F1042CD1BC89CAD662A988C44C021A36BEB15CB8A548B37B
38B26EA6BD9C32B00F7F8FE455DF7AFEB4B48C4405836A47BBBE8FD7A2F9739D
B8180B563172D87003EE1AC3A0894B383C9EB722DB3CC8D922203BB8E713DDB1
48EE443B5D64AC68085A9C1CEBC6D2F779992450C54A7A0E1570DCD10809D13A
0EE3711D05B6EACCF201EC67484EBE7EDE0A050EF258952ABC0E14777C907A48
31368D1BB6426D8AF577A5855BABF0AFA852451F456B77B272FED37CD28F168A
94C2EE1671ED696DC2A85896D05338B9981C9A1671B29B71E521A0D8050074D7
A7D21A022222F80543FAEB0636E1F31B355FA49BE3FA0347CC91DFAF2EA1EC9C
6069F71022739A78176F13818AD4F0C7828C9D578169910CDEE024551EB38C48
6292E3FA2EE3E78595DA7DFB9B5AFA3F160712ADC9E884D0E6CFFE077688F146
2668675983B8DA2755A6CA1F32697C9042781684ACDCB79694F8021D1E69E9BC
6A7A2D59170E72FE24E66DD9D4B23A5F68B5DCE6474B043F9162C39D92B8A5C9
7B14D8EA5971F7D5D6AD83C62B6A88BD1CAE5F08CED206166867CE44C3ABA2E0
593E472B57D6572B5983025B1158CB24DA58B0F5CB7B72B40FACD820DBBD9B3B
8599F8D33F30D9E7B87145BC3A51DECFD18B26B112821C12BBB5B77E75E59863
9F1E9DB54DE3021D1A107A249B9DB1CB02B52F2E454991A61D56B4B5722E194C
3A99F43257CE664A8B29A07AF0FA313458E50D04FACEC9D6299E8990419056B8
5E10C9EF7AB290CF5E2085BA79541599DD68E0DAE648E19260D1A97AB3CCE044
D766FB2A6949A02C4E3064CF92380679345EF66E5F4252E563C70A8D1E5B9861
BFF280781D9875E0F09CB31C05A8DFD048A6FB50EAD41F4707F09A3358A5F1BA
B491C975E8787E78C106674D08663A5EE613B5E513CE2A8A450450FD758EA84D
E40F6FF3644B802016095A2E62F9637ABC87A1AD2EADACC64E36B786187031FF
905F1A45D33DFD65CF8858AD6109054535D4C10F4757D12BE3F2B94F7AFFA231
60B7201CB07D5DDBDF337589C6EE14D99E68F113C6822E541C6584E77E3ACAAC
49AE3DCDF50722BE8D2666461823EFC219DD8B77973CB6BF83B5497FF3997796
FAA73BBEDBB60181976F0A06ED63AE9F17D0E9C89930DD7802C442CE80C1EA3C
1E46BE53C6F11D1A55BF675838C2E27AA89C4C417FF9ADA0B5B056B9D9EBFF75
4428AE15D0E5F89F88C9ECEBAA0F057CE8B370887948FF0FAC092033C7B24A6A
AEA135BC13E6745695F152BC0DFC9A47786B04C573DC2C84D10D2215C3A82BFD
B44CF668F8AB40D64CBC0852F83DFC35F2FA44BA98D38EC3E83B7AF86F4EA77C
FDAAB87193A93F31341B9DF942D5D4A04B99BC5AABC6D6B39DBE1CB7DA021B14
490995C7ED41E7E2DC89B9AE6822AE56D9E05A43D4BEE21790FEE4B8285829A6
31F08CA650A40348FC8DA1BA199A117EDB7A5E7B75B477C2BF78B985A03517B4
161A3CBB6725CCBC53B3E3E182E29B81ADD8B88F023A1A62558D81901416B89E
A284B4FA4751615FB96C6221CD23035A6DBCE0DDB5AD42E471B7365457AF84AF
281867BF5FD0EB1E7BD48EC150545B3427C18222102AE68684F938314B37B4D5
5391231032A9367BC2FDA6B031D1F268F00DDD16CEBFFB9993556A622F938C17
FCC2A7EF782DD071B9BBAB2E4E978A4B30F56A0DCE1403A5738FC65BDCA41D7C
53C4F77EA256CF86C591B650FA5757327B08DEC8CD522A94096B54D067FC40C4
E3E7AF212C5031FF077903C8198F2670E1D38CFC046FAAA0F077008430FD153C
85F57900FB8A1F9E63DBE4E3FED36959BA70CDB2554EF7A69FBFF01924BC2613
C7770AFFA4BEDCC2539F8E7FA007772889790F29C0EC1F76DA5EB1DB3B7EE416
E14630ED8299A90685A9BEE4CBA85A338691E9EF4771ACAD2B6C36F6BC56A4BF
B59C946D1C63FCBD0D706C8E0A72ED5B305B53ACCE6B857DEAEA74BBC359EE6E
919B19535523B4D316BABCC2F1948DB3598AC54EE5FB992D9164821C665248FC
BFECFB8720C6087052A661F00CB29BECF55015DD983B2FB4675F6F77D1F5B1AF
03B1F5C29DFA043901369DE7A3DF570027202B73D381F7CB0CA3F16967BC3BCE
6CDD2E56A277DFFB63E0F9026E2B461D12B8FC487D0CF9149C462D21B56E9BB6
6724E0C9BCF40FA62844D7E37B607145C7D3E1A85BEB328DD18E8F2F1D3EC54E
98AE4EAACA821ACB6D10593D1010768FC36BB92964F037F7B860987655E97E6D
408712B8150D3A67DC221185187FD33134CEDBB49314E16192266A9D1A1D7521
6AD5F8F1A487219B56B43E87CDE486BD2D14B62C96E0CC745E268DCA7985A8A9
8E2273EF02A3817121EF55F3EFE76342942AA46E6CD682FD5B6DED50AB8AEFDB
FE23651E08C8C0FA109631DB82FC56E3F40CBD359F4A92D103B3FC8CB03CF1EA
CFD32D023FF6228B412AF624F58C77E12A8CD4A58FDE51E8BF0DFE03973D1F78
05C65CB041FB2541B561AEC19D5574DC1FEEC52AAF42BF7E22418537EC841AAD
80258C6BB95FDD61DB7C9A7E11F4E4ED2DA7546D2A60605D588BADEA34BF0EB2
B570F5DCF53E3344B00F0DF009CC8F7909369E793C5D6ED62F1386F46C96E01B
714DB5E541BEA3E186EF8D658964F0368FCCCFB7A3318BED42249E591FAD2631
B1C7C145321AE2EE5A676716C278816ED0E43B21B1EA699AC541B50CC55979D7
EDC43006A3B4EDBE5B4E0E4EB02979AF5D4CA9CBE34771C22AD65A7D1F880905
0BCD9C6425715CB94064AD55D1AAAF6A1BD313C81A7F298A6CA72F10CA625817
C2051857423D8636C9A67B364F8E1EC1CC156EFF19C60B61F1B4123300821DD8
E0996FEC6BC543657B6A0E736B1DE557F6E6EA6E8D7B28290AE7E3E01879877E
9A77A1671F91191FEF19FE90534C72628A1D39415B5DA0CAF19D3104B0ABFA16
2C9AEAA171EC1B4F3D1A3B5E5DC9C5103A1FE4EFEE3FE3543E6CCF4BFE7768D4
FABA090A99B61AD9DCBE8B7C723517D956A9C7582F0927DAABC1CDD88F522102
BF8993E4CDF0F9DC11574030B5E2C0A055418C93CBB9185700010926E6E75A38
47F32561D02D28B185C9C2E17A046E6D057E15FCA753322B18353B8A48107B5B
8A1142A5FB25B79BF9AB1D67CB1A2ED63E87708165901AE6E45BC152311886E3
C0CD2161FF7D598B1AECBA1C8E96F602F33B065C01CA483414B996F5E24E46D4
C3514AFA7A9D60B0297BA9E863D16A7A945F99D384618B4EC0F09A1F03C5CEEC
7886F96BA490FAE063C7FD4501199167C5DC25FA48843A1E34FE34BB45DC894F
F018386AA7E87869B12DC5DB26F69062E749699B835D0A7201D75735BD97892F
BC501C78D48DA9DD55C3D3EB5749DED2D7A6DA49F9B4EABF60F56AFD1D9ADED5
8F4493F5A3C8ECF09803467A9A0F180AB7389563D77ECF6F593354B5DB96D899
33B580C947A17D93151121D869D2C11C01D98E5A06A8E9EE182B41B51D55A154
01FC76F02836045220C4F4DAF2FBEBD00A74FBC10E8BD54F1C30405D1032DC81
19D78CB50F0F6BFDA9E76480E24FDC71AFF5AF1F2F1060FA376F95027C15DD31
E915C4C5959614E7A968874A8568D2C0909D29DB06B8F922D5921802908A058F
FC995812C59CA067AB45858CA7607942A75FAA752B35985893DEDF4DEAFC4671
88C64BF5BCC462B04E29FDA3A0CBB8DEAFF0F4D6E0839A49C90931BCF4322C82
FF4E20BE5E35E021E026DEBC2531BB059ACF5C0EBED104768A14D0C7914E87E3
45243934D45CC7659B8CAE6D864F2693AABB4AB5A0DEEB6DD6CAFD680B4428FB
2B48CEA922427AB0C40355D58E33160FF0C68BC63FFE94F9461A3BE64F28E1F8
D49FA508708C8A0686EEA79E56875189F5FA227C999D9DA37791C44FF0EBF49E
34DE52D25FE166E8BD6C59FAC2BE1B57C6109BBD84F421D08E1CDAE2FB90B06D
8B62837E2FCA2E8D72BF1914BAA1CCAAB3E2FDD37A2F6D5D22627CCA9FD68F28
63EFD9E2A71C256653FB14CFDB6BDF0609B70E8CACA616BD70432E93F4840E29
B901C4656995DA9E317003F050C0424AE3A584424DD2FA8B5860D30844A0BFC7
60A975ECA573AFDD6F6B2C1DCDA4E3C2A124276CC240F65BF0D036093FE4EDB5
7F2A39338FCF33C74D4548A19A8245F0949E080524A1DFC7E3C155C1EF8385A4
7FB5777F8A0F66A67E7E9657995FAC76D7F930E734E47B5A22C7B27F1CEBB6EA
D2A515E85FF78968867244F0BE8EEA0505BB9EB40D8DAD02F601B6FD66CDEFCA
C44C36923594A41F8256BA1D69F104B3B6D22D6DF02FDD262AB4FBECF7A7F9E5
5FE3830B459E357B256DF46D21F8081880B7A531064F5AAC0D3E04FF81B20845
70AC37ACE8594DF6DE4349E8D53420F6566C4E7AED23C8A9708037C94DE0E67D
130C4C1061C1A186669AFA88B71FA3955921CD89CE793F61FA9B3E3B9B4F02E5
C1814F25DF99E9038248E001FDE1044CC8C0F18597D508E143B06DA21AE274AD
64C21DFA0EE06BE61E8A442168C14B439216AC042934C79882CD0D0BA02F2D98
6A1EA0CCBEC0802C070F346FCE884ED56201D77EA761670A0AF2EAA5F513A65A
6EA5D153E63BCCFEF0A46A9E440318729D8D5C45A8C1DF19A244BB9DB4775D9E
AD430748C0C2D1E52F363AF5F622C8999425F22115A65376157F071500869235
385737DE9544E506F291B4D837DD986800450260FC21F98B8D860B96A86DC729
21FEB635A43D9E48ACCD3B3786CC312D547C3208ED997CA020CCB0F6E0959096
333C32598DF9F65857AC7120361A968B7453E1C186E443696020D116A3DCC88C
FFDE9435237AA97834EF99F411FE73ECE22A0838F8B047CE7CF78D1DDBA5882B
4497D66A2EC85E8CA7B0A9A2488B39C7861856F517D867F4FA0A8BD5C169ECC8
6BDBDA723AC22DF3EC60C372DBB901EDEE5CE32AA7CC3934EA503CE30F579C04
402A206EBBE8219BB58396F2EF232786DC9AABF8FC86D2AB18AAC0CA7C390566
0816972914CBCF9B6786A4389C110CF33D4DC55E5C609988E79D6C3B8A8E6CB8
ED165A5298B5B2B562AF36FC8602EA4C10A75B866FBCFEE8CB347E8798ACFFE0
04DE19369FB6D1C34C49EA5093E2741E079C985F8BD7C22DDED91C7F44FFA8F5
1F861BA9E4D77D5C5E219D0235BD38BC1DFD24B5A87544499D547CCAF6C17ACE
B644F4A63433430AF8F85E0BBA267855C1CF2D8352BBAF13B86259191C07606E
86FE514018B7ECEF1CAA6DA4AABFEFCB7533CF046358B475A94D05760DFFDF92
8EF92DFC5ED9FD524F9120A9B1214E970A6A1E052D30F64EFDB5ECF73951D84B
3938BD59EAB892E687F05B5085E3FE29A9C73BBB934040B42ABE17A1816314B1
594BF4E457A71E95BC1CF465688973C2D818B3AFD97D503BF0BF665628925921
AE6DF3260271667AF58AB376E6744399BD7DAEEE988374F34CF0FAF00BF9544D
E862CE90BE3292EA531AA7FCEF6E3CD3C625DF6E8D4BA2F96B1537254D3A99FB
0F8134B2C1A90169FCA7BCA92C1E75C28ED585D30AB3CC4BDE157623AA55113D
3BD6703A7F30BC3059AE08E9BF9BC8AA2392ECF2389F33F09CDFAD886709869D
36E207CEF1B622153A5C394BD54FAC74E9D11786938C0AEB908A608CCF530529
D49677A373F66E6BF0B7ACAF95C7D1D66FFA086E988C7B29048D284190600D01
19CE93B0C9884088E2B6D0764C2951EA25DE42A530D782434BF0EE89E1C85215
BE3E3136ACC13292281F419167C9C49582347B0F768626F7988345A80B05DB2F
A4973077E2EDD2D897CF4E87C4541FEF581AE68A392C1E2D492DB3AB6C3EA5E5
C249ABE628AE686D2963DF08064C263511C0933152D67897805C1FBDC6D2B18D
EC5E0825D3F0E99F4AD44D0B040027A81FCEF690C49D0C886DC4DFE8E515055F
5C49FD52A04A650044C219C6670E2711EF661443DBFD3A078E0DEE0E08DEBA98
534B8555E64BDA1BD14CC8343F7744F5BF35C3E14DA0F2268806AE8509A3DA08
6D9253F213BA7804CF03D1911BC331365AF8480D4B5993821EBD7203C4856FFA
9981E837D30477A8C3FA0CFC6855AC43B620821742F8312745822C31ACD63AE2
FD1ECDDCAB5E555A4889F08B37C115680608C74FFCA44A8E434887728DD4666D
39397C2D0BCB395779AF76E81E2FBF4A1F4070A6BC1E0EF6B0AEB45B6E099ABF
A139E60C10394DE764729EE1F8F2A9E9F46055F90B9018ACCA3210B488D33D50
155B1CF82B990DD7D6F001694E8B5185D6E1C91928AE773C248490A333988721
2B5B5D0256A0C213DECEE20AD1A1EFB5D254BCB7FE6FCD0D16ED30A7F1A68292
DD774EFFE0D73E70C1AB19D222A161A31299426F0653C6A3F07C2B52C1EC6C14
E5689883D03DEF6A23866A4C6D35F91068E9A4BEE0E378567AF84043906EB174
98796FB2C4300DF54BFD854A2EA2F3E7F90CAB9E69FF6DCA5F0316BB22017BF7
D3653E2CD840806588C8828FF281AE1AE07C07350966C8CB2CCC9ADD8CE952A4
C76DE590C936E308A95C35ED05F3057FC3509CF511D5D3F24EE9A7F22C2E61E9
34F77F05FD748D54492B0C991C7137B7C3BCF5BA9862A045F4506368B71AC0F8
43E28F88EC8E4CD17A9DC6269AAE064832C07898623C0BBB2B08B029E357BD8E
0CCA89FBA845400233C99A686E43159C9DF9EF2578E60BBFC9198906597FCB67
23C91D1530DEBDBA583CA8EDC379CEE8A6FF7B6A7090C126F8CFDD148F816B0F
A29A54EED9C12D38CFB12CAD5D2D0C3FBE6FCE82B1E18B12B41DDA65D91F8727
453D95FD7DE2AC5E7594B3EF472F61679FA5B2D3E8AE6833AD399B0276CA6813
C041EA7864DCCE934D41F4B3B234252C7414253B0E1C48149C05E7CAD6D59F64
98F06D2F2007E1D66F6B8D7B554E9D42405C18BDD690ECACAF3679D36FAD49BB
0E690AFC9E0F42E00B867BF27912DDB1B85A9B6421BAAF774563C49CFC144ECF
F0A0F63196DC7979E545C905A5A9065C71F8F05258244C6305C1BF97F63DEDD5
98046E24880D1E68276D4E86C93783C72408827E6800FC4CF714D9A7C5179D76
15EB925BB9E39000E9921B100B50BAD1522C29C4049E7317FD2D14C25E43A60C
44D1B9613CB5BD14E4A8F893D7422B26C9DD6493BFC0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (CorrigesTerminale.dvi)
@start /Fa 205[24 50[{ TeXBase1Encoding ReEncodeFont }1
45.8281 /Utopia-Regular rf /Fb 188[38 37 36 65[{
 TeXBase1Encoding ReEncodeFont }3 58.049 /Utopia-Italic
rf /Fd 73[34 34 31 31 179[{}4 76.3801 /Fourier-Math-Extension
rf /Fe 225[60 30[{}1 83.022 /EURM10 rf /Ff 247[83 6[42
1[{}2 83.022 /LINE10 rf /Fg 94[42 112[17 48[{}2 58.049
/Fourier-Math-Symbols rf /Fh 173[51 82[{}1 76.3801
/Fourier-Math-BlackBoard rf /Fi 201[31 31 31 31 31 31
31 48[{ TeXBase1Encoding ReEncodeFont }7 58.049 /Utopia-Regular
rf /Fj 188[57 67[{}1 76.3802 /Fourier-Math-Cal rf /Fk
55[55 1[55 55 26[55 55 5[55 1[55 48[64 61[45 78 7[76
76 40[{}12 76.3802 /Fourier-Math-Symbols rf /Fl 134[36
39 1[39 47 12[46 38 24 2[34 43 43 12[46 41 5[70 9[50
48 48 65[{ TeXBase1Encoding ReEncodeFont }16 76.3802
/Utopia-Italic rf /Fm 93[54 162[{}1 76.3802 /Fourier-Math-Letters
rf /Fo 21[39 39 39 38 6[40 73[38 31 26[37 39 37 1[38
46 26 33 30 45 46 44 47 70 21 1[21 22 46 40 24 39 46
38 46 40 3[25 1[25 4[48 2[41 2[46 58 1[72 43 2[27 2[44
1[60 52 1[49 5[20 20 2[40 40 40 40 40 40 40 40 1[20 30
20 2[27 27 21 35[47 47 2[{ TeXBase1Encoding ReEncodeFont }62
76.3802 /Utopia-Regular rf /Fp 22[40 112[40 1[40 48 28
34 34 46 47 45 49 72 24 2[24 3[40 46 38 1[42 14[52 12[48
1[53 8[21 4[43 43 43 43 43 49[{ TeXBase1Encoding ReEncodeFont }27
76.3802 /Utopia-Bold rf /Fq 22[57 57 113[57 69 41 49
48 1[68 64 70 104 34 2[35 3[57 67 1[67 60 12[69 16[76
17[62 49[{ TeXBase1Encoding ReEncodeFont }20 109.987
/Utopia-Bold rf /Fr 22[47 112[45 4[40 36 2[53 5[27 1[48
1[47 55 45 31[63 67[{ TeXBase1Encoding ReEncodeFont }11
91.6562 /Utopia-Regular rf /Fs 22[68 82[66 32[80 45 58
51 78 80 1[82 122 37 2[38 80 2[68 1[65 1[69 12[82 6[125
77[{ TeXBase1Encoding ReEncodeFont }18 131.985 /Utopia-Regular
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -254 -561 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-246 -246 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246
-246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246 -246
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Compl\351ments sur la d\351rivation)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -246 -246 a -246 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -246
-246 a -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246
a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 0 TeXcolorgray
815 166 a Fs(M)n(ath\351matiques)30 b(\226)g(T)-13 b(er)q(minale)29
b(sp\351cialit\351)1496 577 y Fr(C)o(orr)q(ig\351s)18
b(des)j(exer)n(cices)-246 937 y
SDict begin H.S end
 -246 937 a -246 937 a
SDict begin 18 H.A end

-246 937 a -246 937 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -246 937 a Fq(T)-10 b(able)22 b(des)h(mati\350r)n
(es)p 0 0 1 TeXcolorrgb -246 1120 a
SDict begin H.S end
 -246 1120 a Fp(1)67
b(C)o(ompl\351ments)15 b(sur)h(la)f(d\351r)q(iv)o(ation)967
1120 y
SDict begin 12 H.L end
 967 1120 a 967 1120 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 967 1120 a 0 TeXcolorgray
3136 w Fp(2)p 0 TeXcolorgray 1930 5895 a Fo(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -246 -246 a 83 x Fq(1)105 b(C)o(ompl\351ments)23
b(sur)h(la)f(d\351r)q(iv)n(ation)-246 -54 y
SDict begin H.S end
 -246 -54
a -246 -54 a
SDict begin 12 H.A end
 -246 -54 a -246 -54 a
SDict begin [/View [/XYZ H.V]/Dest (exo.1) cvn /DEST pdfmark end
 -246 -54 a 0 TeXcolorgray
75 x Fp(Ex)o(er)o(cice)14 b(1)p 0 TeXcolorgray 42 w Fo(La)j(fonction)27
b Fl(f)36 b Fo(est)18 b(d\351\002nie)f(sur)h(l)o('inter)q(valle)1517
22 y([)1542 21 y Fk(\241)p Fo(2;)8 b(6)1705 22 y(])1749
21 y(par)1596 220 y Fl(f)19 b Fo(\()r Fl(x)5 b Fo(\))14
b Fk(\306)h Fo(0,)8 b(5)r Fl(x)1977 186 y Fi(2)2024 220
y Fk(\241)i Fo(2)r Fl(x)15 b Fk(\241)10 b Fo(4.)-246
420 y(P)n(our)17 b(tout)j Fl(x)g Fk(2)14 b Fh(R)31 b
Fo(:)1388 519 y Fl(f)1431 485 y Fg(0)1452 519 y Fo(\()r
Fl(x)5 b Fo(\))14 b Fk(\306)g Fo(0,)8 b(5)i Fk(\243)g
Fo(2)r Fl(x)15 b Fk(\241)10 b Fo(2)g Fk(\243)g Fo(1)g
Fk(\241)g Fo(0)19 b Fk(\306)e Fl(x)e Fk(\241)10 b Fo(2.)-246
669 y(La)16 b(d\351r)q(iv\351e)g(est)h(du)e(pr)o(emier)i(degr\351,)e
(donc)g(pour)i(obtenir)f(le)g(tableau)g(de)g(signe)o(,)g(il)g(faut)g
(r\351soudr)o(e)g(une)g(\351quation,)h(puis)g(r)o(egar)o(der)d(le)i
(signe)g(de)i Fl(a)33 b Fo(:)1809 851 y Fl(x)15 b Fk(\241)10
b Fo(2)15 b Fk(\306)g Fo(0)1693 976 y Fl(x)g Fk(\241)1812
992 y Ff(\001)1812 976 y Fo(2)d Fk(\305)1929 992 y Ff(\001)1929
976 y Fo(2)i Fk(\306)h Fo(0)10 b Fk(\305)g Fo(2)1925
1100 y Fl(x)19 b Fk(\306)c Fo(2.)-244 1307 y Fl(a)j Fk(\306)d
Fo(1)i(\(puisque)k Fl(x)15 b Fk(\241)10 b Fo(2)19 b(signi\002e)p
1 0 0 TeXcolorrgb 17 w(1)p 0 TeXcolorgray 3 w Fl(x)c
Fk(\241)10 b Fo(2\),)20 b Fl(a)h Fo(est)d Fk(\251)f Fo(donc)g(le)h
(signe)g(est)g(de)f(la)h(for)q(me)45 b Fk(\241)18 b Fe(\036)f
Fk(\305)p 2226 1225 262 4 v 2226 1349 4 127 v 2484 1349
V 2226 1351 262 4 v -246 1472 a Fo(On)h(en)f(d\351duit)h(le)g(tableau)f
(de)h(signe)g(de)25 b Fl(f)1031 1442 y Fg(0)1069 1472
y Fo(et)18 b(le)g(tableau)f(de)h(var)q(iations)f(de)25
b Fl(f)51 b Fo(:)p 0 TeXcolorgray 0 TeXcolorgray -19
1640 a

 -19 1640 a -19 1640 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -13.56602 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a 168
w Fl(x)-19 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -36.66914 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a 111 w Fl(f)135
1610 y Fg(0)156 1640 y Fo(\()r Fl(x)5 b Fo(\))-19 1640
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -70.33508 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a 122 w Fl(f)18 b Fo(\()r Fl(x)5
b Fo(\))-19 1640 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -22.6787 moveto

 204.10854 -22.6787 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -45.35742 moveto

 204.10854 -45.35742 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -90.71487 moveto

 204.10854 -90.71487 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -90.71487 lineto

 204.10854 -90.71487 lineto

 204.10854 0.0 lineto

 closepath

 204.10854 -90.71487 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -90.71487 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 50.96643 -14.40787 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a Fk(\241)p Fo(2)-19
1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.29675 -14.40787 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a Fo(2)-19 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 190.32938 -14.38297 ] concat

 pgfs


 -19 1640
a
 0 setgray
 -19 1640 a Fo(6)-19 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -35.44627 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a Fk(\241)-19
1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -22.6787 moveto

 124.73297 -45.35742 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -37.06345 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a Fo(0)-19 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -36.57706 ] concat

 pgfs


 -19 1640
a
 0 setgray
 -19 1640 a Fk(\305)-19 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 52.27333 -59.46468 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 54.26588 -57.47212 ] concat

 pgfs


 -19 1640 a
 /pgfsc{}def/pgffc{}def
 -19 1640 a
-19 1640 a
 0 setgray
 -19 1640 a Fo(2)-19 1640 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 52.27333 -59.46468 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 54.26588 -57.47212 ] concat

 pgfs


 -19 1640 a
 /pgfsc{}def/pgffc{}def
 -19
1640 a -19 1640 a
 0 setgray
 -19 1640 a Fo(2)-19 1640 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 15.44226 117.01184 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 119.0044 -84.68742 ] concat

 pgfs


 -19 1640
a
 /pgfsc{}def/pgffc{}def
 -19 1640 a -19 1640 a
 0 setgray
 -19 1640 a Fk(\241)p Fo(6)-19
1640 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 15.44226 117.01184 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 119.0044 -84.68742 ] concat

 pgfs


 -19 1640 a
 /pgfsc{}def/pgffc{}def
 -19 1640 a -19 1640 a
 0 setgray
 -19 1640 a Fk(\241)p
Fo(6)-19 1640 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 64.96579 -57.71567 moveto

 110.95607 -76.13242 lineto

 pgfstr

 save

 [0.9283 -0.37172 0.37172 0.9283 110.95605 -76.13242 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 188.3457 -59.46468 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 190.33826 -57.47212 ] concat

 pgfs


 -19 1640
a
 /pgfsc{}def/pgffc{}def
 -19 1640 a -19 1640 a
 0 setgray
 -19 1640 a Fo(2)-19 1640 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 188.3457 -59.46468 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 190.33826 -57.47212 ] concat

 pgfs


 -19
1640 a
 /pgfsc{}def/pgffc{}def
 -19 1640 a -19 1640 a
 0 setgray
 -19 1640 a Fo(2)-19 1640
y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 136.30339 -77.02061 moveto

 182.29369 -58.60347 lineto

 pgfstr

 save

 [0.9283 0.37172 -0.37172 0.9283 182.29367 -58.60347 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 1946 2415
9 777 v 0 TeXcolorgray 1992 1721 a Fo(P)n(our)16 b(compl\351ter)j(l)o
('extr\351mit\351)h(des)d(\003\350ches)o(,)i(on)e(calcule)h(:)p
0 TeXcolorgray 2161 1821 a(\225)p 0 TeXcolorgray 50 w
Fl(f)h Fo(\()p Fk(\241)p Fo(2\))14 b Fk(\306)g Fo(0,)8
b(5)i Fk(\243)g Fo(\()p Fk(\241)p Fo(2\))2849 1791 y
Fi(2)2896 1821 y Fk(\241)g Fo(2)g Fk(\243)g Fo(\()p Fk(\241)p
Fo(2\))g Fk(\241)g Fo(4)16 b Fk(\306)e Fo(2)p 0 TeXcolorgray
2161 1920 a(\225)p 0 TeXcolorgray 50 w Fl(f)19 b Fo(\(2\))14
b Fk(\306)g Fo(0,)8 b(5)i Fk(\243)g Fo(2)2685 1890 y
Fi(2)2733 1920 y Fk(\241)g Fo(2)g Fk(\243)g Fo(2)g Fk(\241)g
Fo(4)16 b Fk(\306)e(\241)p Fo(6)p 0 TeXcolorgray 2161
2020 a(\225)p 0 TeXcolorgray 50 w Fl(f)19 b Fo(\(6\))14
b Fk(\306)g Fo(0,)8 b(5)i Fk(\243)g Fo(6)2685 1990 y
Fi(2)2733 2020 y Fk(\241)g Fo(2)g Fk(\243)g Fo(6)g Fk(\241)g
Fo(4)16 b Fk(\306)e Fo(2)1992 2169 y(On)j(peut)h(aussi)g(fair)o(e)g(un)
f(tableau)h(de)f(valeurs)h(\340)g(la)f(calculatr)q(ice)o(.)-246
2646 y Fp(R)o(emarque)d(:)k Fo(La)f(courbe)g(r)o(epr\351sentative)i
(est)f(une)g(par)o(abole)o(,)g(dont)f(le)h(sommet)h Fl(S)j
Fo(a)17 b(pour)h(coor)o(donn\351es)f(\(2;)8 b Fk(\241)p
Fo(6\).)p 0 TeXcolorgray 0 TeXcolorgray 908 3778 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 250.95338 a add def
/d 0.0 a add neg def /h 123.20035 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 908
3778 a 1466 3041 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -85.35818 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 183.8049 0.0 -67.14848 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 14.22636 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -56.90549 0.0 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 34.42776 0.0 -88.77258   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 183.8049  0 -67.14848  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -67.14848
 183.8049  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-88.77258  def /maxTickline 34.42776  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 34.42776
0.0 -88.77258   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.8049
0.0 -67.14848 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 34.42776  0 -88.77258  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -88.77258
 34.42776  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-67.14848  def /maxTickline 183.8049  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 14.22636  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 14.22636  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 34.42776
0.0 -88.77258   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.8049
0.0 -67.14848 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1451 3138 a Fi(0)205
b(1)g(2)g(3)g(4)g(5)-1469 b Fg(\241)p Fi(1)-309 b Fg(\241)p
Fi(2)1377 3060 y(0)1335 3178 y Fg(\241)p Fi(1)1335 3296
y Fg(\241)p Fi(2)1335 3414 y Fg(\241)p Fi(3)1335 3533
y Fg(\241)p Fi(4)1335 3651 y Fg(\241)p Fi(5)1335 3769
y Fg(\241)p Fi(6)1377 2942 y(1)1466 3041 y
tx@Dict begin  gsave STV CP T /ps@rot 0. def grestore  end
 1466 3041
a 1466 3041 a
tx@Dict begin { 56.90549 -85.35818 } PutCoor PutBegin  end
 1466 3041 a 1466 3041 a
tx@Dict begin ps@rot  RotBegin  end
 1466 3041 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4. def /x1 4. def
/dx x1 x sub 49 div def /F@pstplot (x^2/2/1.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 14.22636 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 14.22636
mul gt { moveto } { dup -1.e30 14.22636 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1466 3041 a
tx@Dict begin RotEnd  end
 1466 3041 a 1466
3041 a
tx@Dict begin  PutEnd  end
 1466 3041 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0 0  setrgbcolor  [ 56.90549
-85.35818   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1466 3041 a
tx@Dict begin { 59.18175 -82.51295 } PutCoor PutBegin  end
 1466 3041 a 1 0 0 TeXcolorrgb -1 x Fl(S)p
0 TeXcolorgray 1466 3041 a
tx@Dict begin  PutEnd  end
 1466 3041 a 2992 3778 a
currentpoint initclip moveto
 2992
3778 a -246 3861 a
SDict begin H.S end
 -246 3861 a -246 3861 a
SDict begin 12 H.A end
 -246 3861
a -246 3861 a
SDict begin [/View [/XYZ H.V]/Dest (exo.2) cvn /DEST pdfmark end
 -246 3861 a 0 TeXcolorgray 116 x Fp(Ex)o(er)o(cice)14
b(2)p 0 TeXcolorgray 42 w Fo(On)j(consid\350r)o(e)g(un)h(segment)1052
3978 y([)1084 3977 y Fl(A)s(B)1190 3978 y Fo(])1233 3977
y(de)f(longueur)h(4)g(et)g(un)f(point)i(mobile)h Fl(M)25
b Fo(pouvant)18 b(se)g(d\351placer)g(libr)o(ement)g(sur)g(ce)f
(segment.)p 0 TeXcolorgray 0 TeXcolorgray 1382 4460 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 136.85764 a add def
/d 0.0 a add neg def /h 44.95538 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end

1382 4460 a 1240 4524 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 28.45274 28.45274 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1240 4524 a
tx@Dict begin { 83.08195 42.67911 } PutCoor PutBegin  end
 1240 4524 a 51 x Fo(4)1240 4524 y
tx@Dict begin  PutEnd  end
 1240 4524
a 1240 4524 a
tx@Dict begin { 42.67911 19.91682 } PutCoor PutBegin  end
 1240 4524 a 1242 4562 a Fl(x)1240 4524
y
tx@Dict begin  PutEnd  end
 1240 4524 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.26372
39.83366 91.04869 39.83366   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
39.83366 79.66776 39.83366   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
17.07181 39.83366 17.07181   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 62.59595
17.07181 51.21501 17.07181   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 28.45274 28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1240 4524 a
tx@Dict begin { 24.185 30.729 } PutCoor PutBegin  end
 1240
4524 a 6 w Fl(A)1240 4524 y
tx@Dict begin  PutEnd  end
 1240 4524 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 142.26372 28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1240 4524 a
tx@Dict begin { 143.97081 30.729 } PutCoor PutBegin  end
 1240 4524 a Fl(B)1240
4524 y
tx@Dict begin  PutEnd  end
 1240 4524 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 62.59595 28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1240 4524 a
tx@Dict begin { 64.30304 30.729 } PutCoor PutBegin  end
 1240 4524 a 2 w Fl(M)1240 4524 y
tx@Dict begin  PutEnd  end
 1240 4524
a 2518 4460 a
currentpoint initclip moveto
 2518 4460 a -246 4643 a Fo(On)h(note)i
Fl(x)i Fo(la)c(longueur)g(du)f(segment)946 4644 y([)977
4643 y Fl(A)5 b(M)1107 4644 y Fo(])1150 4643 y(et)26
b Fl(f)19 b Fo(\()r Fl(x)5 b Fo(\))17 b(le)g(produit)h(des)f(longueurs)
25 b Fl(A)5 b(M)17 b Fk(\243)10 b Fl(B)f(M)e Fo(.)-246
4691 y
SDict begin H.S end
 -246 4691 a -246 4691 a
SDict begin 12 H.A end
 -246 4691 a -246 4691
a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -246 4691 a 0 TeXcolorgray -141 4787 a Fo(1.)p 0 TeXcolorgray
43 w Fl(B)i(M)23 b Fk(\306)d Fl(A)s(B)e Fk(\241)e Fl(A)5
b(M)22 b Fk(\306)14 b Fo(4)c Fk(\241)i Fl(x)5 b Fo(,)19
b(donc)1688 4969 y Fl(f)g Fo(\()r Fl(x)5 b Fo(\))14 b
Fk(\306)20 b Fl(A)5 b(M)18 b Fk(\243)10 b Fl(B)f(M)1845
5094 y Fk(\306)16 b Fl(x)f Fk(\243)10 b Fo(\(4)g Fk(\241)i
Fl(x)5 b Fo(\))1845 5218 y Fk(\306)16 b Fl(x)f Fk(\243)10
b Fo(4)g Fk(\305)i Fl(x)j Fk(\243)10 b Fo(\()p Fk(\241)r
Fl(x)5 b Fo(\))1845 5354 y Fk(\306)14 b Fo(4)r Fl(x)h
Fk(\241)d Fl(x)2121 5320 y Fi(2)2157 5354 y Fo(.)p 0
TeXcolorgray 1930 5895 a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163 a Fo(2.)p
0 TeXcolorgray 43 w(Le)20 b(produit)f(des)h(longueurs)26
b Fl(A)5 b(M)19 b Fk(\243)11 b Fl(B)e(M)27 b Fo(est)20
b(donn\351)g(par)27 b Fl(f)19 b Fo(\()r Fl(x)5 b Fo(\),)20
b(donc)f(maximiser)i(ce)e(produit)g(r)o(evient)i(\340)e(maximiser)i(la)
e(fonction)29 b Fl(f)17 b Fo(.)j(On)-38 -63 y(\351tudie)e(donc)f(les)h
(var)q(iations)35 b(:)18 b(pour)f(tout)j Fl(x)g Fk(2)1380
-62 y Fo([)1406 -63 y(0;)8 b(4)1514 -62 y(])1548 -63
y(,)1594 120 y Fl(f)1637 85 y Fg(0)1658 120 y Fo(\()r
Fl(x)d Fo(\))14 b Fk(\306)h Fo(4)10 b Fk(\243)g Fo(1)g
Fk(\241)g Fo(2)r Fl(x)21 b Fk(\306)14 b(\241)p Fo(2)r
Fl(x)h Fk(\305)10 b Fo(4.)-38 317 y(On)17 b(r\351sout)h(:)1863
614 y Fk(\241)p Fo(2)r Fl(x)d Fk(\305)10 b Fo(4)16 b
Fk(\306)e Fo(0)1747 738 y Fk(\241)p Fo(2)r Fl(x)h Fk(\305)1963
754 y Ff(\001)1963 738 y Fo(4)d Fk(\241)2080 754 y Ff(\001)2080
738 y Fo(4)j Fk(\306)f Fo(0)c Fk(\241)g Fo(4)1961 857
y Ff(\010)1990 843 y(\010)1969 855 y Fk(\241)p Fo(2)r
Fl(x)p 1969 892 142 5 v 1984 970 a Ff(\010)2013 956 y(\010)1992
968 y Fk(\241)p Fo(2)2135 911 y Fk(\306)2214 855 y(\241)p
Fo(4)p 2214 892 96 5 v 2214 968 a Fk(\241)p Fo(2)2076
1071 y Fl(x)20 b Fk(\306)14 b Fo(2.)-36 1293 y Fl(a)k
Fk(\306)c(\241)p Fo(2,)20 b Fl(a)h Fo(est)d Fk(\252)f
Fo(donc)g(le)h(signe)g(est)g(de)f(la)g(for)q(me)46 b
Fk(\305)17 b Fe(\036)h Fk(\241)p 1472 1210 262 4 v 1472
1335 4 127 v 1730 1335 V 1472 1337 262 4 v -38 1472 a
Fo(On)f(obtient)h(le)g(tableau)g(de)f(signe)h(de)25 b
Fl(f)1160 1442 y Fg(0)1198 1472 y Fo(et)18 b(le)g(tableau)g(de)f(var)q
(iations)h(de)25 b Fl(f)50 b Fo(:)p 0 TeXcolorgray 0
TeXcolorgray 137 1640 a

 137 1640 a 137 1640 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -13.56602 ] concat

 pgfs


 137 1640
a
 0 setgray
 137 1640 a 167 w Fl(x)137 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -36.66914 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640
a 111 w Fl(f)291 1610 y Fg(0)312 1640 y Fo(\()r Fl(x)5
b Fo(\))137 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -70.33508 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a 121 w Fl(f)19
b Fo(\()r Fl(x)5 b Fo(\))137 1640 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -22.6787 moveto

 204.10854 -22.6787 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -45.35742 moveto

 204.10854 -45.35742 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -90.71487 moveto

 204.10854 -90.71487 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -90.71487 lineto

 204.10854 -90.71487 lineto

 204.10854 0.0 lineto

 closepath

 204.10854 -90.71487 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -90.71487 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 54.26411 -14.38297 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640
a Fo(0)137 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.29675 -14.40787 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a Fo(2)137 1640
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 190.32938 -14.40787 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a Fo(4)137 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -36.57706 ] concat

 pgfs


 137 1640 a
 0 setgray
 137
1640 a Fk(\305)137 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -22.6787 moveto

 124.73297 -45.35742 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -37.06345 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a Fo(0)137
1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -35.44627 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a Fk(\241)137 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 54.70424 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 56.6968 -84.73721 ] concat

 pgfs


 137 1640
a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640 a 137 1640 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 54.70424 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 56.6968 -84.73721 ] concat

 pgfs


 137 1640
a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640 a 137 1640 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 122.74042 -53.32764 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 124.73297 -51.33508 ] concat

 pgfs


 137 1640
a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640 a 137 1640 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 122.74042 -53.32764 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 124.73297 -51.33508 ] concat

 pgfs


 137 1640
a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640 a 137 1640 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 62.47359 -81.90782 moveto

 116.81953 -55.225 lineto

 pgfstr

 save

 [0.8976 0.44069 -0.44069 0.8976 116.81952 -55.22502 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore

0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 190.77661 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 192.76917 -84.73721 ] concat

 pgfs


 137 1640 a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640
a 137 1640 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 190.77661 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 192.76917 -84.73721 ] concat

 pgfs


 137 1640 a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640
a 137 1640 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 130.51335 -54.17204 moveto

 184.85928 -80.85486 lineto

 pgfstr

 save

 [0.8976 -0.44069 0.44069 0.8976 184.85927 -80.85484 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
2050 2415 9 777 v 0 TeXcolorgray 2095 1721 a Fo(Il)14
b(n)-6 b('est)14 b(pas)g(utile)g(ici)g(de)g(compl\351ter)g(l)o
('extr\351mit\351)g(des)g(\003\350ches)g(:)g(tout)2095
1821 y(ce)k(qui)g(nous)h(int\351r)o(esse)o(,)f(c)n('est)h(la)f(valeur)g
(de)h Fl(x)k Fo(pour)18 b(laquelle)28 b Fl(f)37 b Fo(at-)2095
1920 y(teint)19 b(son)f(maximum.)-38 2611 y(C)o(onclusion)e(:)23
b Fl(f)34 b Fo(atteint)16 b(son)f(maximum)i(lorsque)h
Fl(x)h Fk(\306)14 b Fo(2,)i(donc)e(le)h(produit)21 b
Fl(A)5 b(M)11 b Fk(\243)t Fl(B)e(M)24 b Fo(est)15 b(maximal)h(lorsque)i
Fl(x)i Fk(\306)14 b Fo(2)h(;)g(c)n('est-\340-dir)o(e)f(quand)-36
2711 y Fl(M)25 b Fo(est)18 b(le)g(milieu)h(de)594 2712
y([)625 2711 y Fl(A)s(B)731 2712 y Fo(])765 2711 y(.)-246
2904 y Fp(R)o(emarque)14 b(:)k Fo(C)o(et)f(exemple)j(est)e(celui)g(qu)n
('a)f(choisi)h(F)m(er)q(mat)g(vers)g(1637)h(pour)f(exposer)g(sa)f
(m\351thode)i(de)e(l)o('ad\351galit\351)h(\226)g(anc\352tr)o(e)f(de)g
(la)g(d\351r)q(ivation)-246 3004 y(\226)h(pour)f(d\351ter)q(miner)h(le)
g(maximum)h(et)f(le)g(minimum)i(d)n('une)e(fonction.)-246
3087 y
SDict begin H.S end
 -246 3087 a -246 3087 a
SDict begin 12 H.A end
 -246 3087 a -246 3087
a
SDict begin [/View [/XYZ H.V]/Dest (exo.3) cvn /DEST pdfmark end
 -246 3087 a 0 TeXcolorgray 116 x Fp(Ex)o(er)o(cice)c(3)p
0 TeXcolorgray 42 w Fo(La)j(fonction)k Fl(g)26 b Fo(est)18
b(d\351\002nie)g(sur)f Fh(R)g Fo(par)1438 3402 y Fl(g)10
b Fo(\()r Fl(x)5 b Fo(\))13 b Fk(\306)i Fo(0,)8 b(5)r
Fl(x)1823 3368 y Fi(3)1870 3402 y Fk(\305)i Fo(0,)e(75)r
Fl(x)2129 3368 y Fi(2)2176 3402 y Fk(\241)i Fo(3)r Fl(x)15
b Fk(\241)10 b Fo(1.)-246 3602 y(P)n(our)17 b(tout)j
Fl(x)g Fk(2)14 b Fh(R)31 b Fo(:)984 3801 y Fl(g)1032
3767 y Fg(0)1053 3801 y Fo(\()r Fl(x)5 b Fo(\))14 b Fk(\306)g
Fo(0,)8 b(5)i Fk(\243)g Fo(3)r Fl(x)1505 3767 y Fi(2)1553
3801 y Fk(\305)g Fo(0,)e(75)i Fk(\243)g Fo(2)r Fl(x)15
b Fk(\241)10 b Fo(3)g Fk(\243)g Fo(1)g Fk(\241)g Fo(0)19
b Fk(\306)14 b Fo(1,)8 b(5)r Fl(x)2514 3767 y Fi(2)2561
3801 y Fk(\305)i Fo(1,)e(5)r Fl(x)15 b Fk(\241)10 b Fo(3.)-246
3950 y(La)18 b(d\351r)q(iv\351e)g(est)g(du)f(second)g(degr\351,)g(donc)
g(on)h(utilise)h(la)f(m\351thode)g(de)f(la)h(classe)g(de)f(pr)o
(emi\350r)o(e)h(:)p 0 TeXcolorgray -76 4050 a(\225)p
0 TeXcolorgray 44 w Fl(a)g Fk(\306)c Fo(1,)8 b(5,)19
b Fl(b)f Fk(\306)c Fo(1,)8 b(5,)19 b Fl(c)h Fk(\306)14
b(\241)p Fo(3.)p 0 TeXcolorgray -76 4150 a(\225)p 0 TeXcolorgray
42 w(le)k(discr)q(iminant)g(est)g Fm(\242)c Fk(\306)h
Fl(b)838 4119 y Fi(2)882 4150 y Fk(\241)10 b Fo(4)r Fl(a)t(c)21
b Fk(\306)14 b Fo(1,)8 b(5)1268 4119 y Fi(2)1314 4150
y Fk(\241)i Fo(4)g Fk(\243)g Fo(1,)e(5)i Fk(\243)g Fo(\()p
Fk(\241)p Fo(3\))17 b Fk(\306)d Fo(20,)8 b(25.)p 0 TeXcolorgray
-76 4249 a(\225)p 0 TeXcolorgray 42 w Fm(\242)14 b Fk(\310)h
Fo(0,)j(donc)f(il)g(y)g(a)g(deux)h(r)o(acines)g(:)1111
4571 y Fl(x)1152 4583 y Fi(1)1202 4571 y Fk(\306)1281
4515 y(\241)p Fl(b)c Fk(\241)1458 4449 y(p)p 1522 4449
55 5 v 66 x Fm(\242)p 1281 4552 296 5 v 1384 4628 a Fo(2)r
Fl(a)1600 4571 y Fk(\306)1679 4515 y(\241)p Fo(1,)8 b(5)i
Fk(\241)1917 4455 y(p)p 1983 4455 191 5 v 1983 4515 a
Fo(20,)e(25)p 1679 4552 494 5 v 1814 4628 a(2)i Fk(\243)g
Fo(1,)e(5)2197 4571 y Fk(\306)2276 4515 y(\241)p Fo(1,)g(5)i
Fk(\241)g Fo(4,)e(5)p 2276 4552 350 5 v 2431 4628 a(3)2650
4571 y Fk(\306)2729 4515 y(\241)p Fo(6)p 2729 4552 96
5 v 2756 4628 a(3)2848 4571 y Fk(\306)15 b(\241)p Fo(2,)1111
4803 y Fl(x)1152 4815 y Fi(2)1202 4803 y Fk(\306)1281
4747 y(\241)p Fl(b)f Fk(\305)1458 4681 y(p)p 1522 4681
55 5 v 66 x Fm(\242)p 1281 4784 296 5 v 1384 4860 a Fo(2)r
Fl(a)1600 4803 y Fk(\306)1679 4747 y(\241)p Fo(1,)8 b(5)i
Fk(\305)1917 4688 y(p)p 1983 4688 191 5 v 1983 4747 a
Fo(20,)e(25)p 1679 4784 494 5 v 1814 4860 a(2)i Fk(\243)g
Fo(1,)e(5)2197 4803 y Fk(\306)2276 4747 y(\241)p Fo(1,)g(5)i
Fk(\305)g Fo(4,)e(5)p 2276 4784 350 5 v 2431 4860 a(3)2650
4803 y Fk(\306)2729 4747 y Fo(3)p 2729 4784 41 5 v 2729
4860 a(3)2793 4803 y Fk(\306)15 b Fo(1.)-244 5098 y Fl(a)j
Fk(\306)d Fo(1,)8 b(5)20 b Fl(a)h Fo(est)d Fk(\251)f
Fo(donc)g(le)h(signe)g(est)g(de)f(la)h(for)q(me)45 b
Fk(\305)18 b Fe(\036)27 b Fk(\241)h Fe(\036)17 b Fk(\305)p
1258 5016 432 4 v 1258 5140 4 127 v 1686 5140 V 1258
5142 432 4 v 0 TeXcolorgray 0 TeXcolorgray -153 5266
a

 -153 5266 a -153 5266 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -12.14816 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a 168
w Fl(x)-153 5266 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -32.41563 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a 106 w Fl(g)1
5235 y Fg(0)21 5266 y Fo(\()r Fl(x)5 b Fo(\))-153 5266
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -61.64621 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a 116 w Fl(g)10 b Fo(\()r Fl(x)5
b Fo(\))-153 5266 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -19.84302 moveto

 238.11656 -19.84302 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -39.68607 moveto

 238.11656 -39.68607 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -79.37216 moveto

 238.11656 -79.37216 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -79.37216 lineto

 238.11656 -79.37216 lineto

 238.11656 0.0 lineto

 closepath

 238.11656 -79.37216 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 39.68607 0.0 moveto

 39.68607 -79.37216 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 41.63185 -11.9539 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a Fk(\2411)-153
5266 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 103.40654 -12.99 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a Fk(\241)p Fo(2)-153 5266
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 166.23227 -12.99 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a Fo(1)-153 5266 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 220.21606 -12.47694 ] concat

 pgfs


 -153 5266
a
 0 setgray
 -153 5266 a Fk(\3051)-153 5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 76.0774 -32.32106 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266
a Fk(\305)-153 5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 109.13673 -19.84302 moveto

 109.13673 -39.68607 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 106.70782 -32.80869 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a Fo(0)-153
5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 135.60873 -31.19028 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a Fk(\241)-153 5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 168.66588 -19.84302 moveto

 168.66588 -39.68607 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 166.2381 -32.80869 ] concat

 pgfs


 -153
5266 a
 0 setgray
 -153 5266 a Fo(0)-153 5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 195.14009 -32.32106 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153
5266 a Fk(\305)-153 5266 y


 pgfr

 restore

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 47.61504 -75.38705 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 49.60759 -73.3945 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153
5266 a
 0 setgray
 -153 5266 a -153 5266 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 47.61504 -75.38705 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 49.60759 -73.3945 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266
a -153 5266 a
 0 setgray
 -153 5266 a -153 5266 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 104.71327 -53.79332 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 106.70583 -51.80077 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153
5266 a -153 5266 a
 0 setgray
 -153 5266 a Fo(4)-153 5266 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 104.71327 -53.79332 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 106.70583 -51.80077 ] concat

 pgfs


 -153
5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153 5266 a
 0 setgray
 -153 5266 a Fo(4)-153
5266 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 55.43437 -70.98253 moveto

 98.67314 -53.06723 lineto

 pgfstr

 save

 [0.92378 0.38275 -0.38275 0.92378 98.67314 -53.06725 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 27.59682 154.86748 -75.38705 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 156.86003 -73.31482 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153
5266 a -153 5266 a
 0 setgray
 -153 5266 a Fk(\241)p Fo(2.75)-153
5266 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 27.59682 154.86748 -75.38705 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 156.86003 -73.31482 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153 5266 a
 0 setgray
 -153 5266
a Fk(\241)p Fo(2.75)-153 5266 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 117.42827 -51.73431 moveto

 148.7563 -63.08159 lineto

 pgfstr

 save

 [0.9402 -0.34055 0.34055 0.9402 148.75629 -63.08159 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 226.20248 -47.65628 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 228.19504 -45.66373 ] concat

 pgfs



-153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153 5266 a
 0 setgray
 -153 5266 a -153
5266 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 226.20248 -47.65628 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 228.19504 -45.66373 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153 5266 a
 0 setgray
 -153 5266
a -153 5266 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 186.30136 -62.99704 moveto

 220.16368 -48.9875 lineto

 pgfstr

 save

 [0.924 0.38228 -0.38228 0.924 220.16367 -48.9875 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
1946 5664 9 401 v 0 TeXcolorgray 0 TeXcolorgray 2161
5347 a Fo(\225)p 0 TeXcolorgray 44 w Fl(g)10 b Fo(\()p
Fk(\241)p Fo(2\))k Fk(\306)g Fo(0,)8 b(5)i Fk(\243)g
Fo(\()p Fk(\241)p Fo(2\))2848 5317 y Fi(3)2895 5347 y
Fk(\305)g Fo(0,)e(75)i Fk(\243)g Fo(\()p Fk(\241)p Fo(2\))3332
5317 y Fi(2)3379 5347 y Fk(\241)g Fo(3)g Fk(\243)g Fo(\()p
Fk(\241)p Fo(2\))g Fk(\241)g Fo(1)16 b Fk(\306)e Fo(4)p
0 TeXcolorgray 2161 5447 a(\225)p 0 TeXcolorgray 44 w
Fl(g)c Fo(\(1\))k Fk(\306)g Fo(0,)8 b(5)i Fk(\243)g Fo(1)2684
5416 y Fi(3)2731 5447 y Fk(\305)g Fo(0,)e(75)i Fk(\243)g
Fo(1)3059 5416 y Fi(2)3107 5447 y Fk(\241)g Fo(3)g Fk(\243)g
Fo(1)g Fk(\241)g Fo(1)16 b Fk(\306)f(\241)p Fo(2,)8 b(75)p
0 TeXcolorgray 1930 5895 a(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -163 a Fp(R)o(emarque)14 b(:)k Fo(V)-5 b(oici)17
b(\340)g(quoi)h(r)o(essemble)h(la)e(courbe)g(r)o(epr\351sentative)i(:)p
0 TeXcolorgray 0 TeXcolorgray 996 947 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 229.89821 a add def
/d 0.0 a add neg def /h 122.06221 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 996 947 a 1959
458 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -56.90546 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 113.81097 0.0 -116.08723 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 14.22636 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -113.81097 0.0 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 63.16508 0.0 -58.89713   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 113.81097  0 -116.08723  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -116.08723
 113.81097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-58.89713  def /maxTickline 63.16508  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 63.16508
0.0 -58.89713   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -116.08723 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 63.16508  0 -58.89713  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -58.89713
 63.16508  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-116.08723  def /maxTickline 113.81097  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 14.22636  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 14.22636  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 63.16508
0.0 -58.89713   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -116.08723 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1944 555 a Fi(0)205 b(1)g(2)h(3)-997
b Fg(\241)p Fi(1)-309 b Fg(\241)p Fi(2)g Fg(\241)p Fi(3)f
Fg(\241)p Fi(4)1871 477 y(0)1829 595 y Fg(\241)p Fi(1)1829
714 y Fg(\241)p Fi(2)1829 832 y Fg(\241)p Fi(3)1829 950
y Fg(\241)p Fi(4)1871 359 y(1)1871 241 y(2)1871 123 y(3)1959
458 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.08 def /x1 4.0
def /dx x1 x sub 199 div def /F@pstplot (0.5*x^(3.0)+0.75*x^(2.0)-3.0*x-1.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
14.22636 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 14.22636 mul gt { moveto } {
dup -1.e30 14.22636 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2904 947
a
currentpoint initclip moveto
 2904 947 a -246 1018 a
SDict begin H.S end
 -246 1018 a -246 1018 a
SDict begin 12 H.A end
 -246
1018 a -246 1018 a
SDict begin [/View [/XYZ H.V]/Dest (exo.4) cvn /DEST pdfmark end
 -246 1018 a 0 TeXcolorgray 121 x Fp(Ex)o(er)o(cice)
14 b(4)p 0 TeXcolorgray 42 w Fo(La)j(fonction)i Fl(h)i
Fo(est)d(d\351\002nie)g(sur)1131 1140 y([)1156 1139 y(1;)8
b Fk(\3051)1357 1140 y Fo([)1401 1139 y(par)1660 1338
y Fl(h)t Fo(\()r Fl(x)d Fo(\))15 b Fk(\306)f Fo(\()r
Fl(x)h Fk(\241)10 b Fo(6\))2109 1276 y Fk(p)p 2173 1276
47 5 v 2175 1338 a Fl(x)c Fo(.)-246 1480 y(On)18 b(utilise)h(la)e(for)q
(mule)h(pour)g(la)g(d\351r)q(iv\351e)f(d)n('un)h(produit)g(avec)637
1651 y Fl(u)t Fo(\()r Fl(x)5 b Fo(\))15 b Fk(\306)h Fl(x)f
Fk(\241)10 b Fo(6)884 b(,)h Fl(v)7 b Fo(\()r Fl(x)e Fo(\))14
b Fk(\306)3051 1589 y(p)p 3115 1589 V 3117 1651 a Fl(x)5
b Fo(,)637 1821 y Fl(u)688 1787 y Fg(0)710 1821 y Fo(\()r
Fl(x)g Fo(\))14 b Fk(\306)g Fo(1)984 b(,)885 b Fl(v)2868
1787 y Fg(0)2889 1821 y Fo(\()r Fl(x)5 b Fo(\))14 b Fk(\306)3137
1765 y Fo(1)p 3082 1802 151 5 v 3082 1882 a(2)3122 1824
y Fk(p)p 3186 1824 47 5 v 3188 1882 a Fl(x)3243 1821
y Fo(.)-246 2170 y(On)k(obtient,)g(pour)g(tout)i Fl(x)f
Fk(2)629 2171 y Fo([)654 2170 y(1;)8 b Fk(\3051)855 2171
y Fo([)913 2170 y(:)889 2341 y Fl(h)939 2306 y Fg(0)960
2341 y Fo(\()r Fl(x)d Fo(\))15 b Fk(\306)f Fl(u)1195
2306 y Fg(0)1216 2341 y Fo(\()r Fl(x)5 b Fo(\))10 b Fk(\243)i
Fl(v)7 b Fo(\()r Fl(x)e Fo(\))10 b Fk(\305)g Fl(u)t Fo(\()r
Fl(x)5 b Fo(\))10 b Fk(\243)i Fl(v)1888 2306 y Fg(0)1910
2341 y Fo(\()r Fl(x)5 b Fo(\))1075 2511 y Fk(\306)14
b Fo(1)c Fk(\243)1259 2449 y(p)p 1323 2449 V 1325 2511
a Fl(x)16 b Fk(\305)10 b Fo(\()r Fl(x)15 b Fk(\241)10
b Fo(6\))g Fk(\243)1801 2455 y Fo(1)p 1746 2492 151 5
v 1746 2572 a(2)1786 2514 y Fk(p)p 1850 2514 47 5 v 1852
2572 a Fl(x)1075 2744 y Fk(\306)1154 2629 y(p)p 1217
2629 V 1219 2687 a Fl(x)16 b Fk(\243)10 b Fo(2)1379 2629
y Fk(p)p 1443 2629 V 1445 2687 a Fl(x)p 1154 2724 336
5 v 1246 2804 a Fo(2)1286 2746 y Fk(p)p 1350 2746 47
5 v 1352 2804 a Fl(x)1510 2744 y Fk(\305)1587 2687 y
Fl(x)15 b Fk(\241)10 b Fo(6)p 1585 2724 163 5 v 1591
2804 a(2)1631 2746 y Fk(p)p 1695 2746 47 5 v 1697 2804
a Fl(x)1075 2960 y Fk(\306)1185 2904 y Fo(2)r Fl(x)p
1154 2941 151 5 v 1154 3021 a Fo(2)1194 2963 y Fk(p)p
1258 2963 47 5 v 1260 3021 a Fl(x)1324 2960 y Fk(\305)1401
2904 y Fl(x)15 b Fk(\241)10 b Fo(6)p 1399 2941 163 5
v 1405 3021 a(2)1445 2963 y Fk(p)p 1509 2963 47 5 v 1511
3021 a Fl(x)2018 2873 y Fd(\263)2049 2960 y Fo(r)o(appel)19
b(:)2326 2898 y Fk(p)p 2390 2898 V 2392 2960 a Fl(x)d
Fk(\243)2512 2898 y(p)p 2575 2898 V 2577 2960 a Fl(x)k
Fk(\306)2705 2898 y(p)p 2769 2898 V 2771 2960 a Fl(x)2815
2914 y Fi(2)2864 2960 y Fk(\306)c Fl(x)2979 2873 y Fd(\264)1075
3177 y Fk(\306)1154 3121 y Fo(3)r Fl(x)f Fk(\241)10 b
Fo(6)p 1154 3158 203 5 v 1180 3238 a(2)1220 3180 y Fk(p)p
1284 3180 47 5 v 1286 3238 a Fl(x)1366 3177 y Fo(.)p
0 TeXcolorgray -76 3434 a(\225)p 0 TeXcolorgray 42 w(On)17
b(r\351sout)h(r)o(apidement)h(:)1438 3567 y(3)r Fl(x)c
Fk(\241)10 b Fo(6)16 b Fk(\306)e Fo(0)29 b Fk(\()-12
b(\))29 b Fo(3)r Fl(x)20 b Fk(\306)14 b Fo(6)29 b Fk(\()-12
b(\))31 b Fl(x)20 b Fk(\306)2510 3510 y Fo(6)p 2510 3547
41 5 v 2510 3624 a(3)2575 3567 y Fk(\306)14 b Fo(2.)p
0 TeXcolorgray -76 3760 a(\225)p 0 TeXcolorgray 42 w(Dans)i(3)r
Fl(x)f Fk(\241)10 b Fo(6,)22 b Fl(a)c Fk(\306)c Fo(3)j
Fk(\251)h Fo(,)f(donc)45 b Fk(\241)17 b Fe(\036)h Fk(\305)p
925 3678 262 4 v 925 3803 4 127 v 1183 3803 V 925 3805
262 4 v 0 TeXcolorgray -76 3879 a Fo(\225)p 0 TeXcolorgray
42 w(2)37 3821 y Fk(p)p 101 3821 47 5 v 103 3879 a Fl(x)k
Fo(est)c(str)q(ictement)h(positif)g(pour)f(tout)i Fl(x)g
Fk(2)1396 3880 y Fo([)1422 3879 y(1;)8 b Fk(\3051)1623
3880 y Fo([)1657 3879 y(.)-246 4024 y(On)18 b(a)f(donc)g(le)g(tableau)h
(:)p 0 TeXcolorgray 0 TeXcolorgray -19 4179 a

 -19 4179
a -19 4179 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -13.56602 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a 168 w Fl(x)-19 4179
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -37.04672 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a 85 w Fo(3)r Fl(x)h Fk(\241)13
b Fo(6)-19 4179 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -59.78375 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a 114 w Fo(2)135
4121 y Fk(p)p 199 4121 47 5 v 201 4179 a Fl(x)-19 4179
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -82.53096 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a 99 w Fl(h)130 4149 y Fg(0)160
4180 y Fo(\()189 4179 y Fl(x)233 4180 y Fo(\))-19 4179
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -116.1969 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a 110 w Fl(h)149 4180 y Fo(\()178
4179 y Fl(x)222 4180 y Fo(\))-19 4179 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -22.6787 moveto

 204.10854 -22.6787 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -45.35742 moveto

 204.10854 -45.35742 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -68.03616 moveto

 204.10854 -68.03616 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -90.71487 moveto

 204.10854 -90.71487 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -136.07234 moveto

 204.10854 -136.07234 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -136.07234 lineto

 204.10854 -136.07234 lineto

 204.10854 0.0 lineto

 closepath

 204.10854 -136.07234 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -136.07234 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 54.26411 -14.40787 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19
4179 a Fo(1)-19 4179 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.29675 -14.40787 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a Fo(2)-19
4179 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 184.78508 -13.89479 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a Fk(\3051)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -35.44627 ] concat

 pgfs


 -19
4179 a
 0 setgray
 -19 4179 a Fk(\241)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -22.6787 moveto

 124.73297 -45.35742 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -37.06345 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179
a Fo(0)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -36.57706 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a Fk(\305)-19 4179
y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -59.2582 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a Fk(\305)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -59.2582 ] concat

 pgfs


 -19 4179 a
 0 setgray

-19 4179 a Fk(\305)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -80.80852 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a Fk(\241)-19
4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -68.03616 moveto

 124.73297 -90.71487 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -82.4233 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a Fo(0)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -81.9393 ] concat

 pgfs


 -19 4179
a
 0 setgray
 -19 4179 a Fk(\305)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 15.44226 48.97566 -104.87193 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 50.96822 -102.82957 ] concat

 pgfs


 -19 4179 a
 /pgfsc{}def/pgffc{}def
 -19 4179 a
-19 4179 a
 0 setgray
 -19 4179 a Fk(\241)p Fo(5)-19 4179 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 15.44226 48.97566 -104.87193 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 50.96822 -102.82957 ] concat

 pgfs


 -19 4179
a
 /pgfsc{}def/pgffc{}def
 -19 4179 a -19 4179 a
 0 setgray
 -19 4179 a Fk(\241)p Fo(5)-19
4179 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 13.83826 27.93555 110.7652 -132.08723 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 112.75775 -129.09691 ] concat

 pgfs


 -19 4179 a
 /pgfsc{}def/pgffc{}def
 -19 4179 a -19 4179 a
 0 setgray
 -19 4179 a Fk(\241)p
Fo(4)76 4114 y Fk(p)p 140 4114 41 5 v 65 x Fo(2)-19 4179
y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 13.83826 27.93555 110.7652 -132.08723 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 112.75775 -129.09691 ] concat

 pgfs


 -19 4179 a
 /pgfsc{}def/pgffc{}def
 -19 4179 a -19 4179 a
 0 setgray
 -19 4179 a Fk(\241)p
Fo(4)76 4114 y Fk(p)p 140 4114 41 5 v 65 x Fo(2)-19 4179
y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 68.28064 -104.11165 moveto

 104.67169 -117.69301 lineto

 pgfstr

 save

 [0.93683 -0.34961 0.34961 0.93683 104.67169 -117.693 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 190.77661 -98.68509 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 192.76917 -96.69254 ] concat

 pgfs


 -19 4179 a
 /pgfsc{}def/pgffc{}def
 -19 4179 a
-19 4179 a
 0 setgray
 -19 4179 a -19 4179 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 190.77661 -98.68509 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 192.76917 -96.69254 ] concat

 pgfs


 -19 4179 a
 /pgfsc{}def/pgffc{}def
 -19 4179
a -19 4179 a
 0 setgray
 -19 4179 a -19 4179 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 142.5386 -117.72867 moveto

 184.7506 -100.0574 lineto

 pgfstr

 save

 [0.9224 0.38612 -0.38612 0.9224 184.75058 -100.0574 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc



0 TeXcolorgray 1946 5332 9 1155 v 0 TeXcolorgray 0 TeXcolorgray
2161 4261 a Fo(\225)p 0 TeXcolorgray 42 w Fl(h)t Fo(\(1\))i
Fk(\306)f Fo(\(1)c Fk(\241)g Fo(6\))g Fk(\243)2746 4196
y(p)p 2810 4196 41 5 v 65 x Fo(1)15 b Fk(\306)f(\241)p
Fo(5)c Fk(\243)g Fo(1)16 b Fk(\306)e(\241)p Fo(5)k(;)p
0 TeXcolorgray 2161 4360 a(\225)p 0 TeXcolorgray 42 w
Fl(h)t Fo(\(2\))d Fk(\306)f Fo(\(2)c Fk(\241)g Fo(6\))g
Fk(\243)2746 4295 y(p)p 2810 4295 V 65 x Fo(2)15 b Fk(\306)f(\241)p
Fo(4)3029 4295 y Fk(p)p 3093 4295 V 65 x Fo(2)q(.)-246
5407 y
SDict begin H.S end
 -246 5407 a -246 5407 a
SDict begin 12 H.A end
 -246 5407 a -246 5407
a
SDict begin [/View [/XYZ H.V]/Dest (exo.5) cvn /DEST pdfmark end
 -246 5407 a 0 TeXcolorgray 116 x Fp(Ex)o(er)o(cice)g(5)p
0 TeXcolorgray 42 w Fo(La)20 b(fonction)30 b Fl(f)40
b Fo(est)21 b(d\351\002nie)g(sur)1151 5524 y([)1177 5523
y(1;)8 b(4)1285 5524 y(])1332 5523 y(par)28 b Fl(f)19
b Fo(\()r Fl(x)5 b Fo(\))18 b Fk(\306)h Fl(x)e Fk(\305)1846
5467 y Fo(4)p 1843 5504 47 5 v 1845 5580 a Fl(x)1911
5523 y Fk(\241)11 b Fo(3.)22 b(On)e(note)i Fj(C)34 b
Fo(sa)21 b(courbe)f(r)o(epr\351sentative)o(,)28 b Fl(A)s
Fo(,)21 b Fl(B)6 b Fo(,)19 b Fl(C)30 b Fo(les)21 b(points)h(de)e
Fj(C)-246 5646 y Fo(d)n('abscisses)f(r)o(espectives)f(1,)g(2,)g(4)9
b(;)18 b(et)g Fl(T)933 5658 y Fb(A)976 5646 y Fo(,)f
Fl(T)1061 5658 y Fb(B)1108 5646 y Fo(,)g Fl(T)1191 5658
y Fb(C)1258 5646 y Fo(les)h(tangentes)h(\340)e Fj(C)31
b Fo(en)18 b(ces)g(points)o(.)p 0 TeXcolorgray 1930 5895
a(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163 a Fo(1.)p
0 TeXcolorgray 43 w(P)n(our)17 b(d\351r)q(iver)-5 b(,)17
b(le)h(plus)h(simple)g(est)f(de)f(r\351\351cr)q(ir)o(e)24
b Fl(f)19 b Fo(\()r Fl(x)5 b Fo(\))17 b(sous)h(la)g(for)q(me)1725
36 y Fl(f)h Fo(\()r Fl(x)5 b Fo(\))14 b Fk(\306)i Fl(x)f
Fk(\305)10 b Fo(4)g Fk(\243)2201 -20 y Fo(1)p 2198 17
47 5 v 2200 93 a Fl(x)2265 36 y Fk(\241)g Fo(3.)-38 224
y(On)17 b(obtient)h(alors)o(,)g(pour)g(tout)i Fl(x)g
Fk(2)1021 225 y Fo([)1047 224 y(1;)8 b(4)1155 225 y(])1213
224 y(:)1648 427 y Fl(f)1691 393 y Fg(0)1712 427 y Fo(\()r
Fl(x)d Fo(\))14 b Fk(\306)h Fo(1)10 b Fk(\305)g Fo(4)g
Fk(\243)2126 317 y Fd(\265)2161 427 y Fk(\241)2247 371
y Fo(1)p 2226 408 82 5 v 2228 484 a Fl(x)2272 460 y Fi(2)2318
317 y Fd(\266)2362 427 y Fk(\241)g Fo(0)1826 638 y Fk(\306)15
b Fo(1)10 b Fk(\241)2042 582 y Fo(4)p 2021 619 V 2023
695 a Fl(x)2067 671 y Fi(2)1826 854 y Fk(\306)1908 798
y Fl(x)1952 768 y Fi(2)p 1906 835 V 1908 911 a Fl(x)1952
887 y Fi(2)2007 854 y Fk(\241)2103 798 y Fo(4)p 2082
835 V 2084 911 a Fl(x)2128 887 y Fi(2)1826 1070 y Fk(\306)1908
1014 y Fl(x)1952 984 y Fi(2)1997 1014 y Fk(\241)g Fo(4)p
1906 1051 198 5 v 1965 1127 a Fl(x)2009 1103 y Fi(2)-246
1192 y
SDict begin H.S end
 -246 1192 a -246 1192 a
SDict begin 12 H.A end
 -246 1192 a -246 1192
a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -246 1192 a 0 TeXcolorgray -141 1281 a Fo(2.)p 0 TeXcolorgray
0 TeXcolorgray 88 w(\225)p 0 TeXcolorgray 42 w(Les)18
b(r)o(acines)g(de)h Fl(x)627 1251 y Fi(2)673 1281 y Fk(\241)10
b Fo(4)17 b(sont)h(\351videntes)i(:)d(ce)g(sont)j Fl(x)1654
1293 y Fi(1)1704 1281 y Fk(\306)14 b(\241)p Fo(2)k(et)i
Fl(x)2012 1293 y Fi(2)2061 1281 y Fk(\306)15 b Fo(2.)i(S)o(eule)i(la)f
(deuxi\350me)h(est)f(dans)f(l)o('inter)q(valle)3532 1282
y([)3557 1281 y(1;)8 b(4)3665 1282 y(])3700 1281 y(.)p
0 TeXcolorgray 7 1381 a(\225)p 0 TeXcolorgray 44 w Fl(x)126
1350 y Fi(2)178 1381 y Fo(est)18 b(str)q(ictement)h(positif)g(pour)f
(tout)i Fl(x)g Fk(2)1410 1382 y Fo([)1435 1381 y(1;)8
b(4)1543 1382 y(])1578 1381 y(.)-38 1492 y(On)17 b(obtient)h(donc)f(le)
h(tableau)g(:)p 0 TeXcolorgray 0 TeXcolorgray 137 1641
a

 137 1641 a 137 1641 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -13.56602 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a 167 w Fl(x)137
1641 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -38.11853 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a 90 w Fl(x)271 1611 y Fi(2)319
1641 y Fk(\241)13 b Fo(4)137 1641 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -60.79727 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641
a 150 w Fl(x)331 1611 y Fi(2)137 1641 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -82.0266 ] concat

 pgfs


 137 1641 a
 0 setgray
 137
1641 a 107 w Fl(f)286 1611 y Fg(0)316 1642 y Fo(\()345
1641 y Fl(x)389 1642 y Fo(\))137 1641 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -115.69254 ] concat

 pgfs


 137 1641 a
 0 setgray
 137
1641 a 117 w Fl(f)305 1642 y Fo(\()334 1641 y Fl(x)378
1642 y Fo(\))137 1641 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -22.6787 moveto

 204.10854 -22.6787 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -45.35742 moveto

 204.10854 -45.35742 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -68.03616 moveto

 204.10854 -68.03616 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -90.71487 moveto

 204.10854 -90.71487 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -136.07234 moveto

 204.10854 -136.07234 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -136.07234 lineto

 204.10854 -136.07234 lineto

 204.10854 0.0 lineto

 closepath

 204.10854 -136.07234 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -136.07234 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 54.26411 -14.40787 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a Fo(1)137
1641 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.29675 -14.40787 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a Fo(2)137 1641 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 190.32938 -14.40787 ] concat

 pgfs


 137 1641
a
 0 setgray
 137 1641 a Fo(4)137 1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -35.44627 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a Fk(\241)137
1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -22.6787 moveto

 124.73297 -45.35742 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -37.06345 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a Fo(0)137 1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -36.57706 ] concat

 pgfs


 137 1641
a
 0 setgray
 137 1641 a Fk(\305)137 1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -59.2582 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a
Fk(\305)137 1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -59.2582 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a Fk(\305)137
1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -80.80852 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a Fk(\241)137 1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -68.03616 moveto

 124.73297 -90.71487 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -82.4233 ] concat

 pgfs


 137 1641
a
 0 setgray
 137 1641 a Fo(0)137 1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -81.9393 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a Fk(\305)137
1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 52.27333 -104.82213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 54.26588 -102.82957 ] concat

 pgfs


 137 1641 a
 /pgfsc{}def/pgffc{}def
 137 1641 a 137 1641 a
 0 setgray
 137 1641 a Fo(2)137
1641 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 52.27333 -104.82213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 54.26588 -102.82957 ] concat

 pgfs


 137 1641 a
 /pgfsc{}def/pgffc{}def
 137 1641 a 137 1641 a
 0 setgray
 137 1641 a Fo(2)137
1641 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 120.30951 -132.08723 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 122.30206 -130.09468 ] concat

 pgfs


 137 1641 a
 /pgfsc{}def/pgffc{}def
 137 1641 a 137 1641 a
 0 setgray
 137 1641 a Fo(1)137
1641 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 120.30951 -132.08723 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 122.30206 -130.09468 ] concat

 pgfs


 137 1641 a
 /pgfsc{}def/pgffc{}def
 137 1641 a 137 1641 a
 0 setgray
 137 1641 a Fo(1)137
1641 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 64.96558 -103.07834 moveto

 114.25438 -122.83316 lineto

 pgfstr

 save

 [0.92819 -0.37201 0.37201 0.92819 114.25436 -122.83316 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 188.3457 -104.82213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 190.33826 -102.82957 ] concat

 pgfs


 137 1641 a
 /pgfsc{}def/pgffc{}def
 137 1641
a 137 1641 a
 0 setgray
 137 1641 a Fo(2)137 1641 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 188.3457 -104.82213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 190.33826 -102.82957 ] concat

 pgfs


 137 1641 a
 /pgfsc{}def/pgffc{}def
 137
1641 a 137 1641 a
 0 setgray
 137 1641 a Fo(2)137 1641 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 133.00534 -123.72214 moveto

 182.29416 -103.96716 lineto

 pgfstr

 save

 [0.92819 0.37201 -0.37201 0.92819 182.29414 -103.96716 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore

0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 2050 2794 9 1155 v 0 TeXcolorgray
2095 1725 a Fo(Le)18 b(signe)f(de)i Fl(x)2541 1695 y
Fi(2)2585 1725 y Fk(\241)9 b Fo(4)18 b(sur)2833 1726
y(])2858 1725 y Fk(\2411)p Fo(;)8 b Fk(\3051)3152 1726
y Fo([)3194 1725 y(est)18 b(de)e(la)h(for)q(me)46 b Fk(\305)17
b Fe(\036)28 b Fk(\241)f Fe(\036)17 b Fk(\305)p 3714
1643 432 4 v 3714 1767 4 127 v 4142 1767 V 3714 1769
432 4 v 2095 1834 a Fo(M)o(ais)e(comme)h(on)f(tr)o(availle)g(sur)g(l)o
('inter)q(valle)3456 1835 y([)3481 1834 y(1;)8 b(4)3589
1835 y(])3624 1834 y(,)15 b(il)g(ne)g(r)o(este)f(plus)2095
1945 y(que)k(la)g(par)q(tie)f(droite)45 b Fk(\241)18
b Fe(\036)f Fk(\305)p 2767 1863 262 4 v 2767 1987 4 127
v 3025 1987 V 2767 1989 262 4 v 2095 2119 a Fo(On)g(calcule)i(les)f
(valeurs)g(aux)f(extr\351mit\351s)j(des)d(\003\350ches)h(:)p
0 TeXcolorgray 2140 2233 a(\225)p 0 TeXcolorgray 50 w
Fl(f)h Fo(\(1\))14 b Fk(\306)h Fo(1)10 b Fk(\305)2567
2200 y Fi(4)p 2567 2213 31 5 v 2567 2262 a(1)2618 2233
y Fk(\241)g Fo(3)15 b Fk(\306)f Fo(2)k(;)p 0 TeXcolorgray
2140 2342 a(\225)p 0 TeXcolorgray 50 w Fl(f)h Fo(\(2\))14
b Fk(\306)h Fo(2)10 b Fk(\305)2567 2309 y Fi(4)p 2567
2322 V 2567 2370 a(2)2618 2342 y Fk(\241)g Fo(3)15 b
Fk(\306)f Fo(1)k(;)p 0 TeXcolorgray 2140 2450 a(\225)p
0 TeXcolorgray 50 w Fl(f)h Fo(\(4\))14 b Fk(\306)h Fo(4)10
b Fk(\305)2567 2417 y Fi(4)p 2567 2430 V 2567 2479 a(4)2618
2450 y Fk(\241)g Fo(3)15 b Fk(\306)f Fo(2.)-246 2865
y
SDict begin H.S end
 -246 2865 a -246 2865 a
SDict begin 12 H.A end
 -246 2865 a -246 2865 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -246
2865 a 0 TeXcolorgray -141 2976 a Fo(3.)p 0 TeXcolorgray
43 w(On)j(r)o(appelle)i(que)f(la)g(tangente)g(\340)f(la)g(courbe)h(en)f
(un)h(point)g(d)n('abscisse)j Fl(a)g Fo(a)c(pour)g(\351quation)1669
3140 y Fl(y)k Fk(\306)h Fl(f)1846 3106 y Fg(0)1868 3140
y Fo(\()r Fl(a)t Fo(\)\()r Fl(x)15 b Fk(\241)d Fl(a)t
Fo(\))e Fk(\305)18 b Fl(f)g Fo(\()r Fl(a)t Fo(\).)-38
3316 y(A)o(ppliquons)h(cette)f(for)q(mule)g(avec)h Fl(a)f
Fk(\306)d Fo(1)i(\226)h(puisque)h(le)f(point)24 b Fl(A)c
Fo(a)d(pour)h(abscisse)g(1)32 b(:)-30 3482 y Fl(f)19
b Fo(\(1\))14 b Fk(\306)g Fo(2)k(\(d\351j\340)f(calcul\351\))h(et)26
b Fl(f)860 3452 y Fg(0)881 3482 y Fo(\(1\))14 b Fk(\306)1068
3449 y Fi(1)1099 3426 y Fa(2)1127 3449 y Fg(\241)p Fi(4)p
1068 3462 132 5 v 1104 3516 a(1)1135 3498 y Fa(2)1224
3482 y Fk(\306)1303 3449 y Fg(\241)p Fi(3)p 1303 3462
73 5 v 1324 3510 a(1)1400 3482 y Fk(\306)g(\241)p Fo(3,)k(donc)f(l)o
('\351quation)j(de)d Fl(T)2318 3494 y Fb(A)2378 3482
y Fo(est)1692 3658 y Fl(y)k Fk(\306)h Fl(f)1869 3624
y Fg(0)1890 3658 y Fo(\(1\)\()r Fl(x)15 b Fk(\241)10
b Fo(1\))g Fk(\305)18 b Fl(f)i Fo(\(1\))1692 3783 y Fl(y)h
Fk(\306)14 b(\241)p Fo(3\()r Fl(x)h Fk(\241)10 b Fo(1\))g
Fk(\305)g Fo(2)1692 3908 y Fl(y)21 b Fk(\306)14 b(\241)p
Fo(3)r Fl(x)h Fk(\305)10 b Fo(3)g Fk(\305)g Fo(2)1692
4032 y Fl(y)21 b Fk(\306)14 b(\241)p Fo(3)r Fl(x)h Fk(\305)10
b Fo(5.)-38 4208 y(Le)17 b(point)24 b Fl(A)c Fo(a)c(pour)i(coor)o
(donn\351es)f(\(1;)8 b(2\),)17 b(puisque)27 b Fl(f)19
b Fo(\(1\))14 b Fk(\306)g Fo(2)k(;)f(la)g(tangente)g
Fl(T)2314 4220 y Fb(A)2374 4208 y Fo(passe)h(donc)f(par)g(ce)f(point.)j
(P)n(our)d(la)h(tr)o(acer)-5 b(,)17 b(il)h(faut)f(placer)-38
4307 y(un)h(deuxi\350me)g(point)h(\(c)n('est)f(une)g(droite\))9
b(;)16 b(ce)h(que)h(l)o('on)h(peut)f(fair)o(e)f(de)g(trois)h(fa\347ons)
g(diff\351r)o(entes)g(:)-246 4359 y
SDict begin H.S end
 -246 4359 a -246
4359 a
SDict begin 12 H.A end
 -246 4359 a -246 4359 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -246 4359 a 0 TeXcolorgray
-38 4453 a Fo(\(a\))p 0 TeXcolorgray 41 w(L)-10 b('or)o(donn\351e)18
b(\340)f(l)o('or)q(igine)h(est)p 1 0 0 TeXcolorrgb 18
w(5)p 0 TeXcolorgray 17 w(\(puisque)h Fl(T)1413 4465
y Fb(A)1471 4453 y Fo(:)f Fl(y)j Fk(\306)15 b(\241)p
Fo(3)r Fl(x)p 1 0 0 TeXcolorrgb 5 w Fk(\305)p Fo(5)p
0 TeXcolorgray 1 w(\),)i(donc)g Fl(T)2181 4465 y Fb(A)2242
4453 y Fo(passe)h(par)f(le)h(point)h(de)e(coor)o(donn\351es)g(\(0;)8
b(5\).)-246 4483 y
SDict begin H.S end
 -246 4483 a -246 4483 a
SDict begin 12 H.A end
 -246 4483
a -246 4483 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -246 4483 a 0 TeXcolorgray -44 4575 a Fo(\(b\))p
0 TeXcolorgray 41 w(Le)16 b(coef\002cient)h(dir)o(ecteur)f(de)g
Fl(T)1060 4587 y Fb(A)1120 4575 y Fo(est)p 0 0 1 TeXcolorrgb
17 w Fk(\241)p Fo(3)p 0 TeXcolorgray 16 w(\(puisque)i
Fl(T)1720 4587 y Fb(A)1778 4575 y Fo(:)g Fl(y)j Fk(\306)p
0 0 1 TeXcolorrgb 15 w(\241)p Fo(3)p 0 TeXcolorgray 2
w Fl(x)12 b Fk(\305)c Fo(5\),)17 b(donc)f(en)h(par)q(tant)f(de)22
b Fl(A)s Fo(,)16 b(il)h(suf\002t)g(d)n('avancer)f(de)g(1)h(carr)o(eau)e
(en)97 4675 y(abscisse)j(et)f(de)g(descendr)o(e)g(de)g(3)h(carr)o(eaux)
f(en)g(or)o(donn\351e)h(\226)f Fl(T)1995 4687 y Fb(A)2056
4675 y Fo(passe)h(donc)f(par)g(le)h(point)g(de)f(coor)o(donn\351es)h
(\(2;)8 b Fk(\241)p Fo(1\).)-246 4703 y
SDict begin H.S end
 -246 4703 a -246
4703 a
SDict begin 12 H.A end
 -246 4703 a -246 4703 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -246 4703 a 0 TeXcolorgray
-36 4797 a Fo(\(c\))p 0 TeXcolorgray 41 w(On)26 b(calcule)i(un)f
(deuxi\350me)h(point)g(avec)f(la)g(for)q(mule)g(:)g(par)g(exemple)o(,)i
(si)g Fl(x)g Fk(\306)23 b Fo(2,)31 b Fl(y)g Fk(\306)23
b(\241)p Fo(3)15 b Fk(\243)e Fo(2)i Fk(\305)f Fo(5)24
b Fk(\306)f(\241)p Fo(1.)k(On)g(obtient)h(le)f(point)h(de)97
4897 y(coor)o(donn\351es)17 b(\(2;)8 b Fk(\241)p Fo(1\))18
b(\(le)g(m\352me)g(qu)n('avec)g(la)g(m\351thode)g(\(b\)\))e(et)i(on)f
(tr)o(ace)h(la)f(tangente)o(.)-246 4950 y
SDict begin H.S end
 -246 4950 a
-246 4950 a
SDict begin 12 H.A end
 -246 4950 a -246 4950 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -246 4950 a 0 TeXcolorgray
-141 5056 a Fo(4.)p 0 TeXcolorgray 0 TeXcolorgray 88
w(\225)p 0 TeXcolorgray 50 w Fl(f)i Fo(\(2\))14 b Fk(\306)g
Fo(1)k(et)25 b Fl(f)499 5025 y Fg(0)521 5056 y Fo(\(2\))14
b Fk(\306)708 5023 y Fi(2)739 5000 y Fa(2)767 5023 y
Fg(\241)p Fi(4)p 708 5036 132 5 v 744 5090 a(2)775 5071
y Fa(2)864 5056 y Fk(\306)943 5023 y Fi(0)p 943 5036
31 5 v 943 5084 a(4)998 5056 y Fk(\306)g Fo(0,)k(donc)f(l)o
('\351quation)j(de)d Fl(T)1857 5068 y Fb(B)1921 5056
y Fo(est)1751 5232 y Fl(y)k Fk(\306)h Fl(f)1928 5198
y Fg(0)1949 5232 y Fo(\(2\)\()r Fl(x)15 b Fk(\241)10
b Fo(2\))g Fk(\305)18 b Fl(f)i Fo(\(2\))1751 5357 y Fl(y)h
Fk(\306)14 b Fo(0\()r Fl(x)h Fk(\241)10 b Fo(1\))g Fk(\305)g
Fo(1)1751 5481 y Fl(y)21 b Fk(\306)14 b Fo(1.)80 5646
y(Le)k(coef\002cient)g(dir)o(ecteur)f(\351tant)h(\351gal)f(\340)g(0,)h
(la)g(tangente)g Fl(T)1831 5658 y Fb(B)1895 5646 y Fo(est)g(hor)q
(izontale)o(.)p 0 TeXcolorgray 1930 5895 a(5)p 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 7 -159 a Fo(\225)p 0 TeXcolorgray 50 w
Fl(f)19 b Fo(\(4\))14 b Fk(\306)g Fo(2)k(et)25 b Fl(f)499
-190 y Fg(0)521 -159 y Fo(\(4\))14 b Fk(\306)708 -192
y Fi(4)739 -215 y Fa(2)767 -192 y Fg(\241)p Fi(4)p 708
-179 132 5 v 744 -125 a(4)775 -144 y Fa(2)864 -159 y
Fk(\306)943 -192 y Fi(12)p 943 -179 62 5 v 943 -131 a(16)1029
-159 y Fk(\306)g Fo(0,)8 b(75,)19 b(donc)e(l)o('\351quation)j(de)d
Fl(T)1995 -147 y Fb(C)2062 -159 y Fo(est)1751 36 y Fl(y)k
Fk(\306)h Fl(f)1928 1 y Fg(0)1949 36 y Fo(\(4\)\()r Fl(x)15
b Fk(\241)10 b Fo(4\))g Fk(\305)18 b Fl(f)i Fo(\(4\))1751
160 y Fl(y)h Fk(\306)14 b Fo(0,)8 b(75\()r Fl(x)15 b
Fk(\241)10 b Fo(4\))g Fk(\305)g Fo(2)1751 285 y Fl(y)21
b Fk(\306)14 b Fo(0,)8 b(75)r Fl(x)15 b Fk(\241)10 b
Fo(3)g Fk(\305)g Fo(2)1751 409 y Fl(y)21 b Fk(\306)14
b Fo(0,)8 b(75)r Fl(x)15 b Fk(\241)10 b Fo(1.)80 592
y(On)j(tr)o(ace)g(la)g(tangente)g Fl(T)820 604 y Fb(C)884
592 y Fo(par)g(la)g(m\352me)g(m\351thode)g(que)g Fl(T)1836
604 y Fb(A)1897 592 y Fo(\(le)g(plus)g(simple)g(et)g(le)g(plus)g(p)q
(r\351cis)g(es)q(t)g(d)n('ut)q(ilis)q(er)g(l)o(')q(or)o(donn\351e)g
(\340)g(l)o(')q(or)q(igine\).)-246 625 y
SDict begin H.S end
 -246 625 a -246
625 a
SDict begin 12 H.A end
 -246 625 a -246 625 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -246 625 a 0 TeXcolorgray
-141 721 a Fo(5.)p 0 TeXcolorgray 43 w(On)20 b(place)g(les)h(points)27
b Fl(A)s Fo(,)20 b Fl(B)6 b Fo(,)18 b Fl(C)9 b Fo(,)20
b(on)g(tr)o(ace)g(les)h(trois)f(tangentes)h(et)f(on)g(constr)q(uit)h
(la)f(courbe)f(de)h(la)g(fonction)29 b Fl(f)39 b Fo(\(en)20
b(bleu\))g(en)g(s)m('appuyant)-38 820 y(sur)d(ces)h(tangentes)o(.)p
0 TeXcolorgray 0 TeXcolorgray 1187 2673 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 208.84344 a add def
/d 0.0 a add neg def /h 212.82681 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1187 2673 a
1499 2229 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 171.28563 0.0 -37.55782 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -28.45274 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 159.33553 0.0 -53.49129   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 171.28563  0 -37.55782  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -37.55782
 171.28563  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-53.49129  def /maxTickline 159.33553  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 159.33553
0.0 -53.49129   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 171.28563
0.0 -37.55782 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 159.33553  0 -53.49129  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -53.49129
 159.33553  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-37.55782  def /maxTickline 171.28563  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 159.33553
0.0 -53.49129   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 171.28563
0.0 -37.55782 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1484 2326 a Fi(0)204 b(1)i(2)f(3)g(4)g(5)-1469
b Fg(\241)p Fi(1)1410 2248 y(0)1368 2485 y Fg(\241)p
Fi(1)1410 2012 y(1)1410 1776 y(2)1410 1539 y(3)1410 1303
y(4)1410 1067 y(5)1499 2229 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0.49803 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.90549 -28.45274 0.0
142.26372   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0.49803 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 1499 2229 a
tx@Dict begin { 59.75093 -18.20973 } PutCoor PutBegin  end
 1499 2229 a 1 0.49803 0 TeXcolorrgb
53 x Fl(T)1551 2294 y Fb(A)p 0 TeXcolorgray 1499 2229
a
tx@Dict begin  PutEnd  end
 1499 2229 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.81097 28.45274 0.0
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1499 2229 a
tx@Dict begin { 92.75578 20.48601 } PutCoor PutBegin  end
 1499 2229 a 0 1 0 TeXcolorrgb 53 x Fl(T)1547
2294 y Fb(B)p 0 TeXcolorgray 1499 2229 a
tx@Dict begin  PutEnd  end
 1499 2229 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0 0  setcmykcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x 0. def /x1 6.02 def
/dx x1 x sub 49 div def /F@pstplot ((-4.--3.*x)/4.)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 1 0
0  setcmykcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 1499 2229 a
tx@Dict begin { 13.65718 -23.90019 } PutCoor PutBegin  end
 1499
2229 a 0 1 0 0 TeXcolorcmyk 53 x Fl(T)1545 2294 y Fb(C)p
0 TeXcolorgray 1499 2229 a
tx@Dict begin  PutEnd  end
 1499 2229 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x 1 def /x1 4 def /dx
x1 x sub 199 div def /F@pstplot (x+4.0/x-3.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1499 2229 a
tx@Dict begin { 30.729 62.59595 } PutCoor PutBegin  end
 1499 2229 a 1 0.49803 0
TeXcolorrgb 6 w Fl(A)p 0 TeXcolorgray 1499 2229 a
tx@Dict begin  PutEnd  end
 1499
2229 a 1499 2229 a
tx@Dict begin { 59.18175 34.1432 } PutCoor PutBegin  end
 1499 2229 a 0 1 0 TeXcolorrgb Fl(B)p
0 TeXcolorgray 1499 2229 a
tx@Dict begin  PutEnd  end
 1499 2229 a 1499 2229 a
tx@Dict begin { 106.4134 64.87221 } PutCoor PutBegin  end
 1499
2229 a 0 1 0 0 TeXcolorcmyk 1497 2228 a Fl(C)p 0 TeXcolorgray
1499 2229 a
tx@Dict begin  PutEnd  end
 1499 2229 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0.49803 0  setrgbcolor  [ 28.45274
56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 1 0  setrgbcolor  [ 56.90549
28.45274   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 1 0 0  setcmykcolor  [ 113.81097
56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 2921 2673 a
currentpoint initclip moveto
 2921 2673 a 0 TeXcolorgray
1930 5895 a Fo(6)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
