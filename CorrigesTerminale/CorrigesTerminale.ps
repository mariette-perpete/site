%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: CorrigesTerminale.dvi
%%CreationDate: Wed Sep 11 10:39:23 2024
%%Pages: 9
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold Fourier-Math-Letters-Italic
%%+ Utopia-Italic Fourier-Math-Symbols Fourier-Math-BlackBoard LINE10
%%+ EURM10 Fourier-Math-Letters Fourier-Math-Extension Fourier-Math-Cal
%%+ fourier-orns
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o CorrigesTerminale.ps
%+ CorrigesTerminale.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2024.09.11:1239
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Fourier-Math-Extension
%!PS-AdobeFont-1.0: Fourier-Math-Extension 001.004
%%CreationDate: Fri Dec 30 13:47:17 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Extension) readonly def
/FamilyName (Fourier-Math-Extension) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Medium) readonly def
end readonly def
/FontName /Fourier-Math-Extension def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 122 /bracehtipdownleft put
dup 123 /bracehtipdownright put
dup 124 /bracehtipupleft put
dup 125 /bracehtipupright put
dup 161 /parenleftbig put
dup 162 /parenrightbig put
dup 179 /parenleftBig put
dup 180 /parenrightBig put
dup 181 /parenleftbigg put
dup 182 /parenrightbigg put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-32 -2960 6882 848} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F6FC13F6
FEDF4B792B4382E1B8DD4D6B66F7698F4BD76CD673F74E2FFCF34A3EACBD4F3C
C6A935F0007CEC07779EB225FD87A32485FCF1300A8B140DF1FB601966E239B5
C97A004A4205CCDACFFC747D59C0AB62F98C58566E92367FF923A747FDE768F2
BC84EA22988D2856786B73BD956D58D8E1DE05E3B73798BA7BAE21AED1D65A51
3E8B275C326E384F909CDD630CC3B3D3A664C6BB0A43AF3EF5B681E8178A68F4
18925BF7234218D39BD091D0B241B2FB96B24A302B7A2C3648C0BEBA299B1422
B2A246F4DFA5A9BA475E9963604E772769D365D898BAE237E423E657C64198D6
C50DC4E23676D32A80D9FCC26CB7EE5882A7CD7515BB142652043EFE62BF1296
C02D6A59757DAE8B7ABECD31FB3886ECFE4C018918AA771BEE2AD4BE22C921A4
50F44C875C97D243655B17F1C1C4E4C34EF324C3BBBBE230EC9D5EC568CA45C1
F0B2F8760CDD8F8CC7A19377F15ECE29BAC75C965984E9E5C246419CAF94119D
CD396DA99EBBDCD62D4493A16F9D040A24BA632716AA2CF3E8527A11E08CD983
08E109D5F610523FC1A976251F5BDB7C51EC9559890B4E838A6B7AD783AB3E61
36A0752C1C9586BED6F91B6B2C31BB5EF83E54C2E1A67785891B6161DDC05BAF
0C11DF8939F72ED4C1CFD293B9BBE5D7BEB0835695972221F1D1BD1D197E1A3E
BF18CEA3EE0C05151741C87469C417F1331BA729FF30D6CA8AD4B25572C230F9
2E250FF7F828D5FDC41884B337483286EC37AA4563EA5AD6F28E5227E8EC3AF1
6038BEA4475B0CD36D674A344E85B43BA3F22462B286886B2FD9B2FFFE1A996E
B0F752104862EFB24394FA6D39DCDA3FB70D93E95FE58AC0B21D109900667349
5B2D43FDF1E4EE5CE4F0CA7062C6BC568A897DFD9185BD17E8FB9AFB68659C86
242E30DE8D95EB6A9E9CB42398895F1F95D5F191D6FF2E3E78E08934514C342F
45D4DD4D84EA7F29299E3CAB95D642A2CD023A1848E1121734CA28B27F18FFE4
790DD41E5C1A6178F7EC590559326EC2EBACD67BC6C2ABEBFDBD5282EDA32E11
F82A0AF8F650EF3FA3F746D64D6E00AA95D272D5D0A13ECC9A28EACD256916C4
A4E7172C696748BEA3C5B35F218AF30672578B1BC8A0A116EF16AB27A53D1D3C
F2BF66C9E3D1E5DE0AD1E400AEAA7A413C2B4457BDA090018A4E015372D3A77B
ED713D91A311CBC9F9108CBB6E93047DC1C56FCFE12E747EFC70779A6F284E8C
67724BB879FA9ECF10E25E03E1E24C0E3BF051C48E3EC56CF8E7970C0B708ABA
923B22F8FE05E9BCB3A58469F12EFBF5827B097178E377F262E788DD4205246C
1C28616A26A19E0E686F26E94EE78C233E02E3FA04AED60F81A6DCD81CE0EC52
EAA665F386379D7309B9BC086EF91807506A79A8EAD1BEDDF547CD5CDB9BA3A3
65785D661A28D728376CACDDEF7F6347DC43B897D8BCF197B5E394846E6D6ED5
9AB8D93A5673FBA15E83BB90B6C0880865028BDAE462689CF6285C085F181AA6
56E86916BC0979C77A5680CC198B225BC02D0C1AFC6E206625062D91A9F0DE21
5ECE6F648F306768C2A2E2B53961C0E48672242746E9FDCED4F8DCCB22B2119F
CFCD131C0E9BFD740AFC3BEF388A61AE16001D29E73452E8F6790FBD4EA682BC
A40941F8520B05BCA2C0F617FB827E23D1B4FA389C3D17A0D367105C204979E2
7FC093703F080D8813F81A9EB66861AD85FB3BABA4D5F0234BB3B6B0721BBAF7
6678F9B7F1328FF020A7EB0EFF392D1A7C4765EFE2107728EF2A32A7200C7C1C
A448BFAABAEAE45F89113D37FC9D488AD887A22A588FFDEF207C025B32729828
3D8010CDF00602E358FC7E10D9080ED7A19B0C11ADEE70AA2DEDFD79E0369741
2FC84EFC35AB864A9C07B1452BE15CD4F52E7AEB4D72E02A4D7F0643A4AD2F6A
F582CC905C104EF94D55C4F97D1CBCE1AD581AA5B3E979F269F48978571C5E90
206F76F8A581C2B04BCDEDFA01EDCBD888420627E5FF2355A2EFB90B33F2E893
DEB0F1C040F0BD7FFF05E15F558416C9B765B77F5319056221B5406AF05F0DCD
2B624B97FF841DE409C6A44F0BC670911293BBB59344E1313F122F21F65DE8F1
FC038F1D6DC19BD00758097552B2BDF62103FC8A36BD6EAEBDCA7683EA96B99F
66DE704CE585596C05DA78EDBDCF2F60C9F2DB40EFB336455F73FC127D2986D7
99363361E6A63FB70C92607ED9E064E92122564CA3488AAF35FB7B09E34C397B
D0AA8DA22D97CFDEBC5F2A02621FF61013AD9F16A0B87F9EC7F227865CBB7E7F
FBF6B5EDCCAF1A111EEC1151BDBB99A0032704C3F073239DDDCB3B5C575DE1C1
7F9F72BED04B13D4149D5109675D66FEBE00F057F766A7442513514E8E77CFAC
63117513D46579695C9544BDFBDC1116545B8C27AD2C6C3ED17860A02B07F58B
6D18BB7932F047120AB79D760C2A3E2354FE49A6268FBF7C583AA465
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-BlackBoard
%!PS-AdobeFont-1.0: Fourier-Math-BlackBoard 001.004
%%CreationDate: Sun Sep 14 11:40:06 2003
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-BlackBoard) readonly def
/FamilyName (Fourier-Math-BlackBoard) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Roman) readonly def
end readonly def
/FontName /Fourier-Math-BlackBoard def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.00100 0 0 0.00100 0 0 ] readonly def
/FontBBox {34 -199 886 747} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18A96F6D1C771F81C4B3B8CF0CBC2E8
4B44D923DDCE84E17DAE82547EA9EA5E732D78F03AA245377BF0780A3752527B
6E63F6A41202E7A6C4E4F9330A0AABBD04387E12F2ABF531216BF498DC6B6BE6
06DD50B385DDB864515170905E2BF225AB9AEF29A2181200040460795735C124
59C90AE9BF9F01F42A2ACC5A5D97D4F6548FBC903ECEFE9FBC8492EFEE55ED6F
F29A7BB50432A42FF30DB3CEBFE1C2BF83D613F2C846B7F2173F00B4EE5FAA8E
12EDC39BDDF670F50F6AF072673281554416E77FF134014D5C465127C28647BE
3E810BBD9EC9F9580C21D2E9479B8F0435749734B76F4C06995E769710828768
3141ACD67803BC92D5B405AEBD4B25D5DF255B110F1EF1C35D45D24AD0B1E0C6
8816579DF17721764D5D2CE396276ECE1E6142DC2EEDF83FD7B65717064CF671
051D92A9993F82D241AA1C3254DBD3DC53886264BDA18DE9FB8F584DEC9A32F9
82A6131D7140BC7926C074E26639A7141B87ACCD64E61A25DD7E26F463FD7834
964655DDF83538CF1DEA3D6363DE79EBBCDB429279F84F5DA8035CE823A76FDA
C2FE77036F5B9D71C0CBB063689C0C9770514E550CDBB1BE97D763729B78CFE3
DD162726B3F3190F0003F4812E9877545507664B32A1BC0E6C933BA64EEB3563
39606495CEDCB8EA6E63ABEC9F3558DAA0BAA350F45A6E9B145480D9513B87EC
14F7551489E0F96B698A104DCDAEF9160549D551093AB3F5F7EBDDEBCAA3ABA5
F0CD388ED13E9611675BA045A8E99C002616ED89D1F3EF0537C6E787DEF9B5D3
F20879DF1555A646A79400D3EB80A209937A45A6345C4E51748D3A5C523F9F93
FCA3628D463FABD8537A948B3A3715BAAEE70345F5186A550FAC78ACD262E671
AF8FDCC133800B82183CD17B4EA18EB6AD976F91FE3C1447EAB9EACE7CAA00F8
69C9D899C80FDAA551B57BDFD7BFDFE5BE081D0AE6FC30D89B49C43AB5C8F923
13C1E770F0905663C6B7FF3B02723580D7B1E8C0DAA19968884E622821BC174E
58859FA90DF4D140C225017AE82F1C01CF0FE1952AC0CBFDB2B2AE148026C116
8E9D2D51BEECF04E3D194C3B62EBBA84552E741659DB3BEA3EB1887DDF2FF5EC
E616B5DDDF84603216ABD3CC62CCF91FCF4BBA041DB075C2A7DEFCE18F39B173
F296A12AE1CDD8B0C1DAD85E3F73F5D378EF9B3E44241869EF76C09CDA729288
046DC05F6A8281F31175DF235627E657CD3BACEF2AD0B700ACD6976C54D0B1E1
803BAB50CC45C5102647D7D2B835491465DD1A2507761E496334D370804A5E4A
5F1481C6A20C9AAECEBA628202ECD441DDECAAE92151F47AB7999A2290E4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:50:41 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /arrowright put
dup 40 /arrowdblleft put
dup 41 /arrowdblright put
dup 48 /prime put
dup 49 /infinity put
dup 50 /element put
dup 55 /mapstochar put
dup 106 /bar put
dup 112 /radicallow put
dup 161 /minus put
dup 163 /multiply put
dup 169 /circleplus put
dup 170 /circleminus put
dup 184 /greaterequal put
dup 188 /approxequal put
dup 197 /plus put
dup 198 /equal put
dup 199 /less put
dup 200 /greater put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735F731DA07EF3D6E818628
AF05166460DA5B83052A083336C23DE3F4916E3E60E10509910166E063832CE3
29E5DF2FDFD0AA1DC9F1C99A95FC477BF7F113B2CF4626600B1B5DFF712EB302
AFCB86EEF4DD29EA456833CF29BC0C5CC42C0BB09735A0A83143A0560B03DF25
B27B0B383BD641B85E8F6790F6ACFA6A03C77D60425F8B515C48893EE05FFD60
CB40D1B9185FCF7D27FAE0616B15007FBA17D23DBE9347515CC3A932A96246E1
85C477A9D6665D4F5D8F374CF4C0F4CDE76C57C8F7BD4A66071AF94604FBA047
80C65D0357949E03600E099BFE0ECAEBC6E6A636BCFEFC0A9035532476354B49
DFC61218068C10E8103BFF464394C6A73A86807D46452EFE438C9A865EBF150A
3F2587FBC59BE027C2A26E613F39554091A549BFE55C16256E3C1B3FA3049631
B7181E8433B83C151934FC7BB359D27BFEB53960B312E4AD68F95B05E92D45FB
C376BE6FA4B2B142D75F52C1EAB49F5C3B2E309150F46A1CF851DA164567C5B0
45E041001A6F1637107D4EBCA1D4087B6C6E602488D99FC0FA20860FFED3AD8F
D681766E69325AD26C69F87BBC40BA996128511A3F070E2F1A2F276D025CFF19
43ED19342EEE04B83F80EE0B023838C0A8E2E11E2610C4D59705A795E0781DF7
893A66D00B3DFEBE5EB8064DE8539D2B9C4DCCEA778984AD2E8CE3D02AD516F7
66CD383440ED859560778F98F156028386EE0933C47ACB4720F2BCD1CEBD90FA
E48F5643411D51A0FC7E41EA76A2F4BEE74360E20975DAF632E322931BF3AA5F
A4DE1F25449404BFF753A666D717C255F66099AA7DFCDB9822A0B9DD7E71160A
1FC166C61EB877F9196712B5BC51C22861D4A52893228367752E403249818DD7
CDB27BA17AAC3AE52D43A697CAF99982D2D9BC72F77B3ED547D99ACB28FBB7A3
38E680B9C9BED7F70E83C6C2F78C721B83751001AF6F480400298E6406600BFF
52E4CD24622B29E8E289112589362F6C226CFC043540D1A51B044D90F6E87D3E
D679C4D1E8DDD790859E4ADD791385370E067C637F9A4DF18BE7BE4C3596E68A
801694444189EDFFC35EBC929DF9B363578160084E79F4DE0AB7D9608495A912
731CC32E3B5C74DAA29D8806E82E85DCC2792EF0BE16EB4AB0D9FF828E669F68
31FB1A7F7C026F6285B723D5E74147914D174218AE9634EFFEAC8CA30140BA95
B0FD67BC01D4C0BA8AACB846EE72451551F1605B66C6B6979B7AC3FBDF47C1BD
247FC291FF1BC53F2866302E8A590F63D3D3EE279E11DDB31C88E3314D38D46E
CE41C7830E83AAA1068DB8D110EE1706CE6F4EB74E9E44941955559E46232B92
8C7DB101FE4FEE5FD733B006BD32231BB5673B022FDF7F5B6D9E08D764F487BE
EFF90C566452C9B886E326D34882E268EEB8584D5B1942850DA4F2E0173F3043
2B50151FE79AB25E04864F7337D3180C8B0146DB5F3DD29F60708188883D2C55
5CAB488B87772B1B27DE86C8337FA2B2AC61016EB6D42D91F828154540886D62
E48F8788C5645E756DE93C9FEA46F96BA3D44EAFDA2FBDE3C1EAB941E31CAAAC
2510D443E0F93DB90840A1B073109774487FA86E149F9F73BC1777CC0DC2E0C0
B729B2733F30F2E19F985378276EE0E233CCDF7168327BC27FAD39C8828C52E3
06B8BF623FFB24FDE4EC84482207361090AE2CC101FD789604E33EFB5C99C409
6B3A20B721A27CA7B53D73E34E291EE8D8EF6A64BEB2EB165E44B1401D7D31F8
52CC369FEBAD8CECB6637F5E7D3C667504035A5FA641A7738AC152B8B3CE9E6B
60B26B6E4FE705E126CD6A23C819D28B9B1B000E54226D2B7AC52D67F194B668
0E31E72DE6731D487A077C34054CA19F7A8CF85A4B10224A702B2B02EEC82CFF
0ADCDD6CFBF52273177BFF066C4CED98A9E411C05A2887180E369DC963721FAC
4095E9E7723E3BAD520D5D38E0B73DCB0D48F2E0FCEE3C1125D66F2CA06B5867
33980020CA3217E394E2E01CFE9C3D946B70FA69850471D7F858D9FD3F64C348
16259A64DD172F5D257A0CCC39C1A917EF257949CE5FA4119B703B090150641D
AD7C48A97E63C6CDC06092685EBBEF2A687711D2E74946BF8EC767B728D9E503
2844E5A78711C1FD313DE704C951E18908A83C28D948174C21D57006CD9CEC0F
E640B784F405F4B2F18F39EF391D4D4CDC526DC51A8DF2B7561BFC13519BA52D
023416FC3C02B340F11D831DA80CD7555A8B96EE8A4E2BFCBCD6F405FD19CB28
77D0F28DF9B896E0CA1AECCCD987FE02001C273B2ACDF837F03DB8FA0F6A9DE8
41013E338F990C4053D68CA766554AD80F95411C943C2F76B8A61ECC632BFCC8
AB7AFE63E925CD031DBB86266162D0E1DB8512C3AE036395AF4E258135E442C8
B0DAA31759C94AE69BCA91345D214C22D3458B84BD4D1FECE5A939E435C68EA2
8BDAC8E525D720F64BA22AD83830477E4AD5A1D0127DA5372873979F861A706C
573CD44DC72BC6E69AB6D185564015FBD092F25676DC5AA477D479EAB55D811F
6486985B937188A2D981C7DC8634E2624BC0927822D901CE7B419564D5241661
AA16DF1EBB2DA36B39B1BEDFB70EDE5CE8DDE7D73263DCAF87E81F909C8B6C6B
A01FFBA83E1F6A9CB0D47F792CB1F19530112273A3100F6BEB511174574F282F
48BA06C64F0E75BCC81F842B61FB6FE9EDB4C06BA8F6F2BB3AA36490E4D09057
B9A685679EBB7336D16E2BB85FD9122263DA530992C81F60BB1C41C9A4D0A04E
93FF137448F99BF6F691FC3E6ED995708E444E04FA48475EA8334CF389920B91
BE0F95BE241B6A4E5CA8218C98742EC909D4A51B0531638B1E659F2F6C6ED8FF
05682982B2DCC33A979149DC8F264B21DD804127073B13B931927A72EF149D81
5052080EF0F6B1DF20411F3FFE58E49D85B2A12CC86BE7A8C2DAEF2FE5D9AD67
AE1BF7C8CD823FB2D8ACEBE58D762904D264F34059CD283CEDC4D5F677CA56CF
E2AE72D92F668D9E99670438EE9CCE1229E18306C1545A85D138E432691FC81D
F3CD1911C3A485897B64C02B10E5DEE2C5C7DA8188F6E344140275BDFCCFCAD7
ACCE96172F1BE0BCFC925A2CC8DEF89062E3240D1D70ECF6EC8470761514BD70
61FA122CD0362B2892465B4ABC80485CFA4A1A3F95AD9939F0A9A5C9D8954C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
52978AAF95DD252EB0D606F78C7E295BB640D1153A3A0AB2A191B9458436471E
A80334C07C23E3D43BC2A56EE61DFD9FFDF3329FCD4DE9A7CF92ABB65FBCAAFC
7EA124656746FA3B8D5E8C9B51642207EDC0600CA659E44717F2BE08C400AD76
EA2E4F62AB149858C2DA5051009ECCE091A6E497D4729FC9924FEC3FB6A9133D
6B463F7C7EBE4EF91B9B17160941AC0087818BC60EB64E687E9349331FDB33F0
7E1D24C34E9E439FB6C392AFD85238CFEA21292B8E1D0991D029790B7831A2EE
2FA82A3B52599EB0636EF92E5D7C13FB08C67361F04482BB6BFD44CEF14F39F1
21263707E73B9BCFEC74AE58A63D5C3D4D773182258E76E62A5EC2865FB5951E
70F9FDECC6604E7D7A3A56648C90B4F400CD61B0B1ABB6B2EB9F977F0DC1A090
109733A75F2CCFBDD27403DE02C363DE41F7C24249DA6FF6A943A97302E113B2
7C840C2A6EFF6442DD52B43E21BD247CB559F781ED48E700C7C6818380E335F5
C15409940D60BDEE0EFA73595159BF5FA6EF014B844C996C73F53F63A48C7F4E
CEE23E1680B0037EAE119E8C5E67E32C964A18B5D20E9DA6FA4E53156DD528AF
830015D7D80E0A7974FC52EE48924BA4AD2AEBA3156D5F5916537207EB369B2A
6B80A8A4B044164ECE1C1FD5A30B240DE3246DFCBBD6E7EF71B3F46D35AF2EC6
76BF005985FEEB5D4A9ADD84C49132594E273D0A94C8C2DE65B5AA436EFD8768
EC53F2288DC8C1B20D1AD0FD1CBCEE7CB7349F8A7414179A76BEB45D64F98101
3705AB6F7A67D8551E4BC879A6461046CD604D79E621DD382967329A7EF603C5
0A96E000463F8247D7CF06FE08AEB09A6A8F4B0CB143A6C10B1412E1AD8276E4
A5A5219AECB4DD34412429A21E2A5209AEC889B4F6866F253445C88F41CF25DA
60A179B44F4CEB366A028D673EDC34DC2C6159ED9E284CCD6B34405C76ED44A0
341DAF52E65C1FB38B5301B2116C44955C2915D4B7B798E25A751E3F95B9158E
480257B3D8DE09668BC0E0C89032CF57B92D032B79403597185A78357377ED04
7D4387CC8327609532DEDF15400F35F789FFA040283ABD9B08630AD51B3E4D3D
38BCFD0A94E815B399C2439DB0ADF6152327F76EBD2DBA3976D9E1728F408B8E
C29EBAB733108E0A5CADD280D58F1AF1544E5A4D7642235392766C1F7AC9E31F
EC9717679ABA8C356C365DC35EF11EF0CDF28573B596FE57C97EB0DAF50B8A5C
F69B108D8678E9172B031D8B7F9C0DCE3619013BA44CFAAC55DEE70CC5523654
42CFEA7B93B63A76967445BAA85754EDDFACD00A2049924C2796F80122B3ADCC
0E79E4EEED18A99CE066A9080D458DCE7E8A42EDF647251781DFF83E7AF220D2
9611A8915063460CF17342B3EC70B0FEDD062F3BA8699448540C4BABEF2C617F
59015594C697B288FEF77EC8BF4B0258CA9A813FDB8225F281D32B52893DA64A
7E11F8E45D5A2095DD7245E5D0CD32FD2264C613B6238347EB74948A27E54329
B65E14F5616F4CD4F521AC543753969AC587F31B62E3BE1F4F43D9F2F7A380CE
FD9F6FDD519F13FD8B3F70D234883D924A5F84149C85FDA1FC2B749BBF6077BC
C8830DEC2D51089F1DEDD57F8B4881FEE3DAD531A917D716CDF0828C25C7DD41
2D8AF3AB7A8D39A7DA6D10A4ED2328BA1B1FC19F34427AC97A386E37C87011B3
D4AB92C1D146D29D2DAE41A66B44E501641176680ACB0918A3D4EF908D5C3572
A8423403AAA6191318AE40ABA430D2FE2A391271406E252590A468C04EDDD4E7
500ACFD983624D1007F6A30034602AB14B296CB735C41200072E0A9B70F4F097
D1A20E9BCDC43A04F65920D133F1E0AA7F6E7ACED726EBDC0778FBA4AF83213C
D6C576EAE7F028BA349B799666A88307D67968C5A4EFFB389A2A93EC4BE592AC
4E6BF30D2CD748F611BAEDB195038D1976C2B2E1C9A5B9886F253B17F68988D2
68D152E97C2433AB1642AF316C70F2FF7D5C7E8DD9DB7393BC7ECE28A4AB6851
80C6515CBCE164F18B623D4EADBCADBECAF085D96D3E3E53237ED455093C4B5B
EA3876CFD75161A704F9605773A16D59B102F4291DCB9927456083A6FB01AD82
DB9A9C687D1BEFFBE6069842FB68ADFB7558DD92AE49D74C9F1EC4A51B84CF10
CDB2B8299DFA90FBC2F811A4F405DD5A2EFDC3EE6BA5DAB71EC87C16F0A02935
B7B556A2DCFED4A008414F2440FA1F8C73D2A4048DAB5228D81C09CC4C87D990
1F274415E9DD3166022BCB537C14565CA56B7D55FB435CACD435949CE4D14F9A
DA2FD2B5C3511FC76F79C4261DACB01F6C104A56F2BD37778D638A458EA90D68
B2B108B1B05ED7F3EE7E49FBE362B7DF79D2E11306BE85533BE7D472D5ADF7D2
F914B070007CCA3A83191F771F86276E695093C2DADE08FD699818647DD36792
7E16F3C22783ECEC2435113B863A6EB6965BD608EE54E20F8AA75B6AC00B351A
AB8077E21BE3D5B960B22DFFC3778ACEE98E790F96B56B11B7BA7988BF49CCF9
12933B60E18DDEF789048BC0373F0F9C62338F7EBEAAF70B7AA4E149F4FD9B13
B4C0650D4A0B81934EC65AF60ADB33D581F6982995D895F3164E2A29F095B264
D2DDBFDD94CA2BB185BCE17CEEE9FFA5C0A6195DB79441C0AEA235474A25B3EB
8FC14062FEF78AB0B04E59987000720CC9DC95A092ED646F3686BEEA5154167E
499D9D4104761DF73E1809D29998706CDEFD049E099C3AD560BBFB42BCAA3626
256161249C3C3CA3BB886BB2FA7196DD6DB0A566363E732EA18E1D271FF85FF9
D592763D92A71DD77A701847CFE015E1FB85E9CC1B848043CC9DD97F24B0E5A7
C17849F0C875033E8D4A99F85F2BD6317212E345752E70CA37958F0509D25AD6
819FDA3A3591CF5877F0C2DE482F244C74AFD406ACB90C436F122346516871FF
899D427454EFE9BD939E88A67715A2F46EE7B98CC8C66990D1A16AAC2BFCE3C8
87E16D7F39C4F7EEA7348421C000594AAC83239FABDF55153B4CC2CD835685E6
AA290A30CFB8045BA0D7C11069372DE29DF5634E724F457EFD4B9B0B8C3BF5FA
A2C6DB9B78E1AE8AA25526F787B53096CA41673A87B476B9437C16D275CA4EC2
7770554D807F7DE678CDC6C0FACAF5F96C90CE22EF906079EF0E95DCC8CB8B3C
0A6E645D04CB109E7868C174E676B34880CA4F8325DAA94D3E27D16964F9A37C
FD27E01C5BB02CF005A7F126649BD8516AF2CBA740EB436367A784AF0AFBC82F
1DCF849E0973F04DBECD07E9CA1F47AA86C4B6DC49DBB64B20AEC564B8FD0724
64C0F7A9EE6D9E520581F7DCE884A79A290E96FB9A2E6FBEF785AF8D9080EC15
3D8AD84CD2B6EE7916B8F61E80F03C6AEEA4E8129F33137157A0E2A3DF3C2ED5
08A566A548F1F5EE7CB6BD6367C22DF911F43C1B4F699ACF11B6ADE903B4730C
B2075F86019CCEF8F3649C5C1B2502D683BD000873D8B6C273D9B94FA0EF759C
005F8325C89AB1AEA1959666FDEEAB259254CC4305A9FE81079C1EF2823D1BDA
81D0F7EA29949F213EB8A9E163BF413466BC11BD75494DB3E559C5F5A07C0EB7
935DB8F608C04A8FA12C16746FD49F830062209A941C0C4A0A0099D02BE57D8C
2CF498FE709B9447BB18F4174BD10992024B8AE21D8E8259A2999D3B57B8F70A
A21888E25B6E28CEEA89768A63E82B5BE1AD90B10515B518D59BE841A5B685F4
8F4E3A7F0AF2DD0CCE72F9F69BBD6D5EEAA37E3E6F4F920DE9C012E610B9B6A5
732CD54207DE9ABED6F364260C4E8875110E2F94ED9D6F1DE7D8DEA272B3F309
1ABFF5D31C9C6C0FC72DFE00FF0190FA4820DCC80E51AF95AE5C97D39E333C36
77E61347CF89DF395092244E42D1749C64E0E298CFC60EC533C57E3FAAFB89D8
B8824D2C9D5B6C8D5ADCE25EF353CF5CF7E88BDADAC3F0413DDB72DB3C736FAC
A7F6BDE4C07A470EC6591FCF84832EC7E7AAEDFB196606309ABF681F9CE1D6E9
CC9FB78DBF167D10E40E9EC21C54F1E9D10C1C7D4A30381E07F915B6840E37A7
D4CD532733692C4AEB882B5E360E01C634BB80A6425EBE5736A6A5171BD2C147
7D781DDF9EE3A5D0AC6373FA84D6FCE9FC03A0E65C015DD29175BA402619D480
10FA4740C5154242C43C5AC2A55FDF7F9BF8237387DCC63EC5B3736B42A01C8B
3074060D28AC946EFC2DA5BCBC17ED2794C0759CDD1BF9EF8341DDE632D7AD1A
58F4F0ABB4F758E91796C916FAFE6A23FC8529F41DB9F7A83F13DFC8A21B75F3
4987BA6AB57981087E32ADC50679642ED6A97D43741F5498483F0EF407E64BDF
800ADC6AF87683F0FBC6C4BFEFD3D410330FA1D06FE18314DF00AB03E35F1173
63E69D536D99057E3590993D0CE333B192BA917D5B91FCCEBF45A9DA7EF41222
F36D76F94A5249C5FD6FD166FABC8BEFEEAD4FD9C7D2F931272302BC8FA4B070
EE810A37654375371D012A4BF947782826C52949BA95B83F8F0CF61F30833F42
6DF9295CC349484222A9FCD5027A5F84AE6C08E4B22525D91904827B60B86EDF
DBA1971E39FD551A0C25634F90A9F3FD1AFB8E35445C0CA503DCE487958698D5
F61532650D0B4FECB6022CF59825D71AEEBFE1708B4377FFC200FB38A6E36212
EDE6D70A3C3FD35BC626ED455E1B6282D3DBD1EA637775BCC1B2CDC64A2215D2
F2204DF72CCD4FD69BD0386D4FCE408B08A87C049826CA2F6BD199FD55D13BBF
378D181BBF4F3731FEA4666A896E5079721BAF119F4C412CB12DCA76A8B4C0F7
F5E7B27ED27072526295892F8AB2246639DD75005CB9C7B1E4411F3B476F8937
409FC21DD326726F95E3FC9DBA6673C707C4C35DAEA5041C654A407541621DF0
986EF4AB4C970918C3792610A44CB1CF3A553C2A3D608C9394954B53E271A305
ACFE825E4A301C6462D801BC8E25147CA7FFFF1A88AEC671E8FB0155EAF284D7
424BCAD824AD453D006CF3E86A41C5FB5F7C0C0D306BD2180CD198212EA6E2FD
72E89528CD3CBAC412054B57FED270E95AF81B1D688DDA59FFFE6CA1029BD6CC
3E039BD096A56762452E38A84168B5BD1641F4FF19080C55E0BF67D8277BDD2E
837EBB448D1C93B75DB2174A712F0A2CA7C579EA6EF9374C88B3B75C42C2E515
BDB3D6B2AAD079DB6B4895E3ED94BF04685A3C5878851829767CBE7858F5790B
C86D1A21F74E3C696DDC7CC881A1998FD53CC14CA1C06926408B0AC5D66C3DBF
E6419620B6441B03DFC2EA338CF2159361BB0063EFEAC267876280CF987C7878
F01F89F18028ECA86DBCD675247D00F55E9F16BAB98C3DA314BCEB9D11670BA8
9B29BF0F08F586A8589281411241DE390FE335A955C6F53CCC12012D47C29BF8
2E5DC86695E0A64FB79CF0E01080595C83054F2F63B73A83A2F86BC191CF2668
6378A9B1FE313B0566E93F11D2F1DAFB42515935895432BE5777AFDE94E6F54B
4AE76EDE928526F8EA1A1D4096EF1F89F2060E567852027423CA325A76ED52B3
15F6881653677137888ED6C067C0F694AFDE8C03B269FCF77C04DB06ABF8122E
7D0A8CA14F7638DDEB6E8824E5D70B187654D7B6FD767FE93964007E1320966D
1E6DF77D4A4FB4FBEA9ECF3C33DCFDB71FA151BFE2854107F555F08B7314FF9A
0E66AE00C1CA5E0AB183765B71717C60C0BFD4064C45834676534794CEAB0A49
30567A877E6D22E6321DDDA78FA4AE4EFDB0A7BA50552271020B0915C747921A
2AF791CF64CF7BD7A4B7009B1D93920DD493295AE4BE5DB7725A36C427F7A73A
9BCF43682604ED2820EAFB8A072C6AC3B3D15931842B95B7A4AAB0805E4C0A30
466DD6A28B95A62341E91238E4D2C6CF7D4588A4C892FFCCDA117BA616B14322
25CA47DCA70C5F04A2215337FCA53EE11776CFB75A80A16EF029A45449059C7F
FE2D1A17D7808F467090058FD31F831B9027846643DDF6540B30BDB31A8646DE
B0484CB098B4D22C23554D5833833818CCA974673C28618CAB751C40FB66573A
5E9DB59361669994B74C3FC27E19686B7181D3574B11C5F16884AD88A8360779
EFFA0663A539E9A5E9FEDEFD6748EA8FA43A98760A5030585DB595AD7D1239E3
4711ADD3753587DB2DF74C737B400A8DB0E6B555EE5EA7AD4D458BDF3DE1588E
F474D75DFE1ACBAD9691D42235571DB98E4DA0CCE6C45310F17678A40F36018B
DE9C7D3C91823B03DC65FCDD8B97626FE71D312FC0FC0162C6127EFFAE4961EF
241AC963FF658A87CF9D8AA0088C8AE188FB193B081B338714B5277CD5CF8FD0
53E64028F8FFC6DDE8E2007C24E3972BE90690A80DF614C0C655A1FE092B93B5
6FB281A98D2FFB958D7020675B3C8AD0A810731EF102F8CFE88887542F94750D
C5001B5C38F173A5EE5389A34A7FDD85578EC5D5769AC8C9FAE869F6C5299D99
7BDA9BB2DDF2829CC786602B5B25C45A4C89A7AACAD5B947EB79F2DDDF33386D
6D4EEC20824BD26409B9BA12724660FE31D24EF556CE9C161D1DFED4E72EC8B5
A41E8730A3DA6920EB098C752DFDCA4C0F485757A77F0816B9E00603DA2CDC09
F9077349C9660A04CCCD114D834B2D485CAF3459EB0928F84166B3699C3FF696
2B8CEB6CA0D55AD7C590C73BB5F44FFD6C3408EC0A636218321056A367508E15
9F2B9C8552040865F3C536C45CCF48CA297980C68340D26D1E27C8EBB62E0FBC
E6CACFC93D546623433B3E083DD36939539F4D6084F71B52822FCEA099F67036
198FE44E70BE2EC90FA17906B6511C6118120FE56BEEA38DB06BB92EC90FA179
06B6511C6118120FE56BEEA38DB06BB86086347811F7C8B1580AA7E3AD8CEC06
549E93F626C14C5465CBC7E76111744C5A8B25FE56025D1FCEE2A2463165EB84
6FE48A7B088573FC804919E0EF7748291572775418912CECB8E2449B0ED3852D
B08089F242AEDE11879DC5D83AB2C543FE2C17CD43FFA39A2026680DE81F21EE
FD8024BB1E07D4D780571678044A171E0D98A54E3BEFAD5341A8D2ADA9B1E938
3BD37D69BE02ED8D5E338CBD396A3D4E4E5B8240DA839715BB3FAC1D8FA05134
D14D0B4E4F7ED9DB8797D61ACC003C7D36986A351791A3503D4734EEA836994D
C96A26104941369F323CD7F2A9CD656F8761C0638906CDA1889B028E46ACD0A2
8749B61775170FB57B1ED3347F96892F8130A2439EF269056C72BAC8B8450FF8
FAB0E7A9FC00251FE20A5C8EFD0B79E121066B478810F387E77F6E7D6AA32DF4
6C7EC6175BE61D1F7414C75EE70F5A9149BCF4CBEFE16B7E87234F09C3FC8809
BB22DD6475231EFCBDD4AFB5A7367877F8B71086C544011098AB8ACFB5FE284C
606B6D4A9BDD2AC51B139ADD2095F3FFA77D8882723654C4992EA47CC2297A6F
F9A466B55DB3AE15BF6B539B6A9F085962F84263AA24F503511BC16C50353B24
7310B9458B6B796FD92B4BEA2434971443353CC5767C63CA94D9D431E5E97EA9
41E05DFBD28F6609A60F6F74A6B5C3732C479DAB2E0F46B84B9B54356B1D2164
0424C7D34B2C1303C0A8AC123FCA6C50D349F05A5770A26ABFCEA93A0A6C4042
890BBDAFCF64C20BED98A07018AD82EC77BFF8C37BE372D73A675EBF14C12CB7
753EA9FE52845A80DD9962582B41A0B8C413AE98DAC79B40DA44E32842B62B29
9671531769A1029BD6C921FD9459DB4E8A2825E8866C8CDADDA9B4EF49CF6F19
2EB62DF16CBD09A294F9BB2008D0104BDFA25D00203C5C53CFFCDB40D0EFA4D7
B8B42944C9A159650D5793750C65C96DB40351610F9F2224C152BF3338F37B02
5303754E97895AC8B63AF5FAE6D6B2616F8667C19CAD276DBE45FA8C270FFEEE
668582730EDC01DD69D020B849CFE9B754DD689D74E0965F73E372893AC13507
2EC49537FFC33E9E53F92CEEE279D7E64AB8EA551B608C904D214B34BF781CCD
2694F09A49FBA19B2D942781EBE5D25B1A84F28BD4F4F1AB477FEFB341A02C0A
21E3DC5A0756ADA2CE54E1C305D1397FBCB240B241BDC700C43B947715561B51
A340B7407F72770A3EA54BAA33D3434FBFF88D2FFF55F5C36968DD78317FF04C
F6EAAA7757257946816B9F0844851BCCCF542402A2DF777A8286695F53EAA55B
444930B599BF6E7EA2DD6EEAD3991A20E4CDB93E4DF04834B8BD541503B26745
266952206DF8956F9FC3F515E9FAA744ECB8F7A63279C1311BE46137CFCCD66C
0F64E2FD82EF0B00AABAA26EE6BA0F8003859B2997E29B687D537C371CD38589
2B3DD933BDA035800A3728D93B3633F1076688FC4FB53747D33126D4D627E14D
DF8876999D24835B1FD517816BE3395BF0835C224CA15FD2CA3B3EA30EC6B797
D12B12C7D3F3E0A5D4BF7E9BF5940A81D091FB387C161FDCF500BDDDC2F18D67
BC5BBFABDED19997E6E54E8E88D43C8AA87466BB5C0B2D3AE5A70883AD0E4C0F
C0338BDA6031E445F889C893608B441C8EB39FE829119A4ACEDF035A6AEE4391
AA86CADD31EEE5FF737BC32456C9B2065BF365311665C102E8E3D53DB6FCA5AB
5BC8934832474DFE6A531E74BA96D167182D071EF67EB8331A9C8615B8595ABC
ADCE3C1A4534C92595CF6457CF08F647365AC1C7F2F3C1BDD39D1C1AE79AD4F9
A371EB39338ADB510FFDBEC067188EC4CCD8B85C5DB458FD3CACF0EAA129222B
EE1E1B87180B6B56D3100372E040065980B6451E53C608EEC3D8458362F00E36
C570C19F260ED0823F94B9AF93AB2AA8C916422AF06420FB32154C8DF1543FA3
40B48612D5054E61E14097258C87FDDACFF9E7617938C6F177641AC9181CC5AA
C19A93D613E64F71DD6B4BB1F676C583F623580266CCD2807377FD9ACDCF3670
ED778E973BB69699ACB051353FB351819699D431B12E98338BF8ED6A02AEF367
0537FD0575223C3B5E29D8649A2CBF7CBAE395693B9813766ECE69AE23330EF9
CB7751A240AD64A8C869C52779A8EF9AFDC16FC37418D668BA812F516DAF8BF9
C29A73D7DCF77711B9920BD51ABDC1A00D822718BBDDB4E3D6D9170CAC5631DE
CAD9AA169A8A4E1C26B51F063AB642ECEDBA34D26F30243C9BC54F45851BB427
C13C687981A9F7AEBD333A3D98BC7546358037EBA937EAE56BAA9FB2FC8D2678
904FC37495CAAB5F90F9EA0569E90FC3FDD13BBBFEAC898B26A2346ED8319FFC
E63EA618888CF30F4EE3A75A18C0064DB768E03DDD1BDACB1A0AA7611EE66115
62C133EB07E27FBEB1811F3A0088BB7771CC94D65E9A64F37E7F9262FCBE83B6
2DCCC0AA80048E3808F4E26D4D3C67A1F5D63DEF4707F6B103CF0A05AE62B9C0
CF0EB3B95959A57A4C4C19ED32F49399C8833B4C088AAEE242535AAB38FF7581
6A9553CEFC8952C999937CE7E6D8524ADBD856899AB0902460CC5FD9AB700B6C
CDDFC28FB32AF401E54EC5ECE82F05259DD7A748025A12FCDE446679B71CCA5E
A45FF9135A428CDED769EEE350BB6AD49C450B99E5E00C285E5777F0379E1A8D
261B3A743048A14FAA7DFCBE961B60D005F95A71B0B047E7337B543D6D43AC00
62B3C18B30F900D89644126AB2397BCFE32F54CD399376146DAD1AE59024388F
4A7C070FF30756B3804979E9AE8929733A7F9D67940AFE183AFDCA87F4CE0468
DF82E621E3807F2483461672CEC227D851FE020FD73E51AB88ED9BAB52EB8E57
C50CEB7B136AE609C160D5D548B166C26BFFD4D9B82BFE1B91B8A6B403BE7073
30ECBB978C3A3A8807B6E8F4B236CCD4B1B8F0CD6BF55CBED2CDF624801D9745
AE2A84937AF0C5BA0C771F4205DB7FC42BD3BD7328520E40365C825ADAA9E282
4AB447D291939025EEB8FA7709C320C544763668A8A54DD701D5A0B2E94E4BB6
081364D2B3D9670689823ABBECF2A3C16A093A4F80AC8201665DB90244527C3C
2FDDFD4E2347288A2889D4A0D4BD528709023874040E1B0E320D8B6A6A8337C4
6AC46B8F5389F9FEC171546DAB335601B83C67E1272518B8D7DF35035E4B7D24
69ED16B9A5F00DC7D665E1DB9656E82463D640834025A4268B2971C2F4D2C8EC
80D9D387E567B96575CBAE942D8640762DF9CD712FC57D4504267CDB6123D159
A84517640D5611AE19A2A0F4A99794E4FCE02216E436A7C68EA5C8CBC9215A64
19966F78D9475FAD085AD7B9B54152FA9EA8BA07065AB2649B17CBEC35CAA3E7
8EAFAAB9A91B6D43887A43E85BF89FF532E7A60700AA1D0AF065A6A210BFDE78
4FFA1588D18F96BFAC9216FB646F9E429AD49BD467381E27485ADF6ED3792EF4
9AE6DA1F8BF60F08C14ECD66331B5BB91DFD60458E5111C54E05AE9BB78E3852
11E831E51ABF5D065E9D56F6E0C0C6E57E3586C4268E84981E708A8A1C255009
7DB6C8CB0162002B673FC9AA6271DB087BE86DB75D50E2E1BB5DE4EEE2DCA185
5C52E90D2691E186A948CD17F6277FFD9450DF037832D3ABE3ECF03B4AFBDE71
EC207A5BD9D4A9D72FE8970409266D46E6D7F7EA649EF0A956E57852C310C384
8EDC71DA2362995EA9C15538D460D3DF13A2B2916BF9F76F9848B491C64BD650
48B505DD5DC7D60FB3DFE5A1491C23CC4169C485C4714F0FD1F0E7054377AA16
B866CC56D9744AB413842F3217088CD1B749A43969B77B5F48CF4922B1315989
AC464447C416FC35F82ADCF0A5F91E65437DD9F6BB59E7DE6E547211BB338B76
97978550FD505EAA6C6DBFE538CD1A138A0F7ADAC422F0B74633F690F7DF36BA
6D7D0C1FB1924E221C4BA1DD700E9B40CE1E87A94353D506FBEDB4B5025FD23A
4327D12535DB17357090B0951E32AD1274C601A791C75C46861430544D48FD3A
9267F986D59C627979906E7215775E279BC3B0D28FA005EE01DE4649A7ABB75A
726F1EF2469085BCC3A0E460F5AA72B3B77F51EA0E4B30B8E911C0F4084D1A0E
90EDCE7A3AF354D84EFBDB14785F6BBF58F94228342617ABB13A9B5525411C64
CD3E31C1B29E54A58EDC94C2C88F37808886530689167B7DCE246E758CD03B27
E5BBC19BDD013CB029A2CB033536BDB1070B399A2F8526112B4DA1346D905513
18D8048B24FEF00586D064C94C6EBCFA56734DDC7013982D6EB24FCEDE4C780B
C8DB84CA3C4F4E14B3FBE3776948F8D61AE9076DACC7C279DA94761D9C911735
8D014FE05F80DA2A44FAD2EF12F5D14413B3688E9D37162CA32B7BAA107AF158
F4FD1F2BD0C8D6CB2D7E4115CE3B6A3B86E1BF79D5B87711EF214E27959F61D0
6E0FD5A15BD84BE04EADA1C569C97478CB0DDE1985F4FD5DBA24102943C4CAFA
4B7D26586E36E46F79FAA8E9D0D48796C485357E0F95C23B8FE6B2B198EB6F00
9B903268006A99F3D954F25665CAEBAE7A00ECC0E19B220E56116093609D5799
02A435EF6A9A6A4B3F1F0D18EF6E7D3A945B1DE7F1873600A5834CA315127935
B3BFD9AFE62E5270E90C727DB9D6B04E19EBFAB932FEFC10B11E195979DC86A7
6213DFC2DE3783D8C54EB538A5A26374D460FF515A755860383E94966CDA9A99
49B69AC94FEE83A9ADFF0E4D7D5C560DD52D1C2687A54C49F6F0B77FEE5A6B42
E3C7976507B85F26B9173A36261ECE0A21B3157EEB622DD474D3C03B0F22E986
BFA848D44400FFA6518EE63049948FBA78BBEFBEF1AAE558E536C1D29166CDC5
948EF041AC4F7739C2CE2557E635E60A539D53983C7A7CC3BE69C9ADDF2815E6
B4C53C3FE03050AC7BDC80FD90A866830D05AD70CE93F0101BE2A7F0066C334A
543D3F936FA0CF0BFB3629CD69254D46F95A535E0B2C2D2258332A80B555E19C
8FA3CE2C27C7C928A7F45C2DBD12069C0B753CBE7530ED3C037A63BBE50C195D
002F4D46A46D9F312609828A232A21B5BBD874DD44287A4964F4552D021029B4
3FDAD9B4197F04F8EBB50D0B652A8E73B103DACC2C90099FE89FFD55D42E3FFF
E40B6143369CBF88EBB63868A81640BE77AB036D3DF81688CAF059815360A941
F6F4D1EBADC0C170FB5D41676F85A94D62100A94D2802E4D36409B4D5E17600E
2C57F585DA96CDB9AA06E2A17B3CBF902A1912A0669970A3042A3657BEBCF89B
7FF5C2D65D288FD9102F5C975FB427D8A46898FA0B00FC7C3889B168255E1EA5
D5825A189A95AAEC516F60ECD5234176BDFC22DB5C57153D206049951E21BA95
827F51E088BEEBD1F0C05A491D7AE0F3D2F50BA810C1A3F0416B6B073B970E08
C60A947C4AB3AF2133E37EEFCCCAEB5DD3BDC472D0CE981716714F4192CB6840
4B6064E241420DC03FB2A2D22626A58356155BBD4FFB123E8097607129BB92D1
8E2A40E4A9DEE1596B6E5A977A3713D07946B4C34513E6C5DA9FD80CCD91AC51
C3CCBDA23C2FAD95B2DFC7EE6E7032BADD69979CB21E7AC862145E0FB00FB592
384394FDF13563F3396F9DEF6082C5613A99FC40B74563813FAD0F30C3B3C870
B05F6DB536DE825458A7B01CC7EC1D56DE1812A60DC090BEAD2AD299046DFB33
9097E9E9EF2038CF1EB5E227926096F165C89C158A1BA933D2DC695D85A4C93B
BF6A985A47086C7C62A81FAFC21CB9DDF6207FAD295292CCEE57A357E4E8ACDF
170999351828EFB4C59FFD260F56CD6042DBACB6271CAF81FA05F90201BD163B
2E2D8F055A6FD6F33CD930DFD6ACA7B8743C0CBAAAF9BED596E51F0B259F0184
FEABADEFF1C61455BE4BADE6118F4D92D3277F15D4FE50219B963C5C69D38CDE
37A99775BE0BD506F7D9389072074FFE726AC22FED90AA88261235ED2FAB9864
6ACAEF42507E58488C4349B43A42AAC201590BA9F423E44F4CCAB3E624E06E9A
EDEC48F2019437D8B7A16EAD6EFE80A21C778C74BFA16AB9918ACE814E12091B
576980942AB95809402964F566F629D6A40AA8915B09CB2376B0A0A92487A88B
3194EB88AC86C230D3407082C64F4B1B80F68226F44E888FA245399EE8CB5366
102316BFB583E832A027CD50D7106A6B946D8C9452DE7218CCF6888137E7D34A
028CFED25ED815162A1ED1299078B9559A59A279EAA489EACBE93FA8BF1DA9FB
0F7A96986676DF123EB8A34117C065459BD2ED13500CCC19D6B5D649CAE2E9F7
14F5D81B2DEC47FF40398F062311733DFEC941516A6BDE7720BED6A61B3E65AD
E3D5327C66F8CAC62AA7E77A3A97150AFCF2C854ED91FBAB940DB2F5E156ED9E
D9130CCB89E9EEABBAD1492667FFF80C429777D615FEE2B6A214E74C8F4A4592
3242999AD926020B581E0382604914815DCE0176CC4932236C85D2EA9261E6FC
5585B2C67653E5B3F9D4331C7A3A34474A97E01A095CF04C267630494D4A3861
B0DE632BF4D0D049F9EA21930ACB93B870D8A08C1E21442DD92E7F2E687FE7CA
348AA864CBA3ECADA030B51E1260716DAD84FD04ED6505036B65BB2966A3FE7C
FB434CD66C2A22F3F924E7DD5D2F087EA0BFD4E33B6C249D254675913D13040F
7F509DDE79D7D77E0162F977D80EDEE0B8FBFDEA94349D001A5EFFE9BF4FFAC2
BB65E130690D7201547F3B7744BF816B2233E055509F4BDB68CC6F2DF79CEF7C
9503D0915FA054690FD8C83F57F0856911F0BCA6633F895DBFAE2239527BD3D8
65ECFA48E64BFB2BB9254929ED3FB6BCC6D5C07D2CD1DE9632BEA0D170AE3ACB
AAF4C19322AD68092648DBB253D0874EC1D10BECD07941A581B7D917595BADB4
5964958541EB9CAE0FA4D9DABAD8AB1919172080F9B89A3A0CA0CF25D4503357
D9623C23FE43F3C2D727E02D824B0CB7755812D911D554B96EE69BA11866974C
F7F068B3FD969DB71A10589EEDA01F07FFBB446AFE408D3E8EF2F7BF026C246A
EB71FCD576D83855864794B188CAFEA07BC56F0AED938ABFB1A69ED4C5414EB7
8A1DF2ABD7C5C17A33AF9F691C79EBAC1AFF9F1A35833EFA37BE4CF6159B3B6C
9AB9182EE16E85BCD3315CB15E7957F1015F6848527371D86BB167E54AE58DDC
2EDAF9FE3CEF57ED429DC0DB484B69B855FA38195A8E37F7DF2C38FF9329FD0F
E8E7CA041A0C2DEB200DEECD15EAFD353E5C2E1708FD92669BBE570C361283AD
B21B5F9BB93F683B9C456693660C51A8AAF785483C73E650C2930F1CC63EC5DA
8E6A4CD7F4B6F14D799ED0047CB10B788D207DCC6EADEE6E9FB725CCDF5D3A16
ED3F6634CB5DA4EA0ACB8E1BF2DE904B0090387B7C5A0D60C1890593D26EA9D1
2E00A721026D594A87043AB2EA1CA923C1F5D3B7246CD605BEBE78FA9104367D
02381C6494EE46562AB13B908DF7E3C2099013840478E3FE71666AAA729C8DA2
A3F0FAE4AED1B7A00400DFC112248D3F3ECF1B2534060E937F5D079BE1BEEE9D
3C4F374F0536F91078129AFCD70AA893B6526026A2B6AC0B185237635EDE312D
1A76620E9B10A034E73D720F88AAD118CD2CC1A82C0512FF376F34EE84BCFD27
5B4A4C8C625E8402B1A8B3123E7BE2E50508DFE715D5D6957A9BD0DE72581E7C
AFFB7668F8F81E993F6AE321ADD093A600D48AB96621D17720CF9223EECEB9F5
2CE02C8A9D996541059F7B35EED0E34D96300E933AE1FBF59C5F18BD2362855F
8DA7C423A66540D52F7F206BFFFA3C257FA3D13150B76E65942B8E2291DBDCC1
A331082DB994CF08E477B95B31A596BB713D83C8A4A3AF38E89FFBC212935129
5D6AF235BE23D2459FE1825C57680A5882AAD1C34E11381F7E7C03CCBE99094D
B587A69516371AD58590E97690934F725057388A2AA32641184C51DD165162D4
B761D378B78572BB07791A6AEE3D726730C5A2E6001B122ECB77F3A8C70FB8B5
172548CBB8E0B78478EAD316E3ADC7921BC2FB86F97E7D0BB0D020F7C124BA8F
49FE0B9DB301B782098821E0905965E2C65A431BEAB5C648D34C3B6E7DAD7336
C5C1EA26D72490A146D2383971B378813FB1F202B840946030A541E6F6D9C22F
6368F49697BC359D49678A40CD306ADEF51773880BA141EE7BCC976B631379F6
A97050F330BEC789CBB5A6D8D25BC6CF2CFB3CD9D171C5F40A99803BBFC62A94
401BD24C03F8ABA137CF252C3D22E1D7D380045B4ED326E2BF781F61A24A854B
D52B465EBA0A6D7BF91D022498BB2F6D57B8CA55F40F56D0CEBBAEE21D62CEDF
E07AA6AC225A5BD30229668058F6DD0618CC2B00E50B4D1E73C98FCD4FABD5D9
F80E4702C7B47FE68EB24FC9C37DF0917163572F5C80080F6F9EAF2333F6CC8A
2E06D8F1684F6C13271D137D5D0A5B9335B64DD47D588DC9209B442765AB7B2D
C89E4391C6C5C1752BF44F41BF2836A644E7A064EBC042AF3561022A4A553FB4
DF69FF683559EBF4ED9F06FA748315BEB7AEF53E0721D3AC80B88BECDF657ED5
C7A4655013C5CF293A1BEC471A188E387E1D284F04AB2F6B6895
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F607E0F7863C43D7F6A91917EBD66730DBD642DAB8769849
47384FFFB4994ECF216FFA8140397695EE5AD63F1156720A01BBFB15AA24FDB8
2F2A8F541C7FC860E03F5E4DE80BCF6891263C142159D5879CA0A1883A9B6C50
CBDA9CF0C97E761E354C39527F070E680B42E6732896B10E6A7600184B156ACF
57BD9A98F613FC166F47C3D1C4E5E02BAB648D74B078EE3F0D8148D981451BD3
918C71284E6154BEDF8D66BA1261A7459F64F133445F9BE19A2C48B1FE1D06B1
845AB18E2E5C17B77C48FBAE7AA98424BA0F90F689216F31EFABC25D4EC37767
C5A4BD9210AB9F0D3385717E8980C7F6C021061CC213ECEDD34548605F3FF29F
B92FEF1C849AFF8AD297F7A4259C35B7B9B679A509FB97F10F2BA3521085B1D5
104D43AFAED420272E0DB15AAF65567BAB2B030932584E4DE6150645266166F9
0B425322481A2BBB01ECAD3E011D365BE2C51E7612B0969A218662A8F3154F6D
56FACD9D11622AFBE969803421F6C2614896A0C03C341334FA8107BADB87B94F
160A7C59ACEEC8AEDD38E5A3DC178A67A00DF37806BDA55B79CD9D2D26A22AAB
35C0BDAF27422A0F02D44EB0410510BF6C09B4F0347B27755F5D304970657873
7FCCF58A989944777D347A8B645024AB76DD9F603A6B64AF3CBBE7B8EF011768
F5069F2BBDFC487D0C417094B432DE1DE2C9FC7250706A3B71F96DDEE9A2CA36
D3DAB7BF665BF04A5282C6DC982150C7BBA1AECA07BE20FA3612BBCF52518B3F
9F1D30B9BEB566CB9529CF1ECB46853AB809AB597894F6F15CB5C34A6EB8264B
66F25512A3E296218444E4C5A37E3EB0A18412BE86349388DF8C349693C3F5E4
4570922AE36708430DF1A1CB58F032D506296111E4F83AC944994FC74C9100A7
5A6C872D06B8ED858D43F481902ACCB2EB475A283BBEDA8BF00F896412FC9305
DE4283D9697819B5F92871DE9646A633A9C12AF376C55511921333E28F4AA430
CA6BED68B268A5DA83C83D5FC17A84B2DD67B7E9587E14238B5DD04443BCB07E
41674334C47FB98CCDD4D526D798672ED43E70A99B7F715787F2BAB7FB81466E
D7E6756B8078FF09E7A787826AB63CC8E36620814ECFF2363CA48BAC685829A4
7BE1ED12F0F3BC5A13E8AD59DCE3FFF5C9580B3E2E7604DE587476DA23FD0986
60B34485E3BA4FD94789E61305689F534857D7EA1DF00683C3B61248A6D30584
32B5A73B50A2C616170966DE7F28C3C967504E59600355A9E2BE0DF0A81AF5AC
DCB7E3F53F14764F393CA18EFAA6066D5C4468792A16686034BB0E3478D2D866
5A8DA35E4841DD385D49522ABE80822D64828965D98B974C69DDA2E6D7AB0EB0
C754CF99FBEF23C63192F110EE0ECC75DF414E334D2600FA8EC36BA0E331072F
45FA57D34BFF48110C3BABDCB884C970AEFA2A12D10CA06A9193087C213F27E4
3AC83DA4611B37F1EDA2C79A7BE1DA21084F6B73CC7E21368D16568BA669D832
AD1F6FA5BCE9854C624D9F3130D6CFD8DBE830F455B26680B3620D1902B0B455
84157FD30F01865BB86919C80496F62730A558067D2FC79386213D960C993529
3FF55FD766F4785E1CFBCB15997EBBB011848E421621E9C83A946848ACFB10D3
80F6927CB5845BE0D500881D583CB3336EA952DD1A37354F75C90737CE43B15E
271D658F023B03AF1B0861C65DAC085920AB9C367114FD15901868D7236450B3
9F5DE9CBB63FB2EFC6BC417DC4831E4EFC65AF3CC8C0BED602BF78B3054C520E
6DC28FBE53A16D11826CAAA9635A1EF609B842431262FDA5331918B4B02B6DFF
3EAE8F849AE608683B6F9CD24CCB5A7CE955D8FB17FDB11A870492A24DBA885D
9D7F74EC35EE3B7B83DD252941EF3BB6F0CE9437431B1A29277072846F1570C4
92047E20F78ECE001EB5EE7A9F51B10F0445DCD3454370E1C9AF3BC9188BBBA6
C43A13C89927058F09712A6F003A4E1E5E749F44B111E84F9263FDF1F0C2A6D0
0F27C25203EF2B4322D1080C96D85EF1001E02A3F2B7ACEED786EC012EA2ABCB
6CCFB46975DC4CD0EF63AA670EC4D6CDAEF516DF76A355A1029193ACF762B3F8
89D2B4E609E6BDF94941FAE5E7AB791BEB5E2F69F9282E8EEB453C7C2CCC2E6C
27C65DEAED493338ACC793769EAD514CA1CC58F0B30E14434B3D1FE8EA3BB98C
377A0D1D5049763E00DA7F4B100C6D82C16588888DE666F93D9F783CE08562AA
B2320D9D455335DBBCC1C6BFE73D62A1B0CD42D16609368C00619D9E69E48EA2
2EA6A74E22E1218EA6CCB76BBF8923C8B68D24FADADDDB2BCBC163966AC3C94A
64673AAA0778BF1149CEBD1D0529CFBF54DD4C12BEDFC536A6568749EDE6911D
60543B641B6B30A3A461F426952926ADCB8C9BCC9C63B14C5BB7687D8A7BEA3E
F0E1CB916A5795106278A7D5C680AAA607148A5432C818C767CC64BEA9583AE6
4C33286C1E1C89C679110C233E09DEC3013B03D4DB0AEBF35A2AE553C6236937
2639A771747F79A7AF44CC83F1AF7D8B5B24C9FD60327040A529BE2065473BF7
B62564D697E2F82E17458FABB586C895CF1E01AF7B91E4605643C96AED65F313
E2C093725D4719AAF65CC7D6F2B2DC9EB7DD35C2DD7CCBD0C18B29AC6F9582A2
7405817C3D21FD72D09F4020C1C2EF7C40125D9CC48C1000DF69C7DAB6B301D2
25897D86A518E8357808E4DE25BC8CBC76BC5992ADE61EA88E80604D8FD2F5CF
0B0A831F3FD74AD5860D5DA595C09A0EC956490A31EF02BAFD5EEA477B2F7562
C6E8B88A9797FA39DB0FAD8618A8773F3BF076B385F220648EB8D90538F1770A
B4AE8406C16F3E1E748465AF1D39A2E362B13A6ED15DF9FADA0222FB8CFECB74
F6FF9A18897F2D4D51642A8F54725D5927FE41E9E3A55597FE88BCDAD2A05C02
204EA9D57D04EDDB7A953DE63CB597CAEE45FAE986C0FAAD06142980B71C6C96
7D9922A77F6A083C4150686670F99A1B85E359A6EC5772331872F29178BDF198
162EED38459946CB8CEDEF3865B7E7C250954FB74969116F4FACCE4DE392223F
DD26BDBF637F5F752EB1B4BC40CA567155154AD3030BDDDB815BD69FF5433177
FD2C5D79D3F1E1349874D02ADC23404402377EFC920789A53DB7A8C29D9C1AB0
3697651F86C473E30C99CEDB77F15CB9114B3F340503EBC5EFD579CF8CFD58CC
39F8E02CCE44A8E3E0AF0BEFE2E334753C9829F87359AF47B0C8CA4D1CACA669
C7D3E4EC36A3A265D74FD5B53D1E3E8BDFDAB15BEC5521B31BDF8447EF2EC9A9
37C667CAA8366DB087013BCD5B69EA896CC75441D92DF2FE8CB6024D40E1BD6C
F881217B8966B4F6C42FC7E7A25DCE7AC6EE983987246EB76D20B3DC3A7815AF
E55AD7817AA615AA26973696E7F8DF8944E9D86E64726A02C5C92D517B2DA362
6245FA3D0BE3367FB78AD526567B36077093D785F43D78DD25B85B82698E4629
A3AD571E359A8DC08CAA7E919EF9FFD8764F3B9AD2B42BC431F461AA0478A60E
7C8B699CB263476E4730B1F9745D9BB5DA96D07E29B19D4DC83E44C9381F095C
03F91861CCA57CA4B5329B767DED999C1EACE47406FB01627B4EB802422BD869
F77A55A8147933108B6778869A2587DAA73D97999724E38CFED3B46A0F572235
55F73923CEBD63655174CD9F9FE50DBED3C62FE9E069A140B2CA30F4D80E2562
38AEC597C3D51FBDAFE1177E53DA34DE10D99668B775FB0C5AFC5DCF96FB28F2
929E3612BA8E0C677CFC1F1411BB71FA564202DE1BE47B15BC99AB5DF7A70202
CB19BB72FED040630289319C7608730574AD7CC1E77D6801020C817460440DD0
C129C29E6D3CB5C12B40DD1B385F859FA935BE50B502EC648F03B4897700C09C
2150CD74170F62339B60F53077DEEAF4723A92C5D81B3BBF553C2DE2CEDC3E66
BFEC83E2D9363F29D198F695CA4134A0613E440AB51234ACFC51E888FBA1E254
4DD2ABA272A94E1A850CAD9E14B05F45A11A6AB035D6A9D442D6F6CE7066DCAE
65552C4AF43B9E2A0B9DEFCF792513C2AEC3A2F7CB3CBB29CE393C4B784038D4
8EFF2EA4BD68A67C246EC6FFFABC747EB6E236A366EADD277FC23AA4850F0BBC
C5801C78AA31E4240F13E5A12D9F6EE5ADAF4086646ADE47FB26A6046D8DEC12
66786659050E1859BCA5609FDE118D5435576BC9B5512F2CC36C7A4530830400
38D5E7B5DF05C844D3A523B80543E5C5B8D9179D278A7508CBC96D16DDAC4416
9AF8184B6A3035C45AF1BB0ACF139FDAEBF847FC956BF321AD859BD7EA30965F
875C8893C457CF574C8B6AC6EF905120EC71ECADA552EADF217F5E4092E30EF9
9B5C327807A3516B949D9A92EF2BE0378196930497F8CCCE339253A802B9CCA2
138108F567FDA116064442141A44C79C6F083B1B8960C170298E1BFF01740125
08F26EEFE5F2FA7E5538CA0B0320DD3970CE3ADE6D0B920071EDEFEB96ED130A
21E719D5677D8295525065CFD16E6520BD25410AFAC74FB900E04B395111FF22
86AB9CF6CA776B9EB0E749819787F04B957CC66F87A5F87277556DC5B1A6EED4
6E8871BD8FF80B271BABE427FDAD90566F09EC756856651BB76645169A35F545
E30832CE2C4DE419E158EDDA88772207658455FB81B09D05A67BCBCE55FAD130
7E2178520D2F53BC67931DE1F780E05440BDCEEFBB71E57F70DB7987C808BF0E
95BBFEDE9647E0B76B4AEC9AB10D117942A15FD76E76CAAAAA8A0DC7EC99835C
3925BE3845266E23D69BACA09D31AE94ED825CB5DB62680656A47AC07B6223BC
7757EE5790FEC72517CAE1994A384AB9E02C217E2FD68E73F75E53FBC8B4DCB7
A2BD7E5EAA1D903FB13FE4B5310A4E7BDA5EBB67D9941EA180DEAC7F44BB1619
226D9615E41F4A6B57C9106D09B00E22038992E26467CA831938A0ABE41BAB5E
0DED14DA73DD33BB6F370EFE1C35574DC60419B81E2C9144070FC79D868BB115
966734DF4BDA1BA604872AE4D5E2480661F7148203B813E4D466BDBF007C713A
4FA58300298B11C12304F881C0187AFE2AC4355EDD02942696B50AC44365F7B4
89D2FA6D444F54CAFFB3F32607B0397165BC7D492A44C819E84706606D82772B
A2A21D43EBD65DB641506B3770F1657F327D698AB880D61796904A543C4347AE
AB60E0D52FFB821C1787CA37D69717C8BA62F9326AA0F71423844608CF1F4564
3DA5DA936EED801B97E47AA009F30562D10EE8AB088F1F6DA3C61744D0F8B298
84B57954C4CB5A9A70A7E08065B0A9178FF88FCE7CC3F78E601BC228CD432C32
D769F367D3D64FC5B160F8FF489438BE89DA62797474023611F5D5CB24654F3D
939F993310890E910975EA6AD0C8106ADFD991BF0B7A57A67302CD790F5EFEFC
8FE8B579DEBAD0B934153F437E2BA93E510D2C7D0BE9DD100F1904E1ECF3043A
C8C616D3E3A024BEF6F7E34D9761CD15F8DCEAAAC7EB2528CC8B04409E9FF99B
C9BBCEE95CA72FE55497533DE11EEE3BADF6D86FC17A3413EDE6A80F45EDFBEA
6CF56D0F5374F78173615C939FF952EBB1DED840EF719D1C27F72940A15D3876
4881829A5D50C8BFBF47E9A19B639DCEF46669AEBD163EC4E05406349233E69B
E4F483892DE53E6410EB7979A153D31AB4AAA78703081772B1527D439BC23540
E48742A7284154657BE453A22AFB1A3DA1BA69C728B14C945FD81578D8095E63
F70CAADDBB3C6B565D24CD496679DA95EE2C37CD1D6C5554768BCDA1771DC170
4449B7C23C8FEA01E8978F788BF85B3751ECFB942A0E40D17D4A2258EDEDE22F
F60F99B5DB8B72E960F21F8FF987CD75C6B27A1A598221284E9080E31629E74F
70AC4CAA9A6FEB07208D32DAED51E82C6F8DA89DC4250ED1E78876A423CD9C7A
F6BA2845DFF2C1C4647AF27E197CA411BAEAB87E78278A40C59F906328C025AD
C2B4B1BA452EDB6FE1780B88732560D04E5DE22DDF49D5DF8423A46914E13ABB
E0518FAAD04033268BCDD07FB341FA09966098754F00EEA17CF4A9394C3F08EF
106DC166A842ED69BADF9E387345C9FC48B362FBBE7472925CFD9004575AA9C3
E9BE36A4736C46A19973A3774555BACD328699AA0CCFC12980C2EF71B90E725D
E68BD62783960780B3240677F64889D70D3B10907CBC871386640593491D519C
8EF5A14FA8D311DCB8EED6DF46E3F5A7F0A84C11EACADC3D7495F3BB612B144B
00173BFD22C8F111C72C553CFB252C7EFD65C063099933598A0A66EC023A54A3
CD885FDC7D8845D531383155126506EA48827F153234B69711A6958D8A740CB8
9616BE4342A5044E35227D5C3994B5665AE3E795AC9FE7C59B1F798BF96725C2
8744055313D51A9DC9275453DABCA8D1FE0175E4EE205D1A36AB3A0B33931463
B1708B7866DDAC234B3A29D8EF6A425C47B6D089A23A802278ED66078166EACE
5F1F72C647B40B8B42D04F2A4240DA33CBD3E07FA1D55BED04E5C17059DC1F18
B2CD19AAC8437DE57D9852BD088981A025E77C10B5C06F3B4E3A399ECC675E6A
0CC2CF6C50D349F05A5770A26ABFCEA93A0A6C404289082949F5ECABF64BD293
66A97A5D464F639D0B81EBE42AC5EB2D7771791F9C23F4101F0CA6EE299A4FDC
B34B24906735ABEB6417582B7D7BBC26102990E064114BB5B8DD5B22F4CC744D
50560737B4A7E6344A0C99FEEB222EAF87F74B6EAD3917D7DAE9E1A73280CDE1
DC9925494C40709E55EDCFAFBB672882A031A273C40BFA5B86795D343193F93D
F239932589FA35F5DD8CF184D7958F07DE9614BDB2EDFD2A1E172B686E917603
0C7D8A871C870365A38AA8C5DC03E895AA051BB0041B4BCAF453DAA24DE24D6C
D66AEFA6A949A7596D884E46254FA97F8043CBFAD9A3883640ABAF6B76B9DC01
2374C9F7D8B025C2CD2241A727F236199CB440659E80208463E73013DD56D944
EBA12F545533847A7147A96022FA89ECF7C91A46347C437A96608C10F11DB82F
8F434A80B1FF706DE6C5ECE2C1B19829790F65A119ABE7A95D11A05CE124A4DA
134FDE8B54123209DFBCA4CD28FB9BA4C621F2371637DFAB7F41D82F9B6A5682
C5B609D77B8CE03A6E6D04994BEA8C450A7EF850231020BF3B9F345DC0EBFE8F
95F7D1FD0E301D7D3461636680D7722A5C3E9A0A447F3B1D625D78E2099CE718
C28E439E972750A4D2A9FE1544B13425BEA5F7C310416AA67969C005A9671B08
91BDE1F8E6435610BFF9BC2C009C8CFB1992C0E0DB9C4D5B3BC4E052BF31B28E
11CCD4E047B003CC84416D1B511789175104488DAD7433A318FDFB70DE7A0A4E
7C2483DF384143A92178834CC9347CC02DB2E06F8234BDC461D8F7BC5ED468E6
CDB0F411B529E306BC9103E34F8CB7298A539A6C41727EAA0A1E00023B518AA0
A651C49E8644BDCE993C031DE3A5976FD4BF79791CCD7325032E33530E763619
15C2931F392621B5C6C647DD515FB454403F9BE4842A66D7AC90A1FF32A3F392
19664801587515FD26D3412485EBB6B0382980E96744D30FB0F94F61939584F1
8314B05BB08CD0DC56E9BC4B1F977A4E978DFDBE2B440C90AF9273799D8168DF
05B7690C68BADA4CDC4AB56494CB8AFFBC46F6E8408A0C084D1724064F61EED6
3CB73DAE486A68361CFF074379DEA2867968A14A6970819FFD47A020B44EF28C
BF36ABF0646A59574AEF1485F41BA07A5A482C1EE2121F9E63B1CAAA72F598D0
BA1ADAE9285C83E69314E748B6828957DB09A4CBE8ED328987F9B4CD388E470F
29556C608E0366E23725B4D0ED998A362560152EC5AA9DF6FD40E2183790F7EE
1B78139D24669C69E6423F361A762D70540DC1170E6479B2811E41A533DC2235
B2178B3E16ACB157DAACACBB60C080AED9633ED04C7B23A778E6395E40C5B4CE
1EFF132A40B18E05605531172F5CF48DEDAE45EBD7AFC198AA9CB9E5ED2D74AE
20D4B2A4940D4037B8125A4323EA641B77C2F56904C2849F4D0EB43EEFC0ED74
621D8F9C7CA3E1398AD005F14042F8BF13620669110F2B4726CA4E8052CBCBB1
B44A8212DC7AD9A28E2D867C4D9FDC7541557890FC125345192FFC5F564A29F6
D8FB4A351C3FE5F8C30A591A7A13C95953B4221A8AE19A58F88F41D3B55C2CCE
37152C6F2F2A8D938DC2E3C285967726CD8CF43F10D3B6A1417E6500E024CFE3
8B94818DE7A09614518290A0AF6722A5E72CF8387180BF6099C444B4B39E6F47
39DBD8961628E3504C5592A4100ECC05416EFC9D1AAF7BD670613A25713704E4
C394D2E6A5592CADAA3BD93F1BE1BB30C697AFCAF2D319E6C621B0B29C63AAA0
E4EC58891E5BB662C063A39F65396D026E2A585737E52D729EEB300A6DFBE6AD
8D49D144C8909FAAF4C38BA88B677AFABA888955726D5247F1C2C663AC9031E9
F724DAC97F4C30E14EB01FF095B768E88FAD6F4D3325DCF159B27E63783F01E1
B69E3DF1AC80F8FFFD39A687303EE61116B13F557895783E8FA1533F65CD66DE
4C28814B1DBDCC682C4D544EF671B66936531A25C82C381D562DE45A71948AFD
6DF74710656CC739D313A2CA07C8A87932E919C3604A2E8827905ACF80D40C9E
6EB178DE3B126376ECAAC5E8C140D9870C55B7ABAF82D8258EF1D734B3BD99AC
4D0EC65798F52D67543FD71ED022101DA2D0BBA4B5C625D9C0EBB6585EDA7512
8CD52DDEC2D7DB58C8A5497D7C46DB5AD9AB18ED1853DE01304B14B8A1411E12
E33D33B56BB89BAF69978DFDCC3B7A7FB66AF2C5C59152EC6FD5A49A9EF8AD2D
226533FD2E6F67B94724F4A11AFE6EF8EB2503F8E60F6D53CAB8A93754FEB922
2981E9AD89BFD0818CD6674C9029C464989168F1A915DA5B6D8554C69B97A678
FF00DBDF9640EEFC4B9852C74F847FE19CD8A59C0B6EF00FD9FC7E62FF080096
B43AA070D345E5922442578FE2F67FFD6BA35EC4D29DD8ABF3AA87EE966FF597
72D09B4EEFC0CC48B62F5D1763A575367024913C93139D59544F4834BFCC0F57
36F0BF5464CA34A5D59664FF216D14A514A382841ECD300DBF8F99CBF39EF12B
AAA487ADC86172C9E04E73FA19856345A9C04D6112C314E8C06AA5E891868D31
AD1547274306C3A983AF99A7A86D70CF9AF7CAF9021D94903C9F88C4EBFAC3B3
516EFF30303CBCEC06EFD48701B58B320496C39FE6D7A860237B15683E204DFA
5BA0D7C1106937261E4D7C454C1C2F026E550F60B300A320FE90D8A4AEF92A7A
DFD8FCE077CC788F038ADEB478DEB60AACDFA6F1DDFBE7D2F209757EDEB49432
60DE231A53728751BC3816598851812D3E0B33BA38734DE6836A3CE7618308FE
6CF9C438F2478C2391C81C8561C0B04A431B44749E7442F9EDCA74EAA39D3A37
31E5B2E43F11AE7B2D9C925F3A031C4EB0CBCABDC0471ED87CBDD4C5D55D573A
ACDCC9B374264D84B685D4A682354A2F311B7898947B60DC612AF887221BF013
A5C6A0253535C8A6DD1F07E9D91134BC9EB9222A660A9A0C3F1F5ED107AD93A0
96258B227B707C93D82FFA4BC7C763219E6468511346F0336988B4AA82F45931
2D6CAF3506FBBCD2A05484397D5F9307FF45C75D0B82B33934DE931F9A2034C7
B8E20EE0971095F7EC7A019705E107AC18CE6DACCC9DAC8DDF427DD88EACAA5B
048E484FF0999CF22388A9EACD0ADEE2A7272B4D1A37466D8FBB2DFAD91140FF
8F9D5903B94DDEAB92398AB08F4FDC9C5432827926B2A0EF35A4B850671CC8EC
72E0A4850B45E01C3451F3E341C6D82B8DE0FC98B77FB7D35E116EAD89724D84
3986E575D191B5F8D8E2DDCD9067ED91EAE32DD4672B22C4BD0195C0BCAD5662
9C7C8C584435D2FCB95E82987AB65FDD8E7F2D5A8352E97FFE7F8A67E78A4067
91E793B1CA8128977EEAD4E7CE582BD55C1EAC63431867AFCB4644AC8AA6D76B
9571FA70B0BC198282ADDB9E59213A147FDE49CF26F6D62D4826D30469F25AA0
1FA156EE5063CE87C8A5779169F0062F2C22798C2F01C8AEE0E4090830BF2828
C1F79C796BEA1016A90F446CC28514D91A9D548C92DCC4D49B157711069BEE26
669203DDE98A48EB3F22E729395EFD657CCB881BB72CF4CCAC0CB5DA660B85A7
CFE33E83B1F08FE08D64332487E39559315C5A41A6F548594B27A699EA497902
CC621CD50860AD7A99768840A705E4B6A0F346F5DDB08FFB2407FB95ECFD6B2C
814B40605AEAB6A272A5FC047AC390861CFC8DE6E227A74E34F944A26A9864F5
34B161B50746E0CEDB141D8B4ABFC2E8E74A91CBACED4271934E2F6885B64984
862817C5128879008716CE9AB3E4AA13BE6B48DF8CA06172FF00AB6127810ABB
B2E879D76C9854E021DE15A980E7F475568D5BAA50B4926027477A0F58A8E3FA
553EBFD5D85526B406AB6A2B9F165B32644BCE13BF08EB575FFEA05997C67E66
7C26FDEA83238F1CF5A1376E394FE1E1840C6D2225472B094AF4CA2CB96929CA
83FDAF4FDBED0E891591223EA09A06FC03BC6603BC22300BF91C2294264696FA
55C6A5F624B41E01838386A397DEBDAFCDEFF74A5A795B1EC7FFC542E453DDDC
C8063CEEF68F5A3D194C1AFA0CB5E0E80F8B4DD7BDB2786B1221452EE6690A89
1BDE91A3466527B59B0CFDAE2C9D0CDE1D91BA212EAEC25412364AFF021C9656
B5739080E05A1E5C7BA5D8AB39437706A4B91162DF94A9C6633C258D7E2059BF
E6B0ECF25A2F90A5FDEA73428C391019BF763B1452C7D67C2059D98510B6AC68
0A8EBAF7AD1ACC659F95B1279647B812EA75ECB0DE30DB4C6149FD4A135FAB1F
82FE90255B1D483286AFC49FC6C6AE763CA422D679AC0D05075CBCA394F47883
D04354EF7FE3F38415D2BD68186C5ADA9C51F8D2A5B2058F28E62A30BFB2C776
0294B2EABC054C4612CD6F8D510EB56C1181C704864C0EFCBED650CC8C65D8AF
00476083D7E55DBD79BCBC50E710C64816D2B6AB712FD6B3C621F512F91BFA66
B66DF35C7D324AA46DB3ECC086BA8A6680DDBE500646C0F66F14FC8A59A18FC6
BC10A74EC4835F6BB7657CF2A3C7667C2C1A87E9AF457BA4830AF38EF81423D3
0DD2DF8CE37DFAE8E1F9319DDC6E3AF120C9B824007A7E639F50AAD0AC4101CB
7805FA27AE28C23D313121A4C54C43DAA8966574F3701493ADEBE0B3888DE6A7
EFB192F3E94D5A14D432E589720A83B951A7BE544B3C7F7AC798C67602881084
ABA55E420F11429934755123D24546921A1B2878D6855CEB2F366416486C6467
10BCF518C1B92FAE3ED6238461631FAF8317DD888666109EF5FB18190802B98B
9C81A16CE7CC5020373AFDD25EE9D241443FB7E47F3630C69D903094DA6F85C9
F20A2865829200AE1EFFF0BF941F87F7E799E605E4823F12034A19F6FA79CC2F
4D54FDE6EEF72C899BCF5FE0C1B44C586DFF778647FD0750EB7FC782F143FBA6
B55446AA7734125AC97F952DC8ADBE209ABC3A1FD1E861E8273DD8B4CD38DC95
9E22DE52BECF6978913193FD51A4255C00ECAFAE9365148BE20D8373C36A524B
375BB6971D9E982CF6CC37DACCC56D5F29828D7DC9581123B1328951EBFAAFEA
036ABA82B0CB0B61320E4517029A1AEC66AEE367127458888317C9D4AF6FD88B
B71CC83F0FC6C105706178D4E2F4D8674DFFE102DB0A41394C37BC9074E88C6F
5F424C995EEE641B161E101E503221A4034BF4D919FC937533335D6913884974
758CB1DA43E9CE389A735D3C4F807EDCA0B3D64349FD10238D433CAEDE95DDF0
EFE28DA7A20196094BA9651D0C9EED7F28C3FF2A0A2103C3DC2476D5986ADD26
F20A789261C84D7B4E7FFA3FA492E53F4A81FC2BBA58F84EE3E4504B713EF28F
4191E7D48CA620D9E32E174012AB7BF43360F10CABA32572816695072B7138B2
573BA7B949FC51FC665197EEE2968A0F1ECFFD32E0E6E783C388A51A39725C13
676E097CA571A08A1C917F7543E5E5B93B82DA36D34FCA2DB6982AA9F3C05F4D
0F7B52560A2391BF1A8E516E96AE7E8F0BFDA4B9CBA4C6AC77CD338A7CB42667
4ACB66F27AF6749416444A26FA690260E8DCCA5E1234E5D4927774EC86DF7EA7
033F33FA9BA019ACCBFEDD08CA7DE35580B2F9B3AD38AF0C6CE0AC2C804FCD81
2DC88BA93C982053E80138D6F79F792C5BBFA357208B13BB69B56495F46F8E07
7ED6FFB2AEF8F51FF93DA9079E7BFD7CC53D5CD821B2A00A6B5004FCEE6DFDDA
5BC113E4E0188706C46134B099ED63F686EBDC0FC566909717268D2CFCF14E7C
A2C5970EF2419C477FC2C495FC7B5F32D957F0278C021DE1A2A2EF10D7754436
816D113336925E2751A799EFB4B12D5B6EE8EB08C5CD9618C6A97B7875EDA896
79FE90ABDE50E2A3F872BFEADC751F897F01997D24EEE5A3EE02AA67EA65ADA0
703D3FBB5282962120BB591254B69FCD6EB20E5927F332A185ABBB491C413C02
D9E1FD5EDF6ED3797DFB09B58F6EDAE177AC86BA760692FF022CFD3CC0BD5BA7
5A8CABB6FEC5B33471EB361274CFA10764BD217C7D0039DE35121CB7C6825388
B6E4B4B5A2E718078DC2254CEAE4C2694AE73296A0548D8235A0A8E6F3B5DC07
E52E850772D9E7B0FCCD2CBAA30ACAF005E27F6A7837DEA864D2F0ABB8C7FDA3
2A17E0305A0836C5C698D994B6C8D13DAC15FCA25989249B05266FE8831C917A
AD27D93969EECD0FB37FB450C1A9125F689275F05055B45DDD9DD3D513AC5E96
849EF4E1B65D967BE293F3D46FD339FB751A40B34FE171C070208B3566AB6388
ABFB3165C98E4FC9585D3286213E9D504D88A31C2EE5FD21D5A043B8F4F4B806
497B3F58A86CBD5BA52AF952D4FF02B658FD89326587F56C891304A8FFB4EE04
25E8902794A4E596C8192536830D9B8CC1825FE31544C232ECD57D3E05B30C60
54B5D5D7E9B14F84E06A4EE52FD119F77BB2CC49308CC6EC2B5E42C0ADBE695F
365807969D7751807A67F20431F55D8BCB79DDFBEE56E4B94C886E0ACB6C4071
12A345EFBFF234F080DB3D42E971CEDCC9F045CD6405E4C4C32EF44779F4FA68
D6AA5D281D97CE1A6D58A0A16574BD33518BE71B71220E309B0AA6B78F688037
E3C1B6D3DA1DB8CEB0D283CF40E25F5113171FBA7C40B12238C5780DE0C8C3DF
F26C07FBDD217A153ACB83BCDC59938672E207A0C01538BC65DC67BF515636AB
17F1A48AEFD06228002DCD1856F3F942C395AABE9B1F9B8570AB3ED81A1B1BE7
3D1C8D7A873D93AE7AB4E88B99BF90C75231E979FE16280505AB4431D55BCC7E
56904D65FA03673477A3D12CEEDF9CA561A15BA2360831FB95F59875415F3BE1
96C9252A0622F19711BECD0BD9FA7E1146A30CF5A327C62CB9F54A88A229CDAF
82CCB84EA8A575E433C5DFED76FF36E0A79981DAB5F0E57272EE79C541532EC3
DB280DE39A0DBB883D1B0645D5A3892009737C5F8A10A6C3C25A6942EE412618
F2EAACE8C2164BF79359D1B293553B5960C58DC97C1796E563A4AE5D54503135
91F83319C3DB6080B03B6C9F081A6DD76DB58E4A071D85D21F3435FF9F70DCDC
928F9A8A10563E65A5FE4398856B1457E1E52BDC3509C19EA2415E2A0F0A30C1
3DC2A70A37F7C832BADFD137F768172C2897160425AEC74E03A1F8640600330A
ADEDA8F06F29484CB42E3B2D695F958E5805EA0495EDD3BD264F7E60901EA05E
C6DA005858A292FCFFFAD18632937B409E683634715BBC006F2622FD2F44F72A
F3E076CA6C4EC7166C507B49AAF6C8C380A99E72CF16998AFE4516A9DB49F181
F0A15E3D66D8ED27FA121621C789EE686F367C89AFA76E688B7016DBB3149CBA
93A8089C6CF8EAD34978572E547FABB4B1AC6692D2F88DC8BDB5FD10C2485C08
BC653A1AC82FBB9854D98A2512F90BB156FA0A9EC09B93ECBF5450A99CF23F94
97EDE5275F3E90EF3EE6249A35F1FBF117684ED54E1462122DA8F207222D7785
AB81F0621BF4DA488AA0A10BB9CF93C690BCDC1C208FC1E11F29855F2F47D0AF
4467CCD2274FC6C5B28D74B9F3D2D82DF481A69F7A5B6ECC5CD0FF9616E40434
99102B68817715F51A2199459D2163D246C729866A1705F76AE7B75AD3E87043
E6AA2C670B95F98D75849FEBC15664793F3B15559DB082EE59394E046596DF0C
E5093F2218E9A2CEFB95241AF9E9BE02AAFE52CA92431E1930A809B7F324B316
9B81AC493DF77C10A87BF39A6BE06248096739A65D00362A066331857942A23E
4001D5F6F3330ABE9C1328646317862C434A8A909D3CC12D8AF0BADA042C93A4
85628391BCDDB931A568CDA822D584D65EAA4BB1EE17B1DD2B6C1EAEB4AFF542
9809C1A784F9217D98DB860AE2B701764B5584C2F298F5463D48F72F3B5453D3
745E26D602393D8EBACF02CEF120E6827E9A242DE37FCBF0488AB82DA023B10F
2779B5AC6A09EBC7449B34AD6BEC5111AA5CE0365DFB22575FB7047B82B53BE3
A8649AF77E0AF4EC87F4CC81F1E740CDB35F4FEAC57D236A53C06A149DD0E8DC
4109CDA6D77F0E9E497E191FF71B0C9789D1CD2255BCE124AB95D873FF2DB54D
7BF4A803AE3BC8CAEE18C477D166227E77548CE05AC3AB040CC4B8D0D6F49C5B
486D0D124415E629617EC0A3DF4F8DE6C6C3C0F863B3CDDF29E13B5B73D56B9A
E575D06663FB5AEC46FA370D6A73D7DBDF393BEFDE61A8EEC7D1A8EBF6AD0E41
CBB393445CC590D2E8B830C1D1C4341B10477AF89AEC57535938755ABE3E54F7
5FFC5EADAD78C7B7E53EDD811F2CE61AEADBDB10662D5E4D3F50BABC708B71B9
139B26C75E8A3730CA1E12EA732193895190BF709E9A10E3D22204189F096D2D
BE76D8208BE7403B99978DEBA864BA4ED79F2AEA164FE4234AE01C43F8971BDC
28E333F582D244A90C3598A554C4DC8EDBA80CABDC56D84EFBC3A6B5B94364A3
219E1FEB3104D1EE0CD05C36EE5F6DB3D28BE5F75CC2211E90B26A83C4D0ABA6
4D4B20EDBAFAF2C76D02531DAA3187691CC8C0D8CB4C4BAC6279226F4CD4F542
FF87A92F2C9C88ADEE85693E97273652476B37D52FDFF1C4372F81CDEF7A59B7
58E6191A11A2C05EFCDFE7A0BCF24626752E888F0ADEEA26EC71F47D87E41F04
DE1B26AF589C98887D03FD059B92D0E2CBE50391701574393CA20FA15522B29E
E96E8A3FD9DA75A77DFAE2A5E9A51689DE17164A1F06DB8F8657CE5566F6671C
A91454215219CF2ED0A1AD42503C801165B35CD8EA7D5D230D13FF00887B4500
FD1257F2692A9D1CF5347534C5CF730C83DDE537D2F122B98625109A8FA8EB8B
3BA33F1303F5182619309FE5F5D1A5034ABD56F75FA9A7568E11E4DB99361DDF
1CE147CF962C60CFC0189374EB0A9251BC691E1858C15D0782284A8C26CB8D16
7FEF67E52D78C2DC31A153807AB4B84541ADD14130AE49167AB7D373EB8813D8
3B63FC0D144379779BA107768E7D56EE85C912CC36F6E909B645E07EE44B3486
2070DDDF70C071FC0877E3613F1859A6EA3F4AD10B87F21A0D45EF326CACB124
888DD45963D9D20AD15FCA8AFCD49C5C231D1CD5CB548FCCA5C76AD37DB3AF78
64BD65F00C54589DF82B0EE11BC9B832B70A770E8CA26DA58DE5CDA72BCB3A4F
FC672B111F9DE0A5322728D18232D42822F62448C4CD383C02DFDB9DF22DCA41
547FD4900E6D3C8FC22D59626FDB8747F2396927DEAA8AF2B23CABCBAF6B041B
9E8FA7B966D6329F9429B028C8404B8BA7300FF9A33A314DAB8C9C99BDD50A57
58C4D780B7DB8631F1CB7745011C7152D67F047B47407EA387407A05AFC713FF
5472C8E41E7C1514DB26DBDFE2BD23BBFF97A1EE9BE2250FD4A5A3760A2576AC
371A733E31F003EDCC0555778C3A81614407FE26A0D1D537ECCE94FC2D0EA1CC
08FF96A3380912BF38589D749C7DFBA1457704210DA6447AB30075E562B6B679
21D902B55FF5166F63717A922C1E87286081D70AF08E7DF25103398D7EF7CA5F
5CF5CCDE0B498AD07DDCC5004754B57DC115B86246B8097BECB2F92E2D7D2952
C846A293B9BFA30BB64A9BE744BB323B584C917CA6ADDEF09F7EC6442F23EC3D
7A8B015422C6F15C3ED38F948FF0D3A8F8BEC55BB7B7CD5537BA694BAD0A3813
9EC115F8091E4BBCE840842F8E7741C4F2F532D19597187BF0B76BE7A6355224
76E0245E4199EC2B540DF263FEDD8DE890CCF25C511CC1004AFF046901238BBC
900A3C8A6CE448088C91308A22552A65E98EEAC2D2CC10CED257361398F346AB
11A09626B70E99BEC98183271400DDEC9E42D5E6C527E620389AEC06D774EF03
808030FF712B6E422DA67786393551F72C487C7853BDB4E0765F857D76EC0AAF
6AE3EFB1E3D39FD695D380E669B0ACBE4E156B5E3DF2FF691BAA6A9B82D6D7CF
D5098D4F3E07FA17254E69B4BD8F1F06E6683170D552704BBE95A7DB84C933B4
BB36623761B97502C0E532F04EDED2C640C7957CB37B3D2AE53E27728AEF2654
3D510705B826D73BB94054DDFAA3E3292D0AB5A1E9954FC8BBE8CB93A00E198A
B1ACDC91F83FF0CCB50811E95BEF8EA5D359EE64F684A291D3F215E518DC6926
712BE4938920F59A791D65EAFA59FA84EF84A0459815D263ADCA98B102FD5862
159FB2060514D26A703BB39A7076D5C3D4CD44B8C76F6ED7AFE9DC2203C81301
4186821142E1FA1BFA8B057E222237CE5FF79BA406C10C5E176DCB7F6CF446FE
49CF6C47C0FA037C3B1A821DD3A987CF641663DB7890838B7966AB294107C3AC
44630DCB487184293337D378BF97AC13B8E37981F178FB0B6C55A2336A47B9DB
2DA661D828CF4CEE8BDB89D4C0866B4303B3BE043320DD3F16A1DB64CC5F9C14
3347B0439DD25502FCC1BB8A0747FF8AFD38CF3EF43B75806C77A052E879AA3F
DF2E2E78B8AA26357B8CAE31FB4EC55FE02492D6EFF1247004B18A42DBAB955C
35D85354879D0624D9843B795322096AE9AE245019D907F00827CF6BCD9C6BB5
22CEA6B29BFFA06F1F25CC37967D6200B35E6170462D18C57EF17A1408595C2A
E28F0153EDBDC2AF75AE8522166309F914A4FF42F6D52EDFE0BF8428A2861430
4E04036E1E8A8EC0D3A8135AB5C03756DCDB40130930B97B218D0842D64B10EE
17E49B4E963D03F6049C4CBCA6E104CE6E041961358698FA44E65EEF7A2720DD
B40E5929AD5937B4CD4C4C17C10547E5AAA6665C43A717E7AB78388DF751C9D8
291CC411F2709B2276E722B0E131952A0CCD162E4015989CECB4ED0F5EA54367
4E1A521E76C69FF02B65EA6BF657B0F593365A62C7D312CAE55317B1589C52DC
0092533B789DB73B6F5158292FF7EBF4347522F5F0E7F0444773826708A390BC
38781F7C5138D9DF37ECA2053A92CDB74A90BB71C74349D4861D65E3046964FA
9AD8FA34776609DD9D7C0870637AC88BECC31424905084E728D0E3DBC29296DD
1AE9FC4563D0538D4965F745BCEAB0FAFC81E7CAAC6B9D61B202EE3B58365EC4
37336AE7FC6250393253B7D2B5B73604C2F7B1437346B13C3B3CC70CE2E4BA5E
ECEA6F0EA30277DFE52A6BAAFCCE29C3B67AF63D5A5F6CAFDF71B6C616E66098
1E2A949C18858D6F51E15F8C494FE8181CB1B475EA0A7F4912E004FF29F6A14B
BFDE53B05B875E22B3F1432257385F6C82F07577D020457E43EB6A45E9EB0CCB
4166E26260B9873C96871141AACF2037BA3EAC945AFFABACA240AD87FF4DF6EE
8E69E1B831FB691CD86A8017F1D3A15C3136FF2631F6EDCF7DE3BEE1FDF40EBD
137221C07A47B838D1E488A5CF2B77210206EE1CF2B7598754012F8A591732BB
85A704453DE18F37373DE4321FBAE44A35E178C93E1D832F0D1C6ED6BEC77724
18A76968523C1E79D8A98625BEA3252C8821815AD09AFFEDBB9FB596AD806269
7FD799B914B5FE650B98CF21D9F9B938640F4F509395BE7B01488B88D836615D
AA37519A4F179C418B538067212B256D063CFE04FDBA6D4E433BE6D23826164D
352C53A84E12E0F78A44A812F6DEB36698BFCC58C945ADC38A668AFF240FCA61
5042C673AAED2ADC22CD8A0EAB567143F7CF20A2F0A1182FBDA6B130C2FF5A14
266770722D8DAE48FFB465096C60CC22DECE71B4792E8B04F553D2676AD75CA7
F46D1544DDF102F1BB7180960963679CB5B3FF272BB94B0CB12FEF7DB3149FAC
0CB5BA4CE1B4D7730B166DD3284ACF4D13FF5B352B2943815547FA0A64272D05
E9CE9FDD1B52173276F620CF6DA1CC904B0C30F2CB177DC2B29CABB9E248ED3F
9CBA46CE3FC76A0E11715B9B78E68C9882E285DDC312972F2B86AAF2A5213537
F875EF1A2762930446C62137AD15C74ADEC443E4CA5726E809D3A78536EC4F04
C9677565542A1085CB83B6896E59817EA1129249CAEAE15D634267C52AE9EA5B
B2839131EDB63D655B6F7BFC282F985E2B4D3F4C60B2834929C5A0A48B324849
A74306130E8DA3DAD11A0488161C9EA6FE1A332F85324082E1E7B8D13593682C
23AD1D6DE6A0F8F9E3129C5F6884E46C3510F7327D3F454C89F272D7A11329D4
FD85B0B5A4C76E96A0D088EFB54C49AAE33059DF5DF6FE7FB4CDFEAF49174FCC
3F2882472012A0BDACF68E38AD630CFC21BBD7CDEFAFF994CB19050883583C79
C1A1DBDDB377BDB88197E20B60300C6F4BAFAC676D4DAE92B20AA36982ADC5E4
0146C5911176C46D8FE7FC622B777A2F376C60D95B506D3A61FF7FB7FAB098B2
0AC34710569B54204CB2F6947E2FE7DED74F24A69B42E0C4FF31678ED9173228
B257888690FB9D19EE8175F3BB11E803B7AA28BA45EDE62EB9414F0F732D0777
CFDB62BE91C9FE0B77EE75CC4A546158F8E29B76A6C7072F20C49BBB6E39078F
E46A574DA1025C80032A4EFF73D5C8BD87DCF943DDC694240649CEBA94ED4511
50003D0F082102FAFD86FA008E106B11AFBBCCF09244F80A0C8938D11FA92F55
C2F347235CD71F30B967098B9E95107B68FAEAD68E83DCCF13A68C2D9753AD4F
96914FA1C706C21D82522DD8E2AC03A7ABE2F117B3081A4D669048BF612D575E
0F03A1F027142AC134D03D414AEDB41955793495A364316F85082D1132ACC554
7D927DB1FBCC6E9D5DF34497F2A920479AD7A35120BFD784B352A61F2F1C3DC5
6F1387623202418F67F5E2DAD82531D51A3EC4129F0332DD0313B79638967F4B
5561FADB4792E3C9FF0333D1D4E5B8715660DEED002CA0EA34451DC2B7922F4B
AFBABF900F78EFB0A0D910C5AD577460D1249F7A2429CF243CEA2517D171901C
36F239540222B7F125731F0676E87D65E8B61F9A5FA05B56D96EA572A01FEA7F
F98DF973B44055764E86DDE9674AC34FB5A8E2899146D0314D0ACC067D2E929B
E612C08FCB6229F2A240FC96C8C6457F9F2E19E9568DA2E62BC7DA8C7CD070EB
5E694F44E69D86E3016393868A3E9FDA3C9137F5F91FD6BB577DCA41DD7EDCA1
EBFE1A6FFAE7DCDB72B3037DA95B141250E273A253EE01AFF1D4601C2533D4AF
B45B611253A0E6503553BB634A34ED15C37CDB4B46FD3604CE74481BCAC4998F
3D7276E6190EAF965C8AA4036F00646BCE55790752AD3C2B336EF7BE4261FDCF
F351BAA83C09ACBF8FF3C55AEAE5F5A220A794DAA42A663F7C9D1DF5EAD0E1B9
CD0E968FCA6875CB078921DFEA43B46345C1C1F404E0D42804517B27D3F984E9
D1DE560B5A9579782D52811411751E8443691AA333EFDD671BCB044F76FA6C05
6E8B733EAF2A818E3F277119DB4A8D1522A15489BD1D1CB101FF398ACD67CAE1
B8D197928AA02D7ED0A5DCB4A2CBCDD2890A8D083EEFBB7073BA328495F2EE8E
AE9F668DE65F2EAE86D393C53F986DAEA858B6ED17807C6940E276157190B03C
8FA73DB8C149E73C3582119B1D1E92CFD883A1AFE14532B33DC86B2CD49F5511
72496D5A0C32907BB7F8AC4EEA81CF305C44391A04F7A978EB2DA8A9C1CFB87A
63E35E15C2F5084B41401D35FAAED950D5631D0A16BB52FA3FA69724FC11EFDE
745E430FD6779334C9708D1B50E7FF50E4D355E7B5DA0A3EC808418F2CE34327
5D05F5342BC6E9062A1FC9CF3A606649EFBAF4A79E323379803277B1924D2AC8
001AD090C0912EAD26262023B8146447454F97015DB5BB548073F768F8C9A25A
25EBDE7CEED2DBD5ECF75D20DFAA4FD836ADC9F4062DE31F688CF830F8A32DB0
9E9C52FD79D69212CCA0C7B4DD73338E465625FA026B74BE91CAC3DD31F6A3EE
7DB5920B21167039C54565DC4CCFA06E092F9C7D36388096B25273021A43F277
2F05B22345C718FC4C8F17C60B24635C9B43B9CC51F9578C12F36C8D25443446
C6343ABAB1333473B8A06904928029C647F1DEB900687F37AA398DAD37548000
292E82C0AB5BC71B51AE0427454CD56AE782F668C1AD250E5854F4F4B186DC71
626FA61F75250EB32AD1B7E4B529ACE344E244A664F69900CF8F0D303BA4C561
AC3AA762F880C9C58C0C7D4DFF200ADD0B61D4F0ADBD43CA52F88E910CDCC70A
2C61532637493D331DE41281671FD282BE45F9FE895239B697683F23B5B8352D
1374AC907EFBC0C474E2FB8378F3C3A2C339CD250FA605AAF45BEAA6DC68CDC6
17F6E4AC59FFB7DF672DB0E1667B2BF24922608D2FC2CE104B3A77484D0004AB
19CE8764B9696A8841A87F4316E7A276941908E8D0C7C459A8E0F304B8B3EBF4
923FAB0CD756A46196F39F12BF36EA988B804C5E9797D7CF083247DA51B2E423
9162363954CEB949F60212ED5728A72778D93E264BDCA5A05B26116478BD6EEA
E34BFA382D800A77BAA29C0110B8111822C93D213ECF17CE8D514F32AC490EED
EE0330EC1E142A0EA5F2133B654BCE497D7EF4CB3EA1D8C8D2AE0DDE0E0E5842
224C2E4C51A6D1878F4A649F6169A8D811B0A6BB11CD6DD143FD8B1C8DE3C06C
E2E7A2881FCA08841BBC90BA9B137529B6753D9C92D3258D85B0370A35028822
49EE898BB404E0EFEE35F7525ED5866A3946404BE01CA986480DBCBC8F4CA163
AD4E8D7D44763E37D910D68FEF6981DC5E68EF3C58C47BA27E9511780607F21A
124EFE8106E134A794C0CE46F19B3E0991405B950D89CEA29479475B7A88EADE
1175991A66B0FEC5ECA887185BCFE96156C296CF34782364AE5E17307686E4BE
6E31D1D24682B3191BB77968128F4E2E58FDE3E34737F7EA471AF081035A6C49
C73E1638783226A94689990ED635F4F47AEBE023263DA17FBE72F3131369256A
0FB3123F6CB9599FF14FB25BCC9DFA33A8D262A9D288BE86B1FC14F8BBE6CF21
BBE0F43048007DF33A79DF6690D0F9A7578EBCF7A72FEB1888D64DC523F791B6
0CB357F8E7D0F14BFB9362BB53922903406016FA1AA1BFA9B729AC08DAB086E6
BC1D03BDE1E21362EE1FB5D02AADBAB99D3C5D9939249F6924AEF54980EA83D2
8E95C23E25FE5807C5CD32A3F77B788F737279662D52544A80B36CD49810E420
1481F3C4043F812E61BBEBA75676261C4F682555950220D1E2A92ECE294D9172
5B3151F6D8638C34359E7A839D0DCCDAAF3B0ACAD68D462BA7E3C76F99CDBDC8
EFD728F9B1A3ED08AAF37EAAE37CFE9F007B480A188AF8BF583BE8E77A7FB04C
B9C970CAFF994772079C3F731F13C4AC8D4EF6383AFCF71931CB0F0F2A81C037
54069D1A13584641068F18A8935047B2AA208148E2168B2C7F2FFBF870BF2703
93D80FCA4AE868EE3B407C70EAC082AA2BF25857244B25DD92085E5A5CB45B35
E1388D3079994859D67F7D8AEF1A94F621F63A3257E8BEB088D4C186C8462758
FBD79AD3D4E3A4443494508C138351A4E52D51F8D7DBA0396E804F625B6EBE2B
44961114AD310F74B914316992888BFA08F0B4277788A4C4474C4CF55EDF75BD
96817C9C5F62CA802A7B84CAFC546018509EB74D9D12543969D28C2D1474706D
D8B1147E87CD24355640689F972382B32FDDF41A9C23A417A04B111143D4ABED
B3DF786ED68C1D8BBF8DF0D035C70791C24F6574BBFF94A8716C2D171F9A5A38
4096FC8743DC993C094C464C6797F40BDCF523219E05ED1E0C24179B74280D27
1B9AD61C1FD86D7B84690196CC4C77A57F209F7DCD1DADD8840A5AEC16F05389
EFB03E6924E3A2BBC2501C09AD126BAAE21052F0F4786ABF1C983CE6CE147A83
C3E55B54151F03C02418DF954A624060AAEF1D0D5C537E16BA678E364C73A356
43B2D6E06F5936CC3579EAD7205B88767F21F6F5FFDE079A70CEF4A3CE4CA65C
E4DAFAD4CC91BD0DC71F65D601BA0C37A1D91765E6DD2A58E266F273986C57A8
D1C2CD850ADCCBE684ABEEF2B6F36285DC5FB3A53C7B66885F3999697D33B129
B1ABEDD824F150432C83CAE0EDB289BEEAED746EFF0444BF0FD117F38DA2EBE0
9828D5337578D64258FD4FF776661173109D93564B760A56FBB23194404CFDC8
7A7F97867DC84E427E9E900799152B09A63B21C818F832A3798E2548EA58208C
8DCCA098B9B8C48BAFF3FC3E96350640E4C06F75D1573FA9DB80A9B10A4333D6
8DB68878419C6739A8CA8D08C643686768198992098C14705405C35C25991732
416715F565A784F0A8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: fourier-orns
%!PS-AdobeFont-1.0: fourier-orns %%CreationDate: Sun Nov 17 13:24:04 2019
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (000.001) readonly def
/Notice (\(C\) 2004,GUTENBERG) readonly def
/FamilyName (fourier-orns) readonly def
/FullName (fourier-orns) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Regular) readonly def
end readonly def
/FontName /fourier-orns def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 34 /beware put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000000 0 0 0.0010000000 0 0 ] readonly def
/FontBBox {0 -249 6428 977} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA3140A8A4C9F386
12495A6338DDAA084A46BB317BFBE8CCE3013A703B40F8CC6F564E77222A2AA6
45E14C9708A301F6768C4E0636CDB9EEDF721814B5DA591A498F6CC5A2F8A555
991C0B6FAA133EAB2A3F8E014E03FFEEBC26618666C174C7A6C21071D9D8665F
643EB8C344FC6EBBD91238A12DD034C4B73F6564BDDDC24B51C57159ABB39740
2F004B35223E7F65463B9772233CA3618739B0259A4F6D9AE2BC7CC63F115F31
D7598D70EF03F4467E20F76C0809A88B61251B5716B7BC1165846525F370689F
AC516E0BCFD3403D153B408820898B91CB0872F1A5187C1F8A3AB51611F9E27E
96734A11F628956FFA7F8D3DCB5D5FA35281704ADFED55A95730D1E9D32A8784
6356592CF741B08CFF32EEE67729B55D5AD35FE34E27507152F8F87C7FC28CBF
6DD5294E7A8D98A41C15E8E0330B5069D63A0056D66C6D83C49CC2143FDBDDBA
C4F831C15183EC9DD40CE983F95B4608162DC57A4492469AABE2560529390A7C
7A51F993E6EDA94B24BBBBABE04E46945CD48B276A6943BB18AD0AC663665BD9
C36C16684AE251D8105F14A4452343C63949EA3BB7EC87AEA3372B79BC118851
ABA0FB8A63E7E27D2B8E7C3C4C8E101C8B393FAE7F75103FD74A6F3C857AEAC6
5ADAD72C47102879DD9AD554BEDAB8A6254C71305B3949595FE17AAA5F551614
5AEDA129F32921747D9348F4DAB0E83A38884F18FF6E07A55C169FFED3C89A03
D84BBAB9C1D0E839ED727F763E1220B1C12BD2CFB2CEB4EFBD46E459E75D8904
B08C259999D20A92D972DAC0F158BB42FF02CB82C9FDC3EF6E26067973309758
18ED225F3DCA3C045DE3569B1FD9AE12E70A40343C7AE637D2A0671AA06881D0
B13A22CF3FD9B880B366CF377DFF4CFD62CC85031F225389F65283321D211FCD
A0D8C3F3148295B173244EAAE3CD80B0B133A1A4614732C69D5B1C36B43C4E8B
622289EF6405417DBB2D756DAFCDDF71ED7EE361B21198D525B58738AED0A4B1
8DB21BAE1C2C959D24E35ACF19AA0428411CF32B1A8DF7684A58D5A61F29D108
BDAA369902FBE694CBFAA9A6A43A61D651048AC7681A496EA0C3DEF778C37080
42ABAE0FE59269570A833E3D0B7FFA27824FE2897013DF23B383E39712D02151
B8F7F6B0E45E7A048E8F86584A0FEA4FFA4E230AE401CBEB5E485C555A41FA7B
703E0E0D7424120B9664FF6F578B37A63264BA6D308EF6130A2799E79A7AA23C
B6B7175CE49F0688B3F79EA3DBC898217EEBB2C883E3DA1AEDE8301A537ED683
7CE7A6C3DDB7746B3EF08067D301F57250F93AA633E6A97C631773A42B0D57EF
0E62F599D76936247EE945007524BA4F8C50956ADCEBDFD16C0A2F3F019C13AD
674A18523248F9C6C8E76C14177410534E2F51794D81E5439B5D3A76DCA8CEFA
CC74D8008B7852E13013B74ECC828D47B9A8B2EC17DF57003B19B66B8DE3EB86
39D40F2BF606F04FF1F612FB14AC2CFAF8546FCFDF7958F4C598536320992DE0
D4A01590C5A162CC9AD07C4801AF4AE64B8C18F257C1C2F1D1E26E2CD82BB68F
FB96E1121AE159353CF776031126FA1BD9FE8ABAE22FF36016F53C0F276BBFB6
40564F7CE21A19E94C54544E901241CBD2564F0238FA8D2A4574B9A291FD87A6
9D8556E472DD963F7CC64F4B638F7B24CBEBE49D59CF267AE8EDD60C66
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: EURM10
%!PS-AdobeFont-1.0: EURM10 003.003
%%Title: EURM10
%Version: 003.003
%%CreationDate: Mon Jun 13 12:00:00 2011
%%Creator: American Mathematical Society
%Copyright: Copyright (c) 1997, 2009, 2011 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name EURM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (003.003) readonly def
/Notice (Copyright \050c\051 1997, 2009, 2011 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name EURM10.) readonly def
/FullName (EURM10) readonly def
/FamilyName (Euler) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Medium) readonly def
end readonly def
/FontName /EURM10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 30 /phi put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-32 -243 1060 720} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F41F8A25
49C1ADDE0F25E4C2E5C990C47FF040F896D567264EF5C3F584F56F343C2737E9
EBBB4521049C78FA1A7314E86D532BBC544FE600AB25D177ED8281150D633906
8BA0DAB861A70FA9DB57EF3CE0D91C6A618A0082E595C1EA7E42B3C16842A9CC
7B8D943FA5D2384E3A8E797C334EEA52719AF615796D2EC131ABFB18606909F5
6192412A0320AD88B47D26C2D51FF38411F77DA84D5176BFB243447977173EAA
EDFE34ADC06154B053A3D5620C5F9A35B6BB5FD64B5EBDD13DEE096EC7543A55
DD9D1438D1746D8BE4DCD1D4A173DF9943C66B5128C3FA98E15C0C94FE411BAD
E810EDB7B7273FDEE769E94B6C49F09E74A5D89D5F6D776BA691DA3C5D59F573
5F1BF23A503258D642835A52BEAD40E16329D85497362275CE42FE13DAA19CAB
2C81DCF4644C65D988C1A27AB4E0EEA3D97D1076913836CB837FE42F98D80DA8
6A792B3CBE7587CCA83AA8A0722A7460A6A20D8EC0A70789C0CF4689C4113AA3
D42EDE01909AAA83450597B2D62195C5FC6B85075B31722E4919C9255D450036
BC434E6C05F32F0AECECE4CCA9AB7372C14BA99F8EEF9A240F0A537E75ED2CD6
B884FFE9BA738EFF3883E754E8C9A4647EC368E7C9E6CE86D8CD5C94B0FFAD7C
8C3C95053EE6DC3BADE68D985D9AAEA241F2BEF8576A74B6E46C635C20A5FE3B
BE83FD7FEBA6A21114FE25CC22437163B3504F62A1A1E3B9D81CEBA885B23678
8C1EF18A1B7FF384B08E6C857BF0AC2DE0AB368C5C6658E743AB02998152F9D5
29C8A78A2D7A62395617F5D533F38A68C2F94CB35E68DDBE2B94487C26E16241
531924C936DEDCD9B5DBBE867BFA34243DFE8C08F1CF1DBC72C01399DFE33EE3
F5A26DBD9409CC8E4A077A6576B662AE7BE7BC9D7D1A4465FD0E819964F62EC5
B0ADC909F6DA228DE32F694FD027CE76F45C623709187300E6484980A062C05C
9B352F6AF5BD52FE1D7944260036DD3A631F076DC1B3D3933900D3F1D794EDE4
DB65719A00D03B33502E1F59F53F8A02D005A3124555C19DBC80FDE4CD173B0E
3FCE02D064A6435322199C983565E8D4445637ABE216E1F84089E6E0A57A6AD5
25B4FB46B776DB2F8385EDF530FE6CC403B268CE34B1BA0BFFD785EC748BA3EB
9721AF8DC3C5D5D26A75FE580A3DE8992CBDF430E117B0B7705A43DA4915B92B
9E369A913488C8AD37E731BAEDCACFA8006A049FD3B350741EED5151973D65DC
6DEFCE17AA397770D733037F72F599C09F35A16CED0DBB36DFE3578097AE3D23
990AD071833F236088CA0A33565C584726E4C1D5953CCA29EFDE324D10D9FC0F
D7AE521EEAF6E21F32513DBB6E269218F5D2E1CC0FDEFF9D05A29D5C3B6B8195
33D642BC08CE5DB97909ABF5B87C7C7F2A4091C819F03101571DE8126C7FB3A8
37CB9A9ED232C3A38321DF1410C805DF50C579E56F70A0DBE768CB20F2FA7C22
A586FD388439AD34872C17033DF2171B7DF7262EDBF5846D9B15FCE42A1BBE9F
6CB869604CA74FA846B4DD4C71DBB4A7CFFEE7BD3B1F81C3A34FEB6A4784E271
2B63A21EBD61164790F7D8DF24CAAD82C8D28E2254129701A145381FB0D6A5E0
745308C7E1935CE6A7EBE22A23A5BC68F3B97DDBB0952E11
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LINE10
%!PS-AdobeFont-1.0: LINE10 003.002
%%Title: LINE10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name LINE10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/LINE10 known{/LINE10 findfont dup/UniqueID known{dup
/UniqueID get 5011940 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /LINE10 def
/FontBBox {-150 -150 1020 1020 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name LINE10.) readonly def
/FullName (LINE10) readonly def
/FamilyName (LaTeX) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /a1 put
dup 8 /a8 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE366EF37D4823F376DD9F7E4CBB15
DA8E93E91E84D36BA5A5B06F3A46B45692ED11C8FC76C0B0B3157F699878E2ED
D89511CBE105EB42FD76309DA91EEEE85F1AED9920648285111A1690C4AE2638
C0601A7DBC8D2D41CA8C4F9DC7A6AA5C51015D8BA926831892381DCA7E61E230
5BB3BD5632D276B929D97D4836F9703461BED94450CDD2660430A0D13F49EB47
72EB0371E38B92F488FD6E19C944811D4AA52CCC359210320B484568E5060BC5
4D2FDAC73C49BA0168EC70388AF54EB24A30387A41246830C10472DC40AA0BA7
BFD5FA9A7730D9FDB4B639665275683C8E3CD7E719FF53B6DE1F5835C06D1671
1185AE2114E4BF5C0836BBD5391FB7AC5793DB4D3C5535ECB70119CFDF567D0C
A390B1D9A992250D535CE1C36B028E3E9CFEF1DC5E0626C58FB0F25E04DC1FFC
DB6A1C67E40E6435D2994BE814C695B48D64DE30E3F9A38D4547B49FF66829A4
9AA4FB9432DD10B6AFA88BBC184BE95E34A17076782DCDFED010CC19715BA5D4
5D525F33A6065EC6C6811F7D8AC94F27E4E2EBCBBDC3AF1AED1016C343825BA1
1DF58B80CA212DAA2F4EA1889F989C99972A5FA25617CABA3B52190EAA98C27C
15717FD85CDC8CAD43292A21B341CC2A04EF383D978142D16B4A97EBF22ED674
0B45CF5B2C3F151029B75CFB6FD2C53AB88066DD793B85CB7A7A13694C0B865D
BB3315043A4986FB138775B7354F4AB89AFD27D52E0864D384397ECD9A850511
E96A85AAC591975E185230AD05DD19D2C6883B2AEE9107448928AC6959BB66AB
7F8F7C4BE5E6E4F88D3BA98B117C9F0F58BA8D4A7B88413ACF98B0ED4A5FF6C2
5F96EDEC0AC75AAA7C2F27FA3DDDD0B3BA0683D98F99A282C799183C0952DAF5
A900E23342D083E8454E64F9984EB44FE0929E8C1605B8B26C37A219ED8A04A9
D7D6FDF3546CB443BB11B2E4A1015E59E8AEA265CC70DEADB42D8361F4F54979
19ED22A9E83B7C851A296D1B5F44AC57AB4EC29FFF3C75A20CB3C1B57EDFB4B2
1AB1FC26A6D947D45EE8221185749042F2896A43FF932AD70B16BC2AD7982D51
C390D752102D4A6D49F0205253618EAA62D3616BC1FB3B7C5F3EE8F00D3EED1F
A096AED8381876AD3B6904E0AF7AB1D15ADF3AE26D38FD979F820B4607A4458A
FE32A61551AC882694E29AD2156E5D008591A02C59FC1DD6BD2F52F0FD868E8A
FCD67B5AEAB0025C012E85B2B1C1A99F66C67287B1FD75A0140EACAF485EB377
7E5C58B9E2904060FD815725F149D6B8251CD6DC34D3675B815D73F7F1F16D87
287341207E5791D6D8AE82E7BE370A2BE4C5F73FAB72B1F4C2058CA4994F6AD3
FDEF96183821964ED7BAA607C483A436C20C2EA50F45951BCD5A4EE21805DEA7
071BEE4216E8B2913E7743BFB58EC4E7FFB7C31E873147605D83D955B00B6B29
F8066EEC1E7091BF7F1D9E261658AEA6A81ECE5051E75695D5631C7398E77F98
08580980492E302486A98593780638B6FDF3C54D55FAB1271BC5888F18F4595C
2BFFC548C8BC5205962144EBF08C53026135AC215895CA9277DC7FF0ED5564
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Fourier-Math-Cal
%!PS-AdobeFont-1.0: Fourier-Math-Cal 001.004
%%CreationDate: Sat Oct 30 17:08:49 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Cal) readonly def
/FamilyName (Fourier-Math-Cal) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Cal def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {17 -274 1252 724} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F78AE14C
71FFD7441F153F65EC489AED623132F7F0AA967C97A2E6C705F58130577D30FE
722A0CE1882455CFC9882D1055821847FF648509DA92A3EE12F984224F7F1904
F3395261ABA61816ECEF5BAB29D1AB8C21A8F46620894FC69C70DAB3226A0DD9
9CE0FBDF78469648F29A99C677B9FDDC8B90082BB7C984DC5C42930D1315FD26
EA08F21054360D1981E79A6EEEF345CC1B9D85A6983CB5E833C9F3CA972A2C88
B6220FBB013192E7B2F79DC214DD0964F4DA52469E9500ED2ADABDB0D259FDAA
648EE5A0339A6EFFDFBFEB97BAC430C00291576483521C8D406E8FA4DC48C7D9
6830DF6FBF39E9153229816D94F6BDDABA2B4759E1FB3DEB54C47D66E283E45F
3BC1B675DA1D8DDC10F24EAB54445658EDD0AC1ECEA12CBA6DA205698F18056D
DB1CCC0A8D93AA9EACBE2B5093275823AB48AD9B7B1A217505522EB1C2F09074
1D7EC269452BD0896C0B1F30769BD683103F7FB568F80576476B511F5ED74F46
E2F35F191BAEAE8C91D87401A8C28DCF476FF0CB9661DE7B93284BC8E2429CEC
A964C815F35C33B2B6E795088998E0EF2CD048D1D54FEC5014B1AD8A46618748
6D1446CEACDF027D1B238173F8FB6C828F10C8FFAEA574888C851EEDF4629C38
4D71F7D93FD74FE5402D7D788D76E28ECE97DCEA9FEDC5985599B679C052E445
3E16B23D20A619B501A088D5A6578CD0F56CCED1F2039876D4FC648DB69CE3CE
9EA0C3B37F27CFD4AB23D96B5BA02308081972E9E62A93B2DC9A37AC4A63E626
F1488017A209F97B3217B85127A8AAB35BD704F9614733E2C55D3004A753ACF4
CBFC509E71BEB3AA1179EC2955F527022F86711D2DDE84B8E350D09BC7C0C88C
B62CF82CF8E9A25EE1A5054F44BC5D2D952510AC6FBC8812145400B5A5F7ED24
B33D2C3ABC26CD5A3A04C9E97192EE0D2D2BD36D10BDD6804000806DDE46E0B5
64BE8FEC1D025776855E711E097ED39AA1BCFDDC6F9D30BF27F8661FE849E6BA
E6E8B396D944701AC384DE80DAB291D030D4B15435DBD2B721516F8158BADEC7
D28729925B82EC8B89271D9A6FA754A922516A672CE969C73672546AF3EDE43B
35792D80CE15A6BEF1CE58179B6475EFF13E12A8EDA3E0ACC243B1073280AACA
1B26B24CD315BC351E053081BEADE92D2E498E8544430383881E5ED0F7F184DB
AA9A394D0E08138E5360640BB17710A5ECDADB2CDB17ACEFDE8AA1B611DB3CEC
ECDC55767C6EC7CAC0E6F01EA6B19E1FCC847EEEBCB66CCA1752308E2D4BD275
6A486BED3522824FF77BB9FDC0F8FFE1838BB65FB3CA607672275271069B0EF9
07B5B3C31CBAE9775E4BE188CB1367F340CD204462679DB3F40EF9D47CA1F41C
E7D9F6FA2AC58D012540E357D08AE98DB72E71DBA225522E78EA5C55AD0D46B2
913617FB9AD20B1EF553EBC93EDB391689A7D6F2614372B035D38873A5F8DCEC
18AD7BCA14212C2B03AA6B9782763A838D9572763E6D0AE5213EEB4D5B7B5250
0C3ACF353EB463351C9716A42EAE4CE7BE47DB9153EDD94CE5FFBA84119E95E9
DC4EB9CD2EFB69F2EC5B3AE5D869F33FF3C4952F378C89B225527C1BB720ACBE
4ACBF7C82CD339AC520CEC8EBB3D763133220D18F85B2560F28087D126F685FC
C39A6642CCE776F59CE4090500E236B319EF6786922666B97423EBABF30F41F7
01F8D2CE117C7E137E5EB8B6D070D062A2427B0A7853CB1746FBC095A8CF91EB
6B681C4D499E6BC1791C6C8D9FF749D4B1E22B4EAD7AB0F26195E6AF7A06F8BB
F098DB8CB4CE9A8268F1B7F9DAC0F4936FE29174A18B48C86D941BCEF0F34203
DD15A564F17A7D9BD4FB945E3A5B0AE0EF01252E48F88C130ED07D2AB3CCD981
FFF8D223E768DE48993AEA6F00B259F31AE9EEF5374CB7EC30C61F98D4386797
2FE0E258C1D02B7F166A688DAAE0A887275B93FECCCC8A1D19C10126AA17A7E0
F9A8A2D9F57CAA82373A20A766C47E1ED00C83A3C627A3BF6D00C6524D91A747
354D852CE1C81EFDC2451F0E53176CE8E446B70700272733
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters
%!PS-AdobeFont-1.0: Fourier-Math-Letters 001.004
%%CreationDate: Sat Oct 30 17:27:29 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 162 /Delta put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -247 972 755} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F78AE14C
72A7B8AEA5D41576411085046EB76258673C5CF40021E812997FA677D59CE155
7C55D36F8B6501F00808AEE2A8934EF6E7DF27A6D20490B6AD5EE97365B26935
6D798248ACD56BE774DE447B7979B08E595DB252D6EAC137A081AB9E002A195F
08D19ABEE28C95E9EB56094AACD6A73761A3E376674258165DCB3565F51AAE71
E9E3BEA4BB485DF2A75CD2A4335B926A3CFA77EC6765989F03A680DA1A20D708
470FD9A1DB35B2C937E5FD9AA6266283CD76E05138D55F0932678F1088EF5E7D
EFA66BBBECD836DE750970D76D32957258C0B88132232100F446B1885E4E29EA
B8959844D652017B77C98E7ED6D7FC65E1A01EB35DC733347DA3B63F9ACE67A6
975D81865DC92F610E531602C57AF9FCAB91E2EB7A5A39DD2EF594A1E2E5570B
896D14CC26EB1A42F74F76F2231DD03A6824AA2D1005943DDAF2910597A36559
E4BD2F9380A95F7FE63996A81EBBD94329601C7B1DC913319E879728A46CC916
CCC5A010A86E5C572AB48BC20494C889CCAA475A1782731922CAB36A7EE9AFD9
7CEA3215DD9F8FC10F8D4C3F94311A56C45FFD85FB0A91F315F33490242094D2
1996C1071EAEBA4792B29201666254BF49CB393ED233BC236B6BD7617A918696
D74A776613FB94DBD590A7893CA7FE1606C576DEB3E4D7DF25A7A5FE84A8DFD0
9BF199780DBAA1832D07BFBACCB7B8E9DDA897665613728537094E1E8933F961
EBB5ED1BFA4EE2856B8982377719ECF1D7B187015A90CA694AE0ECB4E32BB9E6
AB395207397C971034AD10D252B419D2C1D8841ED02492B3F2A9D73EFF9C12AE
9F92D8858A5ACAB071F8E0ADBE0794A62FB244F098A3940C82C391F0326B9F50
39B18EBFD2C105167F452AF2841C1AA728F941530ECE5D9C861EC8569D27AEC9
D0C19F35A3BDA17F09D2293012310B114FF0BD4D1B99A685BA61CD6E4D63D45B
C47199D41B4DE8F7C00C0F17D72EF41B22A92D559DF471E29954893E6FFE85B2
98AC23152C26ED5EDD43DAC6F23F9D3D0E28D770CA6093A1AEB5365720153023
8DBF05303D4B957B2DA2159F8EC25CB9E26D04C079FFEFD11379918708B95247
E9E48D274C2C4566841020BB7935F900E86709518E7A133B75F878084B0AA054
D2A472488B698A5701C5C909102CBA7CD5812333B254F9648A0F4C33016DAE9F
BC9D19EC7A14960514496FDE776F1A4C73BAC8A050A858127B9B71DCCAEE03E0
BB66A003687A85186CA83B34625B87D53E08A6417BFDDA19AAF3806BDC0272BD
188187ED61E72D8DEC992FA4596F4201DF5D1B5462A22CA111C970E138EF3F13
A7B70573C4356BBF79D344223C3C5FFCC2BFFEA3E1E78D794FD29324B3239D9C
6B11B2EF293012F8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CE18407902FB88F631
211565C71652273016BF4C18DFF5C743B943338D442F565DFD196AC27327B183
14D5538860737A5DB4843C64ABDC3BD49E68B195128828C51F1913FF91F62FBA
C772DA4DE386DB5A11549F6616E7FCB421EA0C92CA95CCD6881B87CB00A1CE8C
185EDAEBFC8230B40849C226DD0945788D629725B2D8E2FCC3C2AA988A19EDF8
61A810A30D5E955120D1DC439452087809EBF90CD0A898E021176A17492BEBF8
6CEE0F3B5CF7D0350614D6374437B98ED18F4406403BD9CB1131871041085662
FC5B8637D04DC7898E0A07358DABE69F2695DDD4640171613751BE9589962C8A
DF9CA070FF3ED036D5858CFC3D7E5E8322E2F1C8DE42D0C406A82C58695C7023
AEB48CDF738452160AA971A184762307884506FC6FFAE3BF71A5FD3006447E34
45C57558D185419AD0AE840DAAD5B85A2222D7EABC13B761833D1484A7F45ACA
84764A0FF31B821B667BFBA23FDD5D7E3C266CFFB3093942A06A4BD479325132
12CEB26127CDFF92E82A77AE7874BA287ED653FBB59A8ACD6A658343F3FD1C97
768AA1D6434E049006FD672209A68B15240E7E4F6A352AE9657DD4531FB4F940
0D289C13916399CE2D719F640DC16581D0355291BD78559AD617852FB83EB064
A1350154C6FDE525DDA12B4084AA4F2BFF4C5F5EE0F40D261948827241F0044C
4BB9DB1748007DF7309A412885B8C5555EED1C3A6F27FBFA72E80897A927D188
47C6B35C477ACF1CC9BD04C4512B1EFC70126BF5B5FB0D4143818BABF7B0E297
ACFAEC267AB15CF3E4EDD509A45170D58EBDC2A98611E95A3839C3EA348CA838
B3A1CA5AA2D18DA69F95049910BF54017FDE0B8736AC99F15017B2ABA6ED0156
26227FAD9C47B0218392F27E1EC9E805681182F9107571977120EC53549A80C8
0381C7005CF2E66A4EE9E73F9BA8C8459393D844E04A0D026205FD26C7D9F6BE
F75FD4FACE6AB896F8A6F0F131C588712A2E1DB7DBBD5826714F15187F8EBF75
7A498448B64148ABC2C68A8E119404433E9E75ED639B05BA781E0A454518CEC7
399BA7607892F94C31BCA4944782B822ABCAC412960C8DF8459F1AFCF2836BF0
15C1F9C793A95A46C4E635426515EF0693646CB9726C53C470A7329477D58B71
2A5BE446EE0C6777AF6CB2A420896C780018E25F5CD152DAFA905C6F98A41231
0BD7D3851B3DA54CC2AB53D6C2A619436287A8DA5FB879E795CF08F22EEE883B
DDC975B8A1D8AC152BC0FE8B26E35BD90393E79917731138A393A1E665ED68ED
A818B81260A3AC4D30EC4F6B8B00479063EDF3422AE12ACF74C3678D6BEE433F
F850FA8EB3ECF9BB2B18D727B4FB3C730FC3D251C31AF853AA3AF3CA21ED4C8E
79078AF81467A75E140AC1C7CA421B81843646B877AF1512D518A5FBB16ADF7A
BA61FC719680018F369F473669F6EB450C303F2518E05CFDF6EBE5ADF45857F3
2391E900B6C14DBD5769EE774B6CAE5930FD5F638B2B71DF17D2E7357992143F
57C77E51E1E4C92CB55A2828CDDD3AD6FC34DEFA73BCA79011F3473C792566E6
44A9E1C59F5B70BD1E8B7AD72AF935B124914F2C339BBBEA5C7BE5C3E0170389
A7F7895650A59D322D9D9658918F8C650DCEED3C3DC4BEFF4667FF9C8A8D560E
1645A2C9FC9E8D136267386D6AED0645754A1D5A3BF822E40E0DC7C268E27B3E
FCB9B97ABB4432AFFCBF37F6A2DE9363FC7DC75BDC91EDC4010ACBCB6F9C5C70
D7B1F73E41AE2CADC00767B180F4AA0999D70524B1A059AA16DBED49577F6789
C3CA5445D5B4F437140F9DA77BDA7A8779A9C3AC9CF388507EB1C5912643F7BA
79E5A7E3BF98BE1CB7DA81FA9C149F6A812016384F65428F6C7FC5DE60602686
1AD5B6F00BC34D2A0E4E8F083C961F2A8A6A6F5886A43625F40446181DAD8C89
58440DFDF7BF885FCBA160DD5E6661BDF8AB0A15399D22FD55A01287AC96E605
EE8604E044677A51F95240809216E74E0E180557748DBD70A5CF9218D360189E
43C9A07450F9C7257D051414541D9B2CE33A99E63EB8AB88785DA350DCCF2228
3A003B19B6C7398EDDB75FBE3D950F5695FAC8A36B34BBA45BB17C47AA093BAB
6490815C418AC75D3DA2E5BA9CE76759E1ED9A8DF543E067CEB48BDFE382A315
B8154AD3267F874D890DCF1B14617CBEE762A04B55247A7240C3FE08A28CA963
85A8F87EF82CC9A1AF0B50ECEC9A6197C411E3E788DE77111EEF0794CD5CBE48
C3E01C206DA45C4A7C841271AA9C8DC4940A7282FDA507C3421D42455F034199
5C38E768123B744A9BE19D79D53D8206E8311C4337234763CC9FC65218ADAB37
C2C9D65CF49EE9659C586A00DF4F6A10F0B2118915B8EFF7714DC13E963598B1
82F1FD2042FCB6FD24B3BB9D8CF3F938AD3B4DD406F83536C50678B9214DDC13
87C45AEF271B2A97063193592F2041D6540CF6FD4DCA68502510F8EA68936B1D
829EA0331051D0767E8E1826719F94239698529A4F261AD82C47DF3454CB1193
C35805453F84CC6C0C0151D97D921D860DEA566A9BB4585865A00F835168BF1D
DF7D546A31E82EE9514BF5617F74DD21E068D5569F4E0C77D1DD2C4155898A4E
D81EEFC78E055F06F1E7DE01E3D5CDC86F00F71A26E7169C246BA032B327CD2D
820F5F974E4749A8721E72DC54880B95EA17918E915D6C30DEB1309E9FE73843
BEBD4F787A6ECD2F9553C7593DE76A88A5AE375E3A2E16B1B19F848987CD768C
D3418D71D10A49BBE538547CA46BD1522FC46F9050A0D9B5BC3E26BF8563FF81
AEDB596000C2C6E28328C263339FA5F221FF4D5355B203EB357DF3C02C15E5BB
C541001F20131D96CD82C3E3BCA81595DF751FF99B8E8FA2C1225FF0F86650EA
95F53C343423055F70A655826726B4310F1A9B57C635D4153A030B004C016877
5DF3969F972F46406BE850355395BE8C9E67D05506A967E4E09FC8298B404CB0
C9CC13239431007A1742F4742605A139024227BF8AD0D2D8C6A8AC57631F0F54
F1C74FBD3B78D969052AB2086E9359E2597013C575102B0E8E0E105D60D7228F
1407E4EF2FCCDAABE4A64D472667AACB6CD5BBDF8FE91ECB58A0E1474FB08C08
665B7519621A9BC5BBCEC3C0F4938658CC190AE494136F7E638FA4191503230C
76A45ACEB55E5B1B11C5AEB9951C726032A1B113366DE294E3DF449974F4BF9D
918F3BD37EA60AA0259DEEC062F8FE2D9A8CF214DCB7323674E061FD5156010A
60B0B1F922E0DCFDEF73B520D4CF563027D600197D753D8C57048ED47325A213
6551DE2AA7103D99CDBE8EFD1F8CF8D650060CC2A0A717F915EC22BCF2B7EA56
7CE891C08DC8AFA8FD6E9EFC799DDB539F585306676358648F764407E5766413
CC9D289E5242EB780071D6B4B90426920BCE9B26A213AD5635DC4592EC1BFBF4
AF3536BB9572ADEF2476D0BC4F00404F0122621D9582E5F653AD3FD76A427771
643356439CF4161D0B1F74B14661759C67581655F226FB9112965DEEC3A2041B
4AE3452CEB3D20795F8CA81A98FB389FE60F257B6B512954A72DE56EDCD31E89
12D75E529EA4A325E4348CF296757490D6C88AAD6DA7B174918798D1F2000B1B
271A011727FA8AE384E2E27B58A0F54447AD4745F07DA89B3E9622B911491BA1
3544BF0EFD898FD0CCC63D4093BEA8A379732957AC35E2C39711CFF2A97D10B5
8E575B96BBAA8D379093C76944C0A9B636EAA20B094E42D3CBC4B205C2E424AC
7B2AC702BB1AFA48CCE76467E3A1F8E7641E5BC06A27C3FCEBF219576A29BBB2
BB2F0FB1814F28DE13B970A09FB96F3D5E37F6AA0A18E74DC17A0CDDEFE0028D
61B0A04003FF6A5EC6AA4CC82EFC02E2FDEAD12F122AA60002E94D9D1A8D59DE
97F8A02C29744C713DCE48B8D65DFF7EE65D53ADB1DD728C30368CFD3ADE4405
CF148649C3D7B94BDCA9B0C35BE0AF4CA8A7F436E6F8539622FE508BAFC791B2
E65148C71E27774625178026AF2C0F1D1CEBE01D7F81D6219B3A9D82BE7F1CB8
8699EE9F59A1302E8F79920AFD46F3601349E899C619ECF2AC449EBCAF62677E
870BB9976CC8974667BDDFC9A5E859F9E542A99E1E9E99F94B35937A2475A1E5
23C105700EDCD34370F71FA9F299C80FDAF6B7DEFD91365042AD4B07B3017FBD
196B5B885308D3931A8B8B042BC283D894B657908A23F53C409C626D6B75C293
6BABCED1E6D060743F7460BA7D25DD0C40EFD274E1FDC4A441CDD34E7093DE57
1D13D190FAC5D242C28114BBEB9A7166188DDB17CA7B902309CAED8C68D2C4C8
FCDC904F97DFF640078B632B8B4797AFF64E50BB22E43535B103D73176C8D3EC
B6BFDFFBCE3A177642D8B85EBB1DB680E6E6301B687B723EB4237A90FEC00439
A7362D8D251390472D3D09D9DB48E9EB82A31CE05D5E165D19889DCDA2981180
D66B2A462E1F6304DD7C66CE64E3EAF3F47E9AE64191746611E1284172AD252D
3308C0197A5AF0F5627D43475625FA0596E05E3151C0737C423361DB97244572
3D58924C5A3BA3C7A2DC65F431B5E2B656606F84B5DA7787143C64A237C39924
D3C9624699D75FD336E5B30DA7FD9BEE30471CC301A3003871F527B4FD812299
8477512AC142EAC57D23714CE9C02A06EBFAD646EC17D0C3EB13A7D63AB7D277
67696A71E433EFE4192FD1008584FDD0245B717F5FFF1FE0ACA4AD13E84E1169
029F7378378A6CCFD0CAF26937B4FA08283F4864FC0BE0665C8A634928451F72
B84A25627D7D708F42C2A61B2DD6D4DCE662408F595244D8C8B71AFFFA9D1EE4
8363146BDF31F4F535263A3000E71AF0C8A5779169F0062C9AC8F73EE7EAB4AA
9E18C093BDD71560CA09E39E2E56F9576A0FD6BAA848D79FA178B8A1F7E68C35
8488D82D9ABFF3F92334805BA4D923A9B06E994BD868004673BD9DF9E1D30D2E
E7B7CC0AE6DFAFB2D3F8F647BA790EBD38830AD886A12EF6332160E010858346
393B36C085CDA4B325977C174DA23703CBF65E4BF33D7E22A0CFBAA02E254F52
A26FE47FD6F16668DAEAC6BC10852A01FBD17404C39FAC60884653A8E6819D47
B2E5610C097B01D854E8841836A435A1E6464D99B410E8E141E3F13B7D981E9E
7FFBBC0D8DE43DA42331435EF591485AD0E8AF8F9056AC947F72E5CF6497DB7A
9493842B3DAB3D8B167D2575CF26BDCE8BDA33BDA522A45496C8577D92DECE94
F3EA1B4F0CD1F449BE3BE5206FCFD1970E06F023949A131AF018B6309FF23B61
92B46385777E256A4EA0AD526DA0CC691A06F75F5B878A85D2F47E4D624573A6
3584BDB1E296511999BCAC32A060A0EA17CA0E8100C10C829462604E09E6CBAD
0A2DE650DE604375D3D9AB1071D31F7D8FF55E0C60DA01E9FB8C5E844F53F8CF
FB51BB55A87A58A52CDBF167E24E5BFFD8239D0EB348888A053067C95C7224D2
CD641D8013E878EE3C5CF6B52F0F1124DC2DBD8740A86907AD07643CB2C30CDB
0792CF315BA9FE49DC97291DB2080E74AAE427CDE0641D676CD122C6B18EE7AE
855F307481359D639B070C50CAB47B1D58D10842C57EEA1481BB42DF9F34F703
E622B866527EDA6D466F5248572282F244A014AA63290F10C989E083D0EECF0F
20ABCC0D24CC8C08D5D985DDAE015BB427541DC674DE9C5425B0C3490B7A1530
C9B489865DBEAD471D93B6428C5E1888B32E39E39270C3A6F6313C7359B9C3C0
434BE971D9EC817B6226568D05ECC4FE6419EFD8A9FF300ACDD78D71CA2116EC
CD472791C5C90C93CC4EF46A2A4BAC73AD0E4D757CECF554380343B6442BA15E
DA4207BF15B48C4405836A47B823CDE2ACC9E9055C6216D9C9385A2AFE661A4B
D09EEFB355F60DBB95F7112DB70AEF68CD10DCA2685981AFF7C6022BB40B29DE
81E225EA78DEB73398289AC51227BF5E4C0A30466DD6A28B95A62341E91238E4
D2C7F9F5F040989453BB638F51CFE838BB8222997715D2126CFC9DE91A0E5016
1799BE7C118FE2BCAFD3BF587A24A7C3F84571E98D9B780EBAF32D5CD155CA55
B5D1864A17043398D3E011ADCB825458A7B01CC7EEFC5A12CD6DFCBC860A8999
BEF98BD725E67F6FB762D505AEF0D886899BFEBA52AAB0BD89557FB4E93ABC34
011CADB64F2ACB8123A4FF2E5938965D4F6C75CE6193C1CC24E2B4184E2BC435
0D728479CE94608E6B91692C826D4803AB80E1A3A054FA99A6D30EDE8AFB6FCC
DCEDB71AE0A7C9DDC28ED6222486C7F8848E9261D0C5144AFA3909A3D2D98CB5
63E628A466731CE5C6AEC25288F1F2090AB1E40AD29D9A1A8F612DD7405835EE
4250A3D4F757FE7DF45F18D524D16EBEE9BD9E51EAEF9D41723C2FD96A239A93
8BAB840852C698E2BF612A20E833C4964E71F9D9A46CE2A860554862955F47AA
634D70CDBF7D3D9E9D6B6704310B269843FBB0E7DA889DF544A4F9A2E41B30D7
4504ACEB87FD5970142E2E1EFDD94D0279823819B05A367C2500FA8F2447B93F
97B7A0800DCC0592D84B4BFFEDD14033E026308E5A8B7A6961C2AF7784A44985
3123998553AF31CFB25E7E04B6BC134147CDBB1AC0992895B88259BE1ED64392
801B1D598AADA64266426ED9FA2915382AD451DE5115610B3F1062AB86E648F9
DC82107B69A181EA02A8EA640CF3C96B7891B832331073236D2EC544B1D696E4
36C236272FD4CDCEC853DD25DE12B9B9C8674E8EA3C05C7A8518E711BA9CAFD3
ACCB5466AE3D1A011F20C678282C0ABF7E8DA3A66A05004D2832145503EA4759
74B1DF0E0975E79DE099EF4FE4D8A9B5726E2E75BB147C7E2FC1F45574FBE868
9B6417E4F1802BEC1A10D5B0ED5550C487F00545A2E2033BDAD8277B6E5EF52B
FD11540152E276781B0672E375426F01927E3AE0A49CB39BB44588DB904E0E31
46AE3A1595A412FA2A2BF1FA7FBE4C19887EB524D6E66E8181FFA0DF57FCA248
FA628E02FD3649D4356058C62F345629C4018E184289A60A2F6F6C48EB9546AB
8070B402A4427A7F2480AFDB5CC3CB53E864F8AD426A074C0253D5E7B2CBEFBB
721B69FE1661DC2FF6C22C7772A741F55838F386041726E8A4B4077A6D754754
E4B4255DA3F41570FB753C5356214C5FF70CEAF8C1A20594D03E7CC01804FEFD
38D9371110839B5F607F497DD2454A8A817F495F5D224CC19B6D4174B3603248
B51635476EDDFB262C43D4922FD7C6B229E1BEAD32D6B9D9788771EE4B15FDA2
EEA081C55FC622D7F39443597595C08686CEEBF8E6B6441573C48C76FC333A43
75D54B7B58F310C1CD425EE578CF043494EC4D35AFFF4D2F00989475526C1697
095A29358F200C2DA771CB2EAB93E3BEFEB047C819CF1D224F56CDE3255CA129
2F5C0DE748A7CECEB331FA03DA5E4EB9B36B70689567A914750EF6ADAF020AAE
36B57C6054000BC2B7B71A17AD97AA05E997D2FBC30A1D605662925850B9E55B
BD2A73FDFF58DD7AF9DC31C95940621BAA5BE06E04722FC2BA8A4727E0288868
4CA7E283FD796274BEA7170437725D8462C5383DD40D6E9D3017EDE8A86BE9DC
1CEE0D40A842EFA8949695B5ACC7079B9F15602A948998A20860EA826CD1CF38
8833B8D019CEFCFA030DD9A517AEAD9033E934E160C2EE64A97378970CF4AB24
680FD124FD6359EBFA90EBDB971264162BCA49A4ABA9353747C30D3C24E7B842
98E6ECD55BCDC94F44959172E530031E84A8837308D53D918B894242F3C7F856
D2D7CFE015E1FB85E9C66274111B4D7DB4410ACB46EBEAB285495E42E3DFF461
F4F35CD896C1AD91DB645B96A1B0927390CF0768E577C0F97115306585F1023D
A3AB5D6C2F290BCC7C63376147AE8F8DE78324CF2DB91A18B5552DFE88863158
7893ADB1D7A9CB62EA339747626F9389D8C0021E2B8A9D5E427D65FCFC607BFC
8E95BDC869ACE86A800AAC2837DE22C40AD2D349F09B8EF0F4A8EA38CDB3561F
5E295F0825B179DC0489BDA07F324DC3BC22D37D59927A6DABB0206ECAD4A6B7
8BBA9E9AF67FC19FC108DAA37B7C7F52E46653C27E02CB2295CF26A7FDC9F9D1
1AAE93EDBFE2078410C0469ECE024E139783E7199C6CEBE9C4E75ACC3FC43BB5
05773DE8992EB2C3CF94A25433C569F0DD79C632DA11EB91CD5CB09CC92F24FD
32F162DAAAD9845FC534BA9FF3DC9D296D17F61DADB65B0B9E2065FD723CD6A5
95A2ED60738B460CC66BC84F566E8880D429B87091C0A28EF655020E2964ADB0
1FDF0F5CC4E09C54CC39A51A4573B61FCE011C680149DBFCAA876A7807CD1068
595BED9562A8AF0E990EAF4427FB34DF5A083FF3F6BD3BB0B38D474201460ECD
90FF4404A9EFACE77AA88A60B5C738BDAE00B79E89E6FC29D8933084FFA54E38
863295982744F4DD8EF62D9D5DC38808712021845A584BFAC2039433805C0DA1
E12484496500F7B1C075B1ADB52BE934CCCE227240F238D105FAAB26428CB0A6
11D907C940DDE716237E7D44FE7A8AFB77D2B54023EDD9BB94D5AED30A343104
88963B647A821ECF67D14E7F17EA5293247DB0EFD7461A00D55508E00BB7B5BA
21983B9932014CCD28A34EDEE52AEE7617454C94DAD961CC60A9DF86E3B811AB
38FF75816A9553CC1CF5DD26D5D0CEB7F54E8E4D20D681702745D8187ACF825E
3DE32D75ADC258892B2E6511C1A179E2C332994BF9AB7453F46D57B576A3AB56
7563D090FA95B17843EA94A5EEDAC270263550BA05C6A3F1C26410D97FD5A71A
F8D3FA86A669F671B2378622A7A5D1997ADA354BA4AF5BD3E69FBCCC592426C8
A6526EA1433A8FB8AE9EE009B34B0B08C970F3A9206A85A4ADBEBD8A71FA190A
F6DA355F4FDFE8B42AF159D3299B3D43F152E92CA3F4B4C093854AC741876562
94A1B17BFE385DF747C7F79562F84A3EC2B657471A897577E51844BE1B096734
27DB7E7060BE14444249EC5296AAA769372DC80F5222A3896D7EBA5B4485B972
F6D3F8AF2B477CB210F7FF36F78CB3115BF357C52F9EF2A0589CB8815BB0A181
974DB374A007BC5F37C37F75021EB334EF140D81B75E37F4E780D4ADD26C16B0
840F04A86FCD61E3C4718679AE57566D02F0EFEC1B8CF730B45FC5BE9AC87E9A
4AF7ED611A877A34E46AC79BB5488717E771B0ED64E38981EAB54AD16A05AFEB
06E4A4AAE9DF2393FC5EFA54450CB89E736FAF9FB14B1A16D4D3E314C97292B5
8FB9D84E984110C5AF9C77C744CB7FBA8A376C204814A60CE4E2B0E7CFB08DD8
B42CB44FDFB82A0E282C2B0E813070F9402688366F92ADDAB692D0B3D158AB6F
1A0B568C08ED581918E350805193E2D5B01C089E61AFD505862697C872A164BE
45920F2CFA9E324FD1B16EE901CCF40FCB0D3A837FA721C99559A9F1B9463386
118A1013A2AB8EE4213CF44465E1A370D26D0D0848FAD3A3F0803E9783C7722E
8FA82F47A3821300F9CD17FA8753FF016D8B82AC8CE880C7374D1BAF3D218768
5FC2B67BCEB616906A54CA9A7F73554CEF1A41ED57E3232472FC7A9FC4D40A30
8E863E7211F611A0033887655BB9FB31BD28018ABA72A339498DCCE33C388422
23DE23A6509EC4EFA5119E6C615D1379FF66F5B2EFD0B1DBF54748019A562F08
5A02C16D797C642E0CDC61A0168FF2F4BB3644988961F70E12A69A6B690D2B5A
20BEBCD68BBE09B7ADFBE854E4B7F3A8398D3BCD2ADD8103447074E982410DE6
CDC2174D0EDA64278A06364A17AB56B4BDBB714B9962EF576154CEAB53B4A36F
34A344F45DE930D8D373D9CA5774FB9CBC6A21C112FE8D67C5BFC6C3D6F15230
A816F058802B6439331382706385043FB9749393FE8A21B7ACE6313F30CE2B5F
9B696091DB616CEAFB0CBBADC8565EF39070C5286810AB6F20CFA50E1094A0F2
0E2676CAC4679E950B6F718348A9E340A6985189CD803DA3064F41976365FBE8
39BD6D8FD19973D0DB3F6393AC8E494D5E94B9DA4232E01993B46751E59AF17B
7D23D3BEF21FAB3A449E4ADE28E4B9EE99124804D00D5017219264C61CF419CA
94E749908F948BADAE2FE14B10D9CD26A7FE7D638B109A95E240E4DD36054960
3C0727A5FEB222FE084020D074858D2BB30FDF7FC059FDF17FC87E9CE14E96C3
09699B0FC324465ED7148FCF17745B40ED1B52557AE1E29D254B33458BAF3D8A
DDD534B8A702E96ECDFD8508705EBF4137D8780ADF1FDA73ED52156C0724B7EC
BCC9EB81EE4D446CE8066FE99E0E44804AB9925AE0B79688C1422ABE8FAD1E13
8BE2ABE38DCCAF86FF0DB709F9B45806F2EF7744251F471CC133B66CB458B9B4
852E08EE7C8370B7AE605C5F8DD583BC1FAE3061F98204955165076E6C2936C6
52DB45DD430558CBEFB9CF25DA35A6259AE5BF8A52415423A96FA92D105F0E30
BBE4184493FC6CD54BDC6C3BBC5DC54BC6A7316F8D69CD72DE87B10D706BF59C
4D125D551896F2BFD9CD88442CC8AF34B1D3458F56F4199E3471D1CE0E318759
C29F591DE58DD4705FF1F1528420A630ACE9DF4AE01F52ED00BB222A8596B542
EBC70CC4106C988059E4CE3F722FF43027FB5FDF9011A2422A9550A2EA7E2E42
81BBF5278C5B4211D58D2704693E94424190C5323C8BC3BBDCA90CBC58D066B2
B26751E59AF17B7D23D3BEF21FAB3A449E4ADE299A4AC70C95345FAEAD84CC8B
C29732150BAE5EAA9E2D675D18ECFC53908F9CA20059C41460DE38CEF68AB264
3F3D420B4B56C7F7F538EC7AF33A6AC894A2762C123385DF7E6A9A94D4F2153F
DE036190BFABAE4AF3125764162C8A789B7BBF4B5584266246DCB2C73D4F032B
B51D685882E8D8E999CFECAB8CBA20ED014A091DC95007052DF8B88AF60099BE
78AABBE533EE00260B500D17573A485B7970AEA4E44DD23AD57133BE72415173
7C32B16F03E6F827E3991325D0F2EA041A21B868DBD7935856249CEEA8935204
82426C2B5375B4D3CDCE4E59C978B344C0F9453189A0297277A8D3F0DA2569AB
7927B711D878249D51ACDE8E575A123239565D138946CFC07EE5417F70C64974
95A2DBC1CF0A0535B136ADAA6BC05B25038A8E05744949BB17CC95F4D345549F
8918419C4F7E11EB83B89020A6C940AE0CFEDF0CDBFF75DB4FAE092C72C2E592
D84EEC1B3F4AAD95EE301792A7EF4CD300AE72F942037D1D3C73849560A3E865
BBEDEF8E29ED1E2CB6E07CF57E2D4929771EE6E76FF2E2B77FE23F05AEBF08F3
6416BD7CC5D1DF71C76E7DB38668B0DECF7FF8B7A23703A7F43501E5CA56B1D1
73D4312870D5C647DA1051E1EDC49BC601E1FCE39813ACFD30376F7E896382EA
29DCEEDB908D61DC7426065E00B7E8711A7D9D94FBA3479316166BDA4DC1E9C3
222A298E07DB2D994E00837B210A909770145954AE5BD767561C6B75840B1007
DBADD19DE618859C957D0B8DD011BD67682CA8BA5FFFE5E456ED53A1D6A3444D
7650E4722C614E44BB43FB3AE46B8C3F9BC4CEF9E5B5D46401599B8AA266AC3E
C9DFF62F8D188F20809A8B3EFB41EA1AD07B613542F58DBC930CD472F226EA17
CDAAAB0B813658B4C250F283D70B709E1CB009EE7BAA4B452465453B29988CF1
28FCAC2FCC33FE87162EC675C377AC736200D8F97BB70311CD967D167E9BFC7B
3D22F5F063F6B667F721032ABDC4BAF4825F0DB198445968399A2E47DBF22850
CDAC6A72D8E86DFA91D6B7CF11D10F698A4FC0182765B788727CCA33D367927E
16F3C2234E94D921DD31EF664BD7B3779297D99028BD77F81D9B1A5558A3B67B
5F96B46EEFF9BC957363FD200AC245D6FDEBD5EA245132ABC8FE187D12E7BADE
4F01C7C1DDA1D8B75EB87C838592437246E9D34F34D5D60345673812EE0134ED
E555D84B37C556CFF5FD6C35D48DF649CF88E84A94BB83AB31CB4CDCE115E7E1
E555A5A41F548885379D98E7E5C19A07D9B233DEA7E93EE59D6AE48B7F760777
A4A80796D144BC2AA2A2C038FAF6D5A55A92ED85296D0BBAA32FBBE8BDB0CDFD
AC8B6EDAF8F5A75C8FF95AEEC91A3D36F20FF620448B79D88A0A94D2B63CC0A2
F1C2DE8312475E6D8C7941A04BC3D87FAD0798BF22A5E586589FE98A78F95DEC
58EA90EB13B8823FE12094ACADE360FA73ABB05BD003C66B672C3C04B92E05A6
64B43D21BA719C14D80A9B8CB97AC70BB3393C366947F4CA1486B5147254A6EB
34A0034038946AB65F15AC466AB5ED5E4E059D5534DBBDA5157CBAA95CAB5734
890BF5FF1823F3A9A80F2D722E83609866F773B5B036F912E4CDA0589E382F6E
0E21A5CF49F46BB118497BD332F182D0194F164BDD47FC0CCF5B866FDF28CBC2
5E6B97946200F3DF8CFE5A8C25AA6BA328A79A58F525FE2B51C62CD634FCD3A0
34E3207234A20F58497FE07809D4121FE4C196BD7FE214D29432F24DBB1C4ADA
5EDC5FE8AEE113081591BB471640E8A58BFC4EFB52A55B826D67520A9BB85AEB
CADDBF3B8473B48A2C24A8A3FB01DBCF14D4CA6D2931A309E28EC8D4AE349294
38757021B319D0FE0069F7A34493D64D953886904611C1FC5AB7FD0E501BD869
2A080EA82C9C14D95371DE9A1C4D7638F4CE6A8EC279E6FF817B78063B7A07C0
F3F592BB136F41C338062D4EA75BF6E6C21D4583439A8F49219B38AA9C8A4EDB
0707BFBDBE874439F2A2EA83F7D4FED901A54EEFD743C4DE4BCAAAA8CC54E329
EB9C55EF91232CEC476BB5CDECBB6C85CCFAA022043D88E46A83739C02569676
0D674B74ED79DB0BADB4C7CF0424F68755C59C8D91A930F82E2D70948CAC83C6
F867A0A6B34E920B6E5FA2DF004E944780F3B0128C3C1FF4DE535DDF29BF975D
AD21B06B9FE47A9E7F2F16B4E260E90E13B227C6B99A008B84C5BC6871254E67
76C9768BEB69D9DE52F4798AD51B2BE7F44B2534C966DC506AD185FA9A0CE929
8D63113537303806F08DCA9BD788DB35D6417F0A931B712921BD77373003F044
0DA48209054F926A489117E931838292E9DF086033A574BE96C205E67C54B6E8
BB68417560DEA2D9E60D3BBDB1E05B117DD8208AF73D57493F4767FF7B9228E0
05E5D81CC0A906DF5D978031774CFE864810C28D494F729F4F187266A6490287
3D3F4E5C6041C2BBB50DF572E9F24891EC1BDD43786B3B53A98B9BC8FE29BA39
8A6924C171B4DAC5A57E96BA8C897542B85FF4AE93CDA33A3E4A7594B0FBD2CC
34AC749280662712FB4EC81244C5007444272151E7C5A5BCB385B6F1EADD541F
A4B2DD75355786DFF5451F21257DB2F07633EFFF5FCA5666DC4F1280B328735C
C2F5AD630794C204430F3B037D587747B4D1125C387F130A94C863CDAE427617
A7BAF16A6FBE1B2802AAE74150A7CE380E42FD3207FF10023831FF35BA86B390
4FF0F24C24C29CFFE2D6A0F5289228D67934F4C5B0DEA29E4E2BA03FCCF2027B
1EB4C16F9CE2D6E5D3E18FB32681443CFCBD8A42DBC440553265D0128AD6D83C
B0E58EB8974B55401B762DC133C2747E9245E63A8BE8AD13B1C37A0A30B594D0
1B520519AACDD4F91A050C6DD335C337BEB1B9B9152C6B2110CE36C464A585D1
CA24B0DEF3604DABACEC75F8111599828D4FCE4D0F408BB88B7AF52519FF98A0
5E257069C715C5FC901B135AFFE9B8B5DDFF8B53748613765368852D40E80C53
0C4E0FF5E7F721E08E5CEAB146D28D98018FBFCA44A12393C11CBE0ABC9231DE
A6B7AE8C72997642FECFA721A4CFA0BB63DBA75BB841AC18BC75009B8D761B55
72F8D20F015B54CF66D59C3587BF50528516659F5E52C1B60EAAF9ECE4890467
B45007E9FBC26CB51DFBF46207026C5F8181BB6B0BDFB9A1109E65A77B4839F9
D75DAED942A0558F20BB3886CEBBDDB4324B8D5AAEAE9E273A24664C1DBB24AD
108601CAF1ACC2CBD3C58D8039C3FE11A0915BB096856D5DE1FFACA4C806EF85
753B508C1BC6BF0CFA184906D48E50687608807B9C38BF43F5546578500118AD
C0DF36EFFA54F1CD48141A8102E05B3E90E81F50DF6277B14EC530E85E88B4D9
5A9A79774CF93B24F31446F0E8276368876ACE64169B233167B888BBA6EF8450
2657E23E78A455296F700E3A5D9215875BF7C0DC18BB30342A5AD7AEAF3BC59B
1F9B5733635829103D2AD3B88EEC8DB62382D9601616FDFB94AB150CA4FF9080
4259576B7128FC3AB9D7A4C8A8F459FB857A2172B64F5CDF8F08C1F70801E15E
7DE7D6302ABF0FA9B0F4D73D0F21976561CFC041CDDC2CD9B1837C6B7B9ED8AF
849A0534EFB3F1600B836D7F8174DCE3D97DB95C4CA0BDCA0FD403C97C0C3D95
523F3AAC9253A961C705AA74D22956AD5B0E52591FD1EE45AB167CF274F33181
47CD2DB491EA0963AE2F369D94B90E7A1DD6DCD4D118085E00F533AD1760CE92
2584EAF6F2295E86899A20AF5113923A4A7CFA3B53B9AF9179D6BD8717AF13BB
E08CF0A05B1737F1D030287F1F18F781A391ECC2394F0C7B1A117565FAA4B309
0A2C955DFBB608754EB06DB180D68A78DAC17A10365EA683CC0F2B88D5B50D9D
6E552934AE3C61E9A0472E57985B73256ECB277E8247CE7EECDD73E853A5B015
0092FF95286683E16B46E68CE30E3F0AEC290DF9679996ED2C4AE0F25CA1604F
B906A97F999B0B92BA3EDCC5444A2270B87EC0D861841DCF6783A5AB44A548ED
2861F9BC34A010AA48ED0E542834817EC0DA21B9494026BE643AF1FC446522FA
05387F500C2B5629630C755EBD21AA05F1C82C9D6991C815F42793AE71253D7A
6316DAFBC9FD878B0519FA838B4F3BD178C062DDCBD68A6585C9F471E54FF381
0DFF5B66664A339A44C2CD7EFE33C1C870557BFB97BC92396593E2C59502678A
9BF7B91B6F6E447F8E3A0A59EEBBB37EDF7994D21E25BE128BB1E0542683ACE4
C04A7B89CCEB3C8CFA64346ACF3FE55CDC53E01D41921A3E97784FEE0878836A
0ABA81A71CC5BA26AF0424A02F586E753976953B79D264E8C85A4BF28346D678
0A5B44308ED3A0AEBB6CE0A47087D5C26C6A586BD1B57ACAA7D46BBC764AEF97
15570EA7E33EFA7FAC1128794E9533F66B6671C07FAE291283E74AAFB58CAD30
A8F32B264905548ACB8368B3316F70E708A523F02A5DA9B34DC84F98F085D019
5C58FBB3A01C0AA2716CF9216CA147B2BF6DA946DEB09B31A789D53F76AC4D1B
B50A9FC851105250C277AAE3406FF858A2B522A048619781E29D13E9ED0C30CB
ADF810E737361C5E901EA21772E2DF619CF558A47620A5A6D5AC7342726E04F3
58DF293DA760D45FEA8D07E11515E1AC5CCEA67A626BD8742883456CBC5598AC
BB67F20EC4ED69EED4D2B527863FC05DC3A20027B2A694A96B39963BD7E827AE
2A512E7C8B971F18C49BEF9C5789CBFA440387FA29916A2C3687647C75B4645E
F6A7A4D464AA0D302F67908FE282C39ABD8229E2865B6A52941AC7BFAFDA9162
53B9DC2B97C962C59BCE3CD3EE3CE731727681D1076CB21036CF1CEE173C1A13
B848552EEB565347A4AC01A9BB95F4771B7D85FA0473F7757E1F78224E823438
E9A6ACE4AAF98178B0D4F242A62F92E0BC80CBD730F49C298361B8C23D2E2736
F10908D80F3ED0D7AB87799A33FB56583DDB5DA7F417A4BFD6F13EA4BCC1D9FE
4C9C1E544EA077D51A8A81E4696384F04A2E3B0FA81CDFCDE7C9706F30BE8502
FA8D1CE6D8FFC7D173DE5A7A99A51D9D186ADB5957F9CCFE896997912201C1A9
54ED4140B8AFACD624D49FE2617119BBA21DF7E5272BAAB1AAE50261BF9349F2
40018D8E8845BF2E6D2D14502751D9E6BEEB64021C847CA049F94ECCAFE29A53
7B3AB7358301ECA331516A8901665273BFB1746C7834D1915C19C3CDF3405434
854812FDC5EBD07A1D1FAA76D97E43FB8A89877CFC1DB0AE27325E9425DE4C9C
3E637429085F5E8CEF69DA8B6C20A68FEBF844E2CBFEE77496A5161A19C09533
61066A658661B0BC1776D25B6212EA4B8A96B28CBE9467EE61A711B48C55EAB3
0B15688A3B1FDDB6ED37B3231C976E9321851609D3212092B3D1F5F056D44A04
4F7FA7F7B667638CFB7302DE5BEE4F08619A7326E288EB0AE3BE572B3C0AC257
4FBB75E1F5E908FFF12B7AB648230ED734384A2F00E8841AE0D777A2748B8336
39CEECB9211BE5F59A0CADD73F4248F0145B30D4C95503C0DC0DC4CBE8AA2144
389204402985B2CA3F4D1D6CBBD05484F65853BEAE82954C7D9D1D81BBEA1CA0
0C893B42E3B413978CB7453F97C21F124548911306B6B4FECE463650420503E3
60AE9B7E099E9A124605C2751473E5B266ADB8BDFA49FC6A9C6DF2DBA1A728DF
D8D0F979CE7C2217C02CF50CA8DD7E9D5ACFEC6A0206CD4C448EFBC1FFBEC1DA
002FB63AC2A6AAC1E4DD0C1FB41EC8D37EE273D96EAF409F7A91CB1F38DFBFF2
E13BB5D637EFA2CCB71FE9E1E52C31595367FDBFCA3D8231508EABD7549D6365
C71C8977F6C223D07C679AB4FC8A929FF0A3ADD305D564647D9D5D1E24AB8E52
2F5D4F499FEEA4A99580077AE22270A087E55427C60F5152BC71EE5363119C72
1F03D4245B717F474FC4DC9D3D05DEED949B6EA6FBF0CF5390BED8A9E8357638
56FCDF6AE154B5089501BCA310A4F724DFACE554B9F14A5042C46EEBEAB6FD0F
CE1943D69A285BD009B671162EBDE63102FDEE30A2698A880E3A8C7732B0EBB9
6A9473332903ABC021B15981DCCCFCBBA7870CC88BC3B8E6AF1C0AD607C5289B
99EDCF3967B3115B56F771DC9ACDE84150A861268657991DEB628555CF8502B4
3F6DFDABE579E237DF01A203FFE8B4B949910BA947336AA861AFB42B0A2E3B99
20F548E8994B1FF27605914FAAC273D23B276CC6AE8E07A891EE383DB86BA6C6
5EE140F18FEA46C15C78265301101E585EA802225FE2F833A9BAAF56A7665273
2C702C4FC9E77CECBF9BDA2476BE9B5A9CA91DE01EC53BB98D81C97A59EC4E3E
234A3389C3A9230A0A50FEC2142AA4E8CF52B63315044E95E9597D1257DF980F
41F453E1AA0B5BAA66D01A0C28FB51CF2B3AFFFA400FDE097541F4A3878C25C2
9115529EAD45A4FD3BB6F0CE942F2384FDF5DDB97D73CEA1FA924115FA73506B
7AF0FE3F20AFA19B0937CF7113D8F77C73453D32BBCA62EA465358451D667803
9877D0CA715FBC7799AB85C713DFE68A3B63486A4E0BE39EABEED93FEC68D829
4C739F30EB326969FEAA46BFFB2446CCD45B69EA2DAB33BBE357D83AB0BC6AD9
0BC9581495865B4A3A6C064C97D23606D3F9B34F50CF8DC37ACAB8E9772AF884
C1A129342247DC31AC87C810901CA45CD28A0C3FAF5BE1DE51E86495DC06AF82
27F3BD17C28BAA2EE5DFE98B9DDC332362EC61DC4E0BCD629E2EA732615434C7
09B88CDD7636B1991404F6A0602D309FBA73855D0702CFB518EB60F1036677F1
F613C459AD9ED2546FEB13F057C62E8F3C89D97627BB0662A1294FE12EAF0A97
9FAC750FBCA0B6504AA478576ACE9D47283445AB368CE2B72D678D81C62FFC40
98F64AEE33414CB91A183CE1C4B6B5DF3D9895E8B48703B9D925A12E825775DA
16248466E79446C1FB4BFC2E5AF04CE9D9775EFB48866C89C894A2A24CABE967
F12F0A35F95D119158A54D6B31CCD76FA3445CF333545B98BA212B3470AD4D64
FC8A1445503CAB11DBF6914D8AA3211D37E927E58361AB464A94BACA1089D12E
86747DC1F245D49F50CF41960DEA507D87E07CFD8621DD0FC200555AD84C7E9A
5BFBF894C6BFD60EA2734B3FD3551EF64F2A31EEA162BE1A1B4048CB93BA70AD
A2BD5A08F11C29C4DC6500D55EC51E01E28C56F5CE82ED630BD85A57EC469009
C9B567AD8C3E93B68985C84DF97524282FA755DAB8E63CEBD6D12EAD9C2B1873
25A1F7E6CB390A27B9E8EDAF374C32F3633B7B9C815F562E9AB17E817DB109EE
C0344EB5B0EFE2356B3420B447C1707A303DB0106D5E734432062BBB7BEDDD72
04CC4E94CF641B2A808C16FE918E49F2A821C3F4D3186B75D8DDDCDFAA312BAB
B05D2DDC4CBE22C8BAF9DFB2F9891EFBD6D6C4D31A8D8EEB3A9F8E07D59017B8
4FDE6CC37E2D0A90C50536B50D7E8A280D71D32BF7565A3CF11990377C1E381E
28926CE4973E788CFD0802B7FA0DDEF57595493BD0E700B8BEEEF156FBC8F0D3
3AB95C5BD4F07170C967AEC388AEC4C3FB7C2F39D93A38A8461612BBEDC7CC9B
F9B1EBFFB55172E3433BD7030A87610C4FFA7F1D1D5CFE933277ECC5196F8258
D90FBD295E66AED198954F4890AB6D2DB48C3F0D32816EF5227A947215E152EB
D7E501520C3E04458883FAC147076537A22FB801CBF0A341B3806C4040487E57
2D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (CorrigesTerminale.dvi)
@start /Fa 130[31 31 31 31 122[{}4 68.7421 /Fourier-Math-Extension
rf /Fb 173[46 82[{}1 68.7421 /Fourier-Math-BlackBoard
rf /Fc 55[49 49 49 36[49 54[19 55[41 50[{}6 68.7422
/Fourier-Math-Symbols rf /Fd 135[35 14[22 42 34 22 4[39
97[{ TeXBase1Encoding ReEncodeFont }6 68.7422 /Utopia-Italic
rf /Ff 22[35 35 7[36 31[44 42[28 28[33 2[42 24 30 27
41 42 40 43 63 19 2[20 1[36 22 35 41 34 41 36 16[41 10[42
9[18 18 4[36 2[36 36 36 1[18 27 18 2[24 24 19 39[{
 TeXBase1Encoding ReEncodeFont }38 68.7422 /Utopia-Regular
rf /Fg 138[32 18 3[33 31 33 8[27 1[27 15[29 83[{
 TeXBase1Encoding ReEncodeFont }8 53.4661 /Utopia-Regular
rf /Fh 135[27 120[{ TeXBase1Encoding ReEncodeFont }1
51.9385 /Utopia-Italic rf /Fj 58[37 35[37 161[{}2 51.9385
/Fourier-Math-Symbols rf /Fk 93[24 24 161[{}2 61.1041
/Fourier-Math-Extension rf /Fl 204[28 28 28 49[{
 TeXBase1Encoding ReEncodeFont }3 51.9385 /Utopia-Regular
rf /Fm 58[44 35[44 111[62 49[{}3 61.1042 /Fourier-Math-Symbols
rf /Fn 135[32 35[37 16[40 67[{ TeXBase1Encoding ReEncodeFont }3
61.1042 /Utopia-Italic rf /Fo 137[31 37 21 27 24 2[35
38 1[17 2[18 3[31 37 30 37 32 16[37 29[32 32 32 2[24
3[21 21 40[{ TeXBase1Encoding ReEncodeFont }21 61.1042
/Utopia-Regular rf /Fq 204[24 24 50[{ TeXBase1Encoding ReEncodeFont }2
45.8281 /Utopia-Regular rf /Fr 135[30 21[32 33 29[38
37 36 65[{ TeXBase1Encoding ReEncodeFont }6 58.049 /Utopia-Italic
rf /Ft 73[34 34 31 31 16[30 30 35[34 34 34 34 122[{}10
76.3801 /Fourier-Math-Extension rf /Fu 221[90 34[{}1
76.3802 /fourier-orns rf /Fv 225[60 30[{}1 83.022 /EURM10
rf /Fw 247[83 6[42 1[{}2 83.022 /LINE10 rf /Fx 57[42
42 26[42 42 5[42 1[42 112[17 48[{}7 58.049 /Fourier-Math-Symbols
rf /Fy 173[51 82[{}1 76.3801 /Fourier-Math-BlackBoard
rf /Fz 199[31 1[31 31 31 31 31 31 31 3[15 2[20 20 40[{
 TeXBase1Encoding ReEncodeFont }11 58.049 /Utopia-Regular
rf /FA 188[57 67[{}1 76.3802 /Fourier-Math-Cal rf /FB
55[55 1[55 55 8[55 3[55 13[55 55 5[55 1[55 48[64 56[0
4[45 78 7[76 76 6[76 33[{}16 76.3802 /Fourier-Math-Symbols
rf /FC 134[36 39 1[39 47 11[24 46 38 24 2[34 43 43 12[46
41 5[70 9[50 48 48 65[{ TeXBase1Encoding ReEncodeFont }17
76.3802 /Utopia-Italic rf /FD 93[54 162[{}1 76.3802
/Fourier-Math-Letters rf /FF 21[39 39 39 38 6[40 73[38
31 26[37 39 37 1[38 46 26 33 30 45 46 44 47 70 21 1[21
22 46 40 24 39 46 38 46 40 3[25 1[25 4[48 2[41 2[46 58
1[72 43 2[27 2[44 1[60 52 1[49 5[20 20 40 40 40 40 40
40 40 40 40 40 1[20 30 20 2[27 27 21 35[47 47 2[{
 TeXBase1Encoding ReEncodeFont }64 76.3802 /Utopia-Regular
rf /FG 22[40 112[40 1[40 48 28 34 34 46 47 45 49 72 24
2[24 1[41 26 40 46 38 1[42 14[52 12[48 1[53 8[21 43 43
43 43 43 43 43 43 43 43 48[{ TeXBase1Encoding ReEncodeFont }34
76.3802 /Utopia-Bold rf /FH 22[57 57 113[57 69 41 49
48 1[68 64 70 104 34 2[35 3[57 67 1[67 60 12[69 16[76
17[62 49[{ TeXBase1Encoding ReEncodeFont }20 109.987
/Utopia-Bold rf /FI 22[47 112[45 4[40 36 2[53 5[27 1[48
1[47 55 45 31[63 67[{ TeXBase1Encoding ReEncodeFont }11
91.6562 /Utopia-Regular rf /FJ 22[68 82[66 32[80 45 58
51 78 80 1[82 122 37 2[38 80 2[68 1[65 1[69 12[82 6[125
77[{ TeXBase1Encoding ReEncodeFont }18 131.985 /Utopia-Regular
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -254 -561 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-246 -246 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246
-246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246 -246
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Compl\351ments sur la d\351rivation)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -246 -246 a -246 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -246
-246 a -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246
a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 0 TeXcolorgray
815 166 a FJ(M)n(ath\351matiques)30 b(\226)g(T)-13 b(er)q(minale)29
b(sp\351cialit\351)1496 577 y FI(C)o(orr)q(ig\351s)18
b(des)j(exer)n(cices)-246 937 y
SDict begin H.S end
 -246 937 a -246 937 a
SDict begin 18 H.A end

-246 937 a -246 937 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -246 937 a FH(T)-10 b(able)22 b(des)h(mati\350r)n
(es)p 0 0 1 TeXcolorrgb -246 1120 a
SDict begin H.S end
 -246 1120 a FG(1)67
b(C)o(ompl\351ments)15 b(sur)h(la)f(d\351r)q(iv)o(ation)967
1120 y
SDict begin 12 H.L end
 967 1120 a 967 1120 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 967 1120 a 0 TeXcolorgray
3136 w FG(2)p 0 TeXcolorgray 1930 5895 a FF(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -246 -246 a 83 x FH(1)105 b(C)o(ompl\351ments)23
b(sur)h(la)f(d\351r)q(iv)n(ation)-246 -54 y
SDict begin H.S end
 -246 -54
a -246 -54 a
SDict begin 12 H.A end
 -246 -54 a -246 -54 a
SDict begin [/View [/XYZ H.V]/Dest (exo.1) cvn /DEST pdfmark end
 -246 -54 a 0 TeXcolorgray
75 x FG(Ex)o(er)o(cice)14 b(1)p 0 TeXcolorgray 42 w FF(La)j(fonction)27
b FC(f)36 b FF(est)18 b(d\351\002nie)f(sur)h(l)o('inter)q(valle)1517
22 y([)1542 21 y FB(\241)p FF(2;)8 b(6)1705 22 y(])1749
21 y(par)1596 220 y FC(f)19 b FF(\()r FC(x)5 b FF(\))14
b FB(\306)h FF(0,)8 b(5)r FC(x)1977 186 y Fz(2)2024 220
y FB(\241)i FF(2)r FC(x)15 b FB(\241)10 b FF(4.)-246
420 y(P)n(our)17 b(tout)j FC(x)g FB(2)14 b Fy(R)31 b
FF(:)1388 519 y FC(f)1431 485 y Fx(0)1452 519 y FF(\()r
FC(x)5 b FF(\))14 b FB(\306)g FF(0,)8 b(5)i FB(\243)g
FF(2)r FC(x)15 b FB(\241)10 b FF(2)g FB(\243)g FF(1)g
FB(\241)g FF(0)19 b FB(\306)e FC(x)e FB(\241)10 b FF(2.)-246
669 y(La)16 b(d\351r)q(iv\351e)g(est)h(du)e(pr)o(emier)i(degr\351,)e
(donc)g(pour)i(obtenir)f(le)g(tableau)g(de)g(signe)o(,)g(il)g(faut)g
(r\351soudr)o(e)g(une)g(\351quation,)h(puis)g(r)o(egar)o(der)d(le)i
(signe)g(de)i FC(a)33 b FF(:)1809 851 y FC(x)15 b FB(\241)10
b FF(2)15 b FB(\306)g FF(0)1693 976 y FC(x)g FB(\241)1812
992 y Fw(\001)1812 976 y FF(2)d FB(\305)1929 992 y Fw(\001)1929
976 y FF(2)i FB(\306)h FF(0)10 b FB(\305)g FF(2)1925
1100 y FC(x)19 b FB(\306)c FF(2.)-244 1307 y FC(a)j FB(\306)d
FF(1)i(\(puisque)k FC(x)15 b FB(\241)10 b FF(2)19 b(signi\002e)p
1 0 0 TeXcolorrgb 17 w(1)p 0 TeXcolorgray 3 w FC(x)c
FB(\241)10 b FF(2\),)20 b FC(a)h FF(est)d FB(\251)f FF(donc)g(le)h
(signe)g(est)g(de)f(la)h(for)q(me)45 b FB(\241)18 b Fv(\036)f
FB(\305)p 2226 1225 262 4 v 2226 1349 4 127 v 2484 1349
V 2226 1351 262 4 v -246 1472 a FF(On)h(en)f(d\351duit)h(le)g(tableau)f
(de)h(signe)g(de)25 b FC(f)1031 1442 y Fx(0)1069 1472
y FF(et)18 b(le)g(tableau)f(de)h(var)q(iations)f(de)25
b FC(f)51 b FF(:)p 0 TeXcolorgray 0 TeXcolorgray -19
1640 a

 -19 1640 a -19 1640 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -13.56602 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a 168
w FC(x)-19 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -36.66914 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a 111 w FC(f)135
1610 y Fx(0)156 1640 y FF(\()r FC(x)5 b FF(\))-19 1640
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -70.33508 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a 122 w FC(f)18 b FF(\()r FC(x)5
b FF(\))-19 1640 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -22.6787 moveto

 204.10854 -22.6787 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -45.35742 moveto

 204.10854 -45.35742 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -90.71487 moveto

 204.10854 -90.71487 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -90.71487 lineto

 204.10854 -90.71487 lineto

 204.10854 0.0 lineto

 closepath

 204.10854 -90.71487 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -90.71487 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 50.96643 -14.40787 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a FB(\241)p FF(2)-19
1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.29675 -14.40787 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a FF(2)-19 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 190.32938 -14.38297 ] concat

 pgfs


 -19 1640
a
 0 setgray
 -19 1640 a FF(6)-19 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -35.44627 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a FB(\241)-19
1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -22.6787 moveto

 124.73297 -45.35742 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -37.06345 ] concat

 pgfs


 -19 1640 a
 0 setgray
 -19 1640 a FF(0)-19 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -36.57706 ] concat

 pgfs


 -19 1640
a
 0 setgray
 -19 1640 a FB(\305)-19 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 52.27333 -59.46468 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 54.26588 -57.47212 ] concat

 pgfs


 -19 1640 a
 /pgfsc{}def/pgffc{}def
 -19 1640 a
-19 1640 a
 0 setgray
 -19 1640 a FF(2)-19 1640 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 52.27333 -59.46468 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 54.26588 -57.47212 ] concat

 pgfs


 -19 1640 a
 /pgfsc{}def/pgffc{}def
 -19
1640 a -19 1640 a
 0 setgray
 -19 1640 a FF(2)-19 1640 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 15.44226 117.01184 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 119.0044 -84.68742 ] concat

 pgfs


 -19 1640
a
 /pgfsc{}def/pgffc{}def
 -19 1640 a -19 1640 a
 0 setgray
 -19 1640 a FB(\241)p FF(6)-19
1640 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 15.44226 117.01184 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 119.0044 -84.68742 ] concat

 pgfs


 -19 1640 a
 /pgfsc{}def/pgffc{}def
 -19 1640 a -19 1640 a
 0 setgray
 -19 1640 a FB(\241)p
FF(6)-19 1640 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 64.96579 -57.71567 moveto

 110.95607 -76.13242 lineto

 pgfstr

 save

 [0.9283 -0.37172 0.37172 0.9283 110.95605 -76.13242 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 188.3457 -59.46468 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 190.33826 -57.47212 ] concat

 pgfs


 -19 1640
a
 /pgfsc{}def/pgffc{}def
 -19 1640 a -19 1640 a
 0 setgray
 -19 1640 a FF(2)-19 1640 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 188.3457 -59.46468 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 190.33826 -57.47212 ] concat

 pgfs


 -19
1640 a
 /pgfsc{}def/pgffc{}def
 -19 1640 a -19 1640 a
 0 setgray
 -19 1640 a FF(2)-19 1640
y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 136.30339 -77.02061 moveto

 182.29369 -58.60347 lineto

 pgfstr

 save

 [0.9283 0.37172 -0.37172 0.9283 182.29367 -58.60347 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 1946 2415
9 777 v 0 TeXcolorgray 1992 1721 a FF(P)n(our)16 b(compl\351ter)j(l)o
('extr\351mit\351)h(des)d(\003\350ches)o(,)i(on)e(calcule)h(:)p
0 TeXcolorgray 2161 1821 a(\225)p 0 TeXcolorgray 50 w
FC(f)h FF(\()p FB(\241)p FF(2\))14 b FB(\306)g FF(0,)8
b(5)i FB(\243)g FF(\()p FB(\241)p FF(2\))2849 1791 y
Fz(2)2896 1821 y FB(\241)g FF(2)g FB(\243)g FF(\()p FB(\241)p
FF(2\))g FB(\241)g FF(4)16 b FB(\306)e FF(2)p 0 TeXcolorgray
2161 1920 a(\225)p 0 TeXcolorgray 50 w FC(f)19 b FF(\(2\))14
b FB(\306)g FF(0,)8 b(5)i FB(\243)g FF(2)2685 1890 y
Fz(2)2733 1920 y FB(\241)g FF(2)g FB(\243)g FF(2)g FB(\241)g
FF(4)16 b FB(\306)e(\241)p FF(6)p 0 TeXcolorgray 2161
2020 a(\225)p 0 TeXcolorgray 50 w FC(f)19 b FF(\(6\))14
b FB(\306)g FF(0,)8 b(5)i FB(\243)g FF(6)2685 1990 y
Fz(2)2733 2020 y FB(\241)g FF(2)g FB(\243)g FF(6)g FB(\241)g
FF(4)16 b FB(\306)e FF(2)1992 2169 y(On)j(peut)h(aussi)g(fair)o(e)g(un)
f(tableau)h(de)f(valeurs)h(\340)g(la)f(calculatr)q(ice)o(.)-246
2646 y FG(R)o(emarque)d(:)k FF(La)f(courbe)g(r)o(epr\351sentative)i
(est)f(une)g(par)o(abole)o(,)g(dont)f(le)h(sommet)h FC(S)j
FF(a)17 b(pour)h(coor)o(donn\351es)f(\(2;)8 b FB(\241)p
FF(6\).)p 0 TeXcolorgray 0 TeXcolorgray 908 3778 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 250.95338 a add def
/d 0.0 a add neg def /h 123.20035 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 908
3778 a 1466 3041 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -85.35818 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 183.8049 0.0 -67.14848 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 14.22636 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -56.90549 0.0 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 34.42776 0.0 -88.77258   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 183.8049  0 -67.14848  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -67.14848
 183.8049  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-88.77258  def /maxTickline 34.42776  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 34.42776
0.0 -88.77258   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.8049
0.0 -67.14848 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 34.42776  0 -88.77258  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -88.77258
 34.42776  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-67.14848  def /maxTickline 183.8049  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 14.22636  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 14.22636  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 34.42776
0.0 -88.77258   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.8049
0.0 -67.14848 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1451 3138 a Fz(0)205
b(1)g(2)g(3)g(4)g(5)-1469 b Fx(\241)p Fz(1)-309 b Fx(\241)p
Fz(2)1377 3060 y(0)1335 3178 y Fx(\241)p Fz(1)1335 3296
y Fx(\241)p Fz(2)1335 3414 y Fx(\241)p Fz(3)1335 3533
y Fx(\241)p Fz(4)1335 3651 y Fx(\241)p Fz(5)1335 3769
y Fx(\241)p Fz(6)1377 2942 y(1)1466 3041 y
tx@Dict begin  gsave STV CP T /ps@rot 0. def grestore  end
 1466 3041
a 1466 3041 a
tx@Dict begin { 56.90549 -85.35818 } PutCoor PutBegin  end
 1466 3041 a 1466 3041 a
tx@Dict begin ps@rot  RotBegin  end
 1466 3041 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4. def /x1 4. def
/dx x1 x sub 49 div def /F@pstplot (x^2/2/1.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 14.22636 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 14.22636
mul gt { moveto } { dup -1.e30 14.22636 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1466 3041 a
tx@Dict begin RotEnd  end
 1466 3041 a 1466
3041 a
tx@Dict begin  PutEnd  end
 1466 3041 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0 0  setrgbcolor  [ 56.90549
-85.35818   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1466 3041 a
tx@Dict begin { 59.18175 -82.51295 } PutCoor PutBegin  end
 1466 3041 a 1 0 0 TeXcolorrgb -1 x FC(S)p
0 TeXcolorgray 1466 3041 a
tx@Dict begin  PutEnd  end
 1466 3041 a 2992 3778 a
currentpoint initclip moveto
 2992
3778 a -246 3861 a
SDict begin H.S end
 -246 3861 a -246 3861 a
SDict begin 12 H.A end
 -246 3861
a -246 3861 a
SDict begin [/View [/XYZ H.V]/Dest (exo.2) cvn /DEST pdfmark end
 -246 3861 a 0 TeXcolorgray 116 x FG(Ex)o(er)o(cice)14
b(2)p 0 TeXcolorgray 42 w FF(On)j(consid\350r)o(e)g(un)h(segment)1052
3978 y([)1084 3977 y FC(A)s(B)1190 3978 y FF(])1233 3977
y(de)f(longueur)h(4)g(et)g(un)f(point)i(mobile)h FC(M)25
b FF(pouvant)18 b(se)g(d\351placer)g(libr)o(ement)g(sur)g(ce)f
(segment.)p 0 TeXcolorgray 0 TeXcolorgray 1382 4460 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 136.85764 a add def
/d 0.0 a add neg def /h 44.95538 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end

1382 4460 a 1240 4524 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 28.45274 28.45274 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1240 4524 a
tx@Dict begin { 83.08195 42.67911 } PutCoor PutBegin  end
 1240 4524 a 51 x FF(4)1240 4524 y
tx@Dict begin  PutEnd  end
 1240 4524
a 1240 4524 a
tx@Dict begin { 42.67911 19.91682 } PutCoor PutBegin  end
 1240 4524 a 1242 4562 a FC(x)1240 4524
y
tx@Dict begin  PutEnd  end
 1240 4524 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.26372
39.83366 91.04869 39.83366   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
39.83366 79.66776 39.83366   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
17.07181 39.83366 17.07181   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 62.59595
17.07181 51.21501 17.07181   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 28.45274 28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1240 4524 a
tx@Dict begin { 24.185 30.729 } PutCoor PutBegin  end
 1240
4524 a 6 w FC(A)1240 4524 y
tx@Dict begin  PutEnd  end
 1240 4524 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 142.26372 28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1240 4524 a
tx@Dict begin { 143.97081 30.729 } PutCoor PutBegin  end
 1240 4524 a FC(B)1240
4524 y
tx@Dict begin  PutEnd  end
 1240 4524 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 62.59595 28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1240 4524 a
tx@Dict begin { 64.30304 30.729 } PutCoor PutBegin  end
 1240 4524 a 2 w FC(M)1240 4524 y
tx@Dict begin  PutEnd  end
 1240 4524
a 2518 4460 a
currentpoint initclip moveto
 2518 4460 a -246 4643 a FF(On)h(note)i
FC(x)i FF(la)c(longueur)g(du)f(segment)946 4644 y([)977
4643 y FC(A)5 b(M)1107 4644 y FF(])1150 4643 y(et)26
b FC(f)19 b FF(\()r FC(x)5 b FF(\))17 b(le)g(produit)h(des)f(longueurs)
25 b FC(A)5 b(M)17 b FB(\243)10 b FC(B)f(M)e FF(.)-246
4691 y
SDict begin H.S end
 -246 4691 a -246 4691 a
SDict begin 12 H.A end
 -246 4691 a -246 4691
a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -246 4691 a 0 TeXcolorgray -141 4787 a FF(1.)p 0 TeXcolorgray
43 w FC(B)i(M)23 b FB(\306)d FC(A)s(B)e FB(\241)e FC(A)5
b(M)22 b FB(\306)14 b FF(4)c FB(\241)i FC(x)5 b FF(,)19
b(donc)1688 4969 y FC(f)g FF(\()r FC(x)5 b FF(\))14 b
FB(\306)20 b FC(A)5 b(M)18 b FB(\243)10 b FC(B)f(M)1845
5094 y FB(\306)16 b FC(x)f FB(\243)10 b FF(\(4)g FB(\241)i
FC(x)5 b FF(\))1845 5218 y FB(\306)16 b FC(x)f FB(\243)10
b FF(4)g FB(\305)i FC(x)j FB(\243)10 b FF(\()p FB(\241)r
FC(x)5 b FF(\))1845 5354 y FB(\306)14 b FF(4)r FC(x)h
FB(\241)d FC(x)2121 5320 y Fz(2)2157 5354 y FF(.)p 0
TeXcolorgray 1930 5895 a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163 a FF(2.)p
0 TeXcolorgray 43 w(Le)20 b(produit)f(des)h(longueurs)26
b FC(A)5 b(M)19 b FB(\243)11 b FC(B)e(M)27 b FF(est)20
b(donn\351)g(par)27 b FC(f)19 b FF(\()r FC(x)5 b FF(\),)20
b(donc)f(maximiser)i(ce)e(produit)g(r)o(evient)i(\340)e(maximiser)i(la)
e(fonction)29 b FC(f)17 b FF(.)j(On)-38 -63 y(\351tudie)e(donc)f(les)h
(var)q(iations)35 b(:)18 b(pour)f(tout)j FC(x)g FB(2)1380
-62 y FF([)1406 -63 y(0;)8 b(4)1514 -62 y(])1548 -63
y(,)1594 120 y FC(f)1637 85 y Fx(0)1658 120 y FF(\()r
FC(x)d FF(\))14 b FB(\306)h FF(4)10 b FB(\243)g FF(1)g
FB(\241)g FF(2)r FC(x)21 b FB(\306)14 b(\241)p FF(2)r
FC(x)h FB(\305)10 b FF(4.)-38 317 y(On)17 b(r\351sout)h(:)1863
614 y FB(\241)p FF(2)r FC(x)d FB(\305)10 b FF(4)16 b
FB(\306)e FF(0)1747 738 y FB(\241)p FF(2)r FC(x)h FB(\305)1963
754 y Fw(\001)1963 738 y FF(4)d FB(\241)2080 754 y Fw(\001)2080
738 y FF(4)j FB(\306)f FF(0)c FB(\241)g FF(4)1961 857
y Fw(\010)1990 843 y(\010)1969 855 y FB(\241)p FF(2)r
FC(x)p 1969 892 142 5 v 1984 970 a Fw(\010)2013 956 y(\010)1992
968 y FB(\241)p FF(2)2135 911 y FB(\306)2214 855 y(\241)p
FF(4)p 2214 892 96 5 v 2214 968 a FB(\241)p FF(2)2076
1071 y FC(x)20 b FB(\306)14 b FF(2.)-36 1293 y FC(a)k
FB(\306)c(\241)p FF(2,)20 b FC(a)h FF(est)d FB(\252)f
FF(donc)g(le)h(signe)g(est)g(de)f(la)g(for)q(me)46 b
FB(\305)17 b Fv(\036)h FB(\241)p 1472 1210 262 4 v 1472
1335 4 127 v 1730 1335 V 1472 1337 262 4 v -38 1472 a
FF(On)f(obtient)h(le)g(tableau)g(de)f(signe)h(de)25 b
FC(f)1160 1442 y Fx(0)1198 1472 y FF(et)18 b(le)g(tableau)g(de)f(var)q
(iations)h(de)25 b FC(f)50 b FF(:)p 0 TeXcolorgray 0
TeXcolorgray 137 1640 a

 137 1640 a 137 1640 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -13.56602 ] concat

 pgfs


 137 1640
a
 0 setgray
 137 1640 a 167 w FC(x)137 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -36.66914 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640
a 111 w FC(f)291 1610 y Fx(0)312 1640 y FF(\()r FC(x)5
b FF(\))137 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -70.33508 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a 121 w FC(f)19
b FF(\()r FC(x)5 b FF(\))137 1640 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -22.6787 moveto

 204.10854 -22.6787 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -45.35742 moveto

 204.10854 -45.35742 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -90.71487 moveto

 204.10854 -90.71487 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -90.71487 lineto

 204.10854 -90.71487 lineto

 204.10854 0.0 lineto

 closepath

 204.10854 -90.71487 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -90.71487 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 54.26411 -14.38297 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640
a FF(0)137 1640 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.29675 -14.40787 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a FF(2)137 1640
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 190.32938 -14.40787 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a FF(4)137 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -36.57706 ] concat

 pgfs


 137 1640 a
 0 setgray
 137
1640 a FB(\305)137 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -22.6787 moveto

 124.73297 -45.35742 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -37.06345 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a FF(0)137
1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -35.44627 ] concat

 pgfs


 137 1640 a
 0 setgray
 137 1640 a FB(\241)137 1640 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 54.70424 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 56.6968 -84.73721 ] concat

 pgfs


 137 1640
a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640 a 137 1640 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 54.70424 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 56.6968 -84.73721 ] concat

 pgfs


 137 1640
a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640 a 137 1640 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 122.74042 -53.32764 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 124.73297 -51.33508 ] concat

 pgfs


 137 1640
a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640 a 137 1640 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 122.74042 -53.32764 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 124.73297 -51.33508 ] concat

 pgfs


 137 1640
a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640 a 137 1640 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 62.47359 -81.90782 moveto

 116.81953 -55.225 lineto

 pgfstr

 save

 [0.8976 0.44069 -0.44069 0.8976 116.81952 -55.22502 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore

0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 190.77661 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 192.76917 -84.73721 ] concat

 pgfs


 137 1640 a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640
a 137 1640 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 190.77661 -86.72977 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 192.76917 -84.73721 ] concat

 pgfs


 137 1640 a
 /pgfsc{}def/pgffc{}def
 137 1640 a 137 1640 a
 0 setgray
 137 1640
a 137 1640 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 130.51335 -54.17204 moveto

 184.85928 -80.85486 lineto

 pgfstr

 save

 [0.8976 -0.44069 0.44069 0.8976 184.85927 -80.85484 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
2050 2415 9 777 v 0 TeXcolorgray 2095 1721 a FF(Il)14
b(n)-6 b('est)14 b(pas)g(utile)g(ici)g(de)g(compl\351ter)g(l)o
('extr\351mit\351)g(des)g(\003\350ches)g(:)g(tout)2095
1821 y(ce)k(qui)g(nous)h(int\351r)o(esse)o(,)f(c)n('est)h(la)f(valeur)g
(de)h FC(x)k FF(pour)18 b(laquelle)28 b FC(f)37 b FF(at-)2095
1920 y(teint)19 b(son)f(maximum.)-38 2611 y(C)o(onclusion)e(:)23
b FC(f)34 b FF(atteint)16 b(son)f(maximum)i(lorsque)h
FC(x)h FB(\306)14 b FF(2,)i(donc)e(le)h(produit)21 b
FC(A)5 b(M)11 b FB(\243)t FC(B)e(M)24 b FF(est)15 b(maximal)h(lorsque)i
FC(x)i FB(\306)14 b FF(2)h(;)g(c)n('est-\340-dir)o(e)f(quand)-36
2711 y FC(M)25 b FF(est)18 b(le)g(milieu)h(de)594 2712
y([)625 2711 y FC(A)s(B)731 2712 y FF(])765 2711 y(.)-246
2904 y FG(R)o(emarque)14 b(:)k FF(C)o(et)f(exemple)j(est)e(celui)g(qu)n
('a)f(choisi)h(F)m(er)q(mat)g(vers)g(1637)h(pour)f(exposer)g(sa)f
(m\351thode)i(de)e(l)o('ad\351galit\351)h(\226)g(anc\352tr)o(e)f(de)g
(la)g(d\351r)q(ivation)-246 3004 y(\226)h(pour)f(d\351ter)q(miner)h(le)
g(maximum)h(et)f(le)g(minimum)i(d)n('une)e(fonction.)-246
3087 y
SDict begin H.S end
 -246 3087 a -246 3087 a
SDict begin 12 H.A end
 -246 3087 a -246 3087
a
SDict begin [/View [/XYZ H.V]/Dest (exo.3) cvn /DEST pdfmark end
 -246 3087 a 0 TeXcolorgray 116 x FG(Ex)o(er)o(cice)c(3)p
0 TeXcolorgray 42 w FF(La)j(fonction)k FC(g)26 b FF(est)18
b(d\351\002nie)g(sur)f Fy(R)g FF(par)1438 3402 y FC(g)10
b FF(\()r FC(x)5 b FF(\))13 b FB(\306)i FF(0,)8 b(5)r
FC(x)1823 3368 y Fz(3)1870 3402 y FB(\305)i FF(0,)e(75)r
FC(x)2129 3368 y Fz(2)2176 3402 y FB(\241)i FF(3)r FC(x)15
b FB(\241)10 b FF(1.)-246 3602 y(P)n(our)17 b(tout)j
FC(x)g FB(2)14 b Fy(R)31 b FF(:)984 3801 y FC(g)1032
3767 y Fx(0)1053 3801 y FF(\()r FC(x)5 b FF(\))14 b FB(\306)g
FF(0,)8 b(5)i FB(\243)g FF(3)r FC(x)1505 3767 y Fz(2)1553
3801 y FB(\305)g FF(0,)e(75)i FB(\243)g FF(2)r FC(x)15
b FB(\241)10 b FF(3)g FB(\243)g FF(1)g FB(\241)g FF(0)19
b FB(\306)14 b FF(1,)8 b(5)r FC(x)2514 3767 y Fz(2)2561
3801 y FB(\305)i FF(1,)e(5)r FC(x)15 b FB(\241)10 b FF(3.)-246
3950 y(La)18 b(d\351r)q(iv\351e)g(est)g(du)f(second)g(degr\351,)g(donc)
g(on)h(utilise)h(la)f(m\351thode)g(de)f(la)h(classe)g(de)f(pr)o
(emi\350r)o(e)h(:)p 0 TeXcolorgray -76 4050 a(\225)p
0 TeXcolorgray 44 w FC(a)g FB(\306)c FF(1,)8 b(5,)19
b FC(b)f FB(\306)c FF(1,)8 b(5,)19 b FC(c)h FB(\306)14
b(\241)p FF(3.)p 0 TeXcolorgray -76 4150 a(\225)p 0 TeXcolorgray
42 w(le)k(discr)q(iminant)g(est)g FD(\242)c FB(\306)h
FC(b)838 4119 y Fz(2)882 4150 y FB(\241)10 b FF(4)r FC(a)t(c)21
b FB(\306)14 b FF(1,)8 b(5)1268 4119 y Fz(2)1314 4150
y FB(\241)i FF(4)g FB(\243)g FF(1,)e(5)i FB(\243)g FF(\()p
FB(\241)p FF(3\))17 b FB(\306)d FF(20,)8 b(25.)p 0 TeXcolorgray
-76 4249 a(\225)p 0 TeXcolorgray 42 w FD(\242)14 b FB(\310)h
FF(0,)j(donc)f(il)g(y)g(a)g(deux)h(r)o(acines)g(:)1111
4571 y FC(x)1152 4583 y Fz(1)1202 4571 y FB(\306)1281
4515 y(\241)p FC(b)c FB(\241)1458 4449 y(p)p 1522 4449
55 5 v 66 x FD(\242)p 1281 4552 296 5 v 1384 4628 a FF(2)r
FC(a)1600 4571 y FB(\306)1679 4515 y(\241)p FF(1,)8 b(5)i
FB(\241)1917 4455 y(p)p 1983 4455 191 5 v 1983 4515 a
FF(20,)e(25)p 1679 4552 494 5 v 1814 4628 a(2)i FB(\243)g
FF(1,)e(5)2197 4571 y FB(\306)2276 4515 y(\241)p FF(1,)g(5)i
FB(\241)g FF(4,)e(5)p 2276 4552 350 5 v 2431 4628 a(3)2650
4571 y FB(\306)2729 4515 y(\241)p FF(6)p 2729 4552 96
5 v 2756 4628 a(3)2848 4571 y FB(\306)15 b(\241)p FF(2,)1111
4803 y FC(x)1152 4815 y Fz(2)1202 4803 y FB(\306)1281
4747 y(\241)p FC(b)f FB(\305)1458 4681 y(p)p 1522 4681
55 5 v 66 x FD(\242)p 1281 4784 296 5 v 1384 4860 a FF(2)r
FC(a)1600 4803 y FB(\306)1679 4747 y(\241)p FF(1,)8 b(5)i
FB(\305)1917 4688 y(p)p 1983 4688 191 5 v 1983 4747 a
FF(20,)e(25)p 1679 4784 494 5 v 1814 4860 a(2)i FB(\243)g
FF(1,)e(5)2197 4803 y FB(\306)2276 4747 y(\241)p FF(1,)g(5)i
FB(\305)g FF(4,)e(5)p 2276 4784 350 5 v 2431 4860 a(3)2650
4803 y FB(\306)2729 4747 y FF(3)p 2729 4784 41 5 v 2729
4860 a(3)2793 4803 y FB(\306)15 b FF(1.)-244 5098 y FC(a)j
FB(\306)d FF(1,)8 b(5)20 b FC(a)h FF(est)d FB(\251)f
FF(donc)g(le)h(signe)g(est)g(de)f(la)h(for)q(me)45 b
FB(\305)18 b Fv(\036)27 b FB(\241)h Fv(\036)17 b FB(\305)p
1258 5016 432 4 v 1258 5140 4 127 v 1686 5140 V 1258
5142 432 4 v 0 TeXcolorgray 0 TeXcolorgray -153 5266
a

 -153 5266 a -153 5266 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -12.14816 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a 168
w FC(x)-153 5266 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -32.41563 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a 106 w FC(g)1
5235 y Fx(0)21 5266 y FF(\()r FC(x)5 b FF(\))-153 5266
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -61.64621 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a 116 w FC(g)10 b FF(\()r FC(x)5
b FF(\))-153 5266 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -19.84302 moveto

 238.11656 -19.84302 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -39.68607 moveto

 238.11656 -39.68607 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -79.37216 moveto

 238.11656 -79.37216 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -79.37216 lineto

 238.11656 -79.37216 lineto

 238.11656 0.0 lineto

 closepath

 238.11656 -79.37216 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 39.68607 0.0 moveto

 39.68607 -79.37216 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 41.63185 -11.9539 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a FB(\2411)-153
5266 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 103.40654 -12.99 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a FB(\241)p FF(2)-153 5266
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 166.23227 -12.99 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a FF(1)-153 5266 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 220.21606 -12.47694 ] concat

 pgfs


 -153 5266
a
 0 setgray
 -153 5266 a FB(\3051)-153 5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 76.0774 -32.32106 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266
a FB(\305)-153 5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 109.13673 -19.84302 moveto

 109.13673 -39.68607 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 106.70782 -32.80869 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a FF(0)-153
5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 135.60873 -31.19028 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153 5266 a FB(\241)-153 5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 168.66588 -19.84302 moveto

 168.66588 -39.68607 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 166.2381 -32.80869 ] concat

 pgfs


 -153
5266 a
 0 setgray
 -153 5266 a FF(0)-153 5266 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 195.14009 -32.32106 ] concat

 pgfs


 -153 5266 a
 0 setgray
 -153
5266 a FB(\305)-153 5266 y


 pgfr

 restore

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 47.61504 -75.38705 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 49.60759 -73.3945 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153
5266 a
 0 setgray
 -153 5266 a -153 5266 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 47.61504 -75.38705 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 49.60759 -73.3945 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266
a -153 5266 a
 0 setgray
 -153 5266 a -153 5266 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 104.71327 -53.79332 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 106.70583 -51.80077 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153
5266 a -153 5266 a
 0 setgray
 -153 5266 a FF(4)-153 5266 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 104.71327 -53.79332 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 106.70583 -51.80077 ] concat

 pgfs


 -153
5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153 5266 a
 0 setgray
 -153 5266 a FF(4)-153
5266 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 55.43437 -70.98253 moveto

 98.67314 -53.06723 lineto

 pgfstr

 save

 [0.92378 0.38275 -0.38275 0.92378 98.67314 -53.06725 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 27.59682 154.86748 -75.38705 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 156.86003 -73.31482 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153
5266 a -153 5266 a
 0 setgray
 -153 5266 a FB(\241)p FF(2.75)-153
5266 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 27.59682 154.86748 -75.38705 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 156.86003 -73.31482 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153 5266 a
 0 setgray
 -153 5266
a FB(\241)p FF(2.75)-153 5266 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 117.42827 -51.73431 moveto

 148.7563 -63.08159 lineto

 pgfstr

 save

 [0.9402 -0.34055 0.34055 0.9402 148.75629 -63.08159 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 226.20248 -47.65628 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 228.19504 -45.66373 ] concat

 pgfs



-153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153 5266 a
 0 setgray
 -153 5266 a -153
5266 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 226.20248 -47.65628 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 228.19504 -45.66373 ] concat

 pgfs


 -153 5266 a
 /pgfsc{}def/pgffc{}def
 -153 5266 a -153 5266 a
 0 setgray
 -153 5266
a -153 5266 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 186.30136 -62.99704 moveto

 220.16368 -48.9875 lineto

 pgfstr

 save

 [0.924 0.38228 -0.38228 0.924 220.16367 -48.9875 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
1946 5664 9 401 v 0 TeXcolorgray 0 TeXcolorgray 2161
5347 a FF(\225)p 0 TeXcolorgray 44 w FC(g)10 b FF(\()p
FB(\241)p FF(2\))k FB(\306)g FF(0,)8 b(5)i FB(\243)g
FF(\()p FB(\241)p FF(2\))2848 5317 y Fz(3)2895 5347 y
FB(\305)g FF(0,)e(75)i FB(\243)g FF(\()p FB(\241)p FF(2\))3332
5317 y Fz(2)3379 5347 y FB(\241)g FF(3)g FB(\243)g FF(\()p
FB(\241)p FF(2\))g FB(\241)g FF(1)16 b FB(\306)e FF(4)p
0 TeXcolorgray 2161 5447 a(\225)p 0 TeXcolorgray 44 w
FC(g)c FF(\(1\))k FB(\306)g FF(0,)8 b(5)i FB(\243)g FF(1)2684
5416 y Fz(3)2731 5447 y FB(\305)g FF(0,)e(75)i FB(\243)g
FF(1)3059 5416 y Fz(2)3107 5447 y FB(\241)g FF(3)g FB(\243)g
FF(1)g FB(\241)g FF(1)16 b FB(\306)f(\241)p FF(2,)8 b(75)p
0 TeXcolorgray 1930 5895 a(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -163 a FG(R)o(emarque)14 b(:)k FF(V)-5 b(oici)17
b(\340)g(quoi)h(r)o(essemble)h(la)e(courbe)g(r)o(epr\351sentative)i(:)p
0 TeXcolorgray 0 TeXcolorgray 996 947 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 229.89821 a add def
/d 0.0 a add neg def /h 122.06221 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 996 947 a 1959
458 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -56.90546 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 113.81097 0.0 -116.08723 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 14.22636 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -113.81097 0.0 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 63.16508 0.0 -58.89713   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 113.81097  0 -116.08723  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -116.08723
 113.81097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-58.89713  def /maxTickline 63.16508  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 63.16508
0.0 -58.89713   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -116.08723 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 63.16508  0 -58.89713  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -58.89713
 63.16508  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-116.08723  def /maxTickline 113.81097  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 14.22636  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 14.22636  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 63.16508
0.0 -58.89713   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -116.08723 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1944 555 a Fz(0)205 b(1)g(2)h(3)-997
b Fx(\241)p Fz(1)-309 b Fx(\241)p Fz(2)g Fx(\241)p Fz(3)f
Fx(\241)p Fz(4)1871 477 y(0)1829 595 y Fx(\241)p Fz(1)1829
714 y Fx(\241)p Fz(2)1829 832 y Fx(\241)p Fz(3)1829 950
y Fx(\241)p Fz(4)1871 359 y(1)1871 241 y(2)1871 123 y(3)1959
458 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.08 def /x1 4.0
def /dx x1 x sub 199 div def /F@pstplot (0.5*x^(3.0)+0.75*x^(2.0)-3.0*x-1.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
14.22636 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 14.22636 mul gt { moveto } {
dup -1.e30 14.22636 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2904 947
a
currentpoint initclip moveto
 2904 947 a -246 1018 a
SDict begin H.S end
 -246 1018 a -246 1018 a
SDict begin 12 H.A end
 -246
1018 a -246 1018 a
SDict begin [/View [/XYZ H.V]/Dest (exo.4) cvn /DEST pdfmark end
 -246 1018 a 0 TeXcolorgray 121 x FG(Ex)o(er)o(cice)
14 b(4)p 0 TeXcolorgray 42 w FF(La)j(fonction)i FC(h)i
FF(est)d(d\351\002nie)g(sur)1131 1140 y([)1156 1139 y(1;)8
b FB(\3051)1357 1140 y FF([)1401 1139 y(par)1660 1338
y FC(h)t FF(\()r FC(x)d FF(\))15 b FB(\306)f FF(\()r
FC(x)h FB(\241)10 b FF(6\))2109 1276 y FB(p)p 2173 1276
47 5 v 2175 1338 a FC(x)c FF(.)-246 1480 y(On)18 b(utilise)h(la)e(for)q
(mule)h(pour)g(la)g(d\351r)q(iv\351e)f(d)n('un)h(produit)g(avec)637
1651 y FC(u)t FF(\()r FC(x)5 b FF(\))15 b FB(\306)h FC(x)f
FB(\241)10 b FF(6)884 b(,)h FC(v)7 b FF(\()r FC(x)e FF(\))14
b FB(\306)3051 1589 y(p)p 3115 1589 V 3117 1651 a FC(x)5
b FF(,)637 1821 y FC(u)688 1787 y Fx(0)710 1821 y FF(\()r
FC(x)g FF(\))14 b FB(\306)g FF(1)984 b(,)885 b FC(v)2868
1787 y Fx(0)2889 1821 y FF(\()r FC(x)5 b FF(\))14 b FB(\306)3137
1765 y FF(1)p 3082 1802 151 5 v 3082 1882 a(2)3122 1824
y FB(p)p 3186 1824 47 5 v 3188 1882 a FC(x)3243 1821
y FF(.)-246 2170 y(On)k(obtient,)g(pour)g(tout)i FC(x)f
FB(2)629 2171 y FF([)654 2170 y(1;)8 b FB(\3051)855 2171
y FF([)913 2170 y(:)889 2341 y FC(h)939 2306 y Fx(0)960
2341 y FF(\()r FC(x)d FF(\))15 b FB(\306)f FC(u)1195
2306 y Fx(0)1216 2341 y FF(\()r FC(x)5 b FF(\))10 b FB(\243)i
FC(v)7 b FF(\()r FC(x)e FF(\))10 b FB(\305)g FC(u)t FF(\()r
FC(x)5 b FF(\))10 b FB(\243)i FC(v)1888 2306 y Fx(0)1910
2341 y FF(\()r FC(x)5 b FF(\))1075 2511 y FB(\306)14
b FF(1)c FB(\243)1259 2449 y(p)p 1323 2449 V 1325 2511
a FC(x)16 b FB(\305)10 b FF(\()r FC(x)15 b FB(\241)10
b FF(6\))g FB(\243)1801 2455 y FF(1)p 1746 2492 151 5
v 1746 2572 a(2)1786 2514 y FB(p)p 1850 2514 47 5 v 1852
2572 a FC(x)1075 2744 y FB(\306)1154 2629 y(p)p 1217
2629 V 1219 2687 a FC(x)16 b FB(\243)10 b FF(2)1379 2629
y FB(p)p 1443 2629 V 1445 2687 a FC(x)p 1154 2724 336
5 v 1246 2804 a FF(2)1286 2746 y FB(p)p 1350 2746 47
5 v 1352 2804 a FC(x)1510 2744 y FB(\305)1587 2687 y
FC(x)15 b FB(\241)10 b FF(6)p 1585 2724 163 5 v 1591
2804 a(2)1631 2746 y FB(p)p 1695 2746 47 5 v 1697 2804
a FC(x)1075 2960 y FB(\306)1185 2904 y FF(2)r FC(x)p
1154 2941 151 5 v 1154 3021 a FF(2)1194 2963 y FB(p)p
1258 2963 47 5 v 1260 3021 a FC(x)1324 2960 y FB(\305)1401
2904 y FC(x)15 b FB(\241)10 b FF(6)p 1399 2941 163 5
v 1405 3021 a(2)1445 2963 y FB(p)p 1509 2963 47 5 v 1511
3021 a FC(x)2018 2873 y Ft(\263)2049 2960 y FF(r)o(appel)19
b(:)2326 2898 y FB(p)p 2390 2898 V 2392 2960 a FC(x)d
FB(\243)2512 2898 y(p)p 2575 2898 V 2577 2960 a FC(x)k
FB(\306)2705 2898 y(p)p 2769 2898 V 2771 2960 a FC(x)2815
2914 y Fz(2)2864 2960 y FB(\306)c FC(x)2979 2873 y Ft(\264)1075
3177 y FB(\306)1154 3121 y FF(3)r FC(x)f FB(\241)10 b
FF(6)p 1154 3158 203 5 v 1180 3238 a(2)1220 3180 y FB(p)p
1284 3180 47 5 v 1286 3238 a FC(x)1366 3177 y FF(.)p
0 TeXcolorgray -76 3434 a(\225)p 0 TeXcolorgray 42 w(On)17
b(r\351sout)h(r)o(apidement)h(:)1438 3567 y(3)r FC(x)c
FB(\241)10 b FF(6)16 b FB(\306)e FF(0)29 b FB(\()-12
b(\))29 b FF(3)r FC(x)20 b FB(\306)14 b FF(6)29 b FB(\()-12
b(\))31 b FC(x)20 b FB(\306)2510 3510 y FF(6)p 2510 3547
41 5 v 2510 3624 a(3)2575 3567 y FB(\306)14 b FF(2.)p
0 TeXcolorgray -76 3760 a(\225)p 0 TeXcolorgray 42 w(Dans)i(3)r
FC(x)f FB(\241)10 b FF(6,)22 b FC(a)c FB(\306)c FF(3)j
FB(\251)h FF(,)f(donc)45 b FB(\241)17 b Fv(\036)h FB(\305)p
925 3678 262 4 v 925 3803 4 127 v 1183 3803 V 925 3805
262 4 v 0 TeXcolorgray -76 3879 a FF(\225)p 0 TeXcolorgray
42 w(2)37 3821 y FB(p)p 101 3821 47 5 v 103 3879 a FC(x)k
FF(est)c(str)q(ictement)h(positif)g(pour)f(tout)i FC(x)g
FB(2)1396 3880 y FF([)1422 3879 y(1;)8 b FB(\3051)1623
3880 y FF([)1657 3879 y(.)-246 4024 y(On)18 b(a)f(donc)g(le)g(tableau)h
(:)p 0 TeXcolorgray 0 TeXcolorgray -19 4179 a

 -19 4179
a -19 4179 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -13.56602 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a 168 w FC(x)-19 4179
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -37.04672 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a 85 w FF(3)r FC(x)h FB(\241)13
b FF(6)-19 4179 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -59.78375 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a 114 w FF(2)135
4121 y FB(p)p 199 4121 47 5 v 201 4179 a FC(x)-19 4179
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -82.53096 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a 99 w FC(h)130 4149 y Fx(0)160
4180 y FF(\()189 4179 y FC(x)233 4180 y FF(\))-19 4179
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -116.1969 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a 110 w FC(h)149 4180 y FF(\()178
4179 y FC(x)222 4180 y FF(\))-19 4179 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -22.6787 moveto

 204.10854 -22.6787 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -45.35742 moveto

 204.10854 -45.35742 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -68.03616 moveto

 204.10854 -68.03616 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -90.71487 moveto

 204.10854 -90.71487 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -136.07234 moveto

 204.10854 -136.07234 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -136.07234 lineto

 204.10854 -136.07234 lineto

 204.10854 0.0 lineto

 closepath

 204.10854 -136.07234 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -136.07234 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 54.26411 -14.40787 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19
4179 a FF(1)-19 4179 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.29675 -14.40787 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a FF(2)-19
4179 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 184.78508 -13.89479 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a FB(\3051)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -35.44627 ] concat

 pgfs


 -19
4179 a
 0 setgray
 -19 4179 a FB(\241)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -22.6787 moveto

 124.73297 -45.35742 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -37.06345 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179
a FF(0)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -36.57706 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a FB(\305)-19 4179
y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -59.2582 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a FB(\305)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -59.2582 ] concat

 pgfs


 -19 4179 a
 0 setgray

-19 4179 a FB(\305)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -80.80852 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a FB(\241)-19
4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -68.03616 moveto

 124.73297 -90.71487 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -82.4233 ] concat

 pgfs


 -19 4179 a
 0 setgray
 -19 4179 a FF(0)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -81.9393 ] concat

 pgfs


 -19 4179
a
 0 setgray
 -19 4179 a FB(\305)-19 4179 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 15.44226 48.97566 -104.87193 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 50.96822 -102.82957 ] concat

 pgfs


 -19 4179 a
 /pgfsc{}def/pgffc{}def
 -19 4179 a
-19 4179 a
 0 setgray
 -19 4179 a FB(\241)p FF(5)-19 4179 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 15.44226 48.97566 -104.87193 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 50.96822 -102.82957 ] concat

 pgfs


 -19 4179
a
 /pgfsc{}def/pgffc{}def
 -19 4179 a -19 4179 a
 0 setgray
 -19 4179 a FB(\241)p FF(5)-19
4179 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 13.83826 27.93555 110.7652 -132.08723 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 112.75775 -129.09691 ] concat

 pgfs


 -19 4179 a
 /pgfsc{}def/pgffc{}def
 -19 4179 a -19 4179 a
 0 setgray
 -19 4179 a FB(\241)p
FF(4)76 4114 y FB(p)p 140 4114 41 5 v 65 x FF(2)-19 4179
y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 13.83826 27.93555 110.7652 -132.08723 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 112.75775 -129.09691 ] concat

 pgfs


 -19 4179 a
 /pgfsc{}def/pgffc{}def
 -19 4179 a -19 4179 a
 0 setgray
 -19 4179 a FB(\241)p
FF(4)76 4114 y FB(p)p 140 4114 41 5 v 65 x FF(2)-19 4179
y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 68.28064 -104.11165 moveto

 104.67169 -117.69301 lineto

 pgfstr

 save

 [0.93683 -0.34961 0.34961 0.93683 104.67169 -117.693 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 190.77661 -98.68509 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 192.76917 -96.69254 ] concat

 pgfs


 -19 4179 a
 /pgfsc{}def/pgffc{}def
 -19 4179 a
-19 4179 a
 0 setgray
 -19 4179 a -19 4179 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 190.77661 -98.68509 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 192.76917 -96.69254 ] concat

 pgfs


 -19 4179 a
 /pgfsc{}def/pgffc{}def
 -19 4179
a -19 4179 a
 0 setgray
 -19 4179 a -19 4179 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 142.5386 -117.72867 moveto

 184.7506 -100.0574 lineto

 pgfstr

 save

 [0.9224 0.38612 -0.38612 0.9224 184.75058 -100.0574 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc



0 TeXcolorgray 1946 5332 9 1155 v 0 TeXcolorgray 0 TeXcolorgray
2161 4261 a FF(\225)p 0 TeXcolorgray 42 w FC(h)t FF(\(1\))i
FB(\306)f FF(\(1)c FB(\241)g FF(6\))g FB(\243)2746 4196
y(p)p 2810 4196 41 5 v 65 x FF(1)15 b FB(\306)f(\241)p
FF(5)c FB(\243)g FF(1)16 b FB(\306)e(\241)p FF(5)k(;)p
0 TeXcolorgray 2161 4360 a(\225)p 0 TeXcolorgray 42 w
FC(h)t FF(\(2\))d FB(\306)f FF(\(2)c FB(\241)g FF(6\))g
FB(\243)2746 4295 y(p)p 2810 4295 V 65 x FF(2)15 b FB(\306)f(\241)p
FF(4)3029 4295 y FB(p)p 3093 4295 V 65 x FF(2)q(.)-246
5407 y
SDict begin H.S end
 -246 5407 a -246 5407 a
SDict begin 12 H.A end
 -246 5407 a -246 5407
a
SDict begin [/View [/XYZ H.V]/Dest (exo.5) cvn /DEST pdfmark end
 -246 5407 a 0 TeXcolorgray 116 x FG(Ex)o(er)o(cice)g(5)p
0 TeXcolorgray 42 w FF(La)20 b(fonction)30 b FC(f)40
b FF(est)21 b(d\351\002nie)g(sur)1151 5524 y([)1177 5523
y(1;)8 b(4)1285 5524 y(])1332 5523 y(par)28 b FC(f)19
b FF(\()r FC(x)5 b FF(\))18 b FB(\306)h FC(x)e FB(\305)1846
5467 y FF(4)p 1843 5504 47 5 v 1845 5580 a FC(x)1911
5523 y FB(\241)11 b FF(3.)22 b(On)e(note)i FA(C)34 b
FF(sa)21 b(courbe)f(r)o(epr\351sentative)o(,)28 b FC(A)s
FF(,)21 b FC(B)6 b FF(,)19 b FC(C)30 b FF(les)21 b(points)h(de)e
FA(C)-246 5646 y FF(d)n('abscisses)f(r)o(espectives)f(1,)g(2,)g(4)9
b(;)18 b(et)g FC(T)933 5658 y Fr(A)976 5646 y FF(,)f
FC(T)1061 5658 y Fr(B)1108 5646 y FF(,)g FC(T)1191 5658
y Fr(C)1258 5646 y FF(les)h(tangentes)h(\340)e FA(C)31
b FF(en)18 b(ces)g(points)o(.)p 0 TeXcolorgray 1930 5895
a(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163 a FF(1.)p
0 TeXcolorgray 43 w(P)n(our)17 b(d\351r)q(iver)-5 b(,)17
b(le)h(plus)h(simple)g(est)f(de)f(r\351\351cr)q(ir)o(e)24
b FC(f)19 b FF(\()r FC(x)5 b FF(\))17 b(sous)h(la)g(for)q(me)1725
36 y FC(f)h FF(\()r FC(x)5 b FF(\))14 b FB(\306)i FC(x)f
FB(\305)10 b FF(4)g FB(\243)2201 -20 y FF(1)p 2198 17
47 5 v 2200 93 a FC(x)2265 36 y FB(\241)g FF(3.)-38 224
y(On)17 b(obtient)h(alors)o(,)g(pour)g(tout)i FC(x)g
FB(2)1021 225 y FF([)1047 224 y(1;)8 b(4)1155 225 y(])1213
224 y(:)1648 427 y FC(f)1691 393 y Fx(0)1712 427 y FF(\()r
FC(x)d FF(\))14 b FB(\306)h FF(1)10 b FB(\305)g FF(4)g
FB(\243)2126 317 y Ft(\265)2161 427 y FB(\241)2247 371
y FF(1)p 2226 408 82 5 v 2228 484 a FC(x)2272 460 y Fz(2)2318
317 y Ft(\266)2362 427 y FB(\241)g FF(0)1826 638 y FB(\306)15
b FF(1)10 b FB(\241)2042 582 y FF(4)p 2021 619 V 2023
695 a FC(x)2067 671 y Fz(2)1826 854 y FB(\306)1908 798
y FC(x)1952 768 y Fz(2)p 1906 835 V 1908 911 a FC(x)1952
887 y Fz(2)2007 854 y FB(\241)2103 798 y FF(4)p 2082
835 V 2084 911 a FC(x)2128 887 y Fz(2)1826 1070 y FB(\306)1908
1014 y FC(x)1952 984 y Fz(2)1997 1014 y FB(\241)g FF(4)p
1906 1051 198 5 v 1965 1127 a FC(x)2009 1103 y Fz(2)-246
1192 y
SDict begin H.S end
 -246 1192 a -246 1192 a
SDict begin 12 H.A end
 -246 1192 a -246 1192
a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -246 1192 a 0 TeXcolorgray -141 1281 a FF(2.)p 0 TeXcolorgray
0 TeXcolorgray 88 w(\225)p 0 TeXcolorgray 42 w(Les)18
b(r)o(acines)g(de)h FC(x)627 1251 y Fz(2)673 1281 y FB(\241)10
b FF(4)17 b(sont)h(\351videntes)i(:)d(ce)g(sont)j FC(x)1654
1293 y Fz(1)1704 1281 y FB(\306)14 b(\241)p FF(2)k(et)i
FC(x)2012 1293 y Fz(2)2061 1281 y FB(\306)15 b FF(2.)i(S)o(eule)i(la)f
(deuxi\350me)h(est)f(dans)f(l)o('inter)q(valle)3532 1282
y([)3557 1281 y(1;)8 b(4)3665 1282 y(])3700 1281 y(.)p
0 TeXcolorgray 7 1381 a(\225)p 0 TeXcolorgray 44 w FC(x)126
1350 y Fz(2)178 1381 y FF(est)18 b(str)q(ictement)h(positif)g(pour)f
(tout)i FC(x)g FB(2)1410 1382 y FF([)1435 1381 y(1;)8
b(4)1543 1382 y(])1578 1381 y(.)-38 1492 y(On)17 b(obtient)h(donc)f(le)
h(tableau)g(:)p 0 TeXcolorgray 0 TeXcolorgray 137 1641
a

 137 1641 a 137 1641 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -13.56602 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a 167 w FC(x)137
1641 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -38.11853 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a 90 w FC(x)271 1611 y Fz(2)319
1641 y FB(\241)13 b FF(4)137 1641 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -60.79727 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641
a 150 w FC(x)331 1611 y Fz(2)137 1641 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -82.0266 ] concat

 pgfs


 137 1641 a
 0 setgray
 137
1641 a 107 w FC(f)286 1611 y Fx(0)316 1642 y FF(\()345
1641 y FC(x)389 1642 y FF(\))137 1641 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -115.69254 ] concat

 pgfs


 137 1641 a
 0 setgray
 137
1641 a 117 w FC(f)305 1642 y FF(\()334 1641 y FC(x)378
1642 y FF(\))137 1641 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -22.6787 moveto

 204.10854 -22.6787 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -45.35742 moveto

 204.10854 -45.35742 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -68.03616 moveto

 204.10854 -68.03616 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -90.71487 moveto

 204.10854 -90.71487 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -136.07234 moveto

 204.10854 -136.07234 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -136.07234 lineto

 204.10854 -136.07234 lineto

 204.10854 0.0 lineto

 closepath

 204.10854 -136.07234 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -136.07234 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 54.26411 -14.40787 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a FF(1)137
1641 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.29675 -14.40787 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a FF(2)137 1641 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 190.32938 -14.40787 ] concat

 pgfs


 137 1641
a
 0 setgray
 137 1641 a FF(4)137 1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -35.44627 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a FB(\241)137
1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -22.6787 moveto

 124.73297 -45.35742 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -37.06345 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a FF(0)137 1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -36.57706 ] concat

 pgfs


 137 1641
a
 0 setgray
 137 1641 a FB(\305)137 1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -59.2582 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a
FB(\305)137 1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -59.2582 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a FB(\305)137
1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -80.80852 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a FB(\241)137 1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -68.03616 moveto

 124.73297 -90.71487 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -82.4233 ] concat

 pgfs


 137 1641
a
 0 setgray
 137 1641 a FF(0)137 1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -81.9393 ] concat

 pgfs


 137 1641 a
 0 setgray
 137 1641 a FB(\305)137
1641 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 52.27333 -104.82213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 54.26588 -102.82957 ] concat

 pgfs


 137 1641 a
 /pgfsc{}def/pgffc{}def
 137 1641 a 137 1641 a
 0 setgray
 137 1641 a FF(2)137
1641 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 52.27333 -104.82213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 54.26588 -102.82957 ] concat

 pgfs


 137 1641 a
 /pgfsc{}def/pgffc{}def
 137 1641 a 137 1641 a
 0 setgray
 137 1641 a FF(2)137
1641 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 120.30951 -132.08723 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 122.30206 -130.09468 ] concat

 pgfs


 137 1641 a
 /pgfsc{}def/pgffc{}def
 137 1641 a 137 1641 a
 0 setgray
 137 1641 a FF(1)137
1641 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 120.30951 -132.08723 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 122.30206 -130.09468 ] concat

 pgfs


 137 1641 a
 /pgfsc{}def/pgffc{}def
 137 1641 a 137 1641 a
 0 setgray
 137 1641 a FF(1)137
1641 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 64.96558 -103.07834 moveto

 114.25438 -122.83316 lineto

 pgfstr

 save

 [0.92819 -0.37201 0.37201 0.92819 114.25436 -122.83316 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 188.3457 -104.82213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 190.33826 -102.82957 ] concat

 pgfs


 137 1641 a
 /pgfsc{}def/pgffc{}def
 137 1641
a 137 1641 a
 0 setgray
 137 1641 a FF(2)137 1641 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 188.3457 -104.82213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 190.33826 -102.82957 ] concat

 pgfs


 137 1641 a
 /pgfsc{}def/pgffc{}def
 137
1641 a 137 1641 a
 0 setgray
 137 1641 a FF(2)137 1641 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 133.00534 -123.72214 moveto

 182.29416 -103.96716 lineto

 pgfstr

 save

 [0.92819 0.37201 -0.37201 0.92819 182.29414 -103.96716 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore

0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 2050 2794 9 1155 v 0 TeXcolorgray
2095 1725 a FF(Le)18 b(signe)f(de)i FC(x)2541 1695 y
Fz(2)2585 1725 y FB(\241)9 b FF(4)18 b(sur)2833 1726
y(])2858 1725 y FB(\2411)p FF(;)8 b FB(\3051)3152 1726
y FF([)3194 1725 y(est)18 b(de)e(la)h(for)q(me)46 b FB(\305)17
b Fv(\036)28 b FB(\241)f Fv(\036)17 b FB(\305)p 3714
1643 432 4 v 3714 1767 4 127 v 4142 1767 V 3714 1769
432 4 v 2095 1834 a FF(M)o(ais)e(comme)h(on)f(tr)o(availle)g(sur)g(l)o
('inter)q(valle)3456 1835 y([)3481 1834 y(1;)8 b(4)3589
1835 y(])3624 1834 y(,)15 b(il)g(ne)g(r)o(este)f(plus)2095
1945 y(que)k(la)g(par)q(tie)f(droite)45 b FB(\241)18
b Fv(\036)f FB(\305)p 2767 1863 262 4 v 2767 1987 4 127
v 3025 1987 V 2767 1989 262 4 v 2095 2119 a FF(On)g(calcule)i(les)f
(valeurs)g(aux)f(extr\351mit\351s)j(des)d(\003\350ches)h(:)p
0 TeXcolorgray 2140 2233 a(\225)p 0 TeXcolorgray 50 w
FC(f)h FF(\(1\))14 b FB(\306)h FF(1)10 b FB(\305)2567
2200 y Fz(4)p 2567 2213 31 5 v 2567 2262 a(1)2618 2233
y FB(\241)g FF(3)15 b FB(\306)f FF(2)k(;)p 0 TeXcolorgray
2140 2342 a(\225)p 0 TeXcolorgray 50 w FC(f)h FF(\(2\))14
b FB(\306)h FF(2)10 b FB(\305)2567 2309 y Fz(4)p 2567
2322 V 2567 2370 a(2)2618 2342 y FB(\241)g FF(3)15 b
FB(\306)f FF(1)k(;)p 0 TeXcolorgray 2140 2450 a(\225)p
0 TeXcolorgray 50 w FC(f)h FF(\(4\))14 b FB(\306)h FF(4)10
b FB(\305)2567 2417 y Fz(4)p 2567 2430 V 2567 2479 a(4)2618
2450 y FB(\241)g FF(3)15 b FB(\306)f FF(2.)-246 2865
y
SDict begin H.S end
 -246 2865 a -246 2865 a
SDict begin 12 H.A end
 -246 2865 a -246 2865 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -246
2865 a 0 TeXcolorgray -141 2976 a FF(3.)p 0 TeXcolorgray
43 w(On)j(r)o(appelle)i(que)f(la)g(tangente)g(\340)f(la)g(courbe)h(en)f
(un)h(point)g(d)n('abscisse)j FC(a)g FF(a)c(pour)g(\351quation)1669
3140 y FC(y)k FB(\306)h FC(f)1846 3106 y Fx(0)1868 3140
y FF(\()r FC(a)t FF(\)\()r FC(x)15 b FB(\241)d FC(a)t
FF(\))e FB(\305)18 b FC(f)g FF(\()r FC(a)t FF(\).)-38
3316 y(A)o(ppliquons)h(cette)f(for)q(mule)g(avec)h FC(a)f
FB(\306)d FF(1)i(\226)h(puisque)h(le)f(point)24 b FC(A)c
FF(a)d(pour)h(abscisse)g(1)32 b(:)-30 3482 y FC(f)19
b FF(\(1\))14 b FB(\306)g FF(2)k(\(d\351j\340)f(calcul\351\))h(et)26
b FC(f)860 3452 y Fx(0)881 3482 y FF(\(1\))14 b FB(\306)1068
3449 y Fz(1)1099 3426 y Fq(2)1127 3449 y Fx(\241)p Fz(4)p
1068 3462 132 5 v 1104 3516 a(1)1135 3498 y Fq(2)1224
3482 y FB(\306)1303 3449 y Fx(\241)p Fz(3)p 1303 3462
73 5 v 1324 3510 a(1)1400 3482 y FB(\306)g(\241)p FF(3,)k(donc)f(l)o
('\351quation)j(de)d FC(T)2318 3494 y Fr(A)2378 3482
y FF(est)1692 3658 y FC(y)k FB(\306)h FC(f)1869 3624
y Fx(0)1890 3658 y FF(\(1\)\()r FC(x)15 b FB(\241)10
b FF(1\))g FB(\305)18 b FC(f)i FF(\(1\))1692 3783 y FC(y)h
FB(\306)14 b(\241)p FF(3\()r FC(x)h FB(\241)10 b FF(1\))g
FB(\305)g FF(2)1692 3908 y FC(y)21 b FB(\306)14 b(\241)p
FF(3)r FC(x)h FB(\305)10 b FF(3)g FB(\305)g FF(2)1692
4032 y FC(y)21 b FB(\306)14 b(\241)p FF(3)r FC(x)h FB(\305)10
b FF(5.)-38 4208 y(Le)17 b(point)24 b FC(A)c FF(a)c(pour)i(coor)o
(donn\351es)f(\(1;)8 b(2\),)17 b(puisque)27 b FC(f)19
b FF(\(1\))14 b FB(\306)g FF(2)k(;)f(la)g(tangente)g
FC(T)2314 4220 y Fr(A)2374 4208 y FF(passe)h(donc)f(par)g(ce)f(point.)j
(P)n(our)d(la)h(tr)o(acer)-5 b(,)17 b(il)h(faut)f(placer)-38
4307 y(un)h(deuxi\350me)g(point)h(\(c)n('est)f(une)g(droite\))9
b(;)16 b(ce)h(que)h(l)o('on)h(peut)f(fair)o(e)f(de)g(trois)h(fa\347ons)
g(diff\351r)o(entes)g(:)-246 4359 y
SDict begin H.S end
 -246 4359 a -246
4359 a
SDict begin 12 H.A end
 -246 4359 a -246 4359 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -246 4359 a 0 TeXcolorgray
-38 4453 a FF(\(a\))p 0 TeXcolorgray 41 w(L)-10 b('or)o(donn\351e)18
b(\340)f(l)o('or)q(igine)h(est)p 1 0 0 TeXcolorrgb 18
w(5)p 0 TeXcolorgray 17 w(\(puisque)h FC(T)1413 4465
y Fr(A)1471 4453 y FF(:)f FC(y)j FB(\306)15 b(\241)p
FF(3)r FC(x)p 1 0 0 TeXcolorrgb 5 w FB(\305)p FF(5)p
0 TeXcolorgray 1 w(\),)i(donc)g FC(T)2181 4465 y Fr(A)2242
4453 y FF(passe)h(par)f(le)h(point)h(de)e(coor)o(donn\351es)g(\(0;)8
b(5\).)-246 4483 y
SDict begin H.S end
 -246 4483 a -246 4483 a
SDict begin 12 H.A end
 -246 4483
a -246 4483 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -246 4483 a 0 TeXcolorgray -44 4575 a FF(\(b\))p
0 TeXcolorgray 41 w(Le)16 b(coef\002cient)h(dir)o(ecteur)f(de)g
FC(T)1060 4587 y Fr(A)1120 4575 y FF(est)p 0 0 1 TeXcolorrgb
17 w FB(\241)p FF(3)p 0 TeXcolorgray 16 w(\(puisque)i
FC(T)1720 4587 y Fr(A)1778 4575 y FF(:)g FC(y)j FB(\306)p
0 0 1 TeXcolorrgb 15 w(\241)p FF(3)p 0 TeXcolorgray 2
w FC(x)12 b FB(\305)c FF(5\),)17 b(donc)f(en)h(par)q(tant)f(de)22
b FC(A)s FF(,)16 b(il)h(suf\002t)g(d)n('avancer)f(de)g(1)h(carr)o(eau)e
(en)97 4675 y(abscisse)j(et)f(de)g(descendr)o(e)g(de)g(3)h(carr)o(eaux)
f(en)g(or)o(donn\351e)h(\226)f FC(T)1995 4687 y Fr(A)2056
4675 y FF(passe)h(donc)f(par)g(le)h(point)g(de)f(coor)o(donn\351es)h
(\(2;)8 b FB(\241)p FF(1\).)-246 4703 y
SDict begin H.S end
 -246 4703 a -246
4703 a
SDict begin 12 H.A end
 -246 4703 a -246 4703 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -246 4703 a 0 TeXcolorgray
-36 4797 a FF(\(c\))p 0 TeXcolorgray 41 w(On)26 b(calcule)i(un)f
(deuxi\350me)h(point)g(avec)f(la)g(for)q(mule)g(:)g(par)g(exemple)o(,)i
(si)g FC(x)g FB(\306)23 b FF(2,)31 b FC(y)g FB(\306)23
b(\241)p FF(3)15 b FB(\243)e FF(2)i FB(\305)f FF(5)24
b FB(\306)f(\241)p FF(1.)k(On)g(obtient)h(le)f(point)h(de)97
4897 y(coor)o(donn\351es)17 b(\(2;)8 b FB(\241)p FF(1\))18
b(\(le)g(m\352me)g(qu)n('avec)g(la)g(m\351thode)g(\(b\)\))e(et)i(on)f
(tr)o(ace)h(la)f(tangente)o(.)-246 4950 y
SDict begin H.S end
 -246 4950 a
-246 4950 a
SDict begin 12 H.A end
 -246 4950 a -246 4950 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -246 4950 a 0 TeXcolorgray
-141 5056 a FF(4.)p 0 TeXcolorgray 0 TeXcolorgray 88
w(\225)p 0 TeXcolorgray 50 w FC(f)i FF(\(2\))14 b FB(\306)g
FF(1)k(et)25 b FC(f)499 5025 y Fx(0)521 5056 y FF(\(2\))14
b FB(\306)708 5023 y Fz(2)739 5000 y Fq(2)767 5023 y
Fx(\241)p Fz(4)p 708 5036 132 5 v 744 5090 a(2)775 5071
y Fq(2)864 5056 y FB(\306)943 5023 y Fz(0)p 943 5036
31 5 v 943 5084 a(4)998 5056 y FB(\306)g FF(0,)k(donc)f(l)o
('\351quation)j(de)d FC(T)1857 5068 y Fr(B)1921 5056
y FF(est)1751 5232 y FC(y)k FB(\306)h FC(f)1928 5198
y Fx(0)1949 5232 y FF(\(2\)\()r FC(x)15 b FB(\241)10
b FF(2\))g FB(\305)18 b FC(f)i FF(\(2\))1751 5357 y FC(y)h
FB(\306)14 b FF(0\()r FC(x)h FB(\241)10 b FF(1\))g FB(\305)g
FF(1)1751 5481 y FC(y)21 b FB(\306)14 b FF(1.)80 5646
y(Le)k(coef\002cient)g(dir)o(ecteur)f(\351tant)h(\351gal)f(\340)g(0,)h
(la)g(tangente)g FC(T)1831 5658 y Fr(B)1895 5646 y FF(est)g(hor)q
(izontale)o(.)p 0 TeXcolorgray 1930 5895 a(5)p 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 7 -159 a FF(\225)p 0 TeXcolorgray 50 w
FC(f)19 b FF(\(4\))14 b FB(\306)g FF(2)k(et)25 b FC(f)499
-190 y Fx(0)521 -159 y FF(\(4\))14 b FB(\306)708 -192
y Fz(4)739 -215 y Fq(2)767 -192 y Fx(\241)p Fz(4)p 708
-179 132 5 v 744 -125 a(4)775 -144 y Fq(2)864 -159 y
FB(\306)943 -192 y Fz(12)p 943 -179 62 5 v 943 -131 a(16)1029
-159 y FB(\306)g FF(0,)8 b(75,)19 b(donc)e(l)o('\351quation)j(de)d
FC(T)1995 -147 y Fr(C)2062 -159 y FF(est)1751 34 y FC(y)k
FB(\306)h FC(f)1928 -1 y Fx(0)1949 34 y FF(\(4\)\()r
FC(x)15 b FB(\241)10 b FF(4\))g FB(\305)18 b FC(f)i FF(\(4\))1751
158 y FC(y)h FB(\306)14 b FF(0,)8 b(75\()r FC(x)15 b
FB(\241)10 b FF(4\))g FB(\305)g FF(2)1751 283 y FC(y)21
b FB(\306)14 b FF(0,)8 b(75)r FC(x)15 b FB(\241)10 b
FF(3)g FB(\305)g FF(2)1751 407 y FC(y)21 b FB(\306)14
b FF(0,)8 b(75)r FC(x)15 b FB(\241)10 b FF(1.)80 588
y(On)j(tr)o(ace)g(la)g(tangente)g FC(T)820 600 y Fr(C)884
588 y FF(par)g(la)g(m\352me)g(m\351thode)g(que)g FC(T)1836
600 y Fr(A)1897 588 y FF(\(le)g(plus)g(simple)g(et)g(le)g(plus)g(p)q
(r\351cis)g(es)q(t)g(d)n('ut)q(ilis)q(er)g(l)o(')q(or)o(donn\351e)g
(\340)g(l)o(')q(or)q(igine\).)-246 621 y
SDict begin H.S end
 -246 621 a -246
621 a
SDict begin 12 H.A end
 -246 621 a -246 621 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -246 621 a 0 TeXcolorgray
-141 716 a FF(5.)p 0 TeXcolorgray 43 w(On)20 b(place)g(les)h(points)27
b FC(A)s FF(,)20 b FC(B)6 b FF(,)18 b FC(C)9 b FF(,)20
b(on)g(tr)o(ace)g(les)h(trois)f(tangentes)h(et)f(on)g(constr)q(uit)h
(la)f(courbe)f(de)h(la)g(fonction)29 b FC(f)39 b FF(\(en)20
b(bleu\))g(en)g(s)m('appuyant)-38 816 y(sur)d(ces)h(tangentes)o(.)p
0 TeXcolorgray 0 TeXcolorgray 1187 2667 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 208.84344 a add def
/d 0.0 a add neg def /h 212.82681 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1187 2667 a
1499 2223 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 171.28563 0.0 -37.55782 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -28.45274 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 159.33553 0.0 -53.49129   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 171.28563  0 -37.55782  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -37.55782
 171.28563  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-53.49129  def /maxTickline 159.33553  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 159.33553
0.0 -53.49129   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 171.28563
0.0 -37.55782 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 159.33553  0 -53.49129  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -53.49129
 159.33553  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-37.55782  def /maxTickline 171.28563  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 159.33553
0.0 -53.49129   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 171.28563
0.0 -37.55782 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1484 2320 a Fz(0)204 b(1)i(2)f(3)g(4)g(5)-1469
b Fx(\241)p Fz(1)1410 2242 y(0)1368 2478 y Fx(\241)p
Fz(1)1410 2006 y(1)1410 1770 y(2)1410 1533 y(3)1410 1297
y(4)1410 1061 y(5)1499 2223 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0.49803 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.90549 -28.45274 0.0
142.26372   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0.49803 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 1499 2223 a
tx@Dict begin { 59.75093 -18.20973 } PutCoor PutBegin  end
 1499 2223 a 1 0.49803 0 TeXcolorrgb
53 x FC(T)1551 2288 y Fr(A)p 0 TeXcolorgray 1499 2223
a
tx@Dict begin  PutEnd  end
 1499 2223 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.81097 28.45274 0.0
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1499 2223 a
tx@Dict begin { 92.75578 20.48601 } PutCoor PutBegin  end
 1499 2223 a 0 1 0 TeXcolorrgb 53 x FC(T)1547
2288 y Fr(B)p 0 TeXcolorgray 1499 2223 a
tx@Dict begin  PutEnd  end
 1499 2223 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0 0  setcmykcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x 0. def /x1 6.02 def
/dx x1 x sub 49 div def /F@pstplot ((-4.--3.*x)/4.)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 1 0
0  setcmykcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 1499 2223 a
tx@Dict begin { 13.65718 -23.90019 } PutCoor PutBegin  end
 1499
2223 a 0 1 0 0 TeXcolorcmyk 53 x FC(T)1545 2288 y Fr(C)p
0 TeXcolorgray 1499 2223 a
tx@Dict begin  PutEnd  end
 1499 2223 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x 1 def /x1 4 def /dx
x1 x sub 199 div def /F@pstplot (x+4.0/x-3.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1499 2223 a
tx@Dict begin { 30.729 62.59595 } PutCoor PutBegin  end
 1499 2223 a 1 0.49803 0
TeXcolorrgb 6 w FC(A)p 0 TeXcolorgray 1499 2223 a
tx@Dict begin  PutEnd  end
 1499
2223 a 1499 2223 a
tx@Dict begin { 59.18175 34.1432 } PutCoor PutBegin  end
 1499 2223 a 0 1 0 TeXcolorrgb FC(B)p
0 TeXcolorgray 1499 2223 a
tx@Dict begin  PutEnd  end
 1499 2223 a 1499 2223 a
tx@Dict begin { 106.4134 64.87221 } PutCoor PutBegin  end
 1499
2223 a 0 1 0 0 TeXcolorcmyk 1497 2222 a FC(C)p 0 TeXcolorgray
1499 2223 a
tx@Dict begin  PutEnd  end
 1499 2223 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0.49803 0  setrgbcolor  [ 28.45274
56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 1 0  setrgbcolor  [ 56.90549
28.45274   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 1 0 0  setcmykcolor  [ 113.81097
56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 2921 2667 a
currentpoint initclip moveto
 2921 2667 a -246
2733 a
SDict begin H.S end
 -246 2733 a -246 2733 a
SDict begin 12 H.A end
 -246 2733 a -246 2733
a
SDict begin [/View [/XYZ H.V]/Dest (exo.6) cvn /DEST pdfmark end
 -246 2733 a 0 TeXcolorgray 132 x FG(Ex)o(er)o(cice)14
b(6)p 0 TeXcolorgray 42 w FF(La)j(fonction)i FC(i)26
b FF(est)18 b(d\351\002nie)g(sur)f Fy(R)g FF(par)1723
3080 y FC(i)10 b FF(\()r FC(x)5 b FF(\))13 b FB(\306)2005
3024 y FF(2)r FC(x)p 1950 3061 198 5 v 1952 3137 a(x)1996
3113 y Fz(2)2041 3137 y FB(\305)d FF(1)2157 3080 y(.)-246
3172 y
SDict begin H.S end
 -246 3172 a -246 3172 a
SDict begin 12 H.A end
 -246 3172 a -246 3172
a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -246 3172 a 0 TeXcolorgray -141 3251 a FF(1.)p 0 TeXcolorgray
43 w(On)17 b(utilise)i(la)f(for)q(mule)g(pour)g(la)f(d\351r)q(iv\351e)h
(d)n('un)g(quotient)h(avec)810 3432 y FC(u)t FF(\()r
FC(x)5 b FF(\))15 b FB(\306)f FF(2)r FC(x)854 b FF(,)d
FC(v)7 b FF(\()r FC(x)e FF(\))14 b FB(\306)i FC(x)3126
3398 y Fz(2)3171 3432 y FB(\305)10 b FF(1,)810 3557 y
FC(u)861 3522 y Fx(0)883 3557 y FF(\()r FC(x)5 b FF(\))14
b FB(\306)g FF(2)874 b(,)851 b FC(v)2897 3522 y Fx(0)2918
3557 y FF(\()r FC(x)5 b FF(\))14 b FB(\306)g FF(2)r FC(x)5
b FF(.)-38 3876 y(On)17 b(obtient,)i(pour)e(tout)j FC(x)g
FB(2)14 b Fy(R)31 b FF(:)1492 4102 y FC(i)1526 4067 y
Fx(0)1546 4102 y FF(\()r FC(x)5 b FF(\))14 b FB(\306)1740
4045 y FC(u)1791 4015 y Fx(0)1812 4045 y FF(\()r FC(x)5
b FF(\))10 b FB(\243)i FC(v)7 b FF(\()r FC(x)e FF(\))10
b FB(\241)g FC(u)t FF(\()r FC(x)5 b FF(\))10 b FB(\243)i
FC(v)2484 4015 y Fx(0)2506 4045 y FF(\()r FC(x)5 b FF(\))p
1740 4082 867 5 v 2055 4158 a(\()r FC(v)i FF(\()r FC(x)e
FF(\)\))2257 4134 y Fz(2)1660 4332 y FB(\306)1740 4270
y FF(2)10 b FB(\243)1855 4206 y Ft(\241)1887 4270 y FC(x)1931
4240 y Fz(2)1977 4270 y FB(\305)g FF(1)2082 4206 y Ft(\242)2122
4270 y FB(\241)g FF(2)r FC(x)15 b FB(\243)10 b FF(2)r
FC(x)p 1740 4312 697 5 v 1942 4343 a Ft(\241)1974 4408
y FC(x)2018 4384 y Fz(2)2063 4408 y FB(\305)g FF(1)2168
4343 y Ft(\242)2199 4365 y Fz(2)1660 4590 y FB(\306)1740
4534 y FF(2)r FC(x)1826 4504 y Fz(2)1872 4534 y FB(\305)g
FF(2)g FB(\241)g FF(4)r FC(x)2138 4504 y Fz(2)p 1740
4571 435 5 v 1811 4602 a Ft(\241)1843 4666 y FC(x)1887
4642 y Fz(2)1932 4666 y FB(\305)g FF(1)2037 4602 y Ft(\242)2068
4623 y Fz(2)1660 4849 y FB(\306)1740 4793 y(\241)p FF(2)r
FC(x)1881 4763 y Fz(2)1927 4793 y FB(\305)g FF(2)p 1740
4830 293 5 v 1741 4860 a Ft(\241)1772 4925 y FC(x)1816
4901 y Fz(2)1861 4925 y FB(\305)g FF(1)1966 4860 y Ft(\242)1997
4882 y Fz(2)2042 4849 y FF(.)-246 5030 y
SDict begin H.S end
 -246 5030 a
-246 5030 a
SDict begin 12 H.A end
 -246 5030 a -246 5030 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -246 5030 a 0 TeXcolorgray
-141 5122 a FF(2.)p 0 TeXcolorgray 0 TeXcolorgray 88
w(\225)p 0 TeXcolorgray 42 w(Les)18 b(r)o(acines)g(de)f
FB(\241)p FF(2)r FC(x)722 5091 y Fz(2)768 5122 y FB(\305)10
b FF(2)18 b(sont)g(assez)f(\351videntes)i(:)1082 5302
y FB(\241)p FF(2)r FC(x)1223 5268 y Fz(2)1269 5302 y
FB(\305)10 b FF(2)15 b FB(\306)f FF(0)29 b FB(\()-12
b(\))29 b FF(2)14 b FB(\306)h FF(2)r FC(x)1906 5268 y
Fz(2)1970 5302 y FB(\()-12 b(\))29 b FF(1)15 b FB(\306)h
FC(x)2309 5268 y Fz(2)2372 5302 y FB(\()-12 b(\))2541
5303 y FF(\()2570 5302 y FC(x)20 b FB(\306)14 b FF(1)k(ou)h
FC(x)h FB(\306)14 b(\241)p FF(1)3088 5303 y(\))3123 5302
y(.)p 0 TeXcolorgray 7 5483 a(\225)p 0 TeXcolorgray 80
5419 a Ft(\241)111 5483 y FC(x)155 5453 y Fz(2)201 5483
y FB(\305)c FF(1)306 5419 y Ft(\242)336 5438 y Fz(2)388
5483 y FF(est)18 b(str)q(ictement)h(positif)g(pour)f(tout)g(r\351el)i
FC(x)5 b FF(.)-38 5597 y(On)17 b(obtient)h(donc)f(le)h(tableau)g(:)p
0 TeXcolorgray 1930 5895 a(6)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 3 -244 a

 3 -244 a 3 -244
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -12.14816 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244 a 167 w FC(x)3 -244 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -33.86502 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244
a 41 w FB(\241)p FF(2)r FC(x)185 -274 y Fz(2)232 -244
y FB(\305)11 b FF(2)3 -244 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -53.15909 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244 a 46 -308
a Ft(\241)78 -244 y FC(x)122 -274 y Fz(2)167 -244 y FB(\305)f
FF(1)272 -308 y Ft(\242)302 -289 y Fz(2)3 -244 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -72.60608 ] concat

 pgfs


 3 -244
a
 0 setgray
 3 -244 a 107 w FC(i)144 -274 y Fx(0)173 -243 y FF(\()202
-244 y FC(x)246 -243 y FF(\))3 -244 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -101.90143 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244
a 118 w FC(i)163 -243 y FF(\()191 -244 y FC(x)235 -243
y FF(\))3 -244 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -19.84302 moveto

 238.11656 -19.84302 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -39.68607 moveto

 238.11656 -39.68607 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -59.52911 moveto

 238.11656 -59.52911 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -79.37216 moveto

 238.11656 -79.37216 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -119.05826 moveto

 238.11656 -119.05826 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -119.05826 lineto

 238.11656 -119.05826 lineto

 238.11656 0.0 lineto

 closepath

 238.11656 -119.05826 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 39.68607 0.0 moveto

 39.68607 -119.05826 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 41.63185 -11.9539 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244 a FB(\2411)3 -244 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 103.40654 -12.99 ] concat

 pgfs



3 -244 a
 0 setgray
 3 -244 a FB(\241)p FF(1)3 -244 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 166.23227 -12.99 ] concat

 pgfs


 3 -244 a
 0 setgray
 3
-244 a FF(1)3 -244 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 220.21606 -12.47694 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244 a FB(\3051)3 -244
y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 76.0774 -31.19028 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244 a FB(\241)3 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 109.13673 -19.84302 moveto

 109.13673 -39.68607 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 106.70782 -32.80869 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244
a FF(0)3 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 135.60873 -32.32106 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244 a FB(\305)3 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 168.66588 -19.84302 moveto

 168.66588 -39.68607 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 166.2381 -32.80869 ] concat

 pgfs


 3
-244 a
 0 setgray
 3 -244 a FF(0)3 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 195.14009 -31.19028 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244 a FB(\241)3
-244 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 76.0774 -52.16486 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244 a FB(\305)3 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 135.60873 -52.16486 ] concat

 pgfs


 3 -244 a
 0 setgray
 3
-244 a FB(\305)3 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 195.14009 -52.16486 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244 a FB(\305)3 -244
y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 76.0774 -70.87787 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244 a FB(\241)3 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 109.13673 -59.52911 moveto

 109.13673 -79.37216 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 106.70782 -72.49553 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244
a FF(0)3 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 135.60873 -72.00865 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244 a FB(\305)3 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 168.66588 -59.52911 moveto

 168.66588 -79.37216 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 166.2381 -72.49553 ] concat

 pgfs


 3
-244 a
 0 setgray
 3 -244 a FF(0)3 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 195.14009 -70.87787 ] concat

 pgfs


 3 -244 a
 0 setgray
 3 -244 a FB(\241)3
-244 y


 pgfr

 restore

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 47.61504 -87.34238 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 49.60759 -85.34982 ] concat

 pgfs


 3 -244 a
 /pgfsc{}def/pgffc{}def
 3 -244 a 3 -244 a
 0 setgray
 3 -244 a 3 -244 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 47.61504 -87.34238 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 49.60759 -85.34982 ] concat

 pgfs


 3
-244 a
 /pgfsc{}def/pgffc{}def
 3 -244 a 3 -244 a
 0 setgray
 3 -244 a 3 -244 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 15.44226 101.4156 -115.07315 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 103.40816 -113.0806 ] concat

 pgfs


 3 -244 a
 /pgfsc{}def/pgffc{}def
 3
-244 a 3 -244 a
 0 setgray
 3 -244 a FB(\241)p FF(1)3 -244 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 15.44226 101.4156 -115.07315 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 103.40816 -113.0806 ] concat

 pgfs


 3 -244
a
 /pgfsc{}def/pgffc{}def
 3 -244 a 3 -244 a
 0 setgray
 3 -244 a FB(\241)p FF(1)3 -244 y


 pgfr

 restore

 restore

 save

0 TeXcolorgray
 55.43437 -87.76462 moveto

 95.3754 -104.3151 lineto

 pgfstr

 save

 [0.92378 -0.38277 0.38277 0.92378 95.3754 -104.3151 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 164.24243 -93.47942 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 166.23499 -91.48686 ] concat

 pgfs


 3 -244 a
 /pgfsc{}def/pgffc{}def
 3 -244 a 3 -244
a
 0 setgray
 3 -244 a FF(1)3 -244 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 164.24243 -93.47942 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 166.23499 -91.48686 ] concat

 pgfs


 3 -244 a
 /pgfsc{}def/pgffc{}def
 3 -244 a 3 -244 a
 0 setgray
 3
-244 a FF(1)3 -244 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 120.72566 -105.8119 moveto

 158.13216 -92.24084 lineto

 pgfstr

 save

 [0.94003 0.34105 -0.34105 0.94003 158.13216 -92.24084 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 226.20248 -115.07315 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 228.19504 -113.0806 ] concat

 pgfs


 3
-244 a
 /pgfsc{}def/pgffc{}def
 3 -244 a 3 -244 a
 0 setgray
 3 -244 a 3 -244 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 226.20248 -115.07315 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 228.19504 -113.0806 ] concat

 pgfs


 3 -244 a
 /pgfsc{}def/pgffc{}def
 3
-244 a 3 -244 a
 0 setgray
 3 -244 a 3 -244 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 176.9258 -91.83998 moveto

 220.16461 -109.75517 lineto

 pgfstr

 save

 [0.92378 -0.38275 0.38275 0.92378 220.16461 -109.75516 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc



0 TeXcolorgray 2050 767 9 1013 v 0 TeXcolorgray 0 TeXcolorgray
2140 -163 a FF(\225)p 0 TeXcolorgray 42 w FC(i)g FF(\()p
FB(\241)p FF(1\))k FB(\306)2503 -198 y Fz(2)p Fx(\243)p
Fz(\()p Fx(\241)p Fz(1\))p 2489 -182 215 5 v 2489 -129
a(\()p Fx(\241)p Fz(1\))2602 -147 y Fq(2)2630 -129 y
Fx(\305)p Fz(1)2727 -163 y FB(\306)2806 -195 y Fx(\241)p
Fz(2)p 2806 -182 73 5 v 2827 -134 a(2)2903 -163 y FB(\306)g(\241)p
FF(1)k(;)p 0 TeXcolorgray 2140 -36 a(\225)p 0 TeXcolorgray
42 w FC(i)10 b FF(\(1\))k FB(\306)2438 -72 y Fz(2)p Fx(\243)p
Fz(1\))p 2434 -56 132 5 v 2434 -2 a(1)2465 -21 y Fq(2)2493
-2 y Fx(\305)p Fz(1)2590 -36 y FB(\306)2669 -69 y Fz(2)p
2669 -56 31 5 v 2669 -8 a(2)2724 -36 y FB(\306)g FF(1.)-246
849 y
SDict begin H.S end
 -246 849 a -246 849 a
SDict begin 12 H.A end
 -246 849 a -246 849 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -246
849 a -246 849 a
SDict begin H.S end
 -246 849 a -246 849 a
SDict begin 12 H.A end
 -246 849 a -246
849 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -246 849 a 0 TeXcolorgray -141 964 a FF(3.)p 0
TeXcolorgray 0 TeXcolorgray 91 w(\(a\))p 0 TeXcolorgray
41 w FC(i)c FF(\(0\))j FB(\306)379 931 y Fz(2)p Fx(\243)p
Fz(0)p 365 944 132 5 v 365 998 a(0)396 979 y Fq(2)424
998 y Fx(\305)p Fz(1)521 964 y FB(\306)600 931 y Fz(0)p
600 944 31 5 v 600 992 a(1)655 964 y FB(\306)h FF(0)k(et)g
FC(i)899 934 y Fx(0)919 964 y FF(\(0\))d FB(\306)1107
931 y Fx(\241)p Fz(2)p Fx(\243)p Fz(0)1253 908 y Fq(2)1280
931 y Fx(\305)p Fz(2)p 1107 944 247 5 v 1123 1015 a FF(\()1150
1009 y Fz(0)1181 991 y Fq(2)1209 1009 y Fx(\305)p Fz(1)1282
1015 y FF(\))1308 979 y Fq(2)1377 964 y FB(\306)1456
931 y Fz(2)p 1456 944 31 5 v 1456 992 a(1)1511 964 y
FB(\306)f FF(2,)k(donc)f(l)o('\351quation)j(de)d(\()p
FC(T)12 b FF(\))17 b(est)1783 1186 y FC(y)k FB(\306)h
FC(f)1960 1151 y Fx(0)1981 1186 y FF(\(0\)\()r FC(x)15
b FB(\241)10 b FF(0\))g FB(\305)18 b FC(f)i FF(\(0\))1783
1310 y FC(y)h FB(\306)14 b FF(2)r FC(x)h FB(\305)10 b
FF(0)1783 1435 y FC(y)21 b FB(\306)14 b FF(2)r FC(x)5
b FF(.)-246 1548 y
SDict begin H.S end
 -246 1548 a -246 1548 a
SDict begin 12 H.A end
 -246 1548
a -246 1548 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -246 1548 a 0 TeXcolorgray 4 1642 a FF(\(b\))p
0 TeXcolorgray 41 w(P)n(our)16 b(\351tudier)i(les)g(positions)i(r)o
(elatives)e(de)f(\()n FC(C)9 b FF(\))k(:)19 b FC(y)i
FB(\306)1780 1610 y Fz(2)q Fr(x)p 1745 1623 137 5 v 1746
1676 a(x)1780 1658 y Fq(2)1809 1676 y Fx(\305)p Fz(1)1909
1642 y FF(et)c(\()p FC(T)12 b FF(\))i(:)19 b FC(y)i FB(\306)14
b FF(2)r FC(x)5 b FF(,)18 b(on)g(\351tudie)g FG(le)d(signe)g(de)h(la)f
(diff\351r)o(ence)h FF(:)2010 1819 y(2)r FC(x)p 1955
1856 198 5 v 1957 1932 a(x)2001 1908 y Fz(2)2047 1932
y FB(\305)10 b FF(1)2173 1875 y FB(\241)g FF(2)r FC(x)5
b FF(.)p 0 TeXcolorgray 190 2081 a(\225)p 0 TeXcolorgray
41 w(P)n(our)17 b(les)h(valeurs)g(de)i FC(x)i FF(pour)c(lesquelles)i
(cette)e(diff\351r)o(ence)g(vaut)g(0,)g(les)g(deux)f(courbes)h(se)f
(coupent)9 b(;)p 0 TeXcolorgray 190 2181 a(\225)p 0 TeXcolorgray
41 w(pour)18 b(les)g(valeurs)g(de)h FC(x)k FF(pour)18
b(lesquelles)i(cette)e(diff\351r)o(ence)g(est)g(str)q(ictement)h
(positive)o(,)f(\()n FC(C)9 b FF(\))17 b(est)h(au-dessus)h(de)e(\()p
FC(T)12 b FF(\))17 b(;)p 0 TeXcolorgray 190 2281 a(\225)p
0 TeXcolorgray 41 w(pour)h(les)g(valeurs)g(de)h FC(x)k
FF(pour)18 b(lesquelles)i(cette)e(diff\351r)o(ence)g(est)g(str)q
(ictement)h(n\351gative)o(,)f(\()n FC(C)9 b FF(\))16
b(est)i(en-dessous)h(de)e(\()p FC(T)12 b FF(\).)145 2430
y(On)17 b(commence)h(par)g(calculer)g(la)f(diff\351r)o(ence)h(:)1647
2710 y(2)r FC(x)p 1592 2747 V 1594 2823 a(x)1638 2799
y Fz(2)1683 2823 y FB(\305)10 b FF(1)1809 2766 y FB(\241)g
FF(2)r FC(x)20 b FB(\306)2110 2710 y FF(2)r FC(x)p 2055
2747 V 2057 2823 a(x)2101 2799 y Fz(2)2146 2823 y FB(\305)10
b FF(1)2272 2766 y FB(\241)2347 2705 y FF(2)r FC(x)2441
2640 y Ft(\241)2474 2705 y FC(x)2518 2674 y Fz(2)2563
2705 y FB(\305)g FF(1)2668 2640 y Ft(\242)p 2347 2747
352 5 v 2426 2823 a FC(x)2470 2799 y Fz(2)2515 2823 y
FB(\305)g FF(1)1975 2982 y FB(\306)2110 2926 y FF(2)r
FC(x)p 2055 2963 198 5 v 2057 3039 a(x)2101 3015 y Fz(2)2146
3039 y FB(\305)g FF(1)2272 2982 y FB(\241)2347 2926 y
FF(2)r FC(x)2433 2896 y Fz(3)2479 2926 y FB(\305)g FF(2)r
FC(x)p 2347 2963 285 5 v 2392 3039 a(x)2436 3015 y Fz(2)2482
3039 y FB(\305)g FF(1)1975 3198 y FB(\306)2046 3142 y
Fw(\010)2067 3132 y(\010)2055 3142 y FF(2)r FC(x)16 b
FB(\241)10 b FF(2)r FC(x)2303 3112 y Fz(3)2349 3142 y
FB(\241)r Fw(\010)2426 3132 y(\010)2414 3142 y FF(2)r
FC(x)p 2055 3179 447 5 v 2181 3255 a(x)2225 3231 y Fz(2)2271
3255 y FB(\305)g FF(1)1975 3414 y FB(\306)2065 3358 y(\241)p
FF(2)r FC(x)2206 3328 y Fz(3)p 2055 3395 198 5 v 2057
3471 a FC(x)2101 3447 y Fz(2)2146 3471 y FB(\305)g FF(1)2262
3414 y(.)p 0 TeXcolorgray 0 TeXcolorgray -50 3644 a

 -50
3644 a -50 3644 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -15.95473 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644 a 171 w Fn(x)-50
3644 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -46.0215 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644 a 116 w Fm(\241)p Fo(2)q Fn(x)179
3620 y Fl(3)-50 3644 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -74.01164 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644 a 19 3593
a Fk(\241)43 3644 y Fn(x)79 3620 y Fl(2)119 3644 y Fm(\305)e
Fo(1)203 3593 y Fk(\242)227 3607 y Fl(2)-50 3644 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -101.7207 ] concat

 pgfs


 -50
3644 a
 0 setgray
 -50 3644 a 76 3618 a Fj(\241)p Fl(2)q Fh(x)173
3597 y Fq(3)p 76 3629 125 4 v 77 3679 a Fh(x)108 3663
y Fq(2)136 3679 y Fj(\305)p Fl(1)-50 3644 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -149.01718 ] concat

 pgfs


 -50 3644
a
 0 setgray
 -50 3644 a 62 w Fo(P)n(ositions)24 3723 y(r)o(elatives)-29
3802 y(des)19 b(courbes)-50 3644 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -28.3468 moveto

 255.12128 -28.3468 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -56.69362 moveto

 255.12128 -56.69362 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -85.04042 moveto

 255.12128 -85.04042 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -113.38724 moveto

 255.12128 -113.38724 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -198.42766 moveto

 255.12128 -198.42766 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -198.42766 lineto

 255.12128 -198.42766 lineto

 255.12128 0.0 lineto

 closepath

 255.12128 -198.42766 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 56.69362 0.0 moveto

 56.69362 -198.42766 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 64.48688 -15.7993 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644
a Fm(\2411)-50 3644 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 153.96277 -16.60829 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644 a Fo(0)-50
3644 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 234.56781 -16.21774 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644 a Fm(\3051)-50 3644 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 110.74908 -44.56454 ] concat

 pgfs


 -50
3644 a
 0 setgray
 -50 3644 a Fm(\305)-50 3644 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 155.90744 -28.3468 moveto

 155.90744 -56.69362 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 153.9627 -44.9551 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644
a Fo(0)-50 3644 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 195.7895 -43.65994 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644 a Fm(\241)-50 3644
y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 110.74908 -72.91136 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644 a Fm(\305)-50 3644 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 195.7895 -72.91136 ] concat

 pgfs


 -50 3644 a
 0 setgray

-50 3644 a Fm(\305)-50 3644 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 110.74908 -101.25816 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644 a Fm(\305)-50
3644 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 155.90744 -85.04042 moveto

 155.90744 -113.38724 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 153.9627 -101.64873 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644 a Fo(0)-50 3644 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 195.7895 -100.35356 ] concat

 pgfs


 -50 3644
a
 0 setgray
 -50 3644 a Fm(\241)-50 3644 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 79.50194 -158.17696 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644 a
Fo(\()n Fn(C)7 b Fo(\))15 b(au-dessus)d(de)i(\()p Fn(T)9
b Fo(\))-50 3644 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 153.92334 -194.02599 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644 a 0 TeXcolorgray
0 TeXcolorgray 7 w Fg(t)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -50 3578 a(n)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -48 3511 a(e)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -50 3445 a(p)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -50 3378 a(u)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -49 3312 a(o)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -47 3246 a(c)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-47 3113 a(e)p 0 TeXcolorgray 0 TeXcolorgray -48 3046
a(S)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -50 3644
a


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 162.4143 -158.17696 ] concat

 pgfs


 -50 3644 a
 0 setgray
 -50 3644 a Fo(\()n Fn(C)e Fo(\))15 b(en-dessous)e(de)h(\()
p Fn(T)9 b Fo(\))-50 3644 y


 pgfr

 restore

 restore

 save

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 2141 5316
9 1674 v 0 TeXcolorgray 2187 3725 a FF(P)n(our)16 b(compl\351ter)j(le)f
(tableau)g(de)f(signe)h(:)p 0 TeXcolorgray 2232 3840
a(\225)p 0 TeXcolorgray 42 w FB(\241)p FF(2)r FC(x)2446
3809 y Fz(3)2496 3840 y FB(\306)c FF(0)j(lorsque)k FC(x)e
FB(\306)c FF(0)i(;)p 0 TeXcolorgray 2232 3939 a(\225)p
0 TeXcolorgray 42 w FB(\241)p FF(2)r FC(x)2446 3909 y
Fz(3)2499 3939 y FF(est)g FB(\252)h FF(lorsque)i FC(x)j
FF(est)18 b(str)q(ictement)g(positif)9 b(;)p 0 TeXcolorgray
2232 4039 a(\225)p 0 TeXcolorgray 42 w FB(\241)p FF(2)r
FC(x)2446 4009 y Fz(3)2499 4039 y FF(est)17 b FB(\251)h
FF(lorsque)i FC(x)j FF(est)18 b(str)q(ictement)g(n\351gatif)9
b(;)p 0 TeXcolorgray 2232 4150 a(\225)p 0 TeXcolorgray
2305 4085 a Ft(\241)2336 4150 y FC(x)2380 4119 y Fz(2)2426
4150 y FB(\305)h FF(1)2531 4085 y Ft(\242)2561 4105 y
Fz(2)2613 4150 y FF(est)18 b(str)q(ictement)h(positif)g(pour)f(tout)g
(r\351el)h FC(x)5 b FF(.)-246 5399 y
SDict begin H.S end
 -246 5399 a -246
5399 a
SDict begin 12 H.A end
 -246 5399 a -246 5399 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -246 5399 a 0 TeXcolorgray
-141 5513 a FF(4.)p 0 TeXcolorgray 0 TeXcolorgray 1930
5895 a(7)p 0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 648 959 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 338.58746 a add def
/d 0.0 a add neg def /h 145.10915 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 648 959 a 2047
378 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 170.14728 0.0 -168.44019 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -142.26372 0.0 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 75.11522 0.0 -69.99393   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 170.14728  0 -168.44019  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -168.44019
 170.14728  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-69.99393  def /maxTickline 75.11522  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.11522
0.0 -69.99393   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 170.14728
0.0 -168.44019 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 75.11522  0 -69.99393  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -69.99393
 75.11522  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-168.44019  def /maxTickline 170.14728  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.11522
0.0 -69.99393   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 170.14728
0.0 -168.44019 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2032 475 a Fz(0)205 b(1)g(2)g(3)g(4)g(5)-1469
b Fx(\241)p Fz(1)-309 b Fx(\241)p Fz(2)g Fx(\241)p Fz(3)g
Fx(\241)p Fz(4)f Fx(\241)p Fz(5)1958 397 y(0)1916 634
y Fx(\241)p Fz(1)1916 870 y Fx(\241)p Fz(2)1958 161 y(1)1958
-75 y(2)2047 378 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -5.919999999999999
def /x1 5.979999999999995 def /dx x1 x sub 199 div def /F@pstplot (2.0*x/(x^(2.0)+1.0))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -5.92 def /x1 5.98
def /dx x1 x sub 49 div def /F@pstplot ((-0.--2.*x)/1.)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 2047 378 a
tx@Dict begin { 34.71237 54.06003 } PutCoor PutBegin  end
 2047
378 a 1 0 0 TeXcolorrgb 54 x FF(\()p FC(T)12 b FF(\))p
0 TeXcolorgray 2047 378 a
tx@Dict begin  PutEnd  end
 2047 378 a 2047 378 a
tx@Dict begin { 97.8775 29.59065 } PutCoor PutBegin  end
 2047
378 a 0 0 1 TeXcolorrgb 54 x FF(\()n FC(C)d FF(\))p 0
TeXcolorgray 2047 378 a
tx@Dict begin  PutEnd  end
 2047 378 a 3459 959 a
currentpoint initclip moveto
 3459 959
a -246 1025 a
SDict begin H.S end
 -246 1025 a -246 1025 a
SDict begin 12 H.A end
 -246 1025 a -246
1025 a
SDict begin [/View [/XYZ H.V]/Dest (exo.7) cvn /DEST pdfmark end
 -246 1025 a 0 TeXcolorgray 133 x FG(Ex)o(er)o(cice)14
b(7)p 0 TeXcolorgray 42 w FF(Dans)i(cet)i(exer)o(cice)o(,)f(on)g
(utilise)i(deux)f(propr)q(i\351t\351s)g(du)f(cours)h(:)p
0 TeXcolorgray -76 1258 a(\225)p 0 TeXcolorgray 42 w(la)f(d\351r)q
(iv\351e)h(de)h FC(x)h FB(7!)14 b FF(e)641 1228 y Fr(a)t(x)t
Fx(\305)p Fr(b)811 1258 y FF(est)20 b FC(x)f FB(7!)e
FC(a)t FF(e)1167 1228 y Fr(a)t(x)t Fx(\305)p Fr(b)1337
1258 y FF(;)p 0 TeXcolorgray -76 1358 a(\225)p 0 TeXcolorgray
42 w(une)h(exponentielle)i(est)e(str)q(ictement)h(positive)o(.)-246
1648 y Ff(P)n(our)c(tout)g Fd(x)k Fc(2)12 b Fb(R)28 b
Ff(:)7 1901 y Fd(f)17 b Ff(\()q Fd(x)5 b Ff(\))13 b Fc(\306)g
Ff(e)246 1870 y Fz(0,5)q Fr(x)t Fx(\305)p Fz(1)-15 2031
y Fd(f)24 2000 y Fx(0)46 2031 y Ff(\()q Fd(x)5 b Ff(\))13
b Fc(\306)26 b Ff(0,)7 b(5)210 2074 y Fa(|{z})251 2143
y Fx(\251)342 2031 y Ff(e)377 2000 y Fz(0,5)q Fr(x)t
Fx(\305)p Fz(1)342 2064 y Fa(|)p 373 2064 51 9 v 51 w({z)p
486 2064 V 51 w(})433 2134 y Fx(\251)-239 2369 y Fd(f)-200
2342 y Fx(0)-157 2369 y Fc(\310)23 b Ff(0)i(donc)32 b
Fd(f)41 b Ff(str)q(ictement)24 b(crois-)-246 2460 y(sante)15
b(sur)g Fb(R)p Ff(.)p 0 TeXcolorgray 0 TeXcolorgray -246
3583 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 124.6229 a add def
/d 0.0 a add neg def /h 124.19635 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 -246 3583 a 276 3494 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 6 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 61.88457 0.0 -62.73833 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 21.33955 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -42.67911 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 113.52658 0.0 -10.66977   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 21.33955 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 61.88457  0 -62.73833  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -62.73833
 61.88457  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-10.66977  def /maxTickline 113.52658  def /dT 1398509 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 21.33955
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 113.52658
0.0 -10.66977   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 61.88457
0.0 -62.73833 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 113.52658  0 -10.66977  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -10.66977
 113.52658  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-62.73833  def /maxTickline 61.88457  def /dT 1398509 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 21.33955  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 113.52658
0.0 -10.66977   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 61.88457
0.0 -62.73833 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 261 3591 a Fz(0)145
b(1)i(2)-584 b Fx(\241)p Fz(1)-250 b Fx(\241)p Fz(2)187
3336 y(1)187 3159 y(2)187 2982 y(3)187 2805 y(4)276 3494
y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -2.94 def /x1 2.900000000000002
def /dx x1 x sub 199 div def /F@pstplot (EXP(0.5*x+1.0))  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 21.33955 mul F@pstplot 21.33955 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 21.33955 mul gt { moveto } { dup -1.e30 21.33955 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 21.33955 mul gt { moveto } { dup -1.e30
21.33955 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 789 3583 a
currentpoint initclip moveto
 789
3583 a 0 TeXcolorgray 827 3598 9 2033 v 0 TeXcolorgray
873 1648 a Ff(P)n(our)15 b(tout)g Fd(x)j Fc(2)13 b Fb(R)28
b Ff(:)1123 1901 y Fd(g)8 b Ff(\()q Fd(x)d Ff(\))15 b
Fc(\306)f Ff(e)1367 1870 y Fx(\241)p Fz(1,5)q Fr(x)1102
2031 y Fd(g)1144 2000 y Fx(0)1167 2031 y Ff(\()q Fd(x)5
b Ff(\))13 b Fc(\306)h(\241)p Ff(1,)7 b(5)1332 2074 y
Fa(|)p 1363 2074 13 9 v 13 w({z)p 1438 2074 V 13 w(})1385
2143 y Fx(\252)1487 2031 y Ff(e)1522 2000 y Fx(\241)p
Fz(1,5)q Fr(x)1487 2064 y Fa(|)p 1518 2064 35 9 v 35
w({z)p 1615 2064 V 35 w(})1563 2134 y Fx(\251)874 2369
y Fd(g)916 2342 y Fx(0)973 2369 y Fc(\307)35 b Ff(0)k(donc)e
Fd(g)48 b Ff(str)q(ictement)36 b(d\351-)873 2460 y(croissante)14
b(sur)h Fb(R)p Ff(.)p 0 TeXcolorgray 0 TeXcolorgray 873
3583 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 124.6229 a add def
/d 0.0 a add neg def /h 124.19635 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 873 3583 a 1394 3494 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 6 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 61.88457 0.0 -62.73833 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 21.33955 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -42.67911 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 113.52658 0.0 -10.66977   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 21.33955 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 61.88457  0 -62.73833  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -62.73833
 61.88457  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-10.66977  def /maxTickline 113.52658  def /dT 1398509 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 21.33955
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 113.52658
0.0 -10.66977   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 61.88457
0.0 -62.73833 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 113.52658  0 -10.66977  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -10.66977
 113.52658  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-62.73833  def /maxTickline 61.88457  def /dT 1398509 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 21.33955  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 113.52658
0.0 -10.66977   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 61.88457
0.0 -62.73833 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1379 3591 a Fz(0)146
b(1)g(2)-583 b Fx(\241)p Fz(1)-250 b Fx(\241)p Fz(2)1305
3336 y(1)1305 3159 y(2)1305 2982 y(3)1305 2805 y(4)1394
3494 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -2.94 def /x1 2.900000000000002
def /dx x1 x sub 199 div def /F@pstplot (EXP(-1.5*x+0.0))  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 21.33955 mul F@pstplot 21.33955 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 21.33955 mul gt { moveto } { dup -1.e30 21.33955 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 21.33955 mul gt { moveto } { dup -1.e30
21.33955 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 1908 3583
a
currentpoint initclip moveto
 1908 3583 a 0 TeXcolorgray 1946 3598 9 2033 v 0 TeXcolorgray
1992 1648 a Ff(P)n(our)14 b(tout)h Fd(x)k Fc(2)12 b Fb(R)28
b Ff(:)2260 1903 y Fd(h)s Ff(\()q Fd(x)5 b Ff(\))14 b
Fc(\306)g Ff(e)2506 1872 y Fz(2)q Fr(x)t Fx(\241)p Fz(2)2239
2033 y Fd(h)2284 2003 y Fx(0)2306 2033 y Ff(\()q Fd(x)5
b Ff(\))13 b Fc(\306)57 b Ff(2)2471 2067 y Fa(|{z})2511
2136 y Fx(\251)2602 2033 y Ff(e)2637 2003 y Fz(2)q Fr(x)t
Fx(\241)p Fz(2)2602 2067 y Fa(|)p 2633 2067 28 9 v 28
w({z)p 2723 2067 V 28 w(})2670 2136 y Fx(\251)1992 2366
y Fd(h)2037 2339 y Fx(0)2080 2366 y Fc(\310)23 b Ff(0)i(donc)g
Fd(h)j Ff(str)q(ictement)c(crois-)1992 2457 y(sante)14
b(sur)h Fb(R)p Ff(.)p 0 TeXcolorgray 0 TeXcolorgray 1992
3583 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 124.6229 a add def
/d 0.0 a add neg def /h 124.19635 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1992 3583 a 2513 3494 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 6 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 61.88457 0.0 -62.73833 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 21.33955 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -42.67911 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 113.52658 0.0 -10.66977   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 21.33955 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 61.88457  0 -62.73833  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -62.73833
 61.88457  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-10.66977  def /maxTickline 113.52658  def /dT 1398509 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 21.33955
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 113.52658
0.0 -10.66977   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 61.88457
0.0 -62.73833 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 113.52658  0 -10.66977  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -10.66977
 113.52658  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-62.73833  def /maxTickline 61.88457  def /dT 1398509 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 21.33955  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 113.52658
0.0 -10.66977   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 61.88457
0.0 -62.73833 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2498 3591 a Fz(0)146
b(1)g(2)-584 b Fx(\241)p Fz(1)-250 b Fx(\241)p Fz(2)2424
3336 y(1)2424 3159 y(2)2424 2982 y(3)2424 2805 y(4)2513
3494 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0.5 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -2.94 def /x1 2.900000000000002
def /dx x1 x sub 199 div def /F@pstplot (EXP(2*x-2.0))  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 21.33955 mul F@pstplot 21.33955 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 21.33955 mul gt { moveto } { dup -1.e30 21.33955 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 21.33955 mul gt { moveto } { dup -1.e30
21.33955 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
1 0.5 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 3027 3583
a
currentpoint initclip moveto
 3027 3583 a 0 TeXcolorgray 3064 3598 9 2033 v 0 TeXcolorgray
3110 1648 a Ff(P)n(our)15 b(tout)g Fd(x)j Fc(2)13 b Fb(R)28
b Ff(:)3366 1903 y Fd(i)8 b Ff(\()q Fd(x)d Ff(\))13 b
Fc(\306)h Ff(e)3596 1872 y Fx(\241)p Fz(1)q Fr(x)t Fx(\305)p
Fz(1)3344 2033 y Fd(i)3374 2003 y Fx(0)3396 2033 y Ff(\()q
Fd(x)5 b Ff(\))13 b Fc(\306)32 b(\241)p Ff(1)3561 2067
y Fa(|{z})3602 2136 y Fx(\252)3692 2033 y Ff(e)3727 2003
y Fx(\241)p Fz(1)q Fr(x)t Fx(\305)p Fz(1)3692 2067 y
Fa(|)p 3723 2067 49 9 v 49 w({z)p 3834 2067 V 49 w(})3781
2136 y Fx(\251)3110 2366 y Fd(i)3140 2339 y Fx(0)3176
2366 y Fc(\307)15 b Ff(0)j(donc)f Fd(i)25 b Ff(str)q(ictement)16
b(d\351crois-)3110 2457 y(sante)f(sur)g Fb(R)p Ff(.)p
0 TeXcolorgray 0 TeXcolorgray 3111 3583 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 124.6229 a add def
/d 0.0 a add neg def /h 124.19635 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3111 3583 a
3631 3494 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 6 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 61.88457 0.0 -62.73833 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 21.33955 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -42.67911 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 113.52658 0.0 -10.66977   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 21.33955 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 61.88457  0 -62.73833  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -62.73833
 61.88457  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-10.66977  def /maxTickline 113.52658  def /dT 1398509 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 21.33955
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 113.52658
0.0 -10.66977   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 61.88457
0.0 -62.73833 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 113.52658  0 -10.66977  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -10.66977
 113.52658  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-62.73833  def /maxTickline 61.88457  def /dT 1398509 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 21.33955  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 113.52658
0.0 -10.66977   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 61.88457
0.0 -62.73833 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 3616 3591 a Fz(0)146 b(1)g(2)-583
b Fx(\241)p Fz(1)-250 b Fx(\241)p Fz(2)3543 3336 y(1)3543
3159 y(2)3543 2982 y(3)3543 2805 y(4)3631 3494 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -2.94 def /x1 2.900000000000002
def /dx x1 x sub 199 div def /F@pstplot (EXP(-1*x+1.0))  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 21.33955 mul F@pstplot 21.33955 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 21.33955 mul gt { moveto } { dup -1.e30 21.33955 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 21.33955 mul gt { moveto } { dup -1.e30
21.33955 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 4145 3583 a
currentpoint initclip moveto
 4145 3583 a -246
3823 a Ff(\300)15 b(titr)o(e)g(d)n('illustr)o(ation,)g(on)f(a)i(tr)o
(ac\351)f(les)h(courbes)f(des)h(quatr)o(e)e(fonctions)o(.)g(Elles)i
(ont)e(toutes)g(une)h(allur)o(e)h(tr\350s)f(similair)o(e)o(,)h(\340)f
(deux)h(diff\351r)o(ences)f(pr\350s)h(:)p 0 TeXcolorgray
-73 3915 a(\225)p 0 TeXcolorgray 42 w(elles)g(montent)e(lorsque)i
Fd(a)h Fc(\310)c Ff(0,)j(elles)h(descendent)e(lorsque)h
Fd(a)h Fc(\307)c Ff(0)j(;)p 0 TeXcolorgray -73 4006 a(\225)p
0 TeXcolorgray 42 w(plus)f Fc(j)q Fd(a)t Fc(j)h Ff(est)f(gr)o(and,)g
(plus)g(la)h(pente)f(de)h(la)f(par)q(tie)g(inclin\351e)g(est)h(for)q
(te)o(.)-246 4089 y
SDict begin H.S end
 -246 4089 a -246 4089 a
SDict begin 12 H.A end
 -246 4089
a -246 4089 a
SDict begin [/View [/XYZ H.V]/Dest (exo.8) cvn /DEST pdfmark end
 -246 4089 a 0 TeXcolorgray 116 x FG(Ex)o(er)o(cice)e(8)p
0 TeXcolorgray 42 w FF(La)j(fonction)27 b FC(f)36 b FF(est)18
b(d\351\002nie)f(sur)h(l)o('inter)q(valle)1517 4206 y([)1542
4205 y(0;)8 b(4)1650 4206 y(])1694 4205 y(par)1615 4404
y FC(f)19 b FF(\()r FC(x)5 b FF(\))14 b FB(\306)g FF(\()p
FB(\241)p FF(2)r FC(x)h FB(\305)10 b FF(1\)e)2192 4370
y Fx(\241)q Fr(x)2273 4404 y FF(.)-246 4458 y
SDict begin H.S end
 -246 4458
a -246 4458 a
SDict begin 12 H.A end
 -246 4458 a -246 4458 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -246 4458 a 0 TeXcolorgray
-141 4554 a FF(1.)p 0 TeXcolorgray 43 w(On)17 b(utilise)i(la)f(for)q
(mule)g(pour)g(la)f(d\351r)q(iv\351e)h(d)n('un)g(produit)f(avec)768
4851 y FC(u)t FF(\()r FC(x)5 b FF(\))14 b FB(\306)g(\241)p
FF(2)r FC(x)h FB(\305)10 b FF(1)808 b(,)g FC(v)7 b FF(\()r
FC(x)e FF(\))14 b FB(\306)g FF(e)3162 4817 y Fx(\241)q
Fr(x)3243 4851 y FF(,)768 4975 y FC(u)819 4941 y Fx(0)840
4975 y FF(\()r FC(x)5 b FF(\))14 b FB(\306)h(\241)p FF(2)947
b(,)808 b FC(v)2940 4941 y Fx(0)2961 4975 y FF(\()r FC(x)5
b FF(\))14 b FB(\306)g(\241)p FF(e)3238 4941 y Fx(\241)q
Fr(x)3320 4975 y FF(.)-38 5297 y(On)j(obtient,)i(pour)e(tout)j
FC(x)g FB(2)836 5298 y FF([)862 5297 y(0;)8 b(4)970 5298
y(])1028 5297 y(:)p 0 TeXcolorgray 1930 5895 a(8)p 0
TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.9) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1285 -19 a FC(f)1328 -53 y Fx(0)1350 -19 y FF(\()r FC(x)5
b FF(\))14 b FB(\306)g FC(u)1584 -53 y Fx(0)1605 -19
y FF(\()r FC(x)5 b FF(\))10 b FB(\243)i FC(v)7 b FF(\()r
FC(x)e FF(\))10 b FB(\305)g FC(u)t FF(\()r FC(x)5 b FF(\))10
b FB(\243)i FC(v)2277 -53 y Fx(0)2299 -19 y FF(\()r FC(x)5
b FF(\))1464 105 y FB(\306)14 b(\241)p FF(2)c FB(\243)g
FF(e)1743 71 y Fx(\241)q Fr(x)1834 105 y FB(\305)1899
106 y FF(\()1926 105 y FB(\241)p FF(2)r FC(x)15 b FB(\305)10
b FF(1)2182 106 y(\))2220 105 y FB(\243)2285 41 y Ft(\241)2315
105 y FB(\241)p FF(e)2409 71 y Fx(\241)q Fr(x)2491 41
y Ft(\242)1464 230 y FB(\306)k(\241)p FF(2)c FB(\243)g
FF(e)1743 196 y Fx(\241)q Fr(x)1834 230 y FB(\305)g FF(\()p
FB(\241)p FF(2)r FC(x)5 b FF(\))10 b FB(\243)2169 166
y Ft(\241)2199 230 y FB(\241)p FF(e)2294 196 y Fx(\241)q
Fr(x)2375 166 y Ft(\242)2415 230 y FB(\305)g FF(1)g FB(\243)2595
166 y Ft(\241)2625 230 y FB(\241)p FF(e)2719 196 y Fx(\241)q
Fr(x)2801 166 y Ft(\242)1464 354 y FB(\306)k(\241)p FF(2)c
FB(\243)g FF(e)1743 320 y Fx(\241)q Fr(x)1834 354 y FB(\305)g
FF(2)r FC(x)15 b FB(\243)10 b FF(e)2101 320 y Fx(\241)q
Fr(x)2192 354 y FB(\241)g FF(1)g FB(\243)g FF(e)2412
320 y Fx(\241)q Fr(x)1464 479 y FB(\306)1533 480 y FF(\()1560
479 y FB(\241)p FF(2)g FB(\305)g FF(2)r FC(x)15 b FB(\241)10
b FF(1)1931 480 y(\))1968 479 y(e)2007 445 y Fx(\241)q
Fr(x)1464 603 y FB(\306)1533 604 y FF(\()1560 603 y(2)r
FC(x)15 b FB(\241)10 b FF(3)1761 604 y(\))1797 603 y(e)1836
569 y Fx(\241)q Fr(x)1918 603 y FF(.)-246 677 y
SDict begin H.S end
 -246
677 a -246 677 a
SDict begin 12 H.A end
 -246 677 a -246 677 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -246 677 a 0 TeXcolorgray
-141 755 a FF(2.)p 0 TeXcolorgray 43 w(On)17 b(\351tudie)h(le)g(signe)g
(de)25 b FC(f)750 724 y Fx(0)789 755 y FF(et)17 b(on)h(en)f(d\351duit)h
(les)g(var)q(iations)g(de)25 b FC(f)50 b FF(:)p 0 TeXcolorgray
7 862 a(\225)p 0 TeXcolorgray 42 w(2)r FC(x)15 b FB(\241)10
b FF(3)16 b FB(\306)e FF(0)29 b FB(\()-12 b(\))29 b FF(2)r
FC(x)20 b FB(\306)14 b FF(3)29 b FB(\()-12 b(\))31 b
FC(x)20 b FB(\306)1152 829 y Fz(3)p 1152 842 31 5 v 1152
891 a(2)1221 862 y FB(\()-12 b(\))31 b FC(x)19 b FB(\306)c
FF(1,)8 b(5)18 b(;)p 0 TeXcolorgray 7 962 a(\225)p 0
TeXcolorgray 42 w(e)119 931 y Fx(\241)q Fr(x)217 962
y FF(est)g FB(\251)g FF(pour)f(tout)h(r\351el)i FC(x)5
b FF(.)p 0 TeXcolorgray 0 TeXcolorgray 124 1090 a

 124
1090 a 124 1090 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -13.56602 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090 a 167 w FC(x)124
1090 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -37.04672 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090 a 85 w FF(2)r FC(x)18 b FB(\241)13
b FF(3)124 1090 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -60.20268 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090 a 128 w FF(e)292
1060 y Fx(\241)q Fr(x)124 1090 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -82.0266 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090
a 110 w FC(f)277 1060 y Fx(0)299 1090 y FF(\()r FC(x)5
b FF(\))124 1090 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 0.00116 -115.69254 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090 a 121 w FC(f)19
b FF(\()r FC(x)5 b FF(\))124 1090 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -22.6787 moveto

 204.10854 -22.6787 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -45.35742 moveto

 204.10854 -45.35742 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -68.03616 moveto

 204.10854 -68.03616 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -90.71487 moveto

 204.10854 -90.71487 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -136.07234 moveto

 204.10854 -136.07234 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -136.07234 lineto

 204.10854 -136.07234 lineto

 204.10854 0.0 lineto

 closepath

 204.10854 -136.07234 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 45.35742 0.0 moveto

 45.35742 -136.07234 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 54.26411 -14.38297 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090
a FF(0)124 1090 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 118.65038 -14.36803 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090 a FF(1.5)124 1090
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 190.32938 -14.40787 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090 a FF(4)124 1090 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -35.44627 ] concat

 pgfs


 124 1090 a
 0 setgray
 124
1090 a FB(\241)124 1090 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -22.6787 moveto

 124.73297 -45.35742 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -37.06345 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090 a FF(0)124
1090 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -36.57706 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090 a FB(\305)124 1090 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -59.2582 ] concat

 pgfs


 124 1090
a
 0 setgray
 124 1090 a FB(\305)124 1090 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -59.2582 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090 a
FB(\305)124 1090 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 87.42673 -80.80852 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090 a FB(\241)124
1090 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 124.73297 -68.03616 moveto

 124.73297 -90.71487 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 122.30862 -82.4233 ] concat

 pgfs


 124 1090 a
 0 setgray
 124 1090 a FF(0)124 1090 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 155.4701 -81.9393 ] concat

 pgfs


 124 1090
a
 0 setgray
 124 1090 a FB(\305)124 1090 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 52.27333 -104.82213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 54.26588 -102.82957 ] concat

 pgfs


 124 1090 a
 /pgfsc{}def/pgffc{}def
 124 1090 a
124 1090 a
 0 setgray
 124 1090 a FF(1)124 1090 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 52.27333 -104.82213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 54.26588 -102.82957 ] concat

 pgfs


 124 1090 a
 /pgfsc{}def/pgffc{}def
 124
1090 a 124 1090 a
 0 setgray
 124 1090 a FF(1)124 1090 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 12.31554 34.90273 107.2816 -132.08723 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 109.27415 -130.04488 ] concat

 pgfs


 124 1090
a
 /pgfsc{}def/pgffc{}def
 124 1090 a 124 1090 a
 0 setgray
 124 1090 a FB(\241)p FF(2e)258
1060 y Fx(\241)p Fz(1,5)124 1090 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 12.31554 34.90273 107.2816 -132.08723 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 109.27415 -130.04488 ] concat

 pgfs


 124 1090 a
 /pgfsc{}def/pgffc{}def
 124 1090
a 124 1090 a
 0 setgray
 124 1090 a FB(\241)p FF(2e)258 1060 y Fx(\241)p
Fz(1,5)124 1090 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 64.97566 -102.95012 moveto

 101.20358 -116.88971 lineto

 pgfstr

 save

 [0.93326 -0.3591 0.3591 0.93326 101.20357 -116.8897 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 12.31554 29.36024 178.08904 -107.01553 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 180.08159 -104.97318 ] concat

 pgfs


 124 1090
a
 /pgfsc{}def/pgffc{}def
 124 1090 a 124 1090 a
 0 setgray
 124 1090 a FB(\241)p FF(7e)258
1060 y Fx(\241)p Fz(4)124 1090 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 12.31554 29.36024 178.08904 -107.01553 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 180.08159 -104.97318 ] concat

 pgfs


 124 1090 a
 /pgfsc{}def/pgffc{}def
 124 1090
a 124 1090 a
 0 setgray
 124 1090 a FB(\241)p FF(7e)258 1060 y Fx(\241)p
Fz(4)124 1090 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 146.05385 -118.08884 moveto

 171.99313 -108.52132 lineto

 pgfstr

 save

 [0.93819 0.34604 -0.34604 0.93819 171.99312 -108.52132 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
2050 2243 9 1155 v 0 TeXcolorgray 0 TeXcolorgray 2140
1171 a FF(\225)p 0 TeXcolorgray 50 w FC(f)19 b FF(\(0\))14
b FB(\306)h FF(\()p FB(\241)p FF(2)10 b FB(\243)g FF(0)g
FB(\305)g FF(1\))g FB(\243)22 b FF(e)2947 1137 y Fx(\241)p
Fz(0)2896 1206 y Ft(|{z})2930 1282 y Fx(\306)p Fz(1)3049
1171 y FB(\306)14 b FF(1)c FB(\243)g FF(1)16 b FB(\306)e
FF(1)p 0 TeXcolorgray 2140 1367 a(\225)p 0 TeXcolorgray
50 w FC(f)19 b FF(\(1,)8 b(5\))15 b FB(\306)f FF(\()p
FB(\241)p FF(2)c FB(\243)g FF(1,)e(5)i FB(\305)g FF(1\))g
FB(\243)g FF(e)3074 1337 y Fx(\241)p Fz(1,5)3211 1367
y FB(\306)15 b(\241)p FF(2e)3415 1337 y Fx(\241)p Fz(1,5)3552
1367 y FB(\274)g(\241)p FF(0,)8 b(45)p 0 TeXcolorgray
2140 1467 a(\225)p 0 TeXcolorgray 50 w FC(f)19 b FF(\(4\))14
b FB(\306)h FF(\()p FB(\241)p FF(2)10 b FB(\243)g FF(4)g
FB(\305)g FF(1\))g FB(\243)g FF(e)2937 1437 y Fx(\241)p
Fz(4)3027 1467 y FB(\306)15 b(\241)p FF(7e)3231 1437
y Fx(\241)p Fz(4)3322 1467 y FB(\274)f(\241)p FF(0,)8
b(13)-246 2309 y
SDict begin H.S end
 -246 2309 a -246 2309 a
SDict begin 12 H.A end
 -246 2309 a
-246 2309 a
SDict begin [/View [/XYZ H.V]/Dest (exo.9) cvn /DEST pdfmark end
 -246 2309 a 0 TeXcolorgray 100 x FG(Ex)o(er)o(cice)14
b(9)p 0 TeXcolorgray 42 w FF(La)j(fonction)k FC(g)26
b FF(est)18 b(d\351\002nie)g(sur)f Fy(R)g FF(par)i FC(g)10
b FF(\()r FC(x)5 b FF(\))14 b FB(\306)g FF(e)1604 2379
y Fr(x)1653 2409 y FB(\241)e FC(x)j FB(\241)10 b FF(1.)-246
2543 y(P)n(our)17 b(tout)j FC(x)g FB(2)14 b Fy(R)31 b
FF(:)1521 2643 y FC(g)1569 2608 y Fx(0)1590 2643 y FF(\()r
FC(x)5 b FF(\))14 b FB(\306)g FF(e)1813 2608 y Fr(x)1862
2643 y FB(\241)c FF(1)g FB(\241)g FF(0)15 b FB(\306)f
FF(e)2207 2608 y Fr(x)2255 2643 y FB(\241)c FF(1.)-246
2879 y(On)18 b(r\351sout)g(l)o('\351quation)h(:)278 3020
y(e)319 2986 y Fr(x)367 3020 y FB(\241)10 b FF(1)15 b
FB(\306)f FF(0)29 b FB(\()-12 b(\))29 b FF(e)834 2986
y Fr(x)887 3020 y FB(\306)14 b FF(1)29 b FB(\()-12 b(\))31
b FC(x)20 b FB(\306)14 b FF(0.)-246 3161 y Fu(")p FF(On)i(a)f
(utilis\351)i(la)f(propr)q(i\351t\351)f(:)h(le)f(seul)i(nombr)o(e)e
(dont)g(l)o('exponentielle)-246 3261 y(est)j(\351gale)g(\340)f(1)h(est)
g(0.)-246 3393 y(P)n(our)d(avoir)g(les)h(signes)g(dans)g(chaque)g(case)
f(du)g(tableau,)h(on)g(r)o(emplace)-246 3493 y(par)i(des)f(valeurs)h
(de)h FC(x)37 b FF(:)p 0 TeXcolorgray -76 3593 a(\225)p
0 TeXcolorgray 42 w(pour)16 b(l)o('inter)q(valle)563
3594 y(])588 3593 y FB(\2411)p FF(;)8 b(0)789 3594 y([)823
3593 y(,)16 b(on)g(pr)o(end)g(\(par)g(exemple\))j FC(x)h
FB(\306)14 b(\241)p FF(1)-3 3692 y(et)j(on)h(calcule)g(avec)f(la)h
(calculatr)q(ice)g(:)424 3833 y FC(g)472 3799 y Fx(0)493
3833 y FF(\()p FB(\241)p FF(1\))c FB(\306)g FF(e)764
3799 y Fx(\241)p Fz(1)851 3833 y FB(\241)c FF(1)15 b
FB(\274)f(\241)p FF(0,)8 b(63)148 b FB(\252)17 b FF(;)p
0 TeXcolorgray -76 3975 a(\225)p 0 TeXcolorgray 42 w(pour)23
b(l)o('inter)q(valle)576 3976 y(])601 3975 y(0;)8 b FB(\3051)802
3976 y FF([)836 3975 y(,)23 b(on)f(pr)o(end)g(\(par)g(exemple\))k
FC(x)f FB(\306)19 b FF(1)-3 4074 y(et)e(on)h(calcule)g(avec)f(la)h
(calculatr)q(ice)g(:)498 4215 y FC(g)546 4181 y Fx(0)567
4215 y FF(\(1\))c FB(\306)g FF(e)784 4181 y Fz(1)829
4215 y FB(\241)c FF(1)k FB(\274)h FF(3,)8 b(72)158 b
FB(\251)10 b FF(.)p 0 TeXcolorgray 1946 4234 9 1439 v
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2006 2797
a

 2006 2797 a 2006 2797 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -16.40007 ] concat

 pgfs


 2006 2797 a
 0 setgray
 2006 2797 a 167
w FC(x)2006 2797 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -40.29451 ] concat

 pgfs


 2006 2797 a
 0 setgray
 2006 2797 a 68 w FC(g)2122
2767 y Fx(0)2143 2797 y FF(\()r FC(x)5 b FF(\))19 b FB(\306)2095
2897 y FF(e)2135 2867 y Fr(x)2186 2897 y FB(\241)13 b
FF(1)2006 2797 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -87.15752 ] concat

 pgfs


 2006 2797 a
 0 setgray
 2006 2797 a 116 w FC(g)d
FF(\()r FC(x)5 b FF(\))2006 2797 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -28.3468 moveto

 255.12128 -28.3468 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -56.69362 moveto

 255.12128 -56.69362 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -113.38724 moveto

 255.12128 -113.38724 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -113.38724 lineto

 255.12128 -113.38724 lineto

 255.12128 0.0 lineto

 closepath

 255.12128 -113.38724 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 56.69362 0.0 moveto

 56.69362 -113.38724 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 62.89185 -16.20581 ] concat

 pgfs


 2006 2797 a
 0 setgray
 2006 2797
a FB(\2411)2006 2797 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 153.4766 -17.21701 ] concat

 pgfs


 2006 2797 a
 0 setgray
 2006 2797 a FF(0)2006
2797 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 232.97278 -16.72884 ] concat

 pgfs


 2006 2797 a
 0 setgray
 2006 2797 a FB(\3051)2006 2797 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 110.08954 -43.94487 ] concat

 pgfs


 2006
2797 a
 0 setgray
 2006 2797 a FB(\241)2006 2797 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 155.90744 -28.3468 moveto

 155.90744 -56.69362 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 153.47653 -45.56381 ] concat

 pgfs


 2006 2797 a
 0 setgray
 2006
2797 a FF(0)2006 2797 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 195.12997 -45.07565 ] concat

 pgfs


 2006 2797 a
 0 setgray
 2006 2797 a FB(\305)2006
2797 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 68.87445 -64.66383 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 70.867 -62.67128 ] concat

 pgfs


 2006 2797 a
 /pgfsc{}def/pgffc{}def
 2006 2797 a 2006 2797 a
 0 setgray
 2006 2797
a 2006 2797 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 68.87445 -64.66383 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 70.867 -62.67128 ] concat

 pgfs


 2006 2797 a
 /pgfsc{}def/pgffc{}def
 2006 2797 a 2006 2797 a
 0 setgray
 2006
2797 a 2006 2797 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 8.84691 151.48398 -109.40213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 153.47653 -107.35977 ] concat

 pgfs


 2006 2797 a
 /pgfsc{}def/pgffc{}def
 2006 2797 a 2006 2797
a
 0 setgray
 2006 2797 a FF(0)2006 2797 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 8.84691 151.48398 -109.40213 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 153.47653 -107.35977 ] concat

 pgfs


 2006 2797 a
 /pgfsc{}def/pgffc{}def
 2006 2797
a 2006 2797 a
 0 setgray
 2006 2797 a FF(0)2006 2797 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 76.64151 -65.49829 moveto

 145.5548 -99.2495 lineto

 pgfstr

 save

 [0.89804 -0.43982 0.43982 0.89804 145.55478 -99.24948 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore

0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 238.95532 -64.66383 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 240.94788 -62.67128 ] concat

 pgfs


 2006 2797 a
 /pgfsc{}def/pgffc{}def
 2006 2797 a 2006 2797 a
 0 setgray
 2006
2797 a 2006 2797 a


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 3.9851 3.9851 238.95532 -64.66383 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 240.94788 -62.67128 ] concat

 pgfs


 2006 2797 a
 /pgfsc{}def/pgffc{}def
 2006 2797 a 2006 2797
a
 0 setgray
 2006 2797 a 2006 2797 a


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 164.11284 -100.29973 moveto

 233.02614 -66.54875 lineto

 pgfstr

 save

 [0.89804 0.43982 -0.43982 0.89804 233.02612 -66.54877 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc



2612 4215 a FC(g)10 b FF(\(0\))k FB(\306)g FF(e)2877
4181 y Fz(0)2922 4215 y FB(\241)c FF(0)g FB(\241)g FF(1)15
b FB(\306)f FF(1)c FB(\241)g FF(1)16 b FB(\306)e FF(0.)-246
4425 y FG(R)o(emarque)g(:)k FF(Le)g(minimum)h(de)g FC(g)27
b FF(est)18 b(0,)g(donc)h FC(g)10 b FF(\()r FC(x)5 b
FF(\))14 b FB(\270)g FF(0)k(pour)f(tout)h(r\351el)i FC(x)j
FF(;)17 b(autr)o(ement)i(dit)e(e)2615 4395 y Fr(x)2664
4425 y FB(\241)12 b FC(x)j FB(\241)10 b FF(1)15 b FB(\270)f
FF(0.)k(C)o(ette)h(in\351galit\351)g(se)e(r\351\351cr)q(it)1778
4569 y(e)1818 4534 y Fr(x)1871 4569 y FB(\270)f FC(x)f
FB(\305)10 b FF(1.)-246 4712 y(On)20 b(obtiendr)o(a)g(ce)g(r\351sultat)
h(par)f(une)h(autr)o(e)e(m\351thode)i(dans)f(l)o('exer)o(cice)h(18)g
(\(utilisation)h(de)e(la)g(convexit\351\).)h(C)o(ette)g
(in\351galit\351)g(ser)o(a)f(utilis\351e)i(plus)-246
4812 y(tar)o(d)17 b(dans)g(l)o('ann\351e)o(,)i(pour)e(d\351montr)o(er)h
(des)f(r\351sultats)i(sur)e(les)i(limites)o(.)-246 4883
y
SDict begin H.S end
 -246 4883 a -246 4883 a
SDict begin 12 H.A end
 -246 4883 a -246 4883 a
SDict begin [/View [/XYZ H.V]/Dest (exo.10) cvn /DEST pdfmark end
 -246
4883 a 0 TeXcolorgray 104 x FG(Ex)o(er)o(cice)14 b(10)p
0 TeXcolorgray 1410 5109 a FF(e)1449 5079 y Fz(8)p 1260
5146 374 5 v 1260 5222 a FF(e)1299 5198 y Fz(2)1345 5222
y FB(\243)c FF(e)1449 5198 y Fz(1)1494 5222 y FB(\243)g
FF(e)1598 5198 y Fz(3)1657 5165 y FB(\306)1809 5109 y
FF(e)1848 5079 y Fz(8)p 1737 5146 220 5 v 1737 5222 a
FF(e)1776 5198 y Fz(2)p Fx(\305)p Fz(1)p Fx(\305)p Fz(3)1980
5165 y FB(\306)2059 5109 y FF(e)2098 5079 y Fz(8)p 2059
5146 75 5 v 2059 5222 a FF(e)2098 5198 y Fz(6)2158 5165
y FB(\306)k FF(e)2266 5131 y Fz(8)p Fx(\241)p Fz(6)2388
5165 y FB(\306)g FF(e)2496 5131 y Fz(2)1445 5325 y FF(e)c
FB(\243)g FF(e)1598 5294 y Fz(2)p 1445 5362 189 5 v 1455
5392 a Ft(\241)1484 5457 y FF(e)1524 5433 y Fz(2)1559
5392 y Ft(\242)1588 5414 y Fz(2)1657 5381 y FB(\306)1737
5325 y FF(e)1776 5294 y Fz(1)1821 5325 y FB(\243)g FF(e)1925
5294 y Fz(2)p 1737 5362 224 5 v 1775 5438 a FF(e)1814
5414 y Fz(2)p Fx(\243)p Fz(2)1984 5381 y FB(\306)2064
5325 y FF(e)2103 5294 y Fz(1)p Fx(\305)p Fz(2)p 2064
5362 147 5 v 2100 5438 a FF(e)2139 5414 y Fz(4)2235 5381
y FB(\306)k FF(e)2343 5347 y Fz(3)p Fx(\241)p Fz(4)2465
5381 y FB(\306)g FF(e)2573 5347 y Fx(\241)p Fz(1)1284
5538 y Ft(\241)1313 5602 y FF(e)1353 5568 y Fz(2)1387
5538 y Ft(\242)1417 5553 y Fz(3)1462 5602 y FB(\243)c
FF(e)1567 5568 y Fx(\241)p Fz(5)1657 5602 y FB(\306)15
b FF(e)1766 5568 y Fz(2)p Fx(\243)p Fz(3)1884 5602 y
FB(\243)10 b FF(e)1988 5568 y Fx(\241)p Fz(5)2079 5602
y FB(\306)k FF(e)2187 5568 y Fz(6)p Fx(\241)p Fz(5)2309
5602 y FB(\306)g FF(e)2417 5568 y Fz(1)p 0 TeXcolorgray
1930 5895 a FF(9)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
