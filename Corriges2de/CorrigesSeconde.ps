%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: CorrigesSeconde.dvi
%%CreationDate: Tue Nov  5 12:05:19 2024
%%Pages: 26
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold Fourier-Math-Symbols wasy10
%%+ Fourier-Math-Letters-Italic LINE10 CMSY10 Utopia-Italic
%%+ Fourier-Math-Cal Fourier-Math-Extension fourier-orns
%%+ Fourier-Math-Letters Fourier-Alternate-Roman Fourier-Math-BlackBoard
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o CorrigesSeconde.ps
%+ CorrigesSeconde.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2024.11.05:1305
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7846985ABD6DB9B1404A5E1EE79A612F3F94DE12F21661
BE7E591D7947341AAD30F1FE76501224D644A36F805D33FAF448F1924563210A
E3A16A2A43888775646288E228A16F187998265F9861902FD93DB17DC1A0DE35
57997B95387966353736C5764EB5B351FC2F71C40BB26726AD672D8ACC72A4B7
0B89CDDCAED202BDA7E803F7745E7E978D666971730057B4A64742140C81DB51
6E547C662B898F6536AD1ED8CBED4CBA5E2BAB2689EF6D16FEBF80410280B323
F02BD6A726EBA19D288B30376787DCCC4197F3E95CBE949EF4B833D951CE840F
1F0F037DDBED1DA53DAC2D1E354118C14F4D27F1890A7406C5CC8B9AA1DFB603
863FA67D3BD8D22F960F9C8C5FFA7728F379FD8E34DF3EA0718B4ECD51553F25
9F8868ED28AB5C9DB4EDDEF0B7F0ACB621E3AF22B3FC13BA014E2D1D3FC9B2B5
D21EAAD7AB4FB0881F7525EEF435ECD573153F3C3478F7811D09450FB58ED8D2
ED10B9714800B306BACF373FAD737D1C13C1B610EFB71C3764C8BBB767422FA7
F8275C128F33887AF05D473962EC30CED95FBC1EF6B92E21BEAE1E6742299F21
6D0AD3D3F3A10B5649A666A5BBEC4DF7F4D4A183F142C69A50A4BE15C013A9DB
4CB0CFBD4A08290EB99E0AAA88856FAF1B7CC27D7BE27340715F39CBAB77E74A
553D7569DD6A5A42D2F60ED6BD1C8244343EB23944236E528B781841D92FB949
53DF9974239CCA62D4494422F454C5307A9B80C3F1A019F19C91A75E3C30FA23
B2FEECF14FB9AB507E93F0DF3AF5A6D3014CF52AE0D3887330D1BBD45B9672FB
8B60436A31B2CAC0232E6A8C1F10CA3744D5099E9CE0999C081132E962F3FE77
D10C8C431984FCA54E9900B0B7460C2E420FA1500F62CB266E8A00323682A81C
CF96409E5475522EC1AA4A749E7ABE38DFB1938D825A10C4A848C3F46A04C96A
43938D178311564FA35DD203B0B408C71D9188EBA44431BCE9715F46E79AA19A
96459079347807F3F4D53DCC16CAF6ADDAFB1F2E5F4B9910B03343D1E187987A
DAE9E0DD299551C4EFCB90EC4FB1F00DD2BE14B20694AA1CAB93BF2451630CE1
A76F63BDA443DF49C84B11101A6555AE0A7C82B044B5F3934AA4BBBAB5ED1C9D
92303D73BB18ABF2FB36C6BC9A1876241F0921A9E7EF1CA0E35123D3DA52588A
BFE3A0A5DE6824DFEABCE6868E380026631413D94E02A66F6AFC34A791E3FF30
2FAF5AC31C16F480771C0479B88CBDCAEEF0B4DD498D025DCE099BF59B29BC85
2F5380F0569D830B808BF20CCA350461910D39F2427C185ABE396DAB6577C264
8E3FE0F5CDACB4EFEA26EF4B9CC0EDE32BFE317D2E0947314DEE4B28C05B4C42
AC62C22AF9AD9D65F1233376BA6F8CC93C34EEB4342004C3D7D97069E9178CAB
FC243C1E8E9CCABB963DAA80B5ECAFCC5694D7BF6E765E682725554DE1FFA0AC
DE9B67A80B217640C0AB560AF329C074368323FCD0688E64955E10F346BBECF4
D8521206E2C73D9BCDA51D901FE49847B7F39CEF5A96E75A108B7936EAE2EFAA
BC8BC0DB37514A8C674E78A12CB5BFFD96589F69F42B2F06BAEF03EE07C49B6F
724F194F9845EBA7736C8ABDA99C712EC3345E571C16295554C1786A336C475A
B50B0F6063F42D63AF517013298866C4CE05BAF1CEBCAA4F2562E6F1AF7BC368
34610DF4CE914245F7BEB06A45DD130EAAB4F758E9AF87FAC22508CA2B4049BE
8E09B40569745E3B1972BD8ED845239CC900EBA7EEB08294FDF4AE8C77CFAA50
9FC0A8668A139C7352EE15292F2BBC9ADC67044C3DCCE5187DEB4B1B1B16FAFA
8B8FD73567FDF47C2AFA5E261E921889B4497DC91373338351ED3275FD355EA0
AEC35A777DF0D17D420C0D34792F3ED7EB7BBD08FEFA5A30BEB9E8678CDE6128
3DE28A27F92472AF17C030333D54501FC79AF17FAF5C3B5B87E12AE81B3AC4C5
9CA0866738D8B2966D6D5618371F4B613C22DB27BC7DDC6C9679D317DA4E1035
2D17F15E326AC40C7A9AEB9BD639C8A7BF27EA0B646835FB515DF3FE814FC2E1
F3ED9BFDEB72A82CFDBD609CA501DF1A7BE05070F58C51866BD9207104471300
8BFA762D7D2C5C750C74BB59EB9C831CCC71BB7C9DAD3F464DF6FF5DD0D2EC0D
84C0C1DC97C6046200B2FF5239ABB4AFC60789B02FF707957C96CE50FA64EA1B
1738CFAFF22F49E33B73601ACE1A76A72D98CD12CBD75B530B2F8A43690F2757
E7B69FE0C3C458594BE03FC6A310DEDF7CC88409B1388D5083515C8FA56F77E3
5C9DFC6B4B73592077912740ADF4A422AFFE8E8D153E2552EF4B737DD94D7EDB
931969D53D7924E5123CB6FD8976146C7B6763D281D68BDFE342C394BF54D774
574D565B2B1BB819027F6319E94B1ECFC616FB86A7EB3D9C1ABDD58D0BF8530D
C05BB69B09222E8D3BBFE5B6075422B20B5E39606C0FC9C5F180618BB04B7657
81953CE53A6F20F31CDBFB639284D4A2FC290AB05B39BCE78F8DE270F695A8A7
F472BCC0651737C5A7159562865AAA86CC8613DEEC7433EEF1BB68989E73F411
62443F736050ED33B30F5081CC4B5746D7E8377968133627253398D6380DF435
A67A4E80643FDF1683031E1BDEC31F71F4E1704D302534B28C45AE5775EFA629
8DD5D16926964F0984C2FC0632364924C21E21E6A696B0CCFF64EE91F1C05931
427EEE0E098997016A31F360931D4F340CDA2E720C5A1121B582BA084CE4D48B
D2D940E79AE1C008809DB77EFC886EE04BDD41071E2F98E615983815FDE2CE5F
EFFBDF042BDA834370897EF0A6C04F49A5E527791730241BD5F12B5EEA04C1BE
F0DE1F7181B6C6DEA666E220DA9A6A7A1BC4BA53C2993D924A5F84AC8964ADC1
2D9BBC4C19E35FF0759AF5C3A42B12AADADA2C1DCBC3C3DB9A3B683ECE372289
65D86997CBCC7D28CB924F9BCA947ED76BC3BBCDDAA18339E6B4D4596E03B078
E4CED0E69D45D11307FF8107DFB9C648B4F06DF06FB9BB163668693698B35207
D1744E6F8F2BCF64934BFA3F1C730D6B8825C3CCBB6EAE56DA9909ECEB04434E
67001402CE4C79FC57510018857CC1A52BDB5DA5484396B2EECCB6B6212D40C0
17956FD95EDE49A8EC58088B6733E5BBB664E823F990BFC977C0EE614B5D178F
4FA3EDC509BDA8F3BD00C7A91532B5228CF01CFB012217B6533F60296C6D0248
0F8E39492560A70F59515BD25A93206876538E4E06F4EFD064948862E2C2CF75
E903ED9EFB998DF19AAC90A6A40F3EC68CCADFE1FC61ACFB07197CD1473C4D65
6F6B16D5B523067FFAEEA5EAA24E7F3B94E3A7609B7F63B3C4088E8BD1F946C6
DADBCFECBB921960BC88B8F24FD51F75A119C12A05046D45C773D0393B6D4F7B
38EBD6C12932A7744DC54270947BCDBB15ED43A68E172EA1BA3DFDE24FB5613D
CF35CE7CA1DF499CFE4329DA601360D6D36585BBC677349FF13E1CD2356D8F77
DB1E42111868885254DC1B8AC94967907943DEE9E28E35FF17933FA957309285
8DB1885EDC3A2FB9EFE63A58CFBA2DEC2A0C93B5E8689F56167D2DF24878CAA3
7C1FAE100FA5A53C0056EEB4C6FB4DB99E5ED0001BB7FED3BB8E05E4D2219DF0
6B654E4EA1BC397412F9D12BF3C5891C240463CC1B6FC473CE71A6374C1B4441
11BCAED58880F00A68A98725F377261F3A6CEDA86A45699281D35EB1FDA25BA4
4856C6D6F562E2A7805AC9538FA59F01CFDDF7DC885305A952C9FA649A42A0E9
0C4BC585F0BC597C3A5B86E2AEDDED325C76CCBD3CDE8AE43EFD839BB20DFBA7
C6DC86AF5CEC2889DBFA423358144349A3E0DC032FC72520021E81397820C4B1
8CFE500DA634715F90769F2EDD5D6B1B005763DDAB46AAFC9982D8FD605D2E73
81C6D8C816EED65A98DC61345BA297093BBB0BB9737B5C21F4F6197AEC47F2D0
AD2D67317F10F540E25B9386CE06A76141D7A01020DC1A9821878BBE8490F57E
53F5FC6A5B91EA8EB93BC82BF6617367A2AD10641BE032979A1EEECE9910EA85
982E48A1EAB4225390C342F36DB7506FD324474AB3944ADB7FF6B751D3B38DC1
D4064182AD1AE6B1650C7A5C4F35A7C05EF6B72A2F1AC1DC82F7CC1F690B6503
BC8F791EBA56C38067C9C0ED772538E440AD368A83971E8189C3198A513B3180
AC47F0123A578098DE0F0839874318C80ABCF115DA15374867AB1B4F26E16256
173888BFA685947A2F28A8BA65A080F32B3662095F8C91294627CDA49769F27E
50FBD441E21E81D866A03A5781A417084D75CE65F20FD456098F96773569CDDC
416DCB2FD989E393DA2AC81E906442BE09DAD660F139C70DEF4A7FB3C5AB5CA5
3D114835EE5AB6676D0D959F987B779F610C30876CC649E22536D27A9E8CEC01
22CABCFF0ABF10AADB6778AF6631E679D11142DF063370755FBDD94CE9E441F5
00941F878DEAAB76807F57BCD3B31C72DC7032DD6DD10452607B651EEE7ACBE7
04132EFE1DAB5F1A2C5B29B9807AC4BA75FE9EC168A03F507074459BE1EA8AC6
8B3437723A65B624B3E061A800F5A3EC0E0FB4681B2FFF55822F722DF8F19F1F
8608BE81EA89365E88944720EE4496EE21591AEE7724D8A889CAB985DAE1FB60
9F62191AA35995B50C4B3DE2B2566A60609455B7C07547E388A2C04E1AFDFC8E
A63004CE533AF008AB5B92AC6BC323B160A29C67BE3999205D9611D6A24B2FD4
2F254A8E391ADE6CAD4359EBCE120094BF1B3D209FD6869A0C67906B55C3B966
90CC61B13238E142AAD5349BF67347D16B9C41A08EF4CB8821DC4E7C65377402
9E42A648A6E95480578AA3E2D3CD5C5CEDEFB9E2B4D158D8C7DCD2F7A888EF6A
42BA4523B34107E71F1884E4061B05B22E8F036D362D73E5ED6B6B62484DD819
92C0E0DB9C4D58AC7165443EB52DB40092DC0D71B8F08292E36DC44704B96330
C21A1B342D8B23AE0864EC06E1403DABB1EA35137157A0E2A3DF3C2ED508A566
A548F1F5EE7CB4CAAAC5B8712900D8EBF3CECA4A9F6190D2CE0DAB0A8D79AFF2
39684661892F60E5A552139BDF6ABC4BE4D3F85B8742746D3C0A9701C08DDD13
4AAD7C32A3357C660FFE096EDD5D25D06821F2FEF8C0210A261DA8558B488FBD
88B965BEC1A8B10062D2E3DFD19A3C3FC272CFA8347351C9B4AE7A36325882BC
ECFE99A9B7BAAD160D975B927C493167394D7BAC4291730A81FEC9550E9C5E54
60835972912D1CB9D384491B65E7C0B9F7B9C9344D588C874F557C3965CC7596
17E70BF9A51BC2516E97A0B7408EB1F5B724BC88728197F5DDC3E0C80673C1D5
6E9A2E8325335BF709FC5DD661A0516A139A7090F05058B33118221375DC1FA0
5A1D6FA024C0469A60A4BBEC6F7CEC4FFFF5278431B4E5F6E4F9B218BE300A6D
FBE6AD8D4A84CFE8B136548BC2CA4E89F60032462328847E72838141C3144C23
14787714B977DF80855220F975CCD4AD5E2ABE472BA799A0BE9FC33A701F8CD8
D5C4A23AFD2C0442C88BAF259581392B9BC143C30DE2682CCCDD8CD6FFDE63C1
82BDCD3130822B7E2BCA16C510BC235AC0FF4F7198F0AE254448E6802361235C
82C6CF4B7220909548D73ECDB2BF3FBC775A2C7FA97E00E2B2259860E29451D9
BD79F9CFBC03766D284C69EEB07F4FE6289109FB4B470CA3360AD99EB0CB8854
3E10022B111D6B34523FC3CDDC65220F60ACEB5034DAB29449BF53BE42EAD164
4CE582EB7FB48781CE915190A8976D8F07AF398EED4E05E21ABCA13201A97688
5BE6C48FE616D0820EE49898F7DFE125AC8316E5FE2AAF080AE32BC92B7407E2
FF56014216AFF11DB3E9057FD5699036377F1A56B30B7DFF743E4722DFFA5217
CF628DF9BB1BF483EC77EAE6F2F7D3BE36182AE483F97CFC49C9BEBC36D9E6E0
BE837954C131F17692DE3B1ECA5D3BEA2DA3CAD73E4E20D763512FD86B2ED0F2
FE162CD1B19F6FB036C806C11B42E09200D95D65EDD95E20DF0EF18AAA02B8E8
4D93F65FF2B22AED87FAB60376DE3B46DCC15185A14E30D03E48BBB796F04A93
EDB7B6F04781A238E6871A06061E0250B09A37FA8C1A43E63ED9C51AC3705FA0
0F33D5DAC4625C54AAB2DF1A89C76095DEAC86982D6D56EC5DA362135AC89B41
DBCF208D989D38A49A5C39E9CCA612DC7AFC4BD079834D26E16389DF0A7638C4
38969C2EB8C456FE8A99CC319EBA612C8C65C10FA7399FACE02A9D0DFA293BE2
62D6D482237C3347BE2C96EA124356130371A0A5B53E6C4641C4DE4620C8AA25
88D0865228BDC59E5BF9E793F46E105C49F872CB665CF384897F0CBABBEDCEF1
6F68041D85407069C894D53C87D1C2E1D40383668B87AEECFD7F397107C2A00E
05F0D60758EAF0D36C036C17847CD9044B5D4D6768D9BCCC6B74934E1CA2A196
D72B6289EF05838CD834845AE5ACF610621ED249A27F5639563F88F16F298AD1
B5807C01ACC5658C9190C8FC78BF915C397787E23EA108C7C94A3EACEF4393D9
12B7347F89B403872375F0733A984107090BF348A6C07B08594E602BCF933E7E
AF911E862BC7FC1D491872B5B41D37D36318033565C0193825D5A6527C369F7D
CC673FD0003A98889739630F176B5FC1351BEB345D286CC41E6212F2413A82AB
CFE015E1FB85E9C5BF99C2F6DAC9B6E74BC9078AD56E871C982F2624705965C4
B6AA0931F1F17FE0D882FB8C6330A30AFEA00605CCC319F439076C2C1F2609D1
CEB599C47DE9CC456BD66F620507F4848C380C8B980BCA1870F9437AB9189DD3
26D79867967A43B3D1F3CE021A2D8761AF73AC50C331321F551D1B7ED85A4160
0716E17F6832ACB1CF6804C9066ED578ECFAE3570B5E2E37512DF72A345027F4
E913FA3A0B18E836B5287C153C87C51DDDADCAD73E4E20D763512FD86B2ED0F2
FE162CD1B192E5FFF8A4673629AB5ED171519155C33B65E0BD214F3BCCD44404
D3BF5CB3D9FCB29E793C5D6ED62F112CCD373BDE95ECA73E482019551D00DEB2
CD24D086B99FAC3E8FE8F48077AD05D2502C4DC4CE2159B13D13AC04658795B1
B3C0C5C90B573C61B5A8C71723B13DF8BDF8ECCE0E9E7AD534BDAE579AFEE71D
B7A5868BCE574645EB54984E054CE25800EFF2F69E73F815FA96B5C1AC0BFFF3
36F597D2218497B3D0F0A77E145C0CE561EBB1AF794144F03433689BF74B98D7
3883CECCAC13D6BA26611D2A9C5C0AB2665093EA63B54095BE53BCDF668E4CEC
33739EDA87DFE4D393CB67109000BCB0141A00F840066456C470F180971DE392
0B15B01876C1A4593DA219E8688EF22368DBF95FB0AD21F0C9EF55AB680FF2F2
34B79DC66A801D6CFEB351725CC0B476C7768EBAC26CE3FE8DEC23A633E5159C
67B41596B4FB5440C6E24D239FCFDB5A885DDDE88C9A8BF7AAE1942FA28C281C
3EBE5C1EC6148404D29646CCF0CA5678F28379F7F7BFD9CD7B753742042E9ADC
6DD9CC2D4FFE54B79F4601DE1B5D0662B4FE3DB373B722FD05E330D019ADF2A2
0C7537DB415F80A4CDFA9A927DA0949B5B333D2816405169F92404F6B14C4D39
925269CFB27E685B0ECEF680930E0150053C6C3A532AEAD25E9504799EB9F13A
D2C645D8959C5D6A16DC3B5B3299DDE6CCD078D772DDB9615950B45A61541B80
CD3A9CF93B8E42E450DA981D15ACAF54AFEA6F38339BF3A53589506CD1270C0B
0CAB3DAA1D2A0C080A69050EAD51212E49DF05A42EE2565A4724494F07C0C787
F315E29EDB3A2ED55D49EF1BEAB02D0ED3855802329161C0A780DFEC1B2DE24C
92166C907669181B34145D34184EEE7DE594518B4A0513829F54472CFC088BDF
216A1C20F6B6AF7E152D7E11E78CF5E715CA3E5DF5AEA416F036DDA2582599E8
DCFAA84FD2839DC90D8F600BE03EA79E48CD0FCF4F77221378EC0F860568135D
A5B8898D0084C5D3E73059E4C4E7DFD3727734FBF501BC7671EB571721129183
9FE801BB1B30E9F45D5A9829355413749120DD93A51C2CD85C9EBAAC7ED08D92
8A0DE43B9E4E3B9A8F984CA1449B14106A9D84A692B09B4C43D02F2E6B62BEF7
1B841067F2A3872423DACBFE426A0174EB8433C7399DEF13A273BD8A70456AE8
5071AAEA2B4DE26A5641053FB1C89F7087E8263D4230BEA81EAD38638460FA09
D92EC2126AD318F89B89996246A43D3924BBFB7810E7090DA774A11FAE81E56C
8153801E233953A8C52A05FFA096F9D71565645D5D1E005DD24EF19FA2168664
2EA01BAA5A1D549A22A4E8041B1A13FD2C1DEA1B6BE12F1DB6FFDCF9926065F9
49A1A9A8D6EAAFAF5C08F8CBF0B51910B3117F289675253524C42CE081337ED9
9A0E714F908165B1861AD34FC656A73024B3FED34DE6121DE95FC9F3A2D481B9
FB2928E295A690E2331F99FAF1EA02F90E093A6D523C39F39F3B1C0FB4486AE2
17EC5DD9B4F7C1E9E28F018ED4512AF22494D9D6821E3A978165FE43021223F4
7E86C3665F4738A9149B5A239C43446EB456F8657A8F7016E828666EC0A10EFF
6E9927D4775BEB5DA6DC6D331F0A446A357671D32DD74C57F26C104D2A6A8F19
C8449530154A56D367AED040A79812AEF94B87351158367FA017F3D9BE734D94
DFCE0A75D94823BB52B9DFAFEFD7A47F5CF67EE23283223005C4DEC34AADE2D6
9A43C46DEBC2E470CB8616261360B070911A7A037FD115F1E4467C7F67FABE74
46BA18057DDC1835601C11247712527B0DBD1A3EA60934A234B2292278CC0A22
36C342DE3501048F55CC3673E8DF1B2A46B819E57D5FFECB83EA168D4CAB520B
2E91E9B352414F352DE8179B9296DD60940430F779C9FA9B71F1D546692E9125
BF0C973A91EFFC19DE902B5A969D3D2E4BCB7F8FD2D8337553BA3B8B6DD2C61B
DBCA46785D171D94F03151EB9F049B5862B0ED3FFF1AAAC4D336F5AEF8ABF69D
1FC97BE4306BCF6F86C11FA2CD335D515C06E9FF2B4B55B7BF55EB92F6A69012
CF984CE564E0B530AABD8809E58CA5D56D2D7702CDDBF6B9C24A3E8043C45B81
4E527231314AA620286BB22F2B824720A2E52951E33C53503CFB6DF8CFACC316
7E97314148DBFBD00AEF379250320FD673139B4DA4528B64C4482700FB9C8D84
45E79DECC88F0F820A2F996229130061A6581B75D9ECD20D67A81B4CB170B03C
C47D591E5274917C2F0797C58B7DA9731FCB1144E0DBBFA306F06252978ABE25
5F6F9D6BBC0124AD232337A9F4A3308F0FE79B2CD6380ABF24E14A5AE1C0DE08
1172A7B06F6A111D0B0D404B2E4338930FD328A6DF64CC772B79BF271BED5C40
13F2ED1341F380684E0A908095BAD1593C680863CB9D9595991DA2AD9968E364
99E449F1E32B00231FB4B08B04EEA5E61D32145D39243D37186DF6A9B62E481D
423BA3D35BCEB6FDFCD6A80E40858965E88A05338D8387379ED4E2CA22AC03C2
3AFA6C6742D99CB33B2004D94623F36E9BA56C2F42CADA553FF3232A0E09B941
76ADA5CCBE9930B0323197E9D4AFC53080C6ECEB0221AD76EAE7551B608C17C6
CDA541F0D9882D733E5921568C992C6BB9D01316A32DA35BA6F4BEF638C32F53
BEACD4E12182F3A6FB475A1FCB86F0938784AD545C3AE5A0CF8B5F28DC589509
2C8F692CCD7825A7E4CEA2583D72E3ED5D4EC4CE2C2B66E7751DD05F95A9DD2B
3F12B8555D5D2399F8E6E31B407B8B557E0E34AD6353174DFE87BF80DE56865E
7C3F7380F2952949EFA855C9BC7B119BCB62FD6A86A8E05DD945D5FC78AE8441
86A8CEA2407B41E0EB7B6D1D43EEB30CCE17864E3A64E67769717F22A057935A
424545C57B6F0934432C61F04A545313F87AAFA3A84E189ED5C7136C3A949BB6
F64C7B0CF9559E970743FE2391AA02551054721B928C65CA464A70BA70B0FED8
FC11C777137A0E5D2D38ACB2984C136FC35164F4F17C3B078B207B66BEA2C039
6510E1AEA9A1E80EFBDC642F4049387C5E11D41A85C25DE6F10E276A3EBD949B
99D56D383747C30D0EF6C3F6C0A734A371E892D2FF4675C96485B0A1F07B3EBB
2536647C59133BA7BADDCE0B3A2BD481D6C00CDA98E3A006CBEED476AF8299F3
D4D90B568150B7047254102EF0A2A3AB583360BF4AC485069E54F81026D0562D
584D1A14660AFD1DB39C4EADF2238951EBFAAF6D57DAB3B760BD9B7CE2DAA598
E9EB40FCFBA03FB3E43FE24BDAFA77DA211B449771DB099E47FD666E8C356AAE
87A59E6C70EBC339BEFAA830963DBEE0BFFAA0642F862E14B65BF5FD83A8D885
9893F770804D774C5BAABAED1A0073A0C94122B241FCEF4DCF670FD114770FFD
2A5924105EC38796C4AA1CC9312526E682D48ADE0B3D1EFFE7E2154936D045C6
08F1BE50CDFAB2B76446CCE71E55F05A323E347B26C28B909AC3969EBAE86F6B
86A1505F73A5206D14D67D5DDE012577FFBFAD2BBF885A37FABD1965E5C599EE
85B33593105BCDEE39A19FB7772F7BD8C91205FCBED8BAE4603A9FE5CF9ED3CC
D745D752522BE1ADA9C30E8A602CC5424CBACACAE271B28045723ED426EA82B9
B774BB4E0744C023FEBD5493EB4EE95411CD48CC6C3D4C07194CF1DBA634CBF3
AAF5E14170B7D0BEF61EF294ED79FCC91AC5E9890CEA297958C768BA4794804C
52AC9BD7B66F7881725315BB1F03B0B112EBD971F393B07D1240FB2A988AD391
4F95BD5F6DA31FB90F251144723E67B0F7613BD6553929CC3D4197686A50E359
CEA67A62F44D6CFA9A7550FFACB4F9030372F2A16C1FA4594140F5FB56596E8B
3AF85DEEC6466A11640B0E7ACECA41FBC3D285A49C5AE8623059BB57F97C4D39
6DB38677D65C896FCEEB1FAF02EFEFF29C4575B63E74FC25582C0549FDA0C65B
29FBA91883F9B6F84AB4232DFC2BF4642619B95F8CAB13F0C7E5B2B67FDFB30A
71690721A091D2CA3B57A02F2075AEF496466F754D3861707EDEE8AC94A40FB1
847453474E72E8DC10E2F3A3787E2D145E047CB2A5C56DD970D81D4DE5E9441E
6183F0B374AACE6AEAC8F92372C3B9A584FEECCE376DC8C132C05BF601987ED1
62CD1A5A5D104B0B4913D76369E62A42356119D340C14C020F22CD8BBAA39665
7264DDA4B6527441734D4046458893394A2129F9C200483C0CDAFEB14F5EE6CE
F4CDA5790AF833191A570443C2DF18277FA29CEE6E38B22E30EF49C9AC19B97F
93ADC68AFA0DABB3F5EC4A774B5669B1BFDA17C097227E90541B1683C1E1FBDA
F556BD6B1B59CA487FBFD2D35ABD1E3EB4DB377DA1FCC904DF9E329C073B6C53
53822EF23408365AA8695DA2056A4CF752CF43C3C69829297719612DBF907947
E695ACCB3EC443C4FC8C16FA22782582E72B2F5C52ECB1EB3B7A46D142E667EA
BBB6DDD856A33968B6286CB65A7CC975AC3AD97BD143742A848B43A4D6B0F743
0BAC338B77E178B0BC5A3608F37AA9BCC7E16FD00D85944CFE5586A4FEA79E0E
930B01DEA6C6EF2D80A19770129A458DF8ED9A76DF689BCF699F237149D11461
819757DCA0B5C8643535345EF4D1D6AF89B343DBD95609ED1D2CBFA082DDA9AC
560E9F9E5D4189392C5826DCFC8A23FD7FDFB11375A47DB42F7BB94DB2EFD0B6
C7AABD0B290547E1797FDE95D5BDC70BDF2286C665A7A87D98BC777914F71983
DE74B36469F5A89E1B8AC8792DD91B6FCAC7066E4FEE0A07D9E50E9DE7F0F850
4436AE7E4BA3049D786E9EAB70317261ABCB318EEAF1AF6C0E3B797F53BC46B6
CFDDC5588F0C6F41E581C53BE13C8A9D972EBA7A93595EC6466357495D8EEC0E
6E02C0B19150FC8ED6BAB565EC13057729203DCFE4868E62C90C34108C5548A8
E72734E33E4F7A1965378F8EC2FB09E9BC2F0A068C7360345804BB65A737FEE8
FA788BC84AA265D2D526E5E5E733451552A750478CEA593865D23741D9345284
576377C26AA511ACB6F957B5BD5A2912601D51FB602EE5A24A05C38221C7B96C
DEF6E8FC411FC2EC68CC6DA6CC1D18B0014563DF4ACB9C7E44376535A9F1DA24
0D5F87B8E174BE4F2EF695DF3DC10DAECF7862664E5EDBCBF6871ED36C5E74C8
B1810EE6C0DAFBC40856F1D3DE66649C9BED43457146FE1B17067B364E0F77D2
B8E19EBB7919A2D95885A797850F0CCE0CF631DA2432CB119A60F3E1BBA29600
81E3FDE5948A46842909366B7252293371C7AAC8A745EDC9F6A9C3A248C1BBC9
B6D30AF3648249446B860412339DE56FBF8BDE25A398B1D61C8BC874F7E4C287
EC0E959597EEABD3CB32BAEAFF50053EDF111B5CB79420CA64CC1B063C84FC65
3EAE2D0D368DBDF8CB7262B30F031153187A7B06E454E625BFD1466D8353FDF5
CFC9F21141834FDE37835BE806692B02A2B0722517F48C6C2A7301B12A6C5F07
020FD2B57CEFE23ABAFCA48664445011557EBCBC52442F9E119EAD60D29A20F7
5C1B2EB25DCF6B89D8790358DCDE95887563FB95B135A5FC142AA33C12C1A38D
2084714381239399FB942BB9A126E05405DCE840317718B767B9CB5097640EF0
0D911B439FF0960FA313AE6647AB2E2CC448B7F3E7C1898D5526ABCD71C983ED
1C9F5288A3D9669E8A2F235DAA33BED51D7471A70C72D69515D92BCFCE0A33AD
A8E1FF32781D662644FFEFF6C52C3787BC7E2DD4B6A0AE5BDE775F0AE26F7089
D20BEAC9A3979817BF36A4BC7D3AA960B91F1BFA0B9FDD78A8EE1835977F1360
D641A5B1A1BAA29D4467B2DF9C73245DBCE639BF82AA939E96D93DB4833D4DE8
11592C795528D92847BA5542750E86B9B31A8837733DD1924D1F124CCA9288E3
52E618AC0DAD9AA4611F2EA3A8842B8E7BD5FFA8B8DE5934CE2EF38C25173EB0
DF607F877A4949B201B79E0D04341320BBE8BC2FFB832451A3674BF295213116
32368D09ABDD2BCD689A14117579C8517D17A4FAA44D2703FBDFA68BA0AD27F9
C05970FF60F5A8EA642A096138E0E6B6EDCAA5FC9561A54D8864608426CE595E
93EED082B54FDA0443A5976A17EDF8BEDDA42B26532B7C6281F73BD2A7522822
34A55B49A7B5615F855D65E4D6DEB44DD76BFA6010C3FD8B2CAC172BFB9167C5
F3775CAEDAD8A9D54D89118914A9125AA09D290CA4C68EF82D01A1F5CB6C5772
E0F532F416E4C551571668AE73D214C1F536A238075227E13C7C8C2737E55AC4
203613ED5749C895F9D664CA71D121B94CEBA0FC6FB20A99E83E13D0E7DCC55D
D2DB884B3EF184AC09334F155D2B350169901C104B824BD581C0E34E0A3683EA
D97BB8ABFBE3C73B5C5390DC7E4C5FF22CD4736BD817ED591FF569E12217EDCF
9906E90F06029DA5FF60D99C466C507369F2C793518DB994932C8A5AF1CB6DBF
39609F5F30FEE07728D2B02657E635E68D29B9E020C8BF06D34FFBA2976E2E88
94F35F9F4DCF479C930C50A365938E46111EFC2DF73B6A08D3C975E8DA4F8803
A911C3E3E12EB3079DA83EA5157B5614D9A6E68D2CE5F339E8DE7FEDE42A90BA
2BBC06DA85603F1204FEB9FCA2655E3D404716BB29143FEC74AB0CB04F97F77E
1EB8B61366B94E6D77B3FF2CEF63C500DDC9FFB640F283702328B4F7F3D5337D
E0C6AB77709A025A82AD7290653FC6DA46359AABDAD89F6E563D4A9C4B6AA755
A5367DBA68B1906F07AB30A9591029380209E610CBF667B8F2F1337D29965133
EBB08548C09B85A6241DD366C39F51579B8E33B1779F2F18195A1347C78AC392
B332884345CC755BD1BC9FD634D0FEA1117400874BA5E1681AE00EB539145F0A
1453ACA7903C759E104347FE0B69F60EB808A3B429AC0397B17B6E6093591EDF
15817CF8D7E770789153386BFD24B327969A7145AD1FDCAFB9194A7C28266C55
1D3EE22B20EF024CF87F8ABC34FA6DFF4441169F15B92FB4E39BC19DF7827741
9DD71DB8C07272152D380731EABFDB83AF89593B186207C276A951202300B0FB
7575AD052B2FF100E60ED2B3814AF437F24F80D0975DBC11CF0E5F10EE2CAE46
CDDAD9647311E597937CDC1F497477FD505DF3B4B12751433A1A7A80717F234F
5123B210DAEAB592D605D7481ED75143A0E68AAD5157F99404604EF214712F00
14A091B96E2C28DD67BA61CA8B80FEC53B14EFD9EB43100FFB032506BA85DCA8
B38D887A9E09F92AC3470E57FBD367E921711CA8BB5CDA5C2152FD530689167B
7DCE246D4EBF0A4716AF17B0EA1B5C3769CE8871B49AAF291E42DB0482C12AAD
D13A3E473890689C8D5E873450B957E8F03174AC6C59281F125A050C62EEAD04
DEA4F3432E34EE0F7BB90C82C0B468A9AB5C7BBE783C3975025B3B9A5F334F31
44C90909260325DC85C300EA7741F20AE37AE6B1BF6ABA6035ED544306F4020A
194EAD5F7284A3699A281761A48648D977FEE1BCF5C0CE39E5DAF1E4CE54863C
B2898A09B4DF7CDDDD140357DDB4059840F8A076712CABEF587EDB48233764A1
B0C102800733A80E86E4E357C303D5481A2E7BB90CCBF5CC1272D19165E0D774
DE3F53F1CEA18647A99FD591BF0B7AD00DB4D77241A69F4DAB5AB612503A5DD0
D696D785B0D6968040AAD77EA98E2D3EA58670419897FDB9C775DA4C7A48C1B5
C8C858E93DFB758F63CF142AB312EFAEAA1A2DDF92293F5E25A15878BB1D0874
0818C8FF68A935695C094E9CD00B71AA32C32CA429ACFBFF3EFD6B3CA54BE9F7
5DEF55B73A188CFE29476DADA859E8A4BAA9715020ECA8954FC5EDC52CB357CB
5F0D09A79E10D86A72A511A5AC3BB9810CAEC2130758C3FAE8C4113A1DEBB865
B05087C12DD547B3932BBE09241A775C87312FA8320CAE427F72FF38B111D8A8
FE86BF33F06FFD5CDB09C58AF1F3FFF381BA06F53A700B5A437437D62A95473D
2BF7FB5CB4E9F88E8324C53C317F00BD1D100AE7388301181B4A4840F72BE615
EEEF42321CED428DA1B38D36D0E7181E941CF63996FFDF9FFD2DD03A28FB936D
3979512ED5AEB58FF80B271BABE425055D3F31DDDD120093B1C31CBEA1A842C5
99D4E6BF51495A0FCD22C399B97F2312B6456E636D325E79F7BB51D713741A21
AF05ED58AD9958F4E78E0C7E18F067BBA6905C74147E1B345A81213B7AD1E3D4
D0652D086F3115B185F9B4E47DECF581DB595940554B948B45C2A83664143C32
E53BD00CF54E61C8C59C760AA0DBA82A6CA8BA7F7B68A693ADD46973564355FF
885C9F9BAE558527EA7ED2C062C7F968309AC789F998031210149B7F6F44A41F
C346A1490053E0BCD3D3A74B556ECD7EA047364CE76C9DCE331D252B969A8205
07BD630D0FF6DDDF6EE59679DD6F324C3E44E21309310A9E42A44B34E58DFC7A
A43E4EC04DDC9E2F82E8B4138337E0A9356C1DE891E38D8F3B253597201FFEE7
515665FD05C91C1179091914944E9BB2A3A00B8403CDC648968D25B40172DF8E
BE573DBD73CC0DBCBCD805D8193FD257BBE77B5EDAB3410346FDAD6E5C5D0708
AFB6AEB1186D1D8A8E32343EF88C8F5AE0BE752B5153C063E691543AFF5109E4
B7328AB0373BDB65BFD6DCC7663E03F1FED9D6BA1BB3D213B5DAAE1D34200053
AA3E28AEFF4A5BBFA32A72EF555C9D9E0ABEDE1BD2987D5B327A9D04975BF838
FA6D21EBA04C0135F0E793CE2577AF656F8676BE4EF192783CB90E721839AFB6
C497A99093209AB9F13AED9482E4C1F2857F67A5C8E4137FA1C8B214C1563F70
7CB51AB0A50FF9831921B2FEF95006D65D97481F09CB9DA264577F740AB42B89
7242F509BC988D96F1415A341475E7FC96E6FF4FF6120683463B81D9FCF1A1D1
62513FC5910993E142B558E008BCFEF77E4BE0425B95BFA54B1A2636C17AB65B
FA57D1C73DE2387347B495F69362B1340F1FBC8B829490D2957242C79D04B587
FADC75AA3D153EDDC87D7D936B02517D5544E5D1D732F8089EC529BBC2868EE0
9C62410F61727F23746D44CADDEC58815C68ACD95C921AD99E867D1814AD5254
6036A2BAC88B9CCBFBF42E842583A25DDCCB6774C3FF42B88F11C9E247AA0481
43F6953E85F03AFCF81D9D959FC04DCCA4696472EF923285D22B986C6287E706
CEA3C92E06F496AE0AB859F59F781665D643131E18DE2131626ECB1F88C40271
3354D8F87DB96C8A611A9D6E688BB9B65322E515A016C983149132D936FBC05B
7D2C320DE0A17451A44F045D9B928172303412CD3D69EBE084A4CEC7F6926654
FC4E09ADBB841671B17C4C10609D510CEC683AACCF8CB754C20FBC4BD44E2A2B
F9BEE1F416EED6ACA83D43D333C11DBB8100312518D3FE5DABEF4375B32A6E8F
47C1A825889517F717005F34BE409CC85D18E76D5280441EEE6ABB659CE13DB0
E9D76645E6A7D0BC58DBF519EE9E0EEB385BCBE0E3F67E14BA61FB545CE53C9E
56A916D7E35E9A2F3EC25BB5EC3C708A5E6822FBE6478AEF3921ECA3CDCD4788
E48DA49D99D736BC7BB4FE059CBF51FE6C05D420B739C667A1420D5BFE950DF5
62C5288A8DC02EB222BF53F7ADBB5E5669DD60023605BA1478D3664D365F07F5
996ACB62247921D150335D7C643D826C0884FFB59B320C3A0AC7C44F9655D8EB
C4F2693BCB90CA7176FD729261ED6C42325FE1A507E75B1DDFBBDEEB99592DC9
416CAF13D355688DAE639CC638AF97A27541D94F626FA86EF0335783CA30F3C1
CC2DBDFF9EF49E131DD771BEC02C4B110DAE254FAF355AE02CB569653F0681FE
E0AF15AC695B191E61D5050846699EF7AF5A2C1106A6D376AEBC85C630D49EBF
EC6879CB32FD32282F6023AD1AD973B527E1E101E138A0B5DEAC0220618D3903
07DE37C3BB9900E3B24162E05C57AAC3854C08A620BD4D37EBC86B1FA04DC2CF
1664708592939A7BC51372B2EBBD66DC4EA6E5A4A494C6AF3EDB4B3A0C9953A7
628736F54354F968121AE2719BCE4057C716F8B4E2B04437B9ADFBDA821201A8
13B4D7FB36AD0D41EA9629F61C9D263D8CBED8640BC51B1FD9D7BE7CDA1F6E89
AE90EAC823ACDD2DF1E6AF00750AD5FDAC95E149B3AD4770DC005E048A8D09F7
64D0A4B4C669E98031AEC4C4EBFEC35417CE508324A4FDACC4D70DC6F93D1F55
0593C9B5A0803B8323F7AE8364EFC5652547B63507E02D609A7FC924FA94D12C
8D2F67FFB090CD7930CFAB966BB09C164926639CE7B8B491E8161CF904AE7A03
E3A92B3C85AB9F20262A1587A9690F646B3A90245071C613146A75A9634D03AC
49D89866E21270E813CCE03E5D9F7A0AA9F0BA81EB051533ED7E82CEA50F0D0D
B65A612208AC793AB86C10BD1169FA6874C25D627B63892DB01C8FBD7057F697
A2430656C4C4AE237B02BD262B5E2F9ED0E5499D22A93DC3DFB0F2FDC1372D08
E8C6AD134F8C6D9AC75C42BC97BD941891DB7FEB2294EC7025AA2BD94A738C38
E717BC054A3BF34E1E9347A9DB85CE6A7BB939B1E8B98DB834EB38103FE28B52
128BADCE4C915599D6D67C6B5F63142842F585411F7AD98EA67506E2F78D7553
D924C5CFC9E4B90DD2B69E3C90C9D141981A6960C67F7BF40F36AE38C3772F10
B956755FC6F1044138840281E40A656AAC44064426D87A4E6DF73D32FA7F0DA4
469CCB65463F587AF75A9AF402ABD9B64223FB5FF8A49299A7D088728B9DF607
391520D6ECA51EF02AAB38A44A590B3D435387DCB2B51ADA3301DEA9B3F2F2D9
68D969F63D9A24BEC67D4EDA74B356548D285748368AF4F68BE9523D44769AF5
3D9AD9DC68F3A6A37DB88AB5F5D3A56C7427FA2B2AE67D145BAA65692320F04E
9DC4CC7A9DDFD9A876E076F0B69C9D4B2C15B78028904A9D3DC7D688A29A0957
B03075FA7753055721CE4471156F1B850873614C4658731C48B3A14AAD2EBC49
F8AFB9A736219AB5EDF9595CBD527160116240BC4F6D4BD64DFA59E7CD9A999F
D7AAA2AD8DBCB43206E74625C1BCC48580A271AE61A32EAC21456EF2CBC2F1EA
A4ADBB3433B0991BA236F10CF37222715D8E65E67B37E562263EE899E5A10CCC
C02F77F2D4680C22DD53910A3E1A1E9AD3D68859CDE7C339FD485767617CE228
F376E00DB96A151D34031062BC60F85BA2517163B4A3EE87BBFD34AED271A71B
4DDEBEED839794507571B7AA905373A2A2C26957019CC8A8E9BCD54904F1FFFE
B831531309CC88B75521A4D31A564A9ABB37E017AEEBFD863BB72B13443C4CCA
15139C4EC7824BB5B11050C046331A8F9CDFCF869E9EE508E7C6A10F3BC6778C
B849852D346F0DDF1B9239E2DB93269594CECA0B6F91776C74DFBFC06B860D90
7FF64CF548C3E6EBC35280FA72823536E06E78AE93F20B8E3870A93A8203FF7F
19E4354CF44E66B8A93A76F768844B86ECF0036750C8AB49E469B7E0C8924004
BFF9771B518D54160B18204532AC2BCD0652E1607A88BCA9D3284681741BF21F
BAC2312D2A28F6F685E7BAEEE2674050C738C999A6B1DDFBE083BC462849A5D7
C7A017E110BF2E940E5F7CFE0FCCB904F9C3032F1B19A04E9D415CC948A29BE3
536EF1E89AB08C7B782CD169ECBB17AA4CDA25735F7147985D624EF5B04CA695
E9DD8CA70BEC14A58CF167F3708F03342AC3057801556C770477A50641257713
794F56348281E3FAE3B1BEB09553B0767686F6AEA116235DFB2E2A06B846D429
42363D8D2A52CF39BE6A365D7A71F72CAD6967325F8288152EC0492C68AB4CA1
0F70C950AE39CB5AFFBA1876C67E4D26F2396B7932F922B360B3FEAFCFF05720
4AD2DDC474227F55F0036F91209FA94A3B75164E49ABF0D18BC3144FBE6503FA
3671CC98DF8833D99562363460BACB65870A6C14D580546D9FF011C807D09151
4DDE8488BC84CA6FAD1ABA6EFA15B5CA640E17EFFC32056B248463FB45311F93
482DD471EDAC5E51D270412E440D6AC6542869E71605A01D5A738D559D76DB43
5CD0BBE358082ED5156AE288BB503AC5CEAC1199D6E3588DD8C59AFE26897452
C958EE56AB0AA281A55DE84CF9EF0082F5B0104390513C1FD1B3FBE482D93622
029B495BA91C8659AC6B8A9504F906CC37087C4545E3C300E66F9CEC80690DEF
375207B487BCB22E2D9BB6739CAFBF8D24897442CA33D0385EF917E82229F910
C585BD96F1CCB2D3F41170DAB84D41D4769ACAA9B5F148C5DE22E1361BEEE0E4
A1E37DD0509867CDA54C7605094A2B100645E12A784B7056A3BF66F1EA44D4DA
4F3923A4D2A31C3C9C3E478343033209AFED97BCDA1DA787EE3251843A02F2C3
2A346323DB7DF504D312F1F665BA60539F7509EC7F596EC59390F52D60D1EEBA
80127A62F8B5210A800E2D67B648CB048C8C7C94479B06BC2390D39BEAD082BE
51E3BAD20DF129348D40393EE7064C4C817F20825EEE7C1B97DD7377D32E5E03
C2C5298D50D49BDF775875310CC4933DAF1C2B2DFE8DDDC368A5561E7B6785D5
F80583CA6ADDDA4DC80DD11EBA95A2ED6068484AEAF766947FE7EBD6DC43B3E8
9999F3889E48ED40F3DBD128202EB9DB74343587AED0DE7F3343F039E8711162
422EC7983E171D0701667C511B8E756CD2FE33A5F2A896756D09DC1E28C32DAF
4406968D1643A4E1F9567524F3DC4CA7D5B9711AD7EB631C0096D8EF948036A8
EE018F01CFFBCAD08B24A65AEC9E81779DA017C79C0AAD8B604BA6E17D112DF8
4A753E1A24B24B4FEA59FBACCF66175D7EE261B2C8C5E707E6B810289C19AAD9
1C5FAC2BBAECF546B68D95B98079DFE8307E2BF131D34CD9DC2255BE67587BA2
3BD91A638939D025A9820ED0099260144E60608C782C9595FBF41B0AE4F2148F
D195E1A56EF82C8119EA00B07F80ACF302CE53EF4933AFADE513824192896BAF
64185D44727A8F66C9239602B3CA61DD996718FF2E46EDF9C9AB727383E475ED
BC2DC62AE93D52B417ADE3492A0EA84EF62E970CF6669A7AD5FCB15047562B55
3ADBF14009B3CB22AC0697F8FD8445F7FE8FD8DBBE1F1A4617E185884FED21CA
A14DBFFFDE43180450722315EE074DFC98AF5ABE3C759B555C097808EDB9A1FF
30AB8958E8548648CE719109C435DCA408B7D72BE3DCBCF36E34E0FE06131350
B9735885B03CDF9F8C5A1506483CE57BFFC797BBBFD1824C695F4E7728EBFF70
B9FD9B2A767FA0FBA07D1A20A3B942D8CE562D3DBEB7F96E733CE8834E8FF3AC
4590E7785FB8D794FD508C0FE31C76AEAC4FA03A13B531B1C3D180050D54F938
CE105EE37F6505AFCD178BA8FB269267A75C9F39366E6C9C196E3896975CC721
0DB9CBD385117286A613F76057152EC98C8C417D4DDFD6ABE3817237933582A5
70B7426BC578A9CF4E1D331FCDA02EEFF07F7DDAC04B0AEC833092E2DC7E17A8
B572E521615AACA89ABA0F8081B9EF2660C9A38CAB91E7F9DA2A07A8187505FE
37913DCA86A07C00BFECD65FF30D6206A5201D9E15C9D9C1FD8EA672B372B8E9
BE223A872AD3633BD04925F212E171128524CF11CCE8CD283DAE41EE8EC54E99
05FFB60AFE934FC1496BF77BF5199150E9BDF82B01689E1BBBB2A6840975A34D
CE91475FEE7DA8410CBE0EBE9AEEBFBF9C7C2E3A403AA91B074F083A5FFD6357
5868B86502D737496AF216287E1C5DD72F5D8250D64EAF3E1277E556B2467EC9
8F96D03E06435291416434F42CB3040B6AB050CB25BFDF3C42A3B8E599077E22
521167FBF30063B19C0D5A1DE5115B05EF80DD9B4E8D3E281C1D643E9A208E1B
C9E2DA3685098702EE3E733548D9318C6341D4439371CF467E2D7A09D33AD0B3
4945A6926C590404C5D48C7EDF082B911FD7D24E0D0E307335E105D42402FC11
5C05E0CDF889DCD313CA20A4DF7281F5B6668F1E547B84008AAC458BA42DCAD5
2E5CC4D205A29A86D40000953F681B0EB9960755D91360A139164C12EE5339F3
3FAAEB7D47BD5AC5C1336CAAD818099A62D192FFF18B80919B95A54346A33868
8A08B53D3A533CD227FA4736E3EBE9BEA0E84C28B01095E66866EB726F930472
3EADFC044FF7DF847E234CBC69897AA13141F9D2B5DBF5487DB29163D3046841
9C1FD9E507BDAB269923EED2685934CFACB15CA3CDE20C7F24512DBBEB7EF372
9C76B6F681B0147F6E8E7BE37099787229576ACAC0126365DC8B6A12C57504A7
7F2120640F41F6A83086CA590F51D063939BDE9ABB98CB76B47D15FCBF478C0A
A9509CD340512296C80835185B237725B3EBA45460B9599D713739526BBB62FC
35B4870F01D7ECB9E9BB4EC76EE08CF8711DE7C1C8989AE6501C6E2B1C86A5F3
A832C21B95489824CE1B37B31C5BD4B77F16AA9F1058CB49CD72B2CD335530DF
3BD02B90A2825681E7DCBA5A7240EB5DB2E950C415992DD77EE2EACC4E27AF1D
E3F3F8598E141AA445817FC2212F6C1DF9766B4DEE713BB7AD471E6A1F3DEC05
85826D01B7FCD097169DC15E68FFA4B7DBAC047153C1EFB8E2261185B0FCCB02
B918D7AD7D1079DFD5F8BB681A7E6BA7D558DD0A4B031C9B8B0D8B6EF8FC4561
92F05D3D6B457993FF01CAEA85E9F40C732D92C6933D3DF531EFAEBA41BAE816
FAB03EAB63E78B7719E69263ABAC33777116B942A2F6FCE6D7789D02E15002B1
19C2EC253D071E8D9EB8A64340B4945FF2BD670C0FBEB1C549596D61E7CA9ADB
D13CF553CEB99C745E67B7C0F5348215B9A9541728A04A7C947362BA5B94FBB7
2EBC109795404E5108BC4FB69FD36F000085217A744C5D7A29BC7C869DFF4E37
A792B81246446DB47A0515E973B03D07FD63DB8531CE220F3A86EE3EED90810B
A3D8B102147163FF0A08511475681901F80779F8A729A63C556146D05F07F61E
EB8FD97FA1F874396E08AF9E63053FD8BF3DAA78524954E95BC7D10FDB1019C8
918E71F7DF026CECF0C61730F9C2232AED2C3B21BB464552768DB75A892F14E2
3DA3714512307ECB41E7D548B033682AEF9B5C7937641C62EDB2ADA07A9DA06E
0009192C54B83BE3E6439BC2522B5A730EE7C4D6C2BFD7B49E23FFF04D98CD66
ACE59588935B6015A4D21746530F251EB065F15DBB7F7964246956DFEE23DB85
AF33E7B024C888DA8806EFE1A27C4AB569279E1005CBCAFAFF70BD765A665686
55F607F0EBF0F6975BA97D63FE4C23F82BC3720ED3E70AA1E2D032FCB3169ABF
ABD59F2B2D9E1483FEA477E4B258595228F18B67A1813E5F8673D8C952BCD85F
C017869E0DAF470B6EF9308058B29CC10BB04F3383A0FB31292771D85181030C
C853BD8475233C17609F62275E1B3B81630DF1038B66A0B205C496B6FB5E304D
B96E1D7EDC1B4258B4231331D670C3FA20EFC121BCA8F4D2A92312213A900E5A
1E7E14EF7C411E3C31A40D87808EAD6B76A380AF714BA7DB717EE0A5DFF67170
0071DE1F77485C887C4315483741BC28A6925B58417C8629A5B5BCFA04AB2B9A
CAC754FFC9702D07D9AA239ECAB736D801727C2958E6CC6DA5D368E84501666B
C846F6CDBD984FDF9B112C293F4B99BC4DCE505F24ACA755119D9558B13AB239
F40FF1165D4E7EF9256EC440F5BCEB2F55DEB6F60BD90BA0897EB3356EB1F723
3B209541788E7398CB8C1C7B2FB585D4C4B286CF4DE67A44D729DEDAD6200B88
1BF027690E8CE872E38B601BF3C7658B2B2EA39AA997D59AB6F2B5B3ABDE7E77
4A9562AF7C0BE62CC9E748F6391818C93EC9709FC8ED75D437C7809573526431
17CC27165946B36C38F7A09436F7E90B4EC7C96A30AFDD315C33E303C8E9A546
49E58E47595D5F084656491F3E4326BE87E80E575A02891579B910258973382E
FAAEDA777E62B8872575A65BE39E7BB5208D6EEC7A834D2FA3AE62E388DE3D81
EFDAEEF689583C795AF6812978BA87DC209880219609EFE6192099EE5D0D4311
8F44C7D50F9CB7E29C284795C54A137D7B5C7CD5D3FD5BE51373CC47591A0447
F5FCC3D6819DD1FD7CFA9660E3355EB7136C8C3B0FCC8578DFB06D4A2AF7F1BF
06CD02906751F627ACA472EDDED9851B027786E5378E3F85CA39C4D7E8B4A30A
4180C82EA83E89279968550F2A64B1454FEA9CE58ACB25CEB90E183B61D79773
306FE6384207E1F3429D8660AD828636335DE78758EF4409AC1BDB82D8972A2D
F2C1ECA485339CD45795FBACA740FAF1816C7A09BCC4ACA48484596D785EFF99
296DD591CDA939FF2A2FA0532B1467FBDEF4974BC33D659E4FE35AD6DF188E68
6678FCD3797ADB7F11DF67E3D1138FE6C9771C334B057B5A02DF76E61784C39A
951AD09FC07D3B4003F6EF7EDF43CF50EE986B6C5A91C2115F5AE4A8C315175F
3B57F2CBE74601BF711DC3AA8C8691278EEE89D7348DACCABD7F91270912D8C3
736890C3232EAE66DD26470C456A5B426A85077C550133FD4BD0159FEAF7ADCC
1C1157BEA24B5B581BEB5773A39B17B5F08C56EF2BAFF7923026AC3E2F3F31F4
3BAB509F40948DC6438FE74C65DBD70AD748F268D45673F82A86EAA22AA8BEFD
FB811F3A05DE9133F3FF63B88510793057A96B0E12D85F063171E10630E7E6A3
9A5984441E634C25321C8F6EF4E06E1FCA80C67BBC78557C49250B3E3125F2A3
2F8A291BAC936F0A773B226445796E97462200A93FBA24DA2F2F269F57B9D5E4
CAC4D863D857DFFE1D296F309343EE6A20A4548E83713D4646CB70650F9022A6
29D2CA9E5C00A8DC7589371FEA4026FDAAB20D476613FD21E25CE7D1D2FD14B7
3B04097E7DF21FF77DACDDE2B795702D121320408360ED95E40DC2FC3BE72A89
FF61A089E4A51D24E65BA1B98F82D77B1CFB8466F86C099120D6060100D3A3AB
6C68705B4F53F521D35AD1BBC5BAB516DCAF2048034AA4E34F46F680BFD1CF25
D178872988B49269D384363A418A9ED85B6DA1900FCD3F90977A9F8232FA9A5F
D751913714FEBCDF73FD25E666F5DD0F45071DD4179124BBBE777484147ECB94
6F33FDDD472A88BC974F1447C74BB12D81FF799D5AE2CC6C12CE1A1055C0EDDE
6DB893FFF9D4A8B968B5978D76C4371B8D75BEFDBBD9C9DD2240239EC1E9687E
5348ABD11D30F21532DC85931F52AAB62B73B16AC6D9CCF651633E098E159B85
5C8F515E0850BD76BABED03F6B534F2E8DCA7FA83CDB5FC7B68B21EB141CE613
BD3ADDBFE0DA50779BF3B19EED5B0970EC2993D46C2D8735AA9EBC0430DE3A21
3A3A8E8B3CE0C4FC2E512074FC92DCB9C2ECFE7C34C91081AB0F93DDC9B24E01
143195B522B04D24CDCEE8426B0EDF0DC4903B0D62A7345A70968B96B9FA7FD4
0F5F40BEC35C7A38CECA14A674878F24629826FFD7169CBA8FBF5A94BB632DD2
6952AF2EB8AB41A670927107631E8967B531AAADED0DAE78B631AEF99453335F
88497A41C8DC8BE2E767A911EE278753AEB99F18BD559AEB410765BCDFCC15A0
B0B37AC2037AD1C247ABA7A106F99684E8A7DE3CD2D83F1CF3DEA634958038B8
90938ED588FF1E6999CA9E57459FFB60107B2187D246906F785E80C11D5E836F
3149EA9074E781AB7CE2E62489A6308397762BB94B8EAEF4BFDB2795799C0928
4BB5C3A8235BD12A7D6685A722AF36056ED0C522350FCCAEF7669FE2C8A2053C
250670769C89845D582EED4B2B31F65CB4912785771828F61AEB733092FDA698
545EB7BE6234BBD2F7AD0F823ED2DA4921CB9DFE50969071A6B747E9BC1277DD
4BAE729606AD2546EEFD30C76486CF77D29C98FA5D464ED9BD3B3991AD3C6471
4261989A042CDC3A9E2D48810C2FCAB630D5E2690C2FF4D935A5DF79397130F6
83474B235063F3171AF41C2B12D50A15EBFB2189F1CBBE06D3640495584FFB01
E6AB735A64CBFC3F0FD7DB2427C94F9893C5813193FBBC217489DF791C6369B7
A5B2C2EF0B60F062DFD70B1B8BA8F8C408CC7DACBF004351E56B36D12C40AA10
CB193D0BF7A140CD34729B20D5ECDDA32F176C0FFA7A72E12706ED667FBAF52A
63D17EA042ED8F927D48FA0A96FAF63620EE021F94D744C7587B24C53720EB24
794D88E08E2448A57CC713B407D2D25E0D2DBB3E8EE1482A2DF3A83AC539F386
8EC4208392ED121160011DB95E223781C83E9FF98C4751F571A5E5050B58CB89
25981D0B0295538461F9251558A6471D59A20C3151BC25D9218EDF14839901EA
3311EB82C6E8A796A11F2DEF3F068A2BE5920505872FDBC48FF31FD0F2F61BBA
5138A85A68E1205AEBE13C1DE2FA57B1704E1A4FB9BD456FD487E1D1A31C8616
A8567AAF2DCC61C3F2B2B95224861A616399DE338F650E748B1D9C554132E31C
D2FB39716BC709A62AAA86509F4E7FFADDAF31F2194BD9EAAC0506D558D6875D
1A9F3070EEC37046BA77853C8A847FBE2E414B041CFFD8F32F9CE14B0D0DDB56
5BD837F7743FE3B5F85966550F46993511D5EF2445CDA43C96996FCF7BE06A63
BDE79FE58EF66B301BEA37F93C5B5DC8E5C21AD6638E2674EA5DAD9BE1E8035E
2F82438E596A3227C6FC971338FD6ED4F08CDD136F9BF6E34A3A2074A6ECA6B2
3FD1B465B5BEE2CA27F9907315F095AFF0E611FA07F8B1B056523A884EC87085
8690829B16C33EAA08389763CA4EC4C2E3619ADD1C73128C45D8B17F3D3CC676
FA063F5FD0674480743A3FB566E8AC43D26834C82E47CBFEAE3D84F0EF5F411A
96DF04A09E65A5A3A7FDE41EB1D812800545A64041A398B72DFA0BC104656862
F4D9E22A834F1A3C732A2806EDF76C366BF25A5CBC46F41AC80F600785ABDC65
C14E9ECFDB4F8283B00A674B2CABE13F55A49D00528B2BC4041B317BEFECB03B
3D8F866D84D79357F74DE3066B315362A7D89DD6F85D0A496CA60475D894B244
8EFE350D2853E203D689C8BC1DF6B0C8D973986B58A3F54C58FA24DEAB2F6168
6BED0163F658E2C022F8437CDCE896AA3AF6D8A8122F6F836FC2EB07FC78B1C0
884CC85F1EBF460FF31AD0DB080406D96D45AEA8181C03A931BA0A084E650C29
6D0F78AC4E657E71F2C8A43777F51F2861C71E028BE3BAF7817D24E7B98694FF
EB093D7173B0D4E1622AAF86BF6CA3590F0B3A212AB19E9EF62B10A04D92FD7B
4D11D8E810D80816471BC33E54259A9F41765867361CA10D10329FAA61A69C7D
A3F567C4ED32DF90E9F3F9366FBC18B9834A60A328F138407D07EB62E5B1D040
3BC9694D0C81DCF53667E15EA3FB4A670CD81760854710A0C021A9994B6B9040
30A813D5E41D08974DA7C2B02DE1074C1863150B8F9FEDC9D27D28911763D626
1A5588362C8CE054E9B875B38C51ED5C53CCA6A41A45781A647BF4E6E934EE4B
6D871DFAA8E77001DB7E5AD0D613F0C37E4CCF84B9B8708F27293238F2565EC2
F4551E6A13380425AC2C559905F9B500D12B949F2E38B34A882BD07459E8B27A
6FABF7B8BB61BE29DC188D456B8701955C6AD91896B9C3D3CEBD3A0D4E282E6B
3CB443915E9C14E7A9E3630DA2A9BD7D70629AE6337D29D10266562C2491B0C9
D0C74157B8B9683C2C4C5E7609E213FC5D08CCE74046BDE51CDA60338EDF4543
F82D42AD87551DAC54DE8863A4A2A96ED216FBCC891AAAA967E4A9747DFE39A9
1629D9BB3F7E00081229E6A7D672B8AAB79D7B3AA2DCCA9ACDC71F66C174BBFA
9F1B16F69ECD563F8126E87FE2D2AAF22E41842C081255C35822BD8E57E820E9
68C25A2C5A006D34E233FB08FFD7510985B6552F1021C2FD64F1801708266C92
0FFBBA42AD2A85E2DCCC3A0FCE25C18D2A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:50:41 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /arrowright put
dup 48 /prime put
dup 49 /infinity put
dup 50 /element put
dup 54 /negationslash put
dup 63 /perpendicular put
dup 106 /bar put
dup 112 /radicallow put
dup 161 /minus put
dup 162 /periodcentered put
dup 163 /multiply put
dup 165 /divide put
dup 183 /lessequal put
dup 184 /greaterequal put
dup 188 /approxequal put
dup 189 /propersubset put
dup 197 /plus put
dup 198 /equal put
dup 199 /less put
dup 200 /greater put
dup 221 /notelement put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735F731DA07EF3D6E818628
AF05166460DA5B83052A083336C23DE3F4916E3E60E10509910166E063832CE3
29E5DF2FDFD0AA1DC9F1C99A95FC477BF7F113B2CF4626600B1B5DFF712EB302
AFCB86EEF4DD29EA456833CF29BC0C5CC42C0BB09735A0A83143A0560B03DF25
B27B0B383BD641B85E8F6790F6ACFA6A03C77D60425F8B515C48893EE05FFD60
CB40D1B9185FCF7D27FAE0616B15007FBA17D23DBE9347515CC3A932A96246E1
85C477A9D6665D4F5D8F374CF4C0F4CDE76C57C8F7BD4A66071AF94604FBA047
80C65D0357949E03600E099BFE0ECAEBC6E6A636BCFEFC0A9035532476354B49
DFC61218068C10E8103BFF464394C6A73A86807D46452EFE438C9A865EBF1508
A3CBC9CA192F06D1F80500BDD24FD5CE8E953CC1455159716000EA28F54B552B
5725BC7E41FD059A5EE85B98159B8BFA2E1A2E01B57A2D5A74D1764621FAB127
B6288482A723C23521432C3F7817F515164B62B3DBECD0DBC527EA39F4FFF28B
173432D2A21C5B7E7B22E8A3CF60F1A0244B4E71537C44B0B62A13C5827E110A
99F70FBA8CA06FA170A294B7D2FDFD214E224421F6105DDD99A013DB651103CE
A5ACC331CFC04731C3EBE7F7E2B42E6BEE761D04F204611B8F058BDA83E39530
A6428ED9945F0607A9425DDC79DA264D9920A2C868387A73C6091A7CF20C7F10
6B2C1C8D18BD3FBBDC8D5B175E8377D5C349324C913708B879B35FF98F9220EA
91AD9CC44ECAB7F02DF3AD989CE2629E5B5E44126BA5D0279843ACD9AB9E2B84
8E479E9C17284779D98C6B91A7715AB7758F8D4E534A85126A751EC302AB9C4F
D51C5235D9695058F51800A5B9004E7489B54FEE0ADC7B8AD2FA9F445DD25AE1
D6143A569A81F889ADB20D770095928AA2683736CFC43AE8B8EDB01250F0A161
A217AA5465727DFFA210D54681EBAC9A75C8133E0E661BB3D5D9998B3DC4F9F7
A26E5F39869D8A92F2C6994D406CAA1927CD95FA51A2EF4A6A930380C1B97E0A
E6CED0D68BE80F0F14D051F4C51D1C8D7E95F46F9074858AD2DB4D20DF967AA4
018F0F9C0C1264B3CDAE057A524F6E723551A22CC1E673EF58594C1146D400AF
9BC149F209F0E5CAFD4F8BD6946E322BA6986E43E4E699CF769B9C69D794A8B6
D99D0C1D1FB7A3488B92C3A48C1591A728EA025EC45DE4C70C2F1D1542B2C16D
A23FBA49A6947A3B556AE0A107788FD0D3954CB8B1E7B052C728F6B9D0C80F16
C4BA5B8DE0955DEE8B8CA36FC20C11E18CFBA3A4391E8453E931E0F0D9F3FBE2
1BC40B6E94D58583E772FCD67FC4DEC7B81C0717E52E75DE9162F7210BD94169
482BDE3B3CE7ABE1C949A87500A835B44472205E6D40ECFDAF723CF5C8C856D6
9F4A8C2065FFA8A926F6B62F569C2B3A9DA90621D39E683D4663C942286A45E0
3DF32968C5573528B8E99C72ADE81E9FDDCB7204F78052570D929A489406F77F
2F604E39E9BA98E0C3C31C3FDCB7E6668DF839B7E4BE6602240388011A9B6049
98AF515FE963D7BC49EE53C3C79314D6B32257517E446D08D5F11E417125EBBB
25142FEEBF0DD2186F6E56A286781FFBD22E4F7D1E8C164B662571EBAC11CC32
1B973C18BC97169408E0084D9CA78497EDCB6BCC88224B87BEE854FF6359D28D
28AE7F866C9C3B85498721342025FCA95207DB97E0683DBB2D6811C4BD685FFE
8BA79FAFE5BADE2669B636D33C30EA4EDBC69409FF18AFE4F7F6C22B508391E6
BC6FD64B697216D4332293C3723DDA33F47223B7F9EDB757A2DBC9B6545227C1
886F021543A45393B3875F6EB3C737CB171681FB220146A964EB04040642FDED
7472CD6E832D910240A69D1FC30322EE2131724215C3411432CD6573330CED84
87E56A461EB763475A37B2C375A6ADD7CE2599A7FC2C291513F4F273D868D524
D67AF825EF98875B442011C35FE278B17B39D0E02138A012D6246A3BFD3EA7DE
E8FF6E3A1BB858D32D4D98A4552CF181EE40D3CEC303BFF7E954A6872D2234F4
7170C74DBD1429EBE5C8224056408C06841B421C6ADF1345F0792B731FE2050F
8574B8C71E51485FD94D453F46D6D15DFEB03B5C0CFD9C6E2B9DB9EF1625E151
1E42A43C235B842EE3969391BFE6E7283A7BE792B81B024F9CE0001B75BEDE0F
BD5F4CEE5E92400DA9BC2BB749DD41AFB73CF24C174EAC99F11DC3BA5A7DE39B
228D8F3EFCACEF8E4A46700F0BF033929E0F8B265D00AB8C26E6E7B570ED806C
8BE2ECFED6B57BDD24EE8EA1D5267A4BFE9254B60E13C8BF58E855D84ED2FBB9
A3BCE7454408FC5BD87AF94AC456B5559AEAD401AE16F1225D66527B76964491
1294C1759D16A4435064DCE6E68871DD30E44D205F979332471F7E0197A71CB4
76B56A693BE09936436243B7E24B1C4F4F6C5788CBBAE0249793667C2B0476B6
EB03EBDEFCA9141A1587F06F377D80F1212ED036A2D50676744B1B04934A33D2
8B09F91F66063880DFFAA768DC1E78FD20302A6EBB191A94E79FD9DDD6C0344E
C4181CC472AEF36491E7146A6BB5127A9E46AE28D51297DA2E279B4E917BBB60
43AC19484E8A44491B830809B39612D588D94BDED28C058E1C7E35E7C29F300B
ACC16891F4640C67AC933FB08D2E5F4F1D81583CCC0D78CB097EB4C2F3CB40E4
00740FEC182679AE17EE84A3EF414600EF032037326174EE9E16F218C25A1C78
9D0FA5E8474164A19F685F1FA19C6A4B5297AF333B4413A4943DBA0E21AA6B37
64519C3EC7094772A054A48E4BC3F9FA17E13AEE2D0AA6818421B3261D18BECE
3089069FF8A3F033777CD3B04EEAC0D9D54F56BD75F136E50BC3122D1F3E1B65
9679CD5BE6E37652B47C3BD2B677E903159F664B80B77A8089697C23435460C6
FFD3B563A32BF9828E3896760214EBDF6428A343C204E4B8775F2F4D60BC3A01
70A9A6B1CC0ECE2F70495AF40F4E120508FE19FF6000A550D5C0C107C53805B2
E67603A74948DCF1605AD08BD062E487EDEC76627B07DD0589F37838418E49B7
5F0D3986E6D8AFC9DE262D20C9B02D5B1638DF668377BCCB329517BD9C4504EE
2EBE9DDF9ED09BD854AC35424ED93026A78E7FDD3CE418D9858BD8AABA53434E
3C223A102A5764A4DABB31B5EE6DF640F3970F02327D4CDCB580D5B6ACCC83F8
64B543BFCC0B4D98B0A0B7D9D82323ADEF96B2DA64DBD1035F223E84848383F5
A659AE1ACD12890458519157A2FD97E4F4FDCB6544315C921BFEE9B96BFD85B9
7CED
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
52978AAF95DD252EB0D606F78C7E295BB640D1153A3A0AB2A191B9458436471E
A80334C07C23E3D43BC2A56EE61DFD9FFDF3329FCD4DE9A7CF92ABB65FBCAAFC
7EA124656746FA3B8D5E8C9B51642207EDC0600CA659E44717F2BE08C400AD76
EA2E4F62AB149858C2DA5051009ECCE091A6E497D4729FC9924FEC3FB6A9133D
6B463F7C7EBE4EF91B9B17160941AC0087818BC60EB64E687E9349331FDB33F0
7E1D24C34E9E439FB6C392AFD85238CFEA21292B8E1D0991D029790B7831A2EE
2FA82A3B52599EB0636EF92E5D7C13FB08C67361F04482BB6BFD44CEF14F39F1
21263707E73B9BCFEC74AE58A63D5C3D4D773182258E76E62A5EC2865FB5951E
70F9FDECC6604E7D7A3A56648C90B4F400CD61B0B1ABB6B2EB9F977F0DC1A090
109733A75F2CCFBDD27403DE02C363DE41F7C24249DA6FF6A943A97302E113B2
7C840C2A6EFF6442DD52B43E21BD247CB559F781ED48E700C7C6818380E335F5
C15409940D60BDEE0EFA73595159BF5FA6EF014B844C996C73F53F63A48C7F4E
CEE23E1680B0037EAE119E8C5E67E32C964A18B5D20E9DA6FA4E53156DD528AF
830015D7D80E0A7974FC52EE48924BA4AD2AEBA3156D5F5916537207EB369B2A
6B80A8A4B044164ECE1C1FD5A30B240DE3246DFCBBD6E7EF71B3F46D35AF2EC6
76BF005985FEEB5D4A9ADD84C49132594E273D0A94C8C2DE65B5AA436EFD8768
EC53F2288DC8C1B20D1AD0FD1CBCEE7CB7349F8A7414179A76BEB45D64F98101
3705AB6F7A67D8551E4BC879A6461046CD604D79E621DD382967329A7EF603C5
0A96E000463F8247D7CF06FE08AEB09A6A8F4B0CB143A6C10B1412E1AD8276E4
A5A5219AECB4DD34412429A21E2A5209AEC889B4F6866F253445C88F41CF25DA
60A179B44F4CEB366A028D673EDC34DC2C6159ED9E284CCD6B34405C76ED44A0
341DAF52E65C1FB38B5301B2116C44955C2915D4B7B798E25A751E3F95B9158E
480257B3D8DE09668BC0E0C89032CF57B92D032B79403597185A78357377ED04
7D4387CC832764DA0CA27776A840B928E69958AF7F47187325CF5736B6D210E2
B4D770AA627DED556CABD6821B208947830533D98A09B085A9B505BCE3C89C97
209AB149328CA761F1FA47CC3A1627783E583C4694CC3B885A9B432CA1EED6E0
73CDEB024293574D09699B1DC939EB99502D08CEC7C501CF19FF666C18208E7A
AEF442685AC00FA06BF2269045C5E72D99ED8A784C96D4C6AD58F18447490B82
EE282F80AC819391BCBBFFAFAF6A7C1E9445118A4FFC9EF58611F6368706B985
18421D46FDF14A38BEB5BC4CE60E47455DFD9579EB7B080B98EF87B4DE8A43A5
3183FB84BF7D21D8488356D638867F2C8B8482DE5D225621030D5ADD5C92A6FB
F7BB5FE7DA0DBFAC0AC42D6648D0EB9E24932E0690969588CD104BAE6C2525C3
D118F65FDA66747872A089954252EBF9539FDE59414463F5BEE529ADA12D7F2E
B242C9E0A08B2F5B4BD438CFF5B5E4633586610616DBD12B0345E5D3AD7E32A0
72FB59BCE29A68D4AABB72117BBD21E669105B27CAB5EA16F28E33D26996232C
76C89C047E4646E48CCB5D492D505EABA050BC0E11E9FD1C6DF740769FF65FC3
8103B43E7DE1FAAB2D124146E08D97121D3B83F8FD37DB2D6C41EDF8B74D44AA
AF83D66C2124FD165DDF1B80084E7482D6188185870FCD559ADF6B9881B565E8
58FADEB73A28813DFB7757D085229CD7C19CBDFD72BB33A52EA550DD2D0D8D93
B7BA06547EFAF3BACF278B4424D6487FB83B4FA4AFDAA2C9B78981A6615370D2
96F1205CED8C63CFBAF202BE40EE5813BE70AC6C141100367968FD0EFCFF7628
000E70EDA38BF23E8ABBE5AB650A8C4CFF5DD4C92BF8C053C70B6F33326300F9
C2BACCA13742F371EB708116D0E03BF34E9349ABFF7C516F5E9295D628A21D3A
272D3CE58C5CD2F9189147293B0C81507887749D63A77F07ABEA1BA893908F34
69402363E1728F3D8902E3C0864BE1F5005BC6EBD3CA9613CE21A6312D755D69
6AC106B40142C21F78C831AD9D90C34754723F154F6B23FEA2F629B6230BFD81
D072D92AC07B17619C4BE24177CF245203C8460A3B2C60310C10F987DF6A96CA
1F968771EDC9EF951844B94A006DCBB5D93DCECB30573C502A9EF2EAF042B77F
E597E79753403F967012DF37335D2EA0975704CCCC0D28000017CAB16EF4094F
B0AC752E83C23C7B1E59084B5F7096EA5A20C39BF1D6824D26D653B8DA4D1EC8
CF5D32835E4B34F94C53FB691309F12F5898217F5A242638CB5AFFBA03C39E2B
59B5889CBA00DCE4351080CD3A9CF93B8E42E450DA981D15ACAF54AFEEA1E77E
AD2B3CF883777AD1B0FFE7167BEB8857F5202D8CD7C8E40BED36498AB32D5537
2BE821B7549B469401835F9FADF3E2C1081119EA64AA88C3C2424CE34BF7BD4F
2E7C3CCABAAE0F68AE093CF8098E07C01E9C44EF422F7E209C19249396DD4957
19F3FB3D545360E6A98079BAD89C17EE0FA0BBE12D439C0589A81629346B9758
C5A3D2A0E209928F55026C47A4FA30BED2831AD3E1DBB85BA406934B007263D9
3CA79431D36B071C4B68ED2F8997F1A405BDC0EDB1DA9006FB8CFDC77DA009C3
13F891CC49BD7D7521C9C27F16835A47C92DE36F6F8512494C5021B67B0F3DD5
ABF162C80BFA45B7271BE1F2B6BB48ADF59452C3243C2C6C063B2F9583FCFABB
8677925F9811F1EDDE9CE91FF38111BAFB77649DD78499537ADA8B5C1C85215B
8B360A6B3EC5D084D2EE71B168352EB2225C38E0B9D9C7A2EA77F986467DC654
729D9BF54F57E4650BB9B90EB018AFB22E5779DFEBA7463A46BD68EDD174328D
EC24A92BE1E9DED06D91616DEC61D1E0DEF3F084D1C0E48BC69170AE68AAFC75
DA5D3A60C474B61B4F2CD74EF8E8BFAF654A1E6E62824A8576CB79C27C1D6EA8
4E56C3B600FAA57D2E2599743DF570147CAEF216A5AD4D59E373ABFC0730CF6E
90E51CABE27854C5B5493E55ECB9E2EADAED78CA661D7954E2CE24430DD576E6
10FAB838E12669EE3E2DF3CADD60E765D3EDEF4AFE0434C37820BABF43809C92
52665D5A40943818842D70B084DC6D1EE38D6003BE808C8E508E600808C2CDA5
E5DE1B5BA1369DB20EFAA7CA92FD473DF6DC528F1596EF98A27529B41404D5B4
E246EA459D605CE4B5A0C1A77EDC8CB025834F2E921D255F0A2F362FBE6679A9
CED145824033CF8B365CF7269F16145FB046DB6961C9EBA75881367B21D4B710
29FD84C6E9DAD766BED2D6AE09E1D003309C9E0D91927A59B3C39A72F38FEA85
2BE4B3F840386ACAAEA127614B0237F84787DCBD5E2222767AB8C8F4D2EECAB6
87116464F1BC54D7A4772728C467186C7EA138E36E907DD226CE1209DD13BB40
66881E1B8F5673B442C4473068A7D51F0E0A498B4D279142F38A31AA151879B3
7D0D057FA1FE7A7C11D65BD6DCE4528C9E61C9F6B65254A419A9BE399F62AC6F
BAD2A4C04C6B64E50619A6CF07215FDE36B3E92152CC727507ED492B8DC2B874
9529D5BE6C74CDEFBA8FA1D346B462B0C69172AE15667C2D9B8ED5DD6DF4D937
78E6A5C24A65BD957BF9679790101FCBFDF31D90D499E3AC172D12AE96F19996
FB632C941714202317FC40F6FB0CF63CDD5FE5499B2ACDC9C5CBE47139FEF1D2
3D1D353DCBDBE24E475BB974EC72666B11E32332F4D2AFC5C6FB8B9C88C6DB23
69913C9EADF80D431A13D1CA021F0D4BCBB80E794472AA983605E445FE8DA647
D82099F4D9EFFEAB23DD787F9187B694E813C375408BD04453B459091E9DE3AD
4A2E7348E89FBAF4981EFC36CDCC028EF895766919EC79AF1F085E6275D7115D
6ADD7B571EF3561F2D4737A44F0D7200C5599445B5D84AC8E0F70FD0C4FA34E9
B2ABBFA04605EAF9BC0FB52692B023C4F5E40CE2106F3EEB5365C156E47AAED8
B8D8D9C3EEF649F1C7178918604068B2844CF267E8804458E1BC7AAE0539F660
DCFA2A6A4DBD7A3F27EE740B4A1080CB86116038C1234A554F3862B07DFBD114
8AC9EA91BA1925C9A20862F59BA071EC6DC8D7E0927016415178A817D69579B6
B21476A72B6124D093D273C16FDC007F332FFA487EB5069F7527ECFBAC792262
A4D2F6E5FB0529D72B20F24922645004DC5A08D027B4FB3834CC4A4628980FE7
88FBECC240A9B53230B0D079701499D536273612155AB9928B3E06444069FFF2
FDE45B11D2EE800363BEBF135FBDDE40ABEF308B4437FF046649F9AB8B1DE517
C60BC4488922EEA4D008B69D9F99644EEDABF56F99AC59DB0719FB7EE65395F8
2E2F55805708B0B80C6AB44DFD60B28FE58CC805DEE665C934881B7FF3E052AC
7C80C0A7172973A1A4A64CB0A4A7EBBC9392802AA756D295E4363E3D67162B9A
11EE6DFFE21B4F48BDD7170DBF7DF4DAA1C5F2AF786E5CB9AA73627C26114DD8
2157993333227904D8D5F6A7555E295D408B783320EB9EA89B60B29C99F730A2
A5C28E390AFA929FCB76A235706CD3229C18FF6235D64E131FF389EB3B7E8780
F050BD95ACC646A3CEAA3FD3C414286F42A6C0884BF36184C6C5B704B270A48E
122440E07FA08C5A40B108AC544203B38F173388C38B9AA1DFB603863FA67D3B
D8D22F960F9C8C5FF9B8CDEDCE248E21900858C79AF2283BD6D5775CC4086899
BF0188F013D976E6E54C8E9ABE71A47B686391EC4F768137ACC11CE94999A3F3
BE23B64066465E04F70C4F6552F418E10CAFB985B7B94666906CB153A76128C8
DF54DCCE5A22C8DE2B88850C6BD0FE37708F39274E7FE24707C0E0FA630FE713
D22A147E3E4647027AE8A243AA0684459DBD1BA09BB6C117FAD1A364935DC5CE
3F75D7BD55A2512D896FE4E7CC7C7BA56307B5E7A54F8701600E4A11FDBA90BF
BBE07EFFEFAC6CB6703621119D8F4BF422EFC4BBE2016A73BA0B5C259ECDF147
2AB987A9BFB8FFCFF8B18526D4B875E50B0A4437A7979183DC66E9B249ACFDF6
993996A13A9ACB62132420A374051DF40971A310AF0867C9AFE31E85F9DB8145
CE3CFB3E66F9337EC4FC094C977F03692EAB22090580AF7245D8F075DFD03E73
FC22F882D72FBA8C6489BA80063E3556AD5A3C8BB4F51DFB18151B470A1DF808
14F797D3B86D96D011C449044F2F9FBF653ECFC6D454E6314828E33276313F87
B7DEE4CCFACA037A31C009677247D81DD64DB4C08432B89168A66C9F5348576F
4593A1DD7AFD57C667F00D1D36D0C9EA1C0E8E28CC646123FC9C196F9E2B9DE1
FE08703FDA4BCFF831B298E84EA6F30E698328AB963EA2E672773C623C1EDAFC
10D2A98387D18F70784AFE4DB0C4A04F07BAC8ACF9BF56025379DA8AF33E9B52
F7332F765EC4C91E547FC3D3A09253435588B749CB6EBF9144CBBA80F839254B
A9139D06E0FDEB52BB3C3E973A0E69AD4FEE29E32F04AA664AE53777E6C61792
7B2865CE19212024F7346872E875D762DB619941D7618111EA5DFD952247BC28
B35FCF55D409355C8024ECBEA07493A89671965AC8849B098D551E75C9A395AD
A328C73A5E5495B5991CD7704D324189EDB38EB135272F5B1E3268AE510704F7
29CC98DC77C52DC6C2FB584B86825614D41BD9CC986A325BF051784EBBF86927
A4FC38F091329882A26395472A36DE2F8BFED0765F663DE874E43930119F7238
D1CAEDECB60C4864E4427FCFC2CEE1027AC6FD3B3ED165947B449F26DD6C0C6B
B9695EF40FD286D97698534F38ECC398D26496448823DB9712C23098B235D5C6
0A8C6DAB6DFA30687AA0CACFD7CEE5EA93351862CC5A28234C71C625861A00B9
CC577F17E5F5D5C98CA4AF81E4B2E3C36C8D902D1447B9196B6EAE3CC79B741D
A77D776D1C0D5A368A51EE750DEF00E25E76AEF73EA0C3728F29701128D8FDDC
4A585C17344CC47AF5E4D48B2911B250D48AB2346D78857946FD8AF62F8C7243
98898949C5254EDF4D474A840036E3D1E71CA181B2EA2D5BAF31938FC6215217
56C6D7B86A1EF25709A8696D992A928BAAD7DB2EECBF85FFA623E6D3868D6373
B736D4C4F44447AD4745F07DA89B3E9622B911491BA13544B6CF2FD2B9E6CDD1
54176673A003B7946FF936607AF5A380F7E2FB47F55338A74D202381C82B0616
0E717C7C93D839C7320E951D01199A9CAB5225D8B82A812E848E06235C70B4B6
05A6BBABAB53EECAD354A034E178E4D74BA8D332307A623C8DFEE88874284F72
20E403557EE719D796A1D35A535EB5DE7348B1CDE9043E834C0BF9D06EB801F9
6254FE0E60F4B6A6A8635D41FB3F130A3563B3F41BDACF4B2D3B64D1FDF723D9
14D8FE8A45BC26B344E7ECCD28B9BD09D47C0ACEA97CF5DF3C86AC5874519505
DBC4F89EC4F0EF5A35DB876F6E6B201E58AB0C0B4E6BAF2F7777624B250F7F96
EC5D3478644C4EFE51763A6BBD73423B9F065B6BA262CFA9E6F234236C604749
911847FD050AF0DAF4AAA6E77EFAEF267696D16531A5EEE18C1D6E639E747EDB
0FB5BF17BA6302220B185F12CA7EF18181FF14BAD5C0CF2BF1D3A81175526D2D
D95FDDAC0762468D94FE49C20EEC664C70172153CD63ED7F2E8DCB74439B252D
5E1979DD84CE80CA037A7E1DA1EFB315AA5FFA46D6564B73057D892ED8928572
03751B981FCBAB4EF12676F118AA482AE66546A60582EA857364EFDE6AE3C07A
FE022528EBEFBBBA74C965BE407C85D3D730981BAC42A6FEF7F2350C62A19201
17E001C96635E174E17058D823372029D198F695CA4134A0613E4796072BD2BB
621B3CA4939C2CF3D6EC4895627F00526E5239868F7DFA354D7B725C2E2B0A60
3D6AD584EE140CFA2DB6A426B83C71F1C2F85153D708BAD5FC5C424A0863041B
DE28D75CB834F24C780DB2BD058A8C97E4FB528CCB44B05D734893E01415D3DF
C8649581088C865E3B64BE76B313F2C3E279C4E31695A336BDF7DD65C84DEE70
2DAB615591731CD7BAFF119EF9DA7A6FF29C468F1A59D7DFADBBFB12A711523B
F84127510A0717FCBA2FEDC57D407CB83D170D91D7872C7ABBFF6D584A8CD7A2
4E139633A0AF9AF670BA5FDBFCF60D232BE7FE13167500C2538273E792248852
2C9B6704F965AEFC508C38D5AB822DB7464618FF703691BA14423B366071DC91
9D6C50524CE8B24764D050C373475305B0B2B04FF9A965BCFD48E68D80059115
F43950A7F8E219872F88E03DBDFC146C2B3C9FB77D53B63675C377AC736200D8
F97BB70311CD967D167E9A32F8F540BA9A56C190BF2C39ED926E8A89D6B7629A
C89F6D3F5699085080E8FC9A14ED7F8ABBF3825CAF8EC48D04EC7C75915BF4BA
E9A39E1D11682831293C11CD2E4FAE1EDB9BC8B715A54151694AAEB3505AF5A3
37CBFCBA0293A742C9E773790AF0B6550CD18A2C133FB773EEBED273BAB53FFD
35C6484DC0B9108FB8E38B4D6C24DC956BE04FA16980021AAAF5787B986B33E2
A1624489047D8A12A49AD70A6FCD1A9EDCD1754AC21C1902B0B4553CA6B822A3
84BF3949B1CC8EA6D8F10070AEB392715823B9A6C0454366D0CCB8D4CD6054BF
E18F4FB4D4AF098FB219144FBD16739D6250C1D625F19CAA2C2BF5E8DA132D0A
6F5F06AAF9C93FB5555F3E688CB078EF655C10EEE107E4F0316359B19BE152E2
2B7131BF9CB8BFEB177394A770A97F7922DAB613FEBE6A17E09BF9A2A0D1CDEB
8304A99673FB78337904AC4CA8FC923BB9B12D5A1CC49FF9F6F3566F690B8899
05428F549E71F725EFF2A5AEA3EE53E4E48D65C8025D0E116140922BD1905906
9822FD55A01774B2AF392C4772648B5D709102BABBFF5A8EB482FE840237FD0E
7681BFE138A80070ACE25FFE405DCF5599FAD0B8A6D23C4D44A27E0AA4C517BA
7C024CD53711A7442266BBA63CF3A23A338B644D5701348DAFBEDF22F6F7A0E9
6C23E533C7226DA99931EACBF81D4D3E803584E9E517E85022B9F969247EAF07
1574B0513E9AE37C27AC67090EC25B6E6C434BF1C05A3EA07588101A8A9DAB58
8D615BB35E424A855CBD2A9F26F32675018D8FB2842AD1092F491D3A5110A210
CC9B43866B7A1BA6F69FAF8925E7193936AAB23E955FBB7168FEC87D98092CD9
C5F96F59291B4BDF0F15526A790B0B8F6E76B6DE7FAC8EECC27C0C70E20364AC
34DE31804684F610FE9709881A23C732F2B70FC8AEEAC26C7ECA67E59FE14907
B0A746D3303AF4D2B59B435F3A43DAAD5FFE86EE73E6FBB2DCD82F790FF9B0F2
C5108605FEEDD7C190C4FEA245FAECC70D96F35E478584CD00C6259D27FE2893
8A8F6859DBAF6D90166EAF9B0EEC9D937F5F45664109A36B7356A7A1C3511EAA
5E859538DDD5B0EBBCE4BF49830AFCA2AEEC2FB84D1FED039F57DAAA339DC57D
177AC45054047D573E8A7B91329E5E7269283796FA7031B400837472CA5F7D9A
6DBCF61C4803907415B0A7BDC5AEDB32A39AFBEE94DBE9CDCD7A447637F787A5
FF3495CB14FF6129653F2023C5E4ADCFFF4472FAA4BC550C79D88A0A94D2B63D
F6F67CA200CB7D71298B2512B7B995DCC55499B645FB82E6A2CF9548159C138B
2409D3954093316F759F1F1071AB4D7FE3C1EB5419A9DD28908B95F1B879C100
01C993730AE380B7F955AB28E86AA9002D4D5C13B45AE61B8DB439574E673B45
58092C6E27C5D398F1AF774D4B7562F2D9A562F81BD1D7922A80782F706F6B09
3EAE99B5BA3FA0FC5BB9760219E59DD6207F377EB8FA81B3D41277F9FBFCBF4B
24A3845FF656EE27911DE5AC5FE4DC16A22EF6E1D5AD9C130B7BA3AF29444D0A
77C5F82DF6EBF6890F9FD614A2976D8E360F46D74DB381E49CBCD0F350367C70
B8F6EBB4B567F6F584A975443261146E52826E953E151643863F2465719240C6
01C0FCF8C0544435779EC5EDDA6ACEB134104620C51DA55CD3D88175B9CFCCC6
91E4ED7B6027F2F73FD784F62470CAFB8D958977BF63A0FA3BC460E41909667B
EAA6CC4828C3A1A51FA93021ED1913F2E7AF696EF5B965F3D6164785BE37AC59
2D854FD5798E858D0A15852EC2AB5B0A5AF548B1C18D063618B4AF042E0D24B3
CB4C2017B5EF29DD8D1134965AF48472C4A538AAE474E6A4A63ED32F8E5D494C
A638E40B3E32B01D06ABFD31B5B5628254B5F9678FB7B653A6565F5AA0B73BE2
1CA305644A55EA5D029A18932E2952609F48029307D8168FEC0119ED1E6B7D1D
390CB89854073986C2AC1981DA97A4265D15B31639C239BBEDCEB1B55022BA9D
407FE21B350012086538AB8FD595D96BA9E457869E68E4E71960139375D7C07F
3624DF302D3B2FA93CCC059822BB03028526B3484187603555C819474C461706
1A7DE8CFD3CBCACCF933B724ACCC9E7F669035BBC2FBE7CE91FB3ED8289D0E9A
984A2A9B03A09CE20193B8C20E0D07088D2D9AAAF81F8B57E9AE47AE110D66A9
202C67CD38BDDBBBE1BBDBB012DF9513F35023970F9F3ADC6E154D0E66765B56
4FF55C7F735BFB84E16536DAFB23469981853E41B4B7C8E8F901DAEB39E35374
160B4B7595DF40BF08021FC4F8E37BB696B7CB8DD868CD2B4E0869D0B3A5A116
E6D743A0F8A7F88AD5DAEED303533AE73B35D24B68171B0F70ABADCD76886046
F349126AA1E3BFF869893A6C31F0A47A998142D7125A0631F5B38B19D91662FF
D3D82CDCBE86161B4BD1F89E67C80B229984B5A71663B8B06479B4C390D8A62E
162605D304958946A9A3B873938F4A063A676691C47DE5A3EBCB49A22A184140
0CBA0012382AA3BBE0CC5CC6B70A4C3E813D114349060759D4C6BDA43FCFAC2E
7460AE698E50BA40F4B9E6455253D6347C27783E0C3575C071A20CE2D2508337
38DEDD27BC5081D0A78896252A648F829A90F152D68E755E2598177045787F75
9F18C3E68E2800B87193FE03B0B451E13D9CEFEF05C5AD67BAC779C4D4EA14E9
CE8A4F579DF83DB0FD92DA9EDCF4855828C77BFF8A1C4E825541BC2CEA5A58E6
E985C2E4C6C2F677157A3FA5322EE03C6E45027048680317C09C4E1370FC23D7
63E532E03BE4589B3100A1AFF18B03A9536AA5ED52CD064123A6743E127C6786
7E0B7A0962E50C24C671B9500AF82810AFAD59E9FB48276EDD47009D236A4C1F
2B149C3269A3EC0159D8E2143055AE464097821AAF6A82E92988A51AEAB0DA74
24DD0CF388A24671948C187FABF40100C4A79BE124820F4B3D4D455B53F9B140
E1940E13E554E906513EE252015985DBC80C8916FE674E0C41C278E26B75E605
BC2986AC76BF0B14BACF36BE880297770E537BD3BA280CD8260CB1267B773707
2DE85CD024EE4EB2D72D9659D413E087AD81E94C895A6085A290BDCF235D47F4
59F299DF824AD5C6B1B2B16975C5830953128166BEFC7D9841540B7E9730BCD7
9E8D999FDBA7A23834712C195586C56CD23746F255CB3BE48A84A895B98C7BDA
0B01622056282021C7D53893CF0B40631074AFEA3D2CA1298C3BD0263C686827
D1F30A369D749907834425C463406E5531310B22682A46815365A6D4DDA8C057
32C268073F0B954C1FC8313132B0DB09EC0631B191D78F46B139B67CE82D613F
29DA719A411B56593A47E43BA434F9DDF342E184BCC24A04C16C80A3F46DE9BD
68C4C0728A69BBB0B9CF8EA043870210D8C6B1F1828A568C2ABB81D8B44F5049
CFBA90D2CC4206DA8FCA17AA42D43CEB038A8D37C96AB17A521A36CDB41D585D
D70A9C6229FBED1D29D97E8AA0DFEFD925FFCE8CBA42C77C89AAFC429B23FDEB
67BEC17B06BF791C02BD5BAFCFDD2B3D8F0433E242EECEEC6B256155378DAA02
A55E2EFB14A51C51CC0670594EB5C3540209520914622B006BF284D47F36919E
E8443E1ADE2DCCCA748D8B51666DC3703EF83F5D5D6798D3A4DAFAEAB3CB98B8
1612ADB510B3E3887A0445889641B7A9907881A91899667F56C44A26F4E6229F
773E6A43938D178311564FB7AC9CDD5095F0B5B16B62E91720E908BE2CE1A95F
5B0A4A7B3DE356F4522D02299535B6A3A946C6319A889D53560B05BE3356BE43
8546F2F708A7F73C58483DAD7DAA27D1884712BBC2605787557DE4C3C146416C
4EAD5012F32CE21205CF65F03D75F75A04DC41378E58BD33C60FDB1228C5AE56
45A8C0142113022B70CA04AD165B5C641DC5D628F230FE343C25FF466CA310BE
C377B5F69CC618A4406098777B5FF4127CEA5BC70E8B46F2C1CFF6B2B90DF847
1975CAE402EC5CB885D9C681FE691EF33BBA18287D2414BB33121B1EA4422831
558858224FB58B9A9A41BC10A80C41D0CF32D1D60002C49002EE1D7C7FBFB9FE
6AD42A5266E0FE0F5E5857479642EF55C49978A94A5C7465D7214C9C3763F826
70E3F91BC07007FB313AF86A100EE580020901C7435EA2EA4488D3CF843A8470
3D95A7B4F265303BD6BCE910DA2B71C1D826BAC04559F6075A69EAD7D39717ED
215F1928BE1A22293AF542146155041D23178135AC14F02B34BF2B71CADAB13A
301158D5D36EE65D77FEA98779AA4B41F3E9BF4FFA7E6B2CC9A11444A1C60E52
4E56DBC847ED476AEC02ACA484EB4AFD5476EA2A970F56C12F189494DBF57784
BCD075E04567E2390074C6F54FBA2671F30374C2D77A85D92CF06B91E7813991
8B58875BF4114582C20D2368989070B4146714C0D73E6FADA7586218DB1F1FEF
B74A8F7FB6A624BCE753BECED0B5C1903D9AB3F7AC60654B8F34F883AA804CCE
C7FE442C802A8EC3BEFAFDEA8483C87EC4C7AADE0B189BBDC7847911FA6DE475
6340AC3FC9370803DE1A88E880B769AF577C398109A1C63F58954AB17CE67929
32BDB3B105A1750A3E32978FFF4CE57FED354ED1F06E4BE908B6A5DA33620FCE
C04E4379F5AEDD452A4E05526278BED72DF40B424518C96441163AB3E15F0C3B
367CDCED2C855BF4AAF707924AFFF31274FFDA81447E096E18CF95A048AF7933
45F693B817463535EC4D6A053A193A1C3CB0C6FD8AD0A4B2BCA71BE9AE984DC3
DF62DA918D78859F29A8E78C5251996CC4D416890DDB0B14E23209C11EF3573E
0626ACD380E405FC436052C08DCAB86E7DE1DC4DE7E9F0477D2FA707AE52FBC2
FA80D4E1E40AA51F1736ECCD81C262CBEB2DA4A29F5569683264BB991ECEEB64
B9DE8BEA1505C82F88ECEDB409402083632A95A88087946596E403A0D6462D63
F654D52C730F5D477BAF2EE13CAFAE8E9F817A8B7B97F38309E2F5B41A4BF1D7
16D163A5097DF08890C731EBB8E4C9311E1CF627EF65793AF505DF5A25842EBA
046A2D33FEB1BCF4DFC56037CD5F8D8438845F6AD316123621BB3CB6E9E07493
C92AC0BE14566459BEE6955D3E48A3BDA6261EE4F0B9955988BEEF58AB8CD247
88F79B77AEDEFEDAB18C6AE6A034AEF9A2E9D59280358F01436BB90E8C952B6B
E3237E6D54ABB04075431498511E1F266A529B2E3B847C63378FCC3A8318A931
D6772281353CB9761769B41E498477EFFD5728FAF7BD89A221D4AC412F9B1D4C
65C996ED4E7D872439742AFD8AF220C8A485CD0B5091A835501348B91C0C2154
306220932D389770ACB703763F7834AE54BBABDE8C4E5E6E59A7E8184B1F05AC
0C3960E23774CFD9A9A9431205DF25D403678F4964650B21AA31146BA20ACEFA
A754BA45B949907BB3E7B2C757E59FC1817C8967F06DC088C788BA059C16BEC4
9EEDDA0F4C93E42B31ECCEB08D61A556682750F980A3B6EC97195081643D4AB0
9CAA5B8A142BDCF874F49AC39C7CD93331FF3001E37128911AE1A7082D48D0D0
249BDBED25AED6AB7D368B8FF968BB09FBB663D234639833E29C14F4DC2CEAE9
BFBBF9960E56CAA8AB9C41181A1A42E60D09676FBA833176EDBB4A801E1B3AE8
12DE947B60B63035E27F66F8880C815BC8D40F107F01113E6543D942EB98666B
620985B7B50DEBBF4D838175440C7893AB0855341BF097397911E60BFC3FA18D
164923A79CA0F8B83154BBFEAD878DCD1076B181E49F613C85DAED8AC7DF3E75
62979DFE862B2AD0F87435ADAA130B73EF2B65F9616822697B3E11C9521D9EE4
6C48BA8F30D49B326860AF2A347152DAF4EB449208318765F1F8405895F8C6A4
3E35E5285B011965873ABF9CDFA6EBDEC9436208F8546463E2082EC7A91ED6C8
7116872FDB94C4534883E604C9208B5250A0F7C6ECDEEC324305CFCC0B07468B
DE59944B05CB5692EB4D5C5C443550ED723169E540C52828A987B4DE8A43A531
84AD6E21AB85643B0A0B9632AD80924E7FBE024354EC9F23ACE93495E6BCB1FC
8F4F3B28B79DF267A46260BF79B8FC645E6EF5C59B23242635E9A76A16F21293
AF355D34460B4CB00FD07D54B537BE6AE3734783461B3B07F5652D2FE1379268
9724B632441E7575F102AD865B29C225EA9255E46BCA7618C277AFD3239C1F00
256BA310F19C7711FD4F8270E1BFF945C2204CFCD6A5F4EDED8B840CBF0DF326
70C28E71E07AA47353BD44372623BED9C88582E79C66AC673985C5E1CA08F5A1
188665435FEC61EBE851FF0840D678C24BE58430E80B6269FA3855357D7604EE
DFE9F879981B1AB12F9D1326C9D3A7343BD69613E1083724B5CA98A92163FDA2
89217F14F9516895D56D2C47680AAE888596D02618680A5C213BBC92355023AE
C95B7ACA698DEF3156F43CFB185A34566F8F5D825F5E9B7B21BB52046B6276F8
C9C6CDFE4C69D926CB71AB92E019890EE1853777BF53017CE977C94532208708
AB40A45B648151791531AD0169BD0F7F2988B0F80F5DCF494DF364828B995818
043B70644614E967E46F0F6A6CCCD36EBBB1A00452E2F8F8A2749959827691D1
5A0D11109539A351290CC92C085A842BB2484A1C14010C5A495D7FFB228DEA6C
77648B46F082F4768F5A8934DF07CC5E137D12CEC006A3CEB07ABC5AA7184BD7
8FFB170BC147DCC1AA55CA372C2BD3DA516E5B1D8122D490B800204EEF58CFAE
AA1D237D316D6D92BD15558A37A1B3E32784F5D31360BB3CA05A38528E6A07A0
51E1F3D9222E30843919FAD238128F835F09658D47747C5EEB92B9A377BE7F5A
8F19338026724C5B32AB8285D86461F7C6C81CDF7AB39844C47B58A02BFE6E1C
1BD0ABB8D8C403158F8A6D7732C5C1BD52E2F69FDE2AB32AB3C2DAB32ED86C6D
781E56F9EE840DA345CA09B9BB7D76A58F4CAE489C35DF4A5E84558EE33690EE
8E0C918701EAF0A79A0D785B0164E2C12091ED9E7F2948D6FA00AC026A151025
DE5D84D4AB6A4AFA1CA1AEFBD6B1D71473CBCD5B9B2829338D699252F7CE6D18
075BBDBB92DE9606A73FF7E84EABC4535E0EF20ECF7E0F0586CE99C7E1EB130D
0B63EB5417BBBC7965A1602EADEDE6E98B9B72A0010447A9F16C3E68D5650C10
A67F0A5D0D2D9A05EF5F440CFDA3C30F26E2BBA7AB9D583DD5D0ECDB745D8C68
866DB735A2C27CA144928C46DFC68DC9AF32169F9BD9F6A7AE10804449BE9A6E
64B560D9C35B28D298F0C10624071D24059B0A3E1A9775B95804EDC3370F18C7
1168EA84AC0226A35CA235AFFA3615DC640A099D55D0AF754009A65FB60DAB5D
A1C05400E61232A8E8F01BADCE23ECE9B13C26191BAAB8AFA6BB9B3B0D169982
790FC210F9A836DCEEECEB52E54CF538C6EFF02148141C439B90900F07AD25B5
6332634EF8A3D7E600FEB594A52CC986F53B7F753898B267984AC7BFD509B03A
E6D0A027FDE5C04531D8D4A43E1541E7675796502C689C42B7FB8249850EEB05
2F6C17DE165952CEB5AED549FED3CC689DA52DFD2AAAA5B16C813EBD614B28AB
5010257CF0C89B1679658E5DA1DCFB44A3BC1E7169690C98B9447508DBA4CB99
22B50A8568D8C0E1797F64611E5703B69F219721AF5CF1AD22C2C6BB5F32073D
0D84B2B67804A2E129DE302FD3B38463F11D4C896339832829D823D36570A239
1B29FD50ED158CE4825E82D49A02BAFCAABE3C19C1CCF6D2FB97339E58B81306
A942A70BABEE972D108AD3A6BB276CF6A335A273FDFD656C6ED519B44CE18F66
AC2A7E982B2A859136096DD2CF5B54908F5E42773E37E2ADA1492E747A7D448C
DDCE9F97632A09286712B4B039B337F0B6423937CE993D81CB3B74A262E53E8F
5971384E91AAE9B86A9EB1C3EA8357695A26EBE313A0E059E2FFBD951D57C73B
08A9CE9898FA1740573C55D212F76FF202691E13C45F166F83F07B85DF5F0042
10075B4D781049A9C36267DC704FEA8BC4F9EB58CB99BC2DD93682A6968642DE
7A4DFD33CAE75D5F00BB8D9E3CC1118CCED2EB4BFF78854BB004493BB480AC8F
BFA6A085A7E7D105B89DBD2F048641F72AD0E77B7737DFE562FC4344BAE7F474
84769FCCD8A980C19D34716B7F33782F9C53AE7EC5CB64BC2C1422535343318C
8F7EEF9B1627188D185867AEE9F84363727CBC7FA5779EC6C810E4B396D71E18
280D89D8790909CBCA9C1C0A015F752276CF6817CE51970A6609D7750DA9FD1D
E59D3B3F36AA1EC6ABED8134132CA5A800C18AA76D9C5A0EFBAB9A706F4BB7F3
1E560195F5F4037767807A5BEE5ACC3E2F1B471373314552AFEF6320C57D93C6
6DE12AABCDF0EEF8C5C4EE4940F34BBE61672837C898D55FBF08B3CBD5202A6F
3C0E3519A14E3FE33426A07F89952A492C7A5C88C48AFA97C9468DD8644CAD04
FFCCD098C55C3A4145AFBC10E8E577A6603FAFED7AFF4E2C7BB1D72660463436
7859262FB64DC4B5598DD873283CED89116A52FF83523FD8217F8315E1E74FC9
33954D16031068F2ADE44A72D8C9DA1D3B0309F906BF508CAC19939CA1C8D55B
4B25596078844CC2141211AEFCE609941EC3572EC309320F568D48065F96BEA5
F48C7498988C80433C6152B7D6209F1F8491AC96CD2FBDC5C656BC4A605E6EF5
C52741A018BAB5CF03CCB11BCA7CA6E48D00D191C963350D4223ADA0AD8FB6AE
73B9FDBC280EEC02E7E0384B02DED32D740BF0BAD491F984FFFF3198693A0A9D
138695BC86815BC81865E2AC8C456D7AD2EC09C8F02C7D5751365CC3AF913C00
6F3C8F03D4280E41560AB466F31654E866822521B1650A0CB6158C196B9B9AC2
79D22E63FF06B0A3B6E911C956A81701E12E178678575B178E537894FF25C575
B7B5F7D2FE606DADA5FCDAD209BEAC0BB148421DA13020FB41A46F0CBE799776
640D0D5F390C874BE3BD9F7149417850881BA27A056A34C76D5FC193A7DA0BC2
E023E354FC7397EDD7068E9CF789E12012D544AC2800BBA8E4D50DDD9F1AAA07
8B3065ED4B33F641C81075B344053D4BA5304371B9457809E7AAC310FA091C38
7EAAFB0AD9167DF301C7FBEC610C47B4DFD80F5BC924F6D7AE42326E04D1FC81
949256977B6BFCC0E523C3C7C3A151F192693175DDF5AC0E56E25477AAC22B55
743EB60147B9A5813A00AD4B72118AC62DCFA578C26D0051920D3691825B294D
741CF852E49B5EC900169AD5D6DED83C0257D6791D8160F18C61E1E27458E176
D41A9DA60FBEC49847C644D4999E786FF4BC9B1EFF2158EE23BCA889EB7B45DA
56A1276C1CF979F9A6C6458C117958E38E666881C76E6571FC9A45B20A7AC39D
29B3C7B78A15F70B923DB5E6F5FD0150689DD30E83C37200BB58A74A37CE46D4
B01CC97B70B11287C0169A7C12C3519EEB03EBC84A086A6569EAEE561DDCF68A
4393FF304D594996C0FB1230337F7CF67CAFD9CC6E7FF5814EB27B71E72B7261
44531B3B262DF68B817F566056B285EC973668E60B2E31698814465336356F9C
C73E25E8E2B0C5A9635022B209C608F0F3329250BC0AA0B266729C988FAAA011
C3236566845B0AB9464EEB46A5891C17FC1C4CFAE33F218B75835FBE55219C92
5F3A6B37BD5CEEE99B6BF847E4FDE2665F817CAAF907B5EE6BFE7B3FD307D353
052373E7B7B1A04EAE440DDD3DA94689042E7BA0671907FBCBDB3A0D66933FF4
52EEFE9CBAB4779CFBD762998411F22CA8B9BC9CE0D68FFEE6431AE078968A9E
5B93EF0365DB503800F46A50028FE1F8A0B450587A180DDD97C7298891293D59
8B23DE454F58BC22DFFAFCF14A2D71A0C5D1FAB7E056469CB611F434451E6A61
80A9A8AED9A706EB9ADCDA563B3DB68A1328B992BBB4E1C6A8F4C8C667BBD0D2
6E04F322C4F19775314DF5DD59CE3FB1E0834B585A72F961BD0876655816230A
064A8FC36F249F1602B35EF00727E5917FCE2A912A348F3A4917D62C6691FDD2
1587D4905F1F96D77C140CBF481020B9431E02388AC75849AF128F1B54AABAB2
5B7D6FC55E2449A3B7CDC7B2FBA956A7809445CD6DEABBB3AAF4DD4ED4FB6BC8
3804E4B645FBEFAF4398A182DC82AF4CC43BB0D924A39C351BEF5D55C0239724
1C177CAA95F9E8849B56B2932F2664A87B10FC974806D656EDCA43AC834B0615
BBDABF81D245DB117B7D289E243190BF2A66C2BD7F6BA2E5C18FB4C3978FC428
81EC14D3567DF7D014D8B529B4284AA43C9DD2A2EE3464DFAB3897A079033B88
8E9AA72797F1117D8182E3202466D8684F8B055523B1D411021DA6BEC6A81D27
1C040D98327E43CFF825C0FE4DE3C8EB57B575936D4DADEF3FBC71A30B19AF44
AFE96A278DAC952ACE663252DEE95525ACF797EB16ACDA480F4CB73CC600C4C9
6AFCB34FAD72680C039C6909C083A65DBE9B36BC8D1B7F248DD1A33904CE18A9
DD25E24521EFE4ED2621E059EE4CD6AB487B2097E8A81D13D97919FF3CBDFCCD
3DE5EE551D464C4425A62DDC81012CA0139DA6B3049C7226403FFDF878A0A11B
ECB398290ECB3D31FF100940380D089CEF1EF3EDCCC0E02166944C8BF9618046
B213FFF213E970E7B29B0377179FA3BD073CA3424453DBCB105A86EED1C30632
9C082419D06E1DE495CAA9090A884C7F3486A40BA3B96A51077CD795BA809B07
89764F705B56956B85232FEF995E005963B0297BA9C790BBEF8AF042BD0E416D
E5FE50E11B07000BAF9857718D90B918788675A7DA35062669054CABE19FDDC0
1935D623DB51CCAF05D9089135E7A7BBD6FB2F21D144C95730797AFDA8CB1EB4
E991DC29E4F9E3D8923BE2BC5F393557F2CD53B0865E477ECF1453BAA5A39B7C
53167F8C2399A9CB5BD7D618A6DA3AF5216F67BB048E4141BA945A04C9300E45
B6C9335CBA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters-Italic
%!PS-AdobeFont-1.0: Fourier-Math-Letters-Italic 001.004
%%CreationDate: Sat Oct 30 16:49:00 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters-Italic) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 96 /lscript put
dup 188 /pi put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -249 825 751} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D440EF
6A6F1325CEC03C3A3F20FBB1DD06C21761D70838D1E83592E85E284B4270E83F
629BC6D3971271C950F0BBBEADF671311AF5411D45ED8085300D8E64F313462F
D04E2C3161217FEF562725FC5DC27438784EC45E8F533487F0B4622BD496D97F
F162ECFD0A3F379AD617BE859FAD42B9260E56747BEDB156FE844C8F7CB9A067
E940C5658DE86647C65CBC0C2C08D79C09F07B00890641C302576D48FCAF0EAE
D328445325AAAFFD80EB6CB76F52E22BF04678BA9FACA7B18B2CD01D95FEDAFC
DDB9720701A17522D74D4DFAF4F00E2534412DA11B60161DC23E13B16B54F7AA
8730C5C0AE9AC9EB6903540CCECAF0312A0E4E4D61402D7A7B1775D9591A2EB5
F284D11E9DE117B588FE6BFCC3C2965579F10F096E83A53FF334587BD24B0D3E
5783469281D7C7514BF9448059616084FBC5B2B797D96E7C7511784C9E290A48
088817AEE321C6C7E1D103680C8B1876C552361F3F6C2AE4090C120A08BAD8E3
5942031F8A3E739BD16DFDD228F01C1A01233D1B633BB37C6F1CCAB278FE8F8D
F6EF0C61C428EDBA1DDC254EF1F6109EEBB032CBC33DE7E1BEF1F4FF672C2D12
F48EE105D9B48C8FBC0C8567FDE51492E87EAB9362A1F3E3670416B0BC64480D
C4BE1681D05E3DD8B659CC8643CBADC4D1D4CF4190F7DE32271EB1DF06C7BEF6
013ECBB9CEC865C2FC9620587044E26D17216D2F99571097694DE10F548890AB
ADEA3D9EC11501D1F492837CF931D1CF1A7EC8388DA83793B661D8057DD36586
43EA5A9CF4C7437416A31C5CDA9FE54518A2EBEF1508E16AB5B944840D233F12
9DC0F470BFFCEA640B6CFBFF6FA5585C8E369D3B09C6A08A8ECA9D2481245BB4
CBD54FF3DCE252AA7F9820491384089BE8305D95BF3D75687FCBE284E3D9AAB3
77DDC1EDF388B813093984FC653EAE2FF2DB66CBB224FBC82792DF3FB4079CBD
D733D6D49EDF9E2DCD9DE0EB684D4C5B6D7F3885E9C40DA67C04412F6CFD3521
BCC425AC9484A4A95B78EACAA2797AB58B38A5CDFEA4E25BEE707161B0444755
52FBC5C4A8CEC877DF9A6C518175212C74E1EC2B4551ABD8AE83FCFB3BD159C7
3569A93B9D1F8DEFB980018F369F4720B92014405AD0EF2B7E4FB2E203561018
F0CE736461D2BFEEF8BFD513B0380993B8D52A6546D6921A1B884CABA6261D56
0571CACB5F15D022A847255638493156301A8EB7277801B6E41841E2DE908535
2848F0D8B554898FE557F69574567035ACECBD472DBFB9F42CB40A63BBEC54EC
63CCB18E93BC17C32CCD3CBABB682FE69863D29863BC86FF201FAFEFEC05E955
74AFAA473759440CB93D25CEA7D30F5F172527DC0536502358BACF8910AF5801
2C56EEE0E6467948614049610CA704337A94DB0F71FA477269474F88D5A94ACE
249E4FF15785DC708C5E74B13618080511E463091E2AE2CAD52A798964541489
F5578711E664155968122528EC2703E4813D38B6E42113EC9D9F26C400FB88A1
4EEEAA4DB238CAA5F8F057D0A58B4EA70EE1112B994A0AA4918803E30EAB8208
B25345327099C4B7E304FEBD23641E7BDF0E55878C954EAA303F54CD4BE49517
4D78776B2B11499AC19C6D6D1DF0F777B9C9266ADB144808CECBA71D815814BE
2926B07DC6C5F6C13BA3057108AE1980C4FE413434671BA8D24D15A10CBAD878
6717B873C6133C01DE1D3282EFC5EF517B7F78D6686DE8B959B39D16D60A1F41
57F2F13F05BD71835A780263203AA0E189AF9E99FF6B8FCE4A849627F1D6629E
68F05382687E2FFB9C15ED83E3EBF9A3C3402A6E21A3D2D3B5A27F77EED28294
591364C62AAFC62BF5E9162D94C87A73DEA26EFE2A3F8574B28C255D621C5D25
41CC48E7D92D9E98CFD471BEA3433FC9A651026C95C724037973E3ABBD8A3E56
26BB2E45C2B427CDE0ECAE92A04EC1A2076FAA31893F67CBDFF3A4E9D275E0EE
D5F3D3456290DB57657946167A8B7F6DA8067C686C5BC9BC9FC56FB8B9AB164A
63CC34BBFDFCF8FAC053EF06B05A62AA53A6F234F54AA9F6D7C8352DB6CB619D
0BC79FB4F7B9B3FAAF425C5E8D010F6B92D48AE32050F947199C27A91F040E69
8C7B160717E0A7C760102E602F7B113315A25078EEB6A4FED5E095F2F0A6A847
BD16E183AC939CD44BB2B9B37015EE76BD10089D891A0897A1509BA0A910D2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-BlackBoard
%!PS-AdobeFont-1.0: Fourier-Math-BlackBoard 001.004
%%CreationDate: Sun Sep 14 11:40:06 2003
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-BlackBoard) readonly def
/FamilyName (Fourier-Math-BlackBoard) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Roman) readonly def
end readonly def
/FontName /Fourier-Math-BlackBoard def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.00100 0 0 0.00100 0 0 ] readonly def
/FontBBox {34 -199 886 747} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18A96F6D1C771F81C4B3B8CF0CBC2E8
4B44D923DDCE84E17DAE82547EA9EA5E732D78F03AA245377BF0780A3752527B
6E63F6A41202E7A6C4E4F9330A0AABBD04387E12F2ABF531216BF498DC6B6BE6
06DD50B385DDB864515170905E2BF225AB9AEF29A2181200040460795735C124
59C90AE9BF9F01F42A2ACC5A5D97D4F6548FBC903ECEFE9FBC8492EFEE55ED6F
F29A7BB50432A42FF30DB3CEBFE1C2BF83D613F2C846B7F2173F00B4EE5FAA8E
12EDC39BDDF670F50F6AF072673281554416E77FF134014D5C465127C28647BE
3E810BBD9EC9F9580C21D2E9479B8F0435749734B76F4C06995E769710828768
3141ACD67803BC92D5B405AEBD4B25D5DF255B110F1EF1C35D45D24AD0B1E0C6
8816579DF17721764D5D2CE396276ECE1E6142DC2EEDF83FD7B65717064CF671
051D92A9993F82D241AA1C3254DBD3DC53886264BDA18DE9FB8F584DEC9A32F9
82A6131D7140BC7926C074E26639A7141B87ACCD64E61A25DD7E26F463FD7834
964655DDF83538CF1DEA3D6363DE79EBBCDB429279F84F5DA8035CE823A76FDA
C2FE77036F5B9D71C0CBB063689C0C9770514E550CDBB1BE97D763729B78CFE3
DD162726B3F3190F0003F4812E9877545507664B32A1BC0E6C933BA64EEB3563
39606495CEDCB8EA6E63ABEC9F3558DAA0BAA350F45A6E9B145480D9513B87EC
14F7551489E0F96B698A104DCDAEF9160549D551093AB3F5F7EBDDEBCAA3ABA5
F0CD388ED13E9611675BA045A8E99C002616ED89D1F3EF0537C6E787DEF9B5D3
F20879DF1555A646A79400D3EB80A209937A45A6345C4E51748D3A5C523F9F93
FCA3628D463FABD8537A948B3A3715BAAEE70345F5186A550FAC78ACD262E671
AF8FDCC133800B82183CD17B4EA18EB6AD976F91FE3C1447EAB9EACE7B9C1BC1
4A4900169BBA8D40165ECCD95F30CC2092FBD829946232BC4DE9E89FBAD3CFF6
2F1FF73D0D74B9F6EE78EF1B5256746074600486B21F5E5803BBEAD89B77291C
9808EFEF9BE51940D1558297BD0A111E399812A73B944D727A4F7649B7D8DCA9
59C2AEBDD02287FC0C1672094C8AB5763459631C097E3F6CD2ACD95BBF413D8D
505D003420974BF2C37603AFE15349F2888A630B27F0B1CD38343C9904E055EE
DECB39C4D4751525415F804E4954BEF10A221369647AC0C349F7C1D82CBE2E63
184C8945FBE4998EADBB12AC0BA187113E851B1B1B47BC8C45B40AE4FA456390
89A7BF7A14C902F6D7ADC9D7DDFF1716B64996794CA24D2A9902C78A682545A7
A1E828E340CBC679E750E1C0F42C58C912E9509A711B7E4899C8836530F63C88
22E82DE68C52BD9DE43E59097D8E70DA29237CEB7BFF4558AE8A0A3896238651
3B071C94A9BB435EF621DA5EF92CF7C752C8DD03D861C58C2E0223A9475DE6D1
F93154367A16A84DE4E6FD1D06CFCACB1D1484D939BCAA80B78A6BF42C5506FD
D9EB3A74B945666201B2EC9FE90060E17CB920C0D7B83014871D2873DE46F897
83F35683A6A193CFC080B90338CECA16CCD8CA8FF6E553EE7B4394A8B1DBF258
53D51A358C541240AF0FADD007433D7D2D3BFDA747BC3C61D396268E5F37F942
99275952CF7EE0F2D2EE8B87FB4B542FA01EA63750CDB6858004B3F72ABA1E31
E835743813DA86FF010ED1273286A581DA2405A136BE0F9A0F84507C14BABDD0
0AA3EC1EB3D426D8836BE7C0BCA7616799AA13235F0FFC6E25FD3D6ABBAEB4C5
A5264EFF923E647D9CD15AC67C705234BEBB338714C514E82A78D0E0B382CDBB
E8977A8EFACE2D319908473A4B85861F6CE3485B948D1DEA3D3EF2609F7792E8
8DB5AAFB31DC3CE7E1EF1C9B9536B3C5BF838462652174C182
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Extension
%!PS-AdobeFont-1.0: Fourier-Math-Extension 001.004
%%CreationDate: Fri Dec 30 13:47:17 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Extension) readonly def
/FamilyName (Fourier-Math-Extension) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Medium) readonly def
end readonly def
/FontName /Fourier-Math-Extension def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 41 /bracerightBigg put
dup 112 /radicalbig put
dup 113 /radicalBig put
dup 122 /bracehtipdownleft put
dup 123 /bracehtipdownright put
dup 124 /bracehtipupleft put
dup 125 /bracehtipupright put
dup 161 /parenleftbig put
dup 162 /parenrightbig put
dup 176 /vextenddouble put
dup 179 /parenleftBig put
dup 180 /parenrightBig put
dup 181 /parenleftbigg put
dup 182 /parenrightbigg put
dup 190 /bracerightbigg put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-32 -2960 6882 848} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F6FC13F6
FEDF4B792B4382E1B8DD4D6B66F7698F4BD76CD673F74E2FFCF34A3EACBD4F3C
C6A935F0007CEC07779EB225FD87A32485FCF1300A8B140DF1FB601966E239B5
C97A004A4205CCDACFFC747D59C0AB62F98C58566E92367FF923A747FDE768F2
BC84EA22988D2856786B73BD956D58D8E1DE05E3B73798BA7BAE21AED1D65A51
3E8B275C326E384F909CDD630CC3B3D3A664C6BB0A43AF3EF5B681E8178A68F4
18925BF7234218D39BD091D0B241B2FB96B24A302B7A2C3648C0BEBA299B1422
B2A246F4DFA5A9BA475E9963604E772769D365D898BAE237E423E657C64198D6
C50DC4E23676D32A80D9FCC26CB7EE5882A7CD7515BB142652043EFE62BF1296
C02D6A59757DAE8B7ABECD31FB3886ECFE4C018918AA771BEE2AD4BE22C921A4
50F44C875C97D243655B17F1C1C4E4C34EF324C3BBBBE230EC9D5EC568CA45C1
F0B2F8760CDD8F8CC7A19377F15ECE29BAC75C965984E9E5C246419CAF94119D
CD396DA99EBBDCD62D4493A16F9D040A24BA632716AA2CF3E8527A11E08CD983
08E109D5F610523FC1A976251F5BDB7C51EC9559890B4E838A6B7AD783AB3E61
36A0752C1C9586BED6F91B6B2C31BB5EF83E54C2E1A67785891B6161DDC05BAF
0C11DF8939F72ED4C1CFD293B9BBE5D7BEB0835695972221F1D1BD1D197E1A3E
BF18CEA3EE0C05151741C87469C417F1331BA729FF30D6CA8AD4B25572C230F9
2E250FF7F828D5FDC41884B337483286EC37AA4563EA5AD6F28E5227E8EC3AF1
6038BEA4475B0CD36D674A344E85B43BA3F22462B286886CE534D6C5FD912099
3A92B663224BA680BB6D7ADA2F0D0A2E70E3B183C5952EFD288BB1F787B9E558
AAC41DEDA6E48A8951959336D5914E24F5CD5535C3E56A8EB5794980739133DF
DC62B7FCB563829ADE6CC1D269EB8BF7FB2277C78855BF64EC9BF694D1E7BA89
629CD8492171048BBC3627CC127B35D443B9E4987D71518DB6784756393CE1C1
B41B3B7C3CC82AEDDEF7FBA2546ACAFD43498D6FF77B12E0D47F4F435F098D34
6360D280B813A8BEA26BEBE94936A45983041115DB80EE611AE48CE6F570493D
30555065F649FE81E6B3B1E8D0ECC21206BB80BCFF38644B56D900C34AF2FEA3
57492A2DDB2FF3385AC8D35003E3E298B9771E1C2F962C2514671FBE467C5709
53BFB729938208E4B057BACB5B06F67DE30CACDBCAA3805BE7AA8732F1E173EE
5C8F074CB7052C8103BD160BD12FA04C8A68652228620D2FCF04A137B98960C9
C56E4D4A289B0FAB6426CC72060175B77DC970107833484674F87E25FF5D8E83
1EB01245DD5EA9C4865FEFB3D2C93D061812400C2F5BC1E1A1E7389DE4808E61
20C9A6ECDB5C9BA2B9A441DA122921AE690A11BE0C3F9CF0F3B9E559727DD530
8332B7A2261A529E5A19177BBF30C4399A266CE0B3208E7F3A8A96C83F76ECD2
882B91FCF7E694BBEA02488CBF10A57518BDE41D6377CFFC482C0214FC121131
5D0D6501CFBE7E0A995FE1F23ED1AE1984D78EF2399E862A20FA66812873FEAA
F44747FEFC5918EE391ACC2EBE58CCE03A260F2E92C7807C74EFED2B132A2915
E0454C2ACD6D7EAC386165819C19C75470FB635CB7271D8A2DB88965B8D22AB0
4A724DED273BA060E797C1BB73CF35BCFC3ADB587959D05FAC426FA4A439A7AE
A497F13E68160AE0D42A628E9CEC9E0B59788EB9B9FC10E4245E1F1A6B012114
F6CC526A2939FAFB6C30A399FAE5E0F97FC9B58B6A605314F854A16AC3011DA8
D144B6C814E2F47D48B84F12297AF2D267279A477BC4EC6AFFE3CDE50F7693D5
A4D6BF6BA810B780AD3D7817E986BA77EC41DBACE2826B07DD73D336E5B30DA5
1C210B2B158F31ADAC46B63CC00BEED35638A2E8173445CC09C9417A6D014C32
D1DA4DC02F8945783A3F7CAF0E5640EF885679B52176D5050CC74FE61207B161
E6F39D416B32570E543C37DF2901B611D9294AA5AE9F030772112A25AF16F681
50C378455FDD227E63F22FE0609FA7DF61DB5F15EC186975859E069F70F7D46D
F7F488AE0EDFB11A5257D782C58A59C0F4400503EFB9FEE2EFF78049A3C48F0C
04268D0CFE36B7DE1C27CA6370225085EFD5B0DCB80A1431FA4C9142B0368AFD
3110CEB50ED276FA78B4D384FF8D39CEDEAEEFD4AC9D0810AA85FC712ECE17FC
EFAA298D9825EFB4CB96DEBD076BAB1051616156988E5FFB15923C6B46C57CA3
B136118A7642C3C74BA5ACE4F6B8CE4C28D54A4C88190BB89AC5223FAEE8CFD4
D10CEB9D2168925AA902EB249AD43B82E4FC4C8A13C87EDA441F75211F9A17B6
FD37524D3CE6EE3E785516D1B3A1911F7A23439B0BC5AA095D6677C836A77C13
3BD85337C26E4F7848DCEBCCC5F709ECC3966D194A7E62BD698DD5679E6E2385
E74AED8004E9B536B8FD359840D013167A91CB913179DC122257EA0F5A40C8ED
6E12B65A00A073D791A0E6EFE04C124AED93CDAF096CA364D8F86D069BAFFAC3
CFC7972354D7FE14B278B5523684EDF2BB0F06A96A961A778E1BD6CA3B56438A
51353F490E9F13D343410BE2F34A3FC3B846C36D4479562B9E6C825D6CE88E9B
045894DC10B68326A69F9BCE3A1112CCEC7FAE1C6D1E38504DA25C13D5AB71CA
01DB5DC73ABF800D29C488E71EBDEC95DD9EA596F871ECD2B7672B2E2C1C5374
35F58AAE064545BCCF19F1854DC30F29F5A09E6ECEE60D32D88CEF6F26372891
1C1B5229300F836C69D43C504891B7FE2246A40C72E59705A29002751DD3812E
4AF609B0426006145FB04D76CE28EEF5C8E657AD491B97086FDDA0B5A8EBD1B1
78B764D2C8CA1036C2EEEDBF8E0C2ADA978CB95F974CE4691DAF94C78EB8519B
A19E0DBA8EEB14038DA9DB915782FFC1E792EA4945384BB765AC4D2DDEC40AAD
F05EA874448AE5CAD68BD56F997A2D7377195176EEAA09FB91DD3527B8B50A87
6347D5F9C5DF506A54B351E9E013BDDBAEC83B6294A42CCDC17ACD440485704E
F8D939B5DDEC74738B988200B32D42122459718EED890E4B6F300C38BA62EEFD
3159953D4E453F12E210E8495057AEB3AEE7BFCEAF60DD349D5C231BD824C6A7
9DB172ACC6A0A5E477E33906F19D011620052DF82DA0FE4178C1447710C2FEE2
9C82A6CFD29D8A846D744AE36CED11C0A9E39972BAA2A06A12CB73D65981E5C1
87DD331C258F0094CA4C8845394670F0163756388A079D37BC282205BB52B312
B1422C44DE8FDCC1C794606300ABC9365F4FDBA3FAEE19845E26E2797372BA8D
590B6E50BF3F0DD4F73E9F38F7DA76DBE5C51498766322716BAB6C98FF1915AB
20AF7510376BA5CB3E7DB9BE861885FF8274FF001A1DEC47C6AD5E4ACDC538C4
B8248ED4304FBE7CDC271B4C6905CFCE775FBE0813FDEA29D0D31E749895F8DE
00A1F0ED4CD157C7299D0239A9C82D1915AB177E041F944D191CD38096D63C47
1C190BCBEF9FDAC5CC0E22541660CDED6139837A1FF4350BEEB8112D469DF3F0
D076303F7587F42147756F6BE8CA7A13E5CB0FAC3DA10A1073D8EF5C14798AC8
0A3CC9EA93457FAA8AB898B2912EFAB850CF099E005BF5132B5B5D0C92D38594
1388E224C5D9DF9C79F8EB3BE9C25268AFEE6D07923F8C9B48BCB11281FBC315
ACBA8CC4D1209148627D5DC61A4FFE259EECF10F7128E88B2F086B0C8EB30E31
4BD3270379594617A984FCB7408811593D5AC155DF28F5750116B350E80359B7
00225DE3CF241A1A7D27EEE3AED08505C4AFE9DC1F61B528E8EF6B6500DD51D2
8A036EE401CBBD310C48BCE1FA5A770F033BB56B747FE330B69D218CF47926BD
A71333D1DEF1F99F67BF4CF3E7B025781605B9640153F207742D00BAF00FFCDB
A30CDD400D3C5FE451045638F519DB3DE1A86927F097DBA51836C3785D46A342
D6D7B7F03D037F1A9DC389035532CE822663DA97616F351B8DFFB7FEE0F8F3DE
E65D2EE43A0A03D88EDB8E48489F157380D93C33C4B4DB526D9F2436A800CDE7
0B45A6DA2591434291AC933D51FEA261B7BB0BB53ED9A33D39BC436D9FE6C02F
6148E87AF5C3F68D277F7861587796CA8A6695CBFAB2AFB12CBFC981E7A2A090
6FA8F23285066B64BB785632E3FBAA44AC1D85133322A893F83D5AB3AD5F2BF3
193E605C34BD7FFA0B2D55BAF3B152065AF210AD21818F9E0BB24E1F3EF420AC
9D0C806794FFB00B3B59983E4446B3F8ECD902DA981891608AC52A29293F0BE7
97C74EFE2704950DB44B70F3A999DBF34FA527913FD2F027BD23EFCC4FDCFD11
B81BE10A71B30E3221A5E8BD3D8AFD4B2D24105B15B7B882FFDCF3F8E5982186
E3AC19A52289752DB619247B328022A35B3C9AE740D969068F940FB427EF0AB4
65A5785D118041CC724DAFFBD4E8698A7BCAFB36DA8456CC8FFD4FEE6C7354A9
344AA61D63246EAD064FFEABC2B4F7FB991D6B461556DDB267A3B6A19439E6FE
66A16493779A8513C8E9E8DF2146FF31CAA6724B0E6BD56F9281C0183B69F8D4
BE80705E85DACF5B8A14AC945B500163B32A1A6C6DDDE356ED4190E1A4A09368
EDDE5EA0133890903C60869AAA53E1EE726CD1CC04CD13686B7B8859D8E863CD
027CDF3427F3A1FF0908277FAA8E87E00F3D64D3D3A47C9E5B4BD3AFE25CE260
BA5169650A49C36E12
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: fourier-orns
%!PS-AdobeFont-1.0: fourier-orns %%CreationDate: Sun Nov 17 13:24:04 2019
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (000.001) readonly def
/Notice (\(C\) 2004,GUTENBERG) readonly def
/FamilyName (fourier-orns) readonly def
/FullName (fourier-orns) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Regular) readonly def
end readonly def
/FontName /fourier-orns def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 34 /beware put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000000 0 0 0.0010000000 0 0 ] readonly def
/FontBBox {0 -249 6428 977} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA3140A8A4C9F386
12495A6338DDAA084A46BB317BFBE8CCE3013A703B40F8CC6F564E77222A2AA6
45E14C9708A301F6768C4E0636CDB9EEDF721814B5DA591A498F6CC5A2F8A555
991C0B6FAA133EAB2A3F8E014E03FFEEBC26618666C174C7A6C21071D9D8665F
643EB8C344FC6EBBD91238A12DD034C4B73F6564BDDDC24B51C57159ABB39740
2F004B35223E7F65463B9772233CA3618739B0259A4F6D9AE2BC7CC63F115F31
D7598D70EF03F4467E20F76C0809A88B61251B5716B7BC1165846525F370689F
AC516E0BCFD3403D153B408820898B91CB0872F1A5187C1F8A3AB51611F9E27E
96734A11F628956FFA7F8D3DCB5D5FA35281704ADFED55A95730D1E9D32A8784
6356592CF741B08CFF32EEE67729B55D5AD35FE34E27507152F8F87C7FC28CBF
6DD5294E7A8D98A41C15E8E0330B5069D63A0056D66C6D83C49CC2143FDBDDBA
C4F831C15183EC9DD40CE983F95B4608162DC57A4492469AABE2560529390A7C
7A51F993E6EDA94B24BBBBABE04E46945CD48B276A6943BB18AD0AC663665BD9
C36C16684AE251D8105F14A4452343C63949EA3BB7EC87AEA3372B79BC118851
ABA0FB8A63E7E27D2B8E7C3C4C8E101C8B393FAE7F75103FD74A6F3C857AEAC6
5ADAD72C47102879DD9AD554BEDAB8A6254C71305B3949595FE17AAA5F551614
5AEDA129F32921747D9348F4DAB0E83A38884F18FF6E07A55C169FFED3C89A03
D84BBAB9C1D0E839ED727F763E1220B1C12BD2CFB2CEB4EFBD46E459E75D8904
B08C259999D20A92D972DAC0F158BB42FF02CB82C9FDC3EF6E26067973309758
18ED225F3DCA3C045DE3569B1FD9AE12E70A40343C7AE637D2A0671AA06881D0
B13A22CF3FD9B880B366CF377DFF4CFD62CC85031F225389F65283321D211FCD
A0D8C3F3148295B173244EAAE3CD80B0B133A1A4614732C69D5B1C36B43C4E8B
622289EF6405417DBB2D756DAFCDDF71ED7EE361B21198D525B58738AED0A4B1
8DB21BAE1C2C959D24E35ACF19AA0428411CF32B1A8DF7684A58D5A61F29D108
BDAA369902FBE694CBFAA9A6A43A61D651048AC7681A496EA0C3DEF778C37080
42ABAE0FE59269570A833E3D0B7FFA27824FE2897013DF23B383E39712D02151
B8F7F6B0E45E7A048E8F86584A0FEA4FFA4E230AE401CBEB5E485C555A41FA7B
703E0E0D7424120B9664FF6F578B37A63264BA6D308EF6130A2799E79A7AA23C
B6B7175CE49F0688B3F79EA3DBC898217EEBB2C883E3DA1AEDE8301A537ED683
7CE7A6C3DDB7746B3EF08067D301F57250F93AA633E6A97C631773A42B0D57EF
0E62F599D76936247EE945007524BA4F8C50956ADCEBDFD16C0A2F3F019C13AD
674A18523248F9C6C8E76C14177410534E2F51794D81E5439B5D3A76DCA8CEFA
CC74D8008B7852E13013B74ECC828D47B9A8B2EC17DF57003B19B66B8DE3EB86
39D40F2BF606F04FF1F612FB14AC2CFAF8546FCFDF7958F4C598536320992DE0
D4A01590C5A162CC9AD07C4801AF4AE64B8C18F257C1C2F1D1E26E2CD82BB68F
FB96E1121AE159353CF776031126FA1BD9FE8ABAE22FF36016F53C0F276BBFB6
40564F7CE21A19E94C54544E901241CBD2564F0238FA8D2A4574B9A291FD87A6
9D8556E472DD963F7CC64F4B638F7B24CBEBE49D59CF267AE8EDD60C66
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /circlecopyrt put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D47BE08ED6CE96278050BA67680A3B973613647
A93FAEC756FC253B3693FA2D6491B276EF45751EFB306961788E7C15297A5822
AFC5A2DABD0DBBFF0BE135267EA6B9D1B4E4760ED14895FFE1F8C3F564830001
EFA901B8442BD2D98561BAB9A0FD939E0F856E4D2EB04A9A4496704109B8A84C
EA06AB0999427B3B1BE776004AE906D0F22159C051D88CF573A0255D99B56781
CF326CD11919AA40B096769CD6D0ADF3ACEC7957621084ACF21AF1F265416628
86B67FCBDE9370D4F5C6F5CC67EBB0A2727E074090DBCA459AFA1A4778AED4C9
AE5400775223E684BFCB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LINE10
%!PS-AdobeFont-1.0: LINE10 003.002
%%Title: LINE10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name LINE10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/LINE10 known{/LINE10 findfont dup/UniqueID known{dup
/UniqueID get 5011940 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /LINE10 def
/FontBBox {-150 -150 1020 1020 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name LINE10.) readonly def
/FullName (LINE10) readonly def
/FamilyName (LaTeX) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /a0 put
dup 1 /a1 put
dup 3 /a3 put
dup 8 /a8 put
dup 19 /a19 put
dup 24 /a24 put
dup 26 /a26 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE366EF37D4823F376DD9F7E4CBB15
DA8E93E91E84D36BA5A5B06F3A46B45692ED11C8FC76C0B0B3157F699878E2ED
D89511CBE105EB42FD76309DA91EEEE85F1AED9920648285111A1690C4AE2638
C0601A7DBC8D2D41CA8C4F9DC7A6AA5C51015D8BA926831892381DCA7E61E230
5BB3BD5632D276B929D97D4836F9703461BED94450CDD2660430A0D13F49EB47
72EB0371E38B92F488FD6E19C944811D4AA52CCC359210320B484568E5060BC5
4D2FDAC73C49BA0168EC70388AF54EB24A30387A41246830C10472DC40AA0BA7
BFD5FA9A7730D9FDB4B639665275683C8E3CD7E719FF53B6DE1F5835C06D1671
1185AE2114E4BF5C0836BBD5391FB7AC5793DB4D3C5535ECB70119CFDF567D0C
A390B1D9A992250D535CE1C36B028E3E9CFEF1DC5E0626C58FB0F25E04DC1FFC
DB6A1C67E40E6435D2994BE814C695B48D64DE30E3F9A38D4547B49FF66829A4
9AA4FB9432DD10B6AFA88BBC184BE95E34A17076782DCDFED010CC19715BA5D4
5D525F33A6065EC6C6811F7D8AC94F27E4E2EBCBBDC3AF1AED1016C343825BA1
1DF58B80CA212DAA2F4EA1889F989C99972A5FA25617CABA3B52190EAA98C27C
15717FD85CDC8CAD43292A21B341CC2A04EF383D978142D16B4A97EBF22ED674
0B45CF5B2C3F151029B75CFB6FD2C53AB88066DD793B85CB7A7A13694C0B865D
BB3315043A4986FB138775B7354F4AB89AFD27D52E0864D384397ECD9A850511
E96A85AAC591975E185230AD05DD19D2C6883B2AEE9107448928AC6959BB66AB
7F8F7C4BE5E6E4F88D3BA98B117C9F0F58BA8D4A7B88413ACF98B0ED4A5FF6C2
5F96EDEC0AC75AAA7C2F27FA3DDDD0B3BA0683D98F99A282C799183C0952DAF5
A900E23342D083E8454E64F9984EB44FE0929E8C1605B8B26C37A219ED8A04A9
D7D6FDF3546CB443BB11B2E4A1015E59E8AEA265CC70DEADB42D8361F4F54979
19ED22A9E83B7C851A296D1B5F44AC57AB4EC29FFF3C75A20CB3C1B57EDFB4B2
1AB1FC26A6D947D45EE8221185749042F2896A43FF932AD70B16BC2AD7982D51
C390D752102D4A6D49F0205253618EAA62D3616BC1FB3B7C5F3EE8F00D3EED1F
A096AED8381876AD3B6904E0AF7AB1D15ADF3AE2665342BDA0317DEEE167D250
1A6052AB85F820102CEAB9631BFABF752CB69D37162CA3AB5A401200D325AA3E
1D76D9A55A41EEF192FAEA9E3852EFC5ACADE40AA530CF3D28ADA4FFEFD4DF58
793DF8252DB02FDD30255C8895CEB8DA0E16EC37673EAE57110702DFC94B8B1E
66B61FBA5FCC3125E7A3F278B1DA90EBFA2BD34506D668A9496DAFB6C4040E64
084B111B805DA37F7DD2FD84929A38FDFBC8E769F9D427E124A12DBC2743BD4A
64CA4EE375460B6E582C08EB2A291DBC642E533BBFE47F631F96238C5E34EB95
E54766987A20F161F0FB3CB9679004B35D754A18D50933BA254428B2D880B7C6
ECBAA26E8236ED46FC2A8E7F89349DE36F0736AD7D34F02A2A8F3FC8B890DE6E
824922D9A45B36243289BE4364C57C6BB54BFFE6EC28A5BC64D2A53837CF42F9
8ECC34102AD7183591C1AF119708911D33F6AF405E332D611E99F941232C9779
6DA7453F5F9F625470F70152BE3FEDEB58399F39DA6734DB97EF6DAD31BF0164
3CD53993C70F941D868618B16922E335051B39B658BB77231D798DBD5FFD7F69
D5AB758F5A190E5BC1A62585FC33AD6841CD5577C6E43E4A99737359C56E313D
5A914A2CBDA6099FA7183CD66E38EAA93AF7D58D7612D08A188B6D3B4E9DF799
6FB3EE1E29A43806C04DC6AEC6DEDA2456A422904E79A230E29AC4F787C6F949
72FF4DAB20522A36AE1901BCEFDA312DA699D95C095B4AF3E00C764C4D75134C
9F31AB817C3338CCF8B771C217DB21E780FB0CAD53BA7F20DA9A070D77E68394
89C0F26AF1D166BF7A297225860F7E3645C7CCE44D3385B3DCA8A1A332E6D749
CBF9F2F47B4D41146E721486CA95EA6BB3C4E3B5214DCB0E68FFC09828E49D15
68A099993521D2711973F634512E2CC8798528F303842E912F85958DCDEA2E15
0A2BC932087723EBFE37D8FBA5CCD3569743BA941B13477D40A30550066C8B97
A5A698A5E01CC4F4F0772D07A2267EF6D9414DD3E6203D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Fourier-Math-Letters
%!PS-AdobeFont-1.0: Fourier-Math-Letters 001.004
%%CreationDate: Sat Oct 30 17:27:29 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /Gamma put
dup 162 /Delta put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -247 972 755} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F78AE14C
72A7B8AEA5D41576411085046EB76258673C5CF40021E812997FA677D59CE155
7C55D36F8B6501F00808AEE2A8934EF6E7DF27A6D20490B6AD5EE97365B26935
6D798248ACD56BE774DE447B7979B08E595DB252D6EAC137A081AB9E002A195F
08D19ABEE28C95E9EB56094AACD6A73761A3E376674258165DCB3565F51AAE71
E9E3BEA4BB485DF2A75CD2A4335B926A3CFA77EC6765989F03A680DA1A20D708
470FD9A1DB35B2C937E5FD9AA6266283CD76E05138D55F0932678F1088EF5E7D
EFA66BBBECD836DE750970D76D32957258C0B88132232100F446B1885E4E29EA
B8959844D652017B77C98E7ED6D7FC65E1A01EB35DC733347DA3B63F9ACE67A6
975D81865DC92F610E531602C57AF9FCAB91E2EB7A5A39DD2EF594A1E2E5570B
896D14CC26EB1A42F74F76F2231DD03A6824AA2D1005943DDAF2910597A36559
E4BD2F9380A95F7FE63996A81EBBD94329601C7B1DC913319E879728A46CC916
CCC5A010A86E5C572AB48BC20494C889CCAA475A1782731922CAB36A7EE9AFD9
7CEA3215DD9F8FC10F8D4C3F94311A56C45FFD85FB0A91F315F33490242094D2
1996C1071EAEBA4792B29201666254BF49CB393ED233BC236B6BD7617A918696
D74A776613FB94DBD590A7893CA7FE1606C576DEB3E4D7DF25A7A5FE84A8DFD0
9BF199780DBAA1832D07BFBACCB7B8E9DDA897665613728537094E1E8933F961
EBB5ED1BFA4EE2856B8982377719ECF1D7B187015A90CA694AE0ECB4E32BB9E6
AB395207397C971034AD10D252B419D2C1D8841ED02492B3F2A9D73EFF9C12AE
9F92D8858A5ACAB071F8E0ADBE0794A62FB244F098A3940C82C391F0326B9F50
39B18EBFD2C105167F452AF2841C1AA728F941530ECE5D9C861EC8569D27AEC9
D0C1990DC37113A33454016B20B867FC61B8801E168543797ECDB84855FE5930
BD9570ED61C24D94BB8BC0A27D0FD6A910E2FA78B2A058EA51951A2CBED99275
6972251698C73A94D57FCB838710383EEBEFCEDFA674184AB0138C55F58EE708
2FC4949E9D4DFAD13E3543B67052CD04D314DB659DD45AE9EEE8E188190A0FFF
328F448B24D2B1B028D29F838A52A9CBCC9086AB4D09E359B41CF74AED5B75C0
1085ED28E722B7CB9131013B77B216FE145E5E49AF9C37C2B2F371B1559D8BEB
245FFAA7955250F08E8F5069A6EC77FD3EEFDC15E662E4E766AE5F6AD0EDD28F
3A7F53DB8790493D8EC144A3C3B1586B501DC98F5451F815FF783CDE0A5A0B34
5E8350B8F483C8FE939C71DD0FF87700CE95F21C4C1C9C326172364A0C3D6EC3
8928BFBF73E85DA1EF9EB934479F0419EF52FEC5FF841305A8927C1BDC558808
B1AADE9680499B21830A38C7B58AF68CFECB09313F5745B02B4BB60F1DF993BD
3A75A2F670122E4593F79A14185F16340F67B8F9BD9F4C10B1CA1196BC062E04
A4E5BDC058475F8331F31E58AF3A560C46F0F9A0A0E9FA210EE25DA7A7BF3103
A69A69CDC3FD3C02304CF8B73656C4128FA56827DD7392D7A101E273541B8FFD
8A9F88AF4511A0614101B04CBDDA982E68D06BEF3405EEEAF0EEB7B2AB63CD47
F5B92B2B648967423CFAAB98D4F6646BE196A30A2E76058489FB52C989ED0DF3
B9E74B76D3B8E7C7F223AD7CFFE2D64B8D629B0FF914A78973D4A2F25950B4F9
AF47B4B109FDDE4AC32BAC078A3FA2E50E00AA5E733D7447537DBBE82840469D
6D9A4054EF6423585D81CE61F170B4A39C22DA4A43A3D089565479F0681CD635
EFD41B3BDA5BA453B43C2B28E55CAA9995285FCFA1441EAA7CDBCA61A02134E3
3482870E2FE86BCBF16EE5A0464F44A77D57B9D7B28244FF5A4316FCF991C59B
9C92E45C73AAF019BB29668CE2F33D6D135D5A39A44889166DD4543ED49ABA09
3B9835E728151FF4A7E4EF615E562EB56F74D6A4262A40720C94BE6BB3C58A2B
E86E6C16A35BE9170EEDCC2799E8E182E091609AFD576DF9DB4C741114DB16AA
98B10ECE0C3E84EDCB6ABB64778168EC3EA23E0A1A18F3C95992607C823085E6
C99DEA4FB3BD1E977A370D18615E86F1603B8C38698F41EB8E0E0245B304B2A9
C6BA7931DB5BD31ABDEA7494D1A4AD1C08C9883CB4C001D0B1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.001
%%Title: wasy10
%Version: 001.001
%%CreationDate: Wed Jan 15 15:09:25 2020
%%Creator: Michael Sharpe
%Copyright: Glyph unchanged from version 2.0 were copied from the
%Copyright: wasy-ps fonts, copyright (c) 1998 by Taco Hoekwater.
%Copyright: Glyphs that are new or changed are copyright (c) 2019--2020
%Copyright: by Michael Sharpe using mftrace as the starting point.
% Generated by FontForge 20190801 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /wasy10 def
/FontBBox {-23 -1667 1720 752 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Glyph unchanged from version 2.0 were copied from the wasy-ps fonts, copyright \050c\051 1998 by Taco Hoekwater. \012Glyphs that are new or changed are copyright \050c\051 2019--2020 by Michael Sharpe using mftrace as the starting point. ) readonly def
% Glyph unchanged from version 2.0 were copied from the wasy-ps fonts, copyright (c) 1998 by Taco Hoekwater.
% Glyphs that are new or changed are copyright (c) 2019--2020 by Michael Sharpe using mftrace as the starting point.
/FullName (wasy10) readonly def
/FamilyName (wasy) readonly def
/Weight (Regular) readonly def
/FSType 0 def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /Euro put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE30585F628C5960F4BA7A0E78D80B
EA23A0384400281199F7528220D2F21D031A35321A044226094B6ED6DB52413E
0BC02D4EAA6BB6C3D02F5D5E4983DFAE1209911A8DDC998656E07B4EEAEF13DE
50FAB8A7D9346FDBBBF1EAF791BE7E3B4BBA8D381C5C32DCB4436D5834A17B60
26188D4C558BC1ED012EA8DED9DF22A29EAE8673C46D0CFF7F5EB4080882EF91
2FF746A93A7B15CFC25341DED2CC7041F5D2FFCE348F17C86124EDBD259F3D7A
A299B032DF19B1C8C6EF386EE2B3655A09E37996670E1878051E7B77C73B0250
EFA23B7014FD87F1D8F38F07EC2ACAF188606F724E436A3D5B001AF774C0BBB2
3B48D49C1D59D3FB5768719967A1086B0C955D8E90D69C2C18593A7EF0CE7A9B
A82AFC9604DDF32B61B5220CEA41E570BF9F9BF018876411E06807D45AEBD705
125665794E0C88DFCBBC57A43A8F7747B4A09C3941DCC35D91F9E238DEE5F56F
4D6E6032FC16C459482F4E32286E48F60DA55F2B5B1B86F3C934052B798067D0
254ECF5D61EDF99B3A6D86DB44265F4545D81B7A002D62C32A22D311876DC636
1CDE6DEFB5164BC751EAFF248E4D6CAB3FCA084FF2565070A0129CAA66035751
8A94EC45A9827D8398C0CAA83B3D4B032C75896D666161D5FB3F6C8F13B692A8
ED5B89F4654956A01FCF6295D4EFF3C7269DD46C0D06362CF44C087C14B0F984
A6CC760D2E439EFC1EFCE34DAAE9C0B017F709E18F64E7762F92A2723CD0728E
11ADE47D1A7AD0B9B75624B220C906D34D1FDB479E312B51DA3721CEF9576B50
F00CE281CC5AC9CA854C150636E2A4BBF26C0CB72843B7E8978C6923B20DF073
7D15F9069ED5C3CE92F4C2AB437BCEAC02473A6E023091F026B8AF8FDE54045D
BA32607DAB9EBE64BB05DDA506E90BDC38D7A94015DBF365B3F727D14E612395
6675298F00239CAB003959FE119E726D4B10B063CE62B1E648DDE9E995ADE22B
AED269BC6481FAC38C9D66CBFB5FA8CC6840F18F49FCA60F6E8D93CD2FE35A98
CB61C80B2F424A61789815DA278578DE6755411E3159852E8A76A43932A489B5
A8C48972C22CBE66C9DAA6EC7F3C70760DC4384C7D5E552E41C9969113FE9B41
4C792F58801331862721CC920D6060DB63D12BBDDDE58C2B1CFC0D1CFCB7EADF
9D0AB31059712DFECD2A616D70DD0EE5E53514B474FFAA0B184BB85B618303E7
DA826C2B7D1CBAFD1645C06F9A00BC1FF1222F94937A87EE04C4684B0A121DA3
E26BD7272D71E93BF96376F11C750E53E6AE7E9915809A21512969ED830C6395
1395B0E6790CE19FF4896550A040821442A2EA1CD3AC4DC9A0B90419882F45C0
598E040B77E600BEC9FF9AC627A92638BDC359317492BA4BAB8B1F2CC6A5AFBF
E81F9CE51A6BA62D5CE57EFC9607693B47AFE3EA791B97EF8B73C7C234FCDFC9
70357D3E9B4D8D8F475BC7448C1B25929B019FDED75169DE66513CCC23D034A2
7EBF6E2D44E394667EF8D57924D4D1F874B89EDA39976CAB94B3D58EA6551D10
3F4DF6E795D36E5C468ACD33C7B78CDCAD0B29ED5145EF4D2CCC59706188D10C
712973EABECD7A3FF3EAA14767ACB0551E39C831ED5452E0088D4F1A826548B9
726B84209947D4BB01DCA1E29FD478879E7F845E833C3AD2E29A83260A53F64C
BD36FC42E14A07FAFEC1B14C54A53A5E2D852263D358E675B62F9E30FDDD384A
56440941B4C437D4418A7898667D111FD994ED002E2E9C6DD47FE9D3C7F1D6A8
E5040A87A39A0509FFE4884E63CA3C0434F07185D8026E5B93B8A50AF015C796
033F05AEC49175ADDD337E2C1E9CFE41838999960D874AE74B8EA0FA61DA9497
58AFFB7A98DBB36FF2693F4EA3B83C6331BE4677D1F5D8150F9A66002C4E37E8
4DD52CEDD41ED9B724D09B3E562CD93B50414D87AD378B7D0523536041FE0EC3
3A5C2343D7DD645BF1A70B6AF3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Cal
%!PS-AdobeFont-1.0: Fourier-Math-Cal 001.004
%%CreationDate: Sat Oct 30 17:08:49 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Cal) readonly def
/FamilyName (Fourier-Math-Cal) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Cal def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {17 -274 1252 724} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F78AE14C
71FFD7441F153F65EC489AED623132F7F0AA967C97A2E6C705F58130577D30FE
722A0CE1882455CFC9882D1055821847FF648509DA92A3EE12F984224F7F1904
F3395261ABA61816ECEF5BAB29D1AB8C21A8F46620894FC69C70DAB3226A0DD9
9CE0FBDF78469648F29A99C677B9FDDC8B90082BB7C984DC5C42930D1315FD26
EA08F21054360D1981E79A6EEEF345CC1B9D85A6983CB5E833C9F3CA972A2C88
B6220FBB013192E7B2F79DC214DD0964F4DA52469E9500ED2ADABDB0D259FDAA
648EE5A0339A6EFFDFBFEB97BAC430C00291576483521C8D406E8FA4DC48C7D9
6830DF6FBF39E9153229816D94F6BDDABA2B4759E1FB3DEB54C47D66E283E45F
3BC1B675DA1D8DDC10F24EAB54445658EDD0AC1ECEA12CBA6DA205698F18056D
DB1CCC0A8D93AA9EACBE2B5093275823AB48AD9B7B1A217505522EB1C2F09074
1D7EC269452BD0896C0B1F30769BD683103F7FB568F80576476B511F5ED74F46
E2F35F191BAEAE8C91D87401A8C28DCF476FF0CB9661DE7B93284BC8E2429CEC
A964C815F35C33B2B6E795088998E0EF2CD048D1D54FEC5014B1AD8A46618748
6D1446CEACDF027D1B238173F8FB6C828F10C8FFAEA574888C851EEDF4629C38
4D71F7D93FD74FE5402D7D788D76E28ECE97DCEA9FEDC5985599B679C052E445
3E16B23D20A619B501A088D5A6578CD0F56CCED1F2039876D4FC648DB69CE3CE
9EA0C3B37F27CFD4AB23D96B5BA02308081972E9E62A93B2DC9A37AC4A63E626
F1488017A209F97B3217B85127A8AAB35BD704F9614733E2C55D3004A753ACF4
CBFC509E71BEB3AA1179EC2955F527022F86711D2DDE84B112D18F375E1BAF0F
1DCFFB6A138B1CA05072340D5703F28DCD60FD4F3AF2EE0061AE9AAA0E39384A
E806173146EC48A331E5E3A8F900D7F580E976A3672054A8A2DCF66E132A720B
37F5C9D5DB8401B8BF5879DC472CC0113E27D529AC7265E93F51DCF7A4203C25
CFC3E853E2FEAD9EFFF3BBB849BAB875FF430A8555B7BC6501DA81B1BFA806A3
53E3217EA4E3C6B388B9306AC2B7BD973BFF3E39CC5C4F39303C2B0728CAFFE3
C5B6A3B6132EA83ECEEA7A270247B42BFDC3D46FD72DEC1FA73437080EDCEC04
DF35DC49777BD36938E591D8D8AC90126D06F7B7C2BFE4F6BEA7A13CBF5701F0
925CE2A7432B33308F262A06BF14B6EE20C4144397EBC24D878C2EF41505801E
80D44192B4267A538C9DB82EA1B401676F6268CCABE71D9C2D8DB59C2E58537E
08E7B1F5247E315B20FA3F32E2A69EF068A4BD88A45683BD7521ADB3C2A78601
8FC0DB09F98D6613341AD917AD3962D12E22023F95076A56361CA1906134904B
ADC9F026771AFC9FED26DCC1CEBD7FBC25302DDC78D686E67667BA824113CDCF
19BC7F03E768D109FFC55CAACCD1F6B8BD9AD518D6E86B1AE06921A28F0AFB9A
BB6AA7C8592651382C6609A2DABB7A2A5F7444D81AA66A8791531D1957AAE4DC
4B45E30F64D1644FB80C34FFD3C34EFD6787031F21DC0316207988216849AF2D
9C4CA389DA5CF542069E56C1DE390DD4DD286019B7C773C62F78793D932A97AB
ABD57A76F0F1E3C4ED9B7C90A553204425722A4F611BD1F455BEFA49A7216F8F
ACB3B98090F887F64661081B57610CE55FF07453FC1E48C6A9F0C842D3D7D28C
BC88AFE0FF3407525BE23BDC9E46B28EE347A06396A9481D8DCA2390972B883A
EDDD9001F47830A7B1255496B7D323DE105436DDC980CD75404FA33A678C3D98
302E764EAB7E5F6D5A46EDFBB77EED0B833688C9230D9D5A9093C035173CC4AC
1027F7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Alternate-Roman
%!PS-AdobeFont-1.0: Fourier-Alternate-Roman 001.004
%%CreationDate: Sun Sep 14 11:38:05 2003
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Alternate-Roman) readonly def
/FamilyName (Fourier-Alternate-Roman) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Alternate-Roman def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 34 /euro put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.00100 0 0 0.00100 0 0 ] readonly def
/FontBBox {-33 -242 712 705} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D440EF
6A6E6DDD501A8B0E65BE747DB309417A7D065AFBA06D5DB8E3D03B3FD43B0ECB
D4F39A80CE61E0F4FBADA453BFCE3C6B9CE462D62D370BCD3DE038C405023983
EDC758BC3FE4676D7C7E425368D9BE8307FE6D67C848B5CAAD44C85CF6A5010B
5654BB1119047F7CB5CB59F5D19F65237AF4FD514CD08D342AEDE2E5F7D8398E
690BE6AA86CDC35106522B730BA8985D6CD76DF67D9F5C346F6F2CD29444B158
D8AFFC5CE1924E4606B0ED12901491632E0B40C327C6C900589C2BAC0C9BD55C
2743AAE42D5A4246ACBD38B613B1B22B57403DAF3B396EECFCEF0482092DE233
BFA45E317263104DE54C191DA32FCB291FC37733333BF5D95EDD0CDD6F56308E
D38D01B0718B704285B35245190F69DD07B598698D669E5712492321986601F8
A68DDD5AA40404BEC5ADC0E452ED444E2C9B1545936EDD403DFF01CC6D7C645C
91509391F46E021C9E7CF2E911B1304B45C5AC797B2088E5847DAF94ED377393
4CDDFA64449EABB6F2652B6DC69E7D3DCABA5B42747A54A5A2D12609A559606B
44D0C0E6EC19223E3D377BA37E0C46BE0D16D82B9359D2E2A584BC8815ACA894
C383F11A62ECF2213FED7E5489083C0CAB7D9C2637227D4DADEFB207D44CB577
9C5C18AE9CC5B073647C8B52902F08EB7D99B8DD0ECEBDBBC125461A812A3BCE
D9A15FCC901B4A17272D46FA1B680238F27E25FD059559FE02194CC1E4C123DE
7A6F8F17B59DF0DC5D8AB577C5A733CEAB343CFE654304F15EC2DA9280AAB2F0
925E7596A9C8E94991CE54D1921495D8C1D4AAF504842617F5F8151319A54846
5B1B09C2AFB4CB49CD2AE8D5312E0176259B2BB71FCA295F8AB26953CEE0CF73
0BAE460689F536EA9B1352602A778B1395CA8A5501F32FCFDB65FD73EE6D4CAE
4B4F7A0129106AD36022EFAB434B57ED948DF2957D94BBA8A5F8BA3E0E1809D3
042B7CC8E66CC64634F06039254F3061A17C8CE0099A6CF35C3636F9996332C8
77FAEF06756200910B3EA272EF33244ECEF4405FCA6641C7DE5F269A3D435B3F
0ADA000A5730DBBB76F11C8B1B65488D844BC6564F9D52703D887DF2BD7B0F26
CBAF9B836A57B80B8C514B48EE2EB1A7978656C7AA698D93599D9EA93EBA791A
6E52479CB99EFA005CC74D1A2B338B46B7AFAE06A747FDA06F719D6DA461CA95
D6F1B634BE4DCCB0F847E8C4DC1D12D8E83214A47D617FE02515C1BAC88C63FD
A6D36209C3EED215D3ACA2A4946392003099D565A32EEA6546BC68DF7EC7B042
0AFDCB4CB4BFDFDB83FFF532C766C9F507FBE2500858967A7C4A300F4170AB80
6B8D8FD2D2C79AEF68FA39EB55317F7F032B8655B8FCF1F0B2CF5A61EBACCF62
703C6CB60AD2B04F32F5CA9402EB7EA4677CDBA5D71671D9A26CF07604618A9C
2F3CAABDC8BCF4747637505038EB5C6B4C657F7580F6BC0FD12CE8F4559745F1
E89028064CA68183BFB7EAA2258CF3BA78E3C359B1D014013182F34E6A826C99
DB89045D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CACDD72C726E008744
F8383B33D234761DEA8497856BDA04DD10EEE7043BEB84C62D7B46A094EB3699
CDB1A9406679EAE94F1F933DE269C7AC15CFFBE660FC1E5A4758EA23EF14001D
4F6FC6FB27FFFD254B345C3C32CD7F70DAF4D48F9516794CA4BAF0827AB41309
AD1CAE4940E093970991AD11C5A830E17A51EE27F727EBBD0411E3DB595FEF8C
2501BDAF0235FDDC02683334FF508FD924B568EAF96E7344A56505D616F0F3B2
0F3DBCE8698ABD5DFCCE5B0C401638E89429249EF111164E99A03A35925BA293
6AFB113BA123BC143E5E15BAF95BE6873697845E184DDDB6760709182967543D
7D8C43583DFE4D3F80627CFCD3E8BE1D7656C518666BA45A27055C773B16ECB6
511E2A60E0B185CFB488D118D74E8BF9637F0AC7E1C1D9184DACA06F816B12B6
478FC7ED76D24953253E0B2337E08EF790CA36DC8904E2CA4560AC14AD4E54AF
2FF89B894540D6E0A9F764AF34F4177CD3A56B5A2FA274AA4CEBF07EE63D15C1
3C7ADB781EE1DC4172B238CECB15B80F50EC2065DA9EC95D30D39DB92D17AF71
76E6FA7F2E68B3BBB010086EBBB075A72D0624084021887EB5284FAF73E72CCB
C15C7AECF1CB17416CF2BBD8BA7F054894F66DE1613AEFDF6D2C77AC001102A0
94A99CE647DF4C4C6CE1A7277FC848B39681531D3F8FECD47FF1EDD5B3CF4321
2B32FE804A11F6D76801BD5F2DC59354F4AA227006F97D796A5982FFAB3B471F
1187318913D940B5B7DAD2172DF1816D46A9FFAF8C077A7B727E6E7B9E427C94
EA7EACB0E431EB4276D6883579A7ED352738AD7E57BD11B89D67C4A1BCCDF08D
F33908E6BED58BE4EF071A9F8F8639682E6E7F043BCF250FC5195E02D81FD4EF
1EC67464E6D2CE3F3F75742A06D66C9E72D7CFFC32061D63D174B1A293460051
DA59D0708FB5E6F400469FE2227D126AA8317DA3CC28FAE21C4D4A60AE55C853
71FC39C8BCA5DCCFA45FB2578337771A93B1617F5419CBF89D2FCCF53FF8496A
2F09540CD2E6BACA74151E5CB66BCC1F03B3C9BA42AF2F157AF42FDB1930D18C
3A4D3375828E4EF07D846331B46D1FB5BE1FB12BCB8D2A832FCFD5CCEC74EB45
6CA3DFA6FE50ED4ED9072B120A89C364951DB2F4A495B09D615356D057D21102
1FE53E0BC1264E300B94D15AAB28CD6564C86FA62D5D1AC3AE942B437B9BAA4C
3BC9383BDD3F17ECAB959CA7511ABA497FCF85FDAB081054D266E94B7DFB4AE3
465778B83FCBDA79DAB82C42FF8294E59EDA94D3BB252D1FF6D197C9B9A94B8F
9A74458A9A7357E7533DF3175AA1BC4A976DC9D2D80CF89D2FBBF74F876028A0
B0283D660337D47BD6845D95263021B9711FF8F4A8073376B5C154EC3E566837
FE4BAEB3BCDE7236ECEC04214D39DB8F92396C5D29AEB5E469FDBC4831ED933C
40FD2DD2DAB06EC31F17BB7D93593DE84A7B5C63B63C2B6367C26D249792FA3C
3BA89475C5B81C6CF52850E95BF90A454AF6CCBC960F46ADD3A18DE1F895AEAE
0DCDE8AAED87610C2B5E1C0542A01A77528E5C27039DCF4F445227FF7C68468D
E3602C3B505323AA5C9AEBC8EBE661AA9C2949FA02073BC0A7F58A7BDBFFCDCD
9E4BB1F57C075931FB244590ACC141E310CA0A0A09281D3E62C529AD6F4C749D
FA334C32EA47D403F13845FC36CADCB3F8CFBD1E782E0E46FF798C2CF89EB7D2
CC8AC81E76AB8C31864306D9AB7ED8F02258A3870DC1B0C5ECDF97B61BF9E57F
37B1C0728CC6EFCD02A1D4F730384DF0C1D69651B1885F54BDC577EDA94A5F80
116D83A6363D965F07FF04C079DA39E1AB50B44D547BF93516AB89F3A05B1B29
0696B6576A5FCE31C5F19D1BA50D3B0EA52186ADA86B1A236F2157E12FFC9D80
CC738B18E0040E5B5AF45E59EAE120CBFCD52F4527DD87BC3DE74A67CB22781C
482CA681EFB431B8757102E69801AF26ADD429DB489F429B608DC54B8898C4F7
D0676DBEAE6BECFFFD0856933A3730D29260DED7E3C2BFCB790E0DBFFFF066B7
7F225EB043A2525888557F6E9C1C24B89E426DD97A0A2EBFCFB93C72B5FA17C0
059A95AE4BD1D156FEF121AFDA835E53295E3C85C8416E8156E80C8A3B83181B
ED0ED365B500C7093DD4F978024F807E9993541A3E8C59BA5C51EE6F262A21B9
BE85AF0CCD8D5B824C6D40DBE007822CA24FEA4FE62ABD3BB73B943B5ACF858B
CA0DA5AF5A64DEE8D4B9B9BBE81C094B841F84F59E05007B8526F290F5E73B41
D87267453A0DEDBBB8ACB078B088821A9F12D88EC167CC64BE116BC3DFC67B2A
37D4B3683E142248C650907EF404E3EFEE64B7AC6F89A5F903D6D667BB6DB1E6
1CBF349DDBEFFC14D250F4BA26C0942BEA97167EBF2E2610A742D8B8EE6605B6
894796C51EE3DCE38C845D804EB69B11D9C51C350EA6767BA0E132544D049278
597232979209C1B48738B5B3BDC9B2DEE08656A4F46C8D98E70D3A5E2446C03C
38241F7642C28D896127EBAD3E49030BF702F04CA80EA8F93AB3ECDA18C85A31
7B12DBC16F50A81FD9AAFBE2EAB9CE383B7C5DDE3F1E6D448FC89B90C2734A82
7BC95EF64BC6BCC0595A895140463590309D998A2E7FCA40C7A6247FC26D4F32
2DE2F009B9889051FF864D0C52FEFFB2ACCEDD68D9A20774E5F311E52B1FE21A
8ADDD95602AD49AD5B0793275B569BAEFF229A45F7F4324A2EAA6107CFC7E37E
5E2E14EBBF748D99960C5F4FBC2BF8E94379A2D2DB980DDDC1F2F67B56EB9484
E7008254771D998E5AB55EAB1728DCCF3CCD0C90F2B9539FF583442648DAF5EC
6302E290FB44FA3A8366CBD71C842A00430D78906ACE661BFF07FA5FA1FD1DC6
9E210087C16D9093D5A34CC4ACF2F51BFA6F594B4D5B408D4FDC8547DBB905F6
648E218A2A7872E5E47D00744E616C295C14A0E27CC21D13774FBEA068366839
ADD49634114168D743B3AA0FF50FB54CC7DC126671C9D2CB472E0C58D81F4A4B
F83492D16D11BA90C3015E3571F1200683DFC704DEDFA0B111D4BF5FDC9CF7E5
E5521E2A1777BC487DBA053B56CDCB7AB442C92AEDDCBB833961543A83EE1F04
07BC9CBA535EB2BCB663C24F8CFD95D766E44A674FB036D89937CDF63631AB80
9AEFD18225D436C660B26E72AE9C6CDA0D5169708981CB270F5EB5A859022334
8E50A697F01195920917D81C2F3486C4F7C25F884FF9CB6195E96F945E70E7A9
1F2D0650120F5703C0F03486119D0F73CDC53CF2E2108E455770A9597CB66F5C
C7CA4DF707E27F1FA4DEE91CE3D388AD6F045B012ACDEAC77A45BC268B74AD57
6C865F625827B8C045ABE5EF7E9904235C1C8B3051893F2AFEDC6371FB02C405
02BE6FEDE306E8FCC4B608B471E6A8E493FB9ABB764C7CA8DE5E61CBE2F070CE
E5772B8D856334A29805B71FDB02BBC4249C8D84B647522C99585E78A0FE0658
EE9CA27A82AF7A9EC3C3DACFAA937A60F49BF8F9B4D83F5CABCFAE6515928933
D4355629B7288212F066CE197359A66300A620AC524A7F60DC22D5FEDA041CA4
3E3C92A5F8A65C64455B58752AAC58FA76B08A8157F92E6A39E5CFB649B69E0E
8403D5B382C23B112241F07D1C079E561E172C920C58C4D09950C59D0B797449
E228C80186EFB3A7E67A974693F104E59979F5D15F17BFFC669614D7E4F756B4
399BA6FF7DF40D9FD78D5A33CE2A6001DB66202118946D66BA0971925C6AB022
4772F8147234C76856546516FDACB9A7F6881A7F8CE68790E7F19A835BC6EFC4
99EB384DC7963F7E26BB7BA94962EA0B9E9FE61140BD5B80F9D79C8F460237CB
8D25D9EF7D8CD60FFC744E9A8C6C0B36B00162D97159E9328914AFB0F6E91182
F5D6814AB810238D433CAEDE97BBBE555BF3362241A2AEB1DE5FBABBC4BE4D04
2DBDD5C6B1CEE106241C8BE038ADD1FA7291B28FB3DC5990D7194B18684E880C
D30B27909CFAE9ABCDD6CEC9C72D99FBAB75CC79FA651F01F72A65608248E964
FCA0D0BF38ECB02D64A39987B28E2ED9DBFDE3DB3136A1160A52E24E948DCA5C
D34748A18E26E068F16140D74062D7B46959218034C721F5EF420C1D801AE1C9
A4366AEBC06030382FD79729426BA208FEB6872FD6E32A41AEDF7A9A1D2A485E
14007DBC2067EC814CCC3D954789154DD37FCD05662D9807FE63B0C712FEB927
211D7EBCC6E5B86179E16BEB0F3765A660A476F69FB162D224B1A059AA16DBEA
265E3D4F5AEAA7A8880FD2548212AE8E49B72D08ABE4F2457325AE045F9AF979
094B58B665034152313C46219AA16E210DFCFDF130B91426F4F6704E1038E66B
747B3D5D884AA3747B7A4854EFCB522711D4302A5C63F547BC746A9ADC136D91
52B3104EE2433F680225415A4A7B63F4B43B193A4D04BDDA109DA80AB582FE54
F0B93AB7FBB8C47A097279CB1A91A9939EE658BD6D9B72485E31544D9B05B28F
67C0139C36299413DD9556FF41405AB4179BA7936703FA5D06EA46307E529304
D0A9E8B79EA6F972184585CE610E1EF805A187E4ADE018595CAA6C23D8D37278
6790926B1E9E1FFD3D6432232F9124DBBF37CA230A0F7C55280348D40D3DE3B9
061F7B4B1CBF8F38957F6156A34D04D3AE96EF148ECA56FA55F2F55F4110AA1E
09D5152F89FDFD66939DCC2A7AD2D7F9612EDE8B62C9D122C11502FD8CF7E810
7C082B956F1457EFB0CD12B76397D56023EEDC6A1D084930052FCEEF950021DF
BF2455AC25572C316525B9138695EED597EE4928827028654DD939DDB00630CD
5126B33BF5AF4E11C66C0FD2726E5471F8D8344C35A99620B2750B7A35B605D7
72001C12A392750F3D2FA8E6F3F088037B45A02F86F6354EE6272EC1F39B8555
7D495AD15E818AB8A8EF5FCAC1154498E0872FC0135192132947A8FED0D43498
ADFDFBA62DA37C733BDD4A19E976C26753D44BEEB2FB66E7F06A8C30563B8197
1217CBDAEE90C47F34A8908A279B73A0615FB6A29144F3A400043F51E8AC307B
FE04BD7CE6070FF71BF765EF0305CACACFE2E084CDAA27D10E3370862697C872
A164BD90B981E0537F32DF9E9D8BBEA3ECC81727528710C9562559981992E5C1
5C7A56AC8707468BDE59944B07A91F70047BD7D484C9D839CF9231E61B58E0F0
721E5C5B8696318B4A7FA2AEFCBE4AC81FBF3D4D3ED20E2CB1639219EE36A1C3
CCD41ED86AE809F8A6677FCA42B7F92DC4EAFC2F7D6D45D590A53A74C1813C23
48C50AB48FBD584A22A381AC0398B5A1B70DB5CC98316C94743250F7E88BDADA
C3F0413DDB72DB3C736FACA7F6BDE3175A4C76A7D9D900F22956787D3A108E22
E96B197C4EC28703A05A165B9EE0BA0C8738F65C347E47EC5293D018A9683A31
25015202C1C0BD615BDCBF3B5BA54754CD986116DD0042913BDAEDBF43070BC3
92C1F45CF1ADE6022C7C0AA2495B30F5BA29597E45FD3DC392805A461F0B1887
186061BE2D042712E60AE006E9B608318A6D9B7006BB78A920C38D3816323CE9
89E2FF10D626D6CCC7596B3D3867CBD7966E070D8BE5BBE2250364812FF7C10D
58787200F53A331F9B154377E61F2D96E187D1001F890256CED910690C4BBD7D
C16CF656944DF5BD7282B6F1E814C0755F1986107701680652322B6AAE036D30
935949E9294875DD4507DB91608F9FC0159EADF26324E6855EFD3DD6E6E2457F
C54579DE5EE84687B8DA91E885B9FCAFBC381351DD44B110CD2904ED97BCA410
5BE952893E368B8491E1A1E52C2AE880CA115414EB4652A3DA5FF5956B71CA69
47C08B2D04F0386F6A52C8266E4FC707DCE60BFC7915D6958CBE3997A3490967
DCC9929E1BB1D4C385D55501AA7185CEAF2AD29C8266306092ABBD856D4E0992
424B44B08E2C465AD7B95E44B5B6105D8761A6A48E4AC4CB8B90C69AAF35C89B
22FB6BEF2419CF35AED346AEA8181CE997FFE0C8F2381A3981955A38D3BBB2A9
7497F7B5F9C44E2C537CF25A80C4C8B98875A7F7DD25A2DAE533F1C050D35CD6
BE3C68517AB2F3123333A9CCFF49CDA64277E23F40EE3C5B8B6C85C8579F1D91
2E56D9F7A8E5D9BECF8CCB74BF1B5AEECFE49EBFF0ACFA532C8392799D720AD8
D2B132630A4AD13CEBED8BB03DE02F1CEFD0BD43555041C9F9177F7FA33CEBA9
2FE0C35F5B50AC260591C18FC29F0E6F4161F2468A514669121D562392299D0E
D70285D98433E69AA82CEC81213BF1E9E3F32A623C70A5209D441FC332D6BE6E
E9BC0423C31DDE2AC0C6AAF67D7235D6AB3B597C3818976CCB04676C3D51A012
779EAA0F57FF34E6D241696E73B84B015B02CC55ADCD02E1757601BD9A28941B
A45DCF4EEA6E8F8F3F28273DF3C6A20B7B5878F1A720DE0904F423C2F918602D
D666F27285EDF42BD422C046AC5CB2BCF7D4DB77132F8780E7F43D33D3F55BA2
74FD97632C5E1F1B68A3A52491918291864CD7363B65AB012522EE2F88B276E5
A254AC05886975392272E231983CB5DBD6AC1A5FF96529E7354074785A57C5F4
6CA0679F9B200CEB625A2C4D067EAFEF5EFEA182563FA8F8F692A2CC1E405657
71837B4A4C5246D6B29FF9D2227A6691E51A64CD6DD9A7484EA1C9E334598B8C
AED5B6E811AADFCC8658991A038C6FB664A3EAE19F548225BE30C7B29CE3359B
70BFB53D0BCB1200B31AE146E504180EB98040F819420ED8635BBB3BACE8D08A
E01E641B73BD918AB90C44AD52C359AEFA5A2DAEE1C2B9A1F603DB446FF7007A
86A80CE4D0FC0CC4A121C38FABF1714CC0D532D6E9A8573F88A65B69070B5282
73945B10B7644567FCA80B99858B67EE6EEBC67F9081B067CDBCE3F58A7E50AC
962A66E238A8550E1CA6C5363CC7BC94693B0E1B4C389D02D83EB8C828CA17E1
B37C8C30323C7D36882B255D934BA40A3EDF8B197CE0E7431D2565FED1981B72
0757753408735BB8ABADCF0219493B226C35926A59CD32D2F7533AA884F58A91
21E4FD09D99D3301E0290455A8BBE6143BDED495C7A5DF2E19586E058FDC8F82
8206604B1EAD476C67C1F9AFBEF0323CE1C7A52D3F12C9964D1FFF7A18A4DF33
6E2521A054B82938D459DDE4F7FC3990EDD9AF54F2A08D4211E3EE5B28330B50
36394C19242EA6A9293E6098E23F84C785FF5EF93DBBDC092E21BC63269E2410
7BCE6BE96B77BD9008254D3E3B373D0E5E28B8A428B207C286DEEFCF107F7532
DBC23EE2024F93C1C8861F00421A13379AD5A8728114A0C7743B56A916B3B887
8AE14BDD7A97C2D77EDF0934685EDDC8AB06863CCCDBE52D70875B26DE98BA4D
A6959EE5FC0773C49196DD8C32FFA120C17BA6A8879E1206F6D825323C376B5A
CCAA50E1F5126B4954C0C8AAF77C09222194BF131D997AB87F6998826D10AEEB
D49FF48B078E66984826F1302190E781E785A952E07441407E984BF76F675470
A972C04C03FD253CB3F90859326073F2A301F121C7C08BDD83491930E7050218
4E6A036566987DA5CECF9ACA945E5D8019042E290526AFB6EA042009B0D8D40E
ECF561E43791F5FD497D7B378827F386194698E16369D82F227443D9A631E581
7D131F01B9EBBC691D211B03F706D188446B12B5AE591A35F6479B0DC7EBCA07
EA55786029777CD4780DFB743A1D8DD9C5E945EFDDB11968AFCAC9CAD0F9EE3E
45F533F4D8C0C5268DD5A29D2EA91CD2436294CEF9396A7C9F27E2852B3DAAE5
C7892DA1FD0C2E0A5153E7448D3F583666A97C0AFF39DCAC94447D55D0F21E5A
FB2D186204E8BDCE0D24C14253578B3F0E70737D25614D7649475BFA68E676C1
A80380A5D114C92A89044F1C2AE78835EF3C1DE6C11079E7CD7582010E3BAA63
3249ED9B253D5C7A83A01C0BCC61E33D0D09CC7BCBB93F88FCAE5FE029B888C7
56BC72AAE0FD03352128D79E9571EC642676D7A11670C3B8BA3EDDB81C8623DE
DA5AE895ACE696898292AFA47C863F011DA9D246E827DB2E1E9087E019B3697A
D909FE62C24ACF746C884CDA1542F75DF7846EDC4364AC49A3C48F0C05ECC461
C55F12A4F8D2467147DB634B5098B616D5A91B9BFE6233B0164AB1CC96D35795
38198E3D4727DC0150EB2E78602EA080B0CFB759FCAA34646FEB956E59829E1F
86445A02D300F2AEC6D0C53F5B9CC9E1F2E548D96BA97BDCA799A0706A34C9FA
49CABF39201ACCB1850BB77AB42C25B06AE091DBA5DC229E9D659C81079B3B5B
26AC34B27A3B2FC935773C2CCB8B4A9B4F04D5A1DFAFCFB589D2B12FAFE7AF6F
FDF106C5EE0F27F2856281564D7ECA7773F4E668BA9C2264F84B0D8F398BF661
042A9114498B7D6092C15B68B287F2EA3D90D78E2A7FE7118BC2572E92D94D81
512F84D182EF32EA77BBFA70FAF74275124B5CCD0C1411A78F72B49FEBA0E8C8
C5642DA357F6C374B63D48D37E437518BEF60466E3CEAD02679AC757198A6569
6E6BAC9710AE7EF42F7337FE733928083F409731FFDC34E64D6AA34F80371E23
402AEFB1CE9661537A84CE2E357260EEC280BB4A46413D6F2ADD8103447074E9
8E2B8DA9F47B56EB9484E70082581E208D64545AAC3E613588A0068D9E3D8D82
3576D4CEF2324A5163BB138D51BC89E953E1E2F798806027741D01AEFA05C656
97B36E79F80C1318B58838D34CD39DC1612A278AE35D67FCFBEF2870F326FBCF
6C087D455DF1515844322F6265755B18E917EB366EE7008F6DC7933F819B95DB
B6172F2DAD754FAF31647715E147947C29E517181B3D082DB62ED69016AD5A2E
3A15D302A0BBAC29505806B0BF78504661F018A55422AA2693C2214A6A636F31
A95E899D8C4A3C57E62AFD9FFCEE8B0CE00874E55A43CBDB2B116971E0300ADA
31AE87E845AC5A6460F14B6563152ED139E95158DBA2BD4EE8D29DF36575364B
D71A278A3D31AD650F869CB495D84CBE098A68FFDD98E8989A25DB1A623E7EF7
2441E2DFD6DCFAB8650E63906E9A143B5A21A6AB4CAA2CEDB024E2D9E05220CD
02B95E522F04EA0DE82AA1F1FF69192272481CDF0C0459112C4C49D4AD1B581C
9DC97722C444E1BD70C1E35DA7766207EDD90DFF04863F7BCBE3A8618765F6AE
4E1A4BEC9D2D50242EAB8A5175068174A793B91038952C1E80ECD956EE5AEF21
8E28BE8AD394AF7736ABA99E195E6855FFC89F4B2B0BA9AEC18C69CEB991A351
9D026B76D8ED334F8805E235EA896B80D627C75A0D78BB73F7F91566D3DCF272
373CB8FF84F995772F27F7D811DDFE603A83659EB404DAD22EEDCFB12B2C76E9
33ACB4BD98D8D374EF6B58E4E58B6BAB99E130E2BF0A2FD3E6AA8ACB4123554D
7445E1981A3312A65D2B9C05355FAFC9B0045311714E59EF716988266A3AB7C9
0134510891BF987996AD6425213EAAD06F02D8CAB8D51ADCC6504BDF922DF966
F1FB598208A879D050196C1D9D7B801CCD1FC85B3C530D21C2DDE19034FB61EB
806D118DB4AC9CDD5095F0B5B16B62E91720E908BE2CE1A953F9750E26924054
9CD94322A87BCC52B9EBFD2077BE1D4D1DCA4F6668BEA5EEA4CBD5A5D07F9F7B
71AAB4B8F40FD17A381B314E11457006629C690CA46FB66B8CEDC33DF60D1A24
7E0871EB6C1516A6D52C69496B4EAE59456EC1E4511CF7288CE1E04B0C414D41
66416298E17F6D7F98CBCBCFEDE1928871517FB7426281BB60514CBAC8BB7406
6C42702CF3DE22EFC1F9C3B92E0480AD484EDC33A4DC8DBC1B3ED9FADF7A6306
601C27AB450B1B3F439AB97B19C376DA2198285778F8052CB422F3C30516A319
C717FB2DA74E98CDBE8EFD1F8CF8D650060CC2A0A717F915EC218B924365417B
40841C25F3AA946FFF3C0598C71A08EA2A8CB756F86BBACE0B02AEF99F706ECE
BC3030DB760F39EE9094634517394AEE6A3B09CDCF290348AAD58E7482E439FF
F8D2A10A7F63154B9317BB74C9E3D823762104E4737E01730F62209F97032E1A
6DF93681954576B521C89DC3EB2EEE94EF9AEAE22E5FA661D6922E0385078962
27A771EFD6DE6A1F519CEA4A98C966EA3F6DE319FF410D6765C04228B1E00683
41C1596040FC75764A1DC4DAA7A1B289910F4A45DEC844FCBC78F509BB1FE995
192241F08F8B39DAA9C5029FAB9ACB87B450729E30794C9DA6CAC1DCE1FD8B27
BCE9431576002A8E9FABCC39676EB1C5D7524C126E530CC560BDD8EDE6D0726B
A7422D1170E8DC87568C8C864ED9D73DEB6851723F9391C2FEE90CCF8800501A
3B3232A8BA0A0BACA003CAE4C761602F63F32934A922AF4DE6B91CDB7459E634
7547AF27AF22752746417C63DD6AE495D7601BD389D4C24C463136838D978E71
64F0CEC8D72C20F5E9B669ADC7CE5416C77AECA32C59462551487DC64BB70CC6
4EC0597FC165AF34344D1D39F1AD72A16CBF32C42409C3FD0613B7D246ABE674
AEA290AD4FE580E0DA3110FBDB8485E2185645D04DBF237C074120DBA1971E39
FD56CAF639E7A5B979B8E6E6F93AB3B1AB9255C2C11E09DE80B05E94ABE9DB2D
79D8DAA6ECBBDE7FC6E3CF2FBDA627F286079D9FEB4F3D011D34CBE175FA47AC
69FABC94271C4496607F328E3233792DE816891D33003DB32FB97AC8CF2DD163
9ACD2EFF99FD58CBE39BCE43CC633DD568096C16F3472B06AF6CC337AD00A4B9
F28FFDF92122BB4A5B82B04ECD6733EF1D35402F07562905FC6F57EFED6B69D2
C61BDB7F321A9B212E0D68F601CA175A73AFA5E327CCE1E6F2856281564D7ECA
7B4E48F42A27090A5347C5827D7028795529154349D32DA51DAA2B085FE43561
1B705D61C42BCBEAECBC71BDD4275FAB5345E609F8C165AC102C7CFCCBE2286B
92ECAE5B54726A5298B05A57E1CF4D6D9B3D3A25A9CB1D3E5D039D8877881646
71CB09A764837C4A9606C62471A7D6AB9C7E7F019CEDE3C22B08A3C0F681CEB4
EE1831BA14BD6640F9E2A36FB2D41C012CDEFDE69879DEC1E8E5B07F5E27A40B
BE321DBAEEB2506BDE25440A1FE401E714E4B1122B65AFF441B0A72413A30DFF
186113796ED89F984EB5FC9266996D2F9416EB02EF7ED51D4C14202455378961
F6C28D0031CD1E1C88966E99C9C3AA75F4FF734696C49DE909845BCEB3F769DE
BDDC88F46E70965C69C725B9FD9BCCEF90F31B9E0AFB18FE338D8BF5EA92DB01
CD24E0CD590CBF3F7993477BF2A48BC4D4A756FFD913E403AFAD9CD132894AB7
AE4A3BFF8B9F6BC5F1E51FC40C8436E66A2071FFDB163C3E59B2D163AD5998FC
AAA08B1B0006D964EE87850C385903B44A4D6477C25A8CBBBFA9D0A074A1E934
6FEC29657EAA82F9A3CEA9E29CACD49284D2615D8763B90831E4874F529E4AF5
0C4815C6F74D414C043AB6EB18988A8856A2E0FEA83AFB840A37548AE77F515C
F059684B00FB549A92821BAA857F872524A89BE960392CF9517F4E7742FD3F15
E13438F3FB251B94B59A9E812DD989D4717E0B37F35993CC1F3548B3D449E96C
7C3C6018BE26D3BA650C441DC3956BE883F119FA49CC88908FAA1C0EF513A796
6016245E622D47714FCB5CA1B0F48F815DA9F726733B07368E570964C90540F8
D9020721C0A911BC334B0C16F2A45DB63DEB07C11557135445CF7E896657F4FC
6DD07978BB66B097FF907B9C32517BC8AA3D5831D8B4F8C194A52B0BFB25B3C6
BFFD9136BFA90B328CFF451284B77F91D514DE2657D0260C6E6C5CB249F16613
58FD68420F8B91DD8C40B2712CC74A98351205D586FFCFA8C2AC7AF58420298C
8FFD22988D44037A1202DA3CA49E26EC056A68B66C5724EA082C8B2DDE3C1438
DE9473219615F18E949554546B1D3C5FCC7C72492F2632C11F9364E8DCAC2B7E
0D498CCE230818BFF03E806B328FCC17214D33FA2639AA6B4FDC62F67E1F6D60
55DCBF05C343C19C499E59BCA9801E69D3798D2240D716C6948E22074AF33F02
DF12E5C0DDCA280FC2BAD982FAA8B62F0E5DDFB8D445C56234AF0EC4FC54EA78
A9744F216DA654B07E58C49D60B785A1DEFB7346253CB36D94A865C5572E1DBC
1A3C3B8E7B485DD384FEFB20654D9E97727D483CF1F4AB6E54CAAF98F9BB6830
21FD13D8F4B9F2C2B341D5CD9544D7B4B835FBD0425CF542D750466556749A59
D8C8C47762681EFAF5BAFBAD70179F16DD689E628588A59DCBFD2DCFD5E8B09C
FA45913327A53EBF53D8D28017D44F75CA46A1BD387E88D61748ECB5233FEA29
B1AA4D5523EC67CD393DAF1D8A790FCD184C2837691852788B297E7522EC6BE8
3065EA2E106A9D832060E431D9FC6A21F15C186C07CF3C53552AC2BE7B2B1416
ED099E2B4F7B3EEEE5DDD2AC570D8D9DC543733D0EFAD939E8B633ED8166B20E
4E57B13B956E14CF9C88CB71E37AFA775A2A8CFD1950A773A8EA5059E4464B0D
0218BA57FD62C31DD41E6F05D080BB4E4D11A32CE324B43CC48E24630CBF3D02
4593E9A86888F7241058F8E70E3D3D4D0D31F3F5E7312BE498D8C4BFBBA78C26
897A5968B98E88E6F7F5EF5A6EECCCB5818B68D21DBD3C1A1AEC43CA15664072
21869E770384D023ACF398BA00E605922C918A393854B10911605FB5864428EA
3586AB8831559CF4B3EDEDA81A4DF29EE5E868EBEEAA18FD08FC7A0E1AFCAEF2
CE7215F9FBBADBF8B707129780FBD165C4ABEF372EF249FA0267F368E66F83EA
22C122D5B1BCE5340278E2183BDA4AECD9E46B215AD04B4872045E0F2B9A2876
998B7D1D946C65D8809141DD920776126ECE178BD586F859BAFC904C375AACD6
6DEDDE4A1BA0D94055CB87C04F9CBC61A721B6DC3B093F8B65EB65E09771ACFC
5A324292DAD879046B7D960E874960C33C1E9EE7F47D34C41BF4C959C6F7F3BE
22AD81D9E81D33432A37FE9BEB9CD08A6AE85AF7087BA48B66F080E606397EDA
285702862B3407D1BD81CEA4C8B84BBE2829A55B68CFA20550BCA5F7926654FC
D678E43F2B4F7CD2EADA81222658A4ACBA2B6C5C54024240E7A40E7940C65918
9EE925182F41AFA402E9B53A311B0F11212894C977C0EE614B5D134DFBA0BFD6
E4EF7FF51780A7197D609B653BD3ED804008A0AD0FF9FEDFE112D6AD0C34E1BE
C6A777904EDD5BDA325EF015908DFDF3A21E039B4E523A36575FFEEA281E0CC2
5542AE1FF76CADC153334223DDB859FDED698264228ACD31D6395DBF4702486C
D529B072FFCE43F339591B31D1D65C1D50D2ABDE1187E44CDA4573EED2ADAE26
E7B54A5793D43E009CE03381118000FF7133E84D48CB58445DDE9E8B932406BA
5AA8126F5A277E6CE0C6B1967DD1551F49621EF40414D3DFCFDF9688DD4DE275
E7981C6BFA150158AE75FB1238E423874D699C96AC4411B523979472FEB0BFC4
160976C2C2C711F0DA3B4FC19AC487884AD4BD7A792B8A16E9F85EC9124742A4
B0CB64B16CF4D0031806F9B4C12ADE6F249A0112C84419356B122FC6CCB1AA09
31F1729E60554BFBABBC7E52365823BB95135E468F1B8DFA4FD81FA09F202CF4
6A7B12A693C7CFE8EC5A2503CB3E4139D9E15670802A6C41280817EE9A0BA6A1
8D368F8D478608FB060A2ADB1FDFA0A5C67E0087410269A1FC074CB7742B7513
6D8066929C4A69E5EB014F8FDC0A284F5BED3EA4183B335AF2FAC485BECE6EB1
A57D8BDB3D7B508A91B883DF299F082DFAEFAF3C206BADBC62D92BF3AFAF77B1
53CADD888406928999FF767A9E678E0A7452C6E78CD5A0166F0B40863960971B
38497FE7E1BB40CADB88397DB4AF0175369A2D67621BE653DA49027F2EEE24E7
5CF872E6FA5E263E559D6C4B772D3F9605CFAB4A85B9A23B80E6850326544C4A
0C2A8DA3C555467EEDE17A88DCBF1BB1D0BB8362F78A93B8E8446B85358A52F2
FF97A598D77FF647A0DBC2A33039833A9DAB917081CC3F7EF7F2E244619D8927
331E648BDD794F3D6B66B8977D868CF7BCCE695784F9C1394E53D55D3971CA3E
1C2486678AE02023D3E7E5403F304ADF20E359D4085874DC16EFB5E94F044578
BE24DFC34E21E21D5832341917D92AA635978F8C9B945574DA5D574307928A6D
BDF48E56E936B8F99DF6D74BA8D332B3A19CFADCD0B37F2F2EA969C1EE433B60
75874AD3195BEA4C7A85374195F48017514ECCF34232DD228DB596163988F191
1314FD29E8E7D0886C7921E37B673D6A139C0045BAED2AB8BC1B8EAD1AA7BE19
276C9E405182339CA757F550C196353D391E4EBED9D29CC2C54FC1D4D61F1FAD
874FABF8ED74D73414B752AC9D2FA7ABB6A93EB1827EDB51EEF86DA7119F8AB9
C55FF65994D5E01667517A3B4D753DF41AD8D75C44B94D86F45FBB21410F2F6E
95EC1F4EAA2F88450634C3CA696C379AC1607BE232C9637E72DEB82D20201C31
7456002FF53BD26159E44B139DF9EB55BCA3908640A6B03A0577A9499B58914B
EB18AC8DC2CEA69F6293C3A33AB1D088BFF5F0C235841761E2430B1546758EB3
43AE03B5010B76DFDFD6A86CA04655B6C02C31327E40678ECE56A7DBFBDA1838
4F1DB4030A913DDF76B537E0CE40AB5CDFF48846E8AB55F2C61455BE532CA865
7F937491591CD21BE823EAD67053D65BA42ABDB6C37FDBADF3A441D7FD124B73
6403580C69DE01B06D9F7DD6A945B931A3AE3D475995636B0E2A508945108834
88DE9E206F8F861A73F803E3514E3BC454FBBB91DD884432D9E07D1E34649C65
FCE54B8BD7A9F7187EA9400B50C2374F656C56749C4BB4FC5F1F1BD60135096B
F267C94316845BF13956241F62EBBB0DE6C5A6C4A8E4E9C09A33D44F2782C764
E4E5419A09233554D9C2A31172CD7DC04D11C4CD8BC277F754FF4E1282327E51
7823DC038E510D598EA37A28D75F5725BBFB2A89890F3A9DED780C1CCE9E113A
DCEDFD7295B6A8CC18C827D8EE3EAB6DEB9B084FD31CD5DB273F5AD8954F8705
2C28AFFC89E6785B80C30F43D794CF9E52216DFA2EB8898C808814D32566BE1B
5D6B0F34691D88425F3866111EF0F3A0BEC6431B3A5EB28A7BB8809E41610AF0
C3CBBCDC5B416528B68BE7C8575124FC3D4F7CF96DDADEA2FF85A81BB552A5BB
2F6911CCEA5519CE6732275DAB9B25C0089C4FE47C3E4D3F9076386BA338D5FE
5D532E504ED945B7FC270696FEFFF82CD8A37CED07A4C2B96D718A7B3EFE27DA
43682F414B44B08E34C678ED277877925A395ABEE83A4D39286B527AE8BF5198
6737EB9E0D60C1B7FE60CB7CF1401F830F8B85D48050DBB3695E977FB881C927
EB704FEBC1CA64BD2D10B4CD2596AB27E2170DDE5759E8ED5F2E3FDE5FA28ACA
AC7DC14D0CF0CD6F9570520E2AD466CD213566C3D9D9E0AF08D8F2983CAF1ECE
E14CD8E16B197D769E251E7049137815ADBA0CE42959DC40105AF3BE5BFEC676
2BAD9114421DB737E4F72DB1D5B9998C1B957E6222F3E285912CFEB60B170A99
9D8CF7F5184D45145571C8F59EC23B8C820F3076C02EE6C3027D59ED3E1F78DE
16DD147B44C3DBE0C5358505718290C192F6926C92EDDEEFDB6D4408045EACD6
97BD04CA10FB4910DBD541D1F18488923E215040047CC7207046C302A8E07AF1
AFAD512B7E11067769C9E50B710CECB300B2F7636AD114185C38AE46CF4F52B8
BC814BCB88AD8B728A1A8BEABE7BDB8DE3CBF9AF839DFF71597A67E1B7EC082F
7E706065FF710ADD430362878CEAFD3BC561A2E081806E486BBE40DD57843BB8
C1C23D070530EC3AFB7506AFDE9874E8B357ABCCDA2A15D786DA8CE87925EC73
65AB4AA47981A57714351888E1CC3F22EB70BF1D951A3321ADAE8F71A318AFC7
29AC1F6DCC98DE018D6EA08F1BDC466EDFDD448E0537A1436CC635FA7C74A46F
52F9DFDD7E1B80FAC97660FEB8DC95931E4AAC390ADBA67771DBDF224C1FA557
BF3EEB14C70D7E5C347D2AC7EDB76A39719C27C3707DD92142650E6D62528C26
EC95DF5FFEEBC7C86A43EBBA409CC59944E9038096009CA2F46A22CCA94D3D8B
5EBFB20FAEA8D8FFABF41A1282310116F9C9EFCB9B0EE8804DAB9B1873700054
830E16487D69EEE2FCF889104DB591D1C9389FDD64AD3D5BF91C74C49CBA2DC8
59F0CE79F56E806CFCCDDFADD4CC8EF0679AF88D0725E4AA26642DD10D710FC7
3B71A675FC6F999323ABB1A59C23605327FBE335647EC21C130F096BA957267B
A647D995690E8F0C4CE22C0F97EA7919FEFC5ED92FFA0869A8AE1A93140E1C1F
6305079E18973B7001CAFD02B484F203AAAC367B540C0A068F37D5CE63F770DF
05ED9B436AFD44D57E362D5E2D8D738C33AD986913983F83FCD08DF1D1766EB1
7E1F7A1E55F277B890BE5FDDE3F5E636D02B8A328C5A3867AB5FA0FCC5F1465E
19E62CDA61D28A6790D3836A3DD5EAA43473FEF4261AC9E328BC21FD44A56A1D
AF31445B698B84D469621ABDD52EFF1F306690C16B69647BC171E495F6EAAADD
F4A248BB900C6D7AE067543368755C2669B1AA46997D929891737063E96A34F9
2121E843CE3C8E24EE0D502ECDE53CCD2704DCA410419B4F1A7C38CEE1FE7E11
FD8B9D44EF3143CBADE0775EBDB753C26FC2C8EA4B5AAEBB8E751378D50E3628
E5ED0C6F2A71911E113C8C6D59676831134CA10CEA6BFF385883362E442A4E79
E10D84FEEA1DA0E1C193FA73B0974766014A741D046FA41B165B7652D3EA2172
07B7B6BBDD1053E356401C8E685E3EDBE85F7053E23D49FABAFFFBA5AE75DCD0
E43E4B59962016004275D62EB10980B356A9636FFCCE854656108437ECCE33F2
7DA1C0B41BB71446A1CDFA3F03FEB9CB1C5087EFF696B0E0EFB6A8408CA099AA
6FAB365D1109000BDB64D8E46E34BB969B06D6085B51608C53DC874378B4F335
8D0E0AB64BF048E751A0ACF972D4B706DC78F56CA6C4A302AEF6086EF13C3B12
A1DF33012C9F22D13382CF1BE206304391EB3D135D5DBB52D56129B29399B283
05DF28AC95BB7AB49904982EB71CFD7D65DF6796FBF0FA171B74B50DE4BDE41B
018E3AF7B36117027E4CD86768D9ED47464D40B89BA5E4BA5A4A26342E7637AF
596A3F203BA2E41852AAABB798E87EB099905B7FBD9C767DF93C626B1C0FCE3A
4940F6CD86279B7E25F2622763BA10CFB8EB02C41693CB5330C13CA60D1E9698
A2CA8060874B2493CB043515FE3E0C4B7BFD3DC0185C67E0CE93D72F631DF1C3
231E805E1D9080C14999025262F5A737A916EB6AF351BA61BD2DB6FF02204701
218A8651B53F745D7B03D39683208F8C3355D456C540A5C73E96B808735A239E
BCE9A9AA8FB50F9FFAC560379B00574237ACF4C6074738BA8C01C50A41EEC843
1D13BCECB5430EA5714239017199F5C575FCFCC7F3819CA426E473C8522F690B
A5A08AB07AAFF509A3AFE36F71C7A184285CC01B5B7F2B74E6FA53ACB3D85B40
5727BC752002BFAA73E58B2F2870F661F565D173CCAD8574C7D27AD04CE7DDB8
497373109A52396468E6E605BF0E65AE7722B8D914E854B15F730635D2EAA68B
6352C30BF480E7CD25F257393D0AEC771EC5F214E169546681145EAC685399A0
554E3A8D4C6EBB48FEEA86ACAA8CCD9CC8ED2C36E063181387F9079F90C21894
2B7EB5EF928BCE2C3D3682B6791B75ADC280ADACC01EA95A023BA01E659A54DF
6B6A8C8D801B4A11ADEE6B8C5FB0E4AFD861E361355E607BD6F92A0140F2CD5A
89CAD478622186E0822C465E4223F00B9E580D91C2946BF3955FFD298A64049A
EA4A844145E813F9062C832D22039723FE40EAE6F0FDE1EF36F22AF1F74D61B7
6899A4BD878AACEBD878FD5FFB5B50E4A315D8462CAF5806639BA05E5835C44F
8F9211EBD4292674603A5B71B192F5F113872AEC3C1029A140EE5281D6677333
E7116D1B01FD83BFB759F05C7DA86C8F3A2D23590B92A7867040FA0DDBC5BCAD
A19809BDB0E03539DC8AE233526C1C7F02F09D2C4CF1A357F9738A7D03CC9804
846FB1D69712AEC6E0B73DAE3B3F6510FCC6C75BC3F75ED60260A4E079CA9C3C
A576DFDEBDFC733C9D5CC82696E3E9025B44A5AFB009EB390C350FDF4BB5DBFD
D81810AB42BFC9141928041869DD6AC5A7A131EB451F3AF75A3880841B81DBD4
AD6A626EA3B0C72066C56B4A682CC6451D2B938D2BC92925D9C8D44DC1ADB250
4FFE7E60C174DAD5E2BA90259EF60F3226937BFDFE7D32C41F1D0246AEA2BAEB
1BB05886AF43C4D2DAAA816A5542C78D484569253DABC6D8F91772EFD6DE6AB2
0E00BEC65C8BA89F3436ACF26B843DF79A8BCCDF2423FCB81693605FA856AA34
0B75B605D661D4EB750025CC72858554548FA125375D545E0E8521F6BFB58F8D
4B2FE5F3E4F3E475261CA1D1EA8C8A8EB34ED5C5E307B6DB64F1259D6476F792
BCB2D46AEED32A156F0CAC64E9A6CA15009567FD351168CA420885CBE6DFCCDD
3F797EA3AF7E1D209427F3D451453C58BDD71921612BC8D344B21DDF71CFB6E8
7F0EAE72704DD9D0D90BF32B74EFF25B48C174E7DB7BDCCC00CC3A9351211E25
8635E9C9A9C9BED32F837C3FBCA46705FF473A22926C57C8C329E02B872550BE
16755E1C7EF57A1CC341A850698F64C27B3F754589AEC94EA9F86401D973BA01
94E9F9312E873141AB694B4F45BD5109B3F622CBA90531204CA7E627695BC75F
9CA4989B43996FE07483C56AB617553E35120BEAECF3FAF3A6B485721D4A5C1E
61C04330C8E2CABBA5517FDD545C83291BDE436D3CC9DFE67AA667366CCF491D
F8D15C9FA95DAAE2BE247A60070A48B8CC5027767E61F9BD6B2EC4F975A7A0FE
90EC1ED8B854037B92CFDA4B1BEC309BD4E8E1037524656331F3A5DC42D9633D
1C8C39ABB9D50F2229CF92CEB7539BB6C7D2411CA510671C1F7B40F65003A929
E1B554686770BD9F1F4B98647F3E8AE419674C3CDD16C623ED9C6027B74F0573
BB822973619E11687DEDCACBC0DA4D6B9FFF54299AB96196F0F0AB7767D73F1F
7CE801E582D0E61DA4ADF965E3C20B9F4A96ACBD83D594F8E7EB77F17D4EDC3E
C53DC6EA36F85BD910346669FA1BA24A482E1A220F51E3C52270C9D938FC50A7
87E1056D66AE2CE76CBC7449BCF1319EB9CA11E6FF8781BE7A672CE9F3E2DB20
68FF95A87A0AD137FE79E5398355F95BC5DE4FE39E3EBCFB2B09CBF53D3C2E11
6501363D075C83FDE29C70333B1B9FBADCBEB303E670DB26CEB0B8D684D5A76A
E020B4970B3333E4EC0DE393D85CEBA3F769FF0DF34ADA7EE336604EDBC524DE
DA4CE4F351257E57155703B0A394E885C45ED656D76882AD70DCB12C47872663
59A805EEB820018981331BB8B366B0D3F28453433E2C8FEF301228C09C39408B
F79847681B88659DB59D6663AADB3620E8F20164ADEC6E5EA5BA14A46A94B834
73205F994AC901EA22943BF14CA034022939F7458DD363F4D4B66BF0D3C72D50
45B471229C777F8D94B0632F6109A87A0D8BED9CC702EDBC75B4A91279B7CA78
F2067EE6F073093C42D5A5EFE37BAC425A35BD1D950017B580D2C45702B78639
E915F51609DA129E15569CC13DC02C22582F9342CE0FCE8D3737C62EDDEB6641
093FCCBF9B37BEA43536F907BE3F9314B1C44EE5CC2E98F22FD65A869B737B72
B9DC53D556A93E1E9ABD48342EEF055EA030A58528F43D7D44B0FDC17D482FF2
57C06B794874A9BEAFEB1F6B81083C1E5B6E15C2B09404B3802D8F21576BBF7C
2EA00245C40D1EDAC89B4F774EE2B765A7771318D6B9BFF2569B19A6961CC4FF
948A22C242BA80B717CC1D9C05049A7ACA8666615D25D339E186EFA725F5D4C5
727AE42C73EC339AA9721B5F62E831FD4DD0A14B6CDD6DD4B0C5F9F43ED551B1
D30EC5F9D6E04C067DDDFC7AC166D6E4BC81FE6A3DF40F29ED0AB804FF60F6DF
4B126D4446FEFA64DB704738997A0FE16EA533A5268122E0573DFFBB42794BB4
0EC8C10E098EC1953019C80D803D994E67390944D6CA7DB86932D372B222177B
1FBDABD372D88D59884FA53BAFF85D13BBADE46A291A7E11C8B08D4414F32C02
800E7013C2AEBA81693BAC1ABD5C80708973AFED844C54AC70326F0630BCFF6B
DA7F336CBE817A56111D4EBDE4C4A76E4E7919F418AB706BA16A341B45697381
A60B034D4305EBF9EA1CBA8FEDC1B3638F7DA45C0C2B9B6BD09A478E53136EAD
28F0837DC7F1374204A0B6C2A3D40C1C1F18CC84C0C666D8AC0AD50D0A8ADDB4
9A4C410411ECDE485ADC4486A413C38B0E32B5872304F0E95D2F20D98BFF836F
9D35E429D58803328EE0AB78F4BFD529E63E854A04CEEE76C04095CA648240F2
A5D1BE104BE93E07A15D26BDAC8E462B57F05510BC3B75AE483FD04222C92BEB
75A02E420752BC5F26F51171887818A953FDE678A4C235437EDA0B69AD80492A
D41E10FF8115175300AFE658C5A9F6343BA7718A6FB9D634D2B294F7E00F3F9C
805066C1D1AA1AE6D4BACB88FF3431AF7D68B366246BD77A6332CD62522C0FC4
BC08438DBAF415F65FF2690BBBFD661BE24C527E8E6974AAF2301FCDB0B67D4E
C07DE11CE635768B7FFE2946052D4C0E90652F97E8F39ACC9509A1B194EA9AFE
834D068C77D8E801F029121242CE6AFD876648F90D8FA256B79045698A3F1A91
EA7F4332F460083A0F873FB90EF53316B541747BA3E9E2E11BE93A6EBBF723E8
5204BDEBDCF714F11C14AD88B785F0A4FB4822E91DB0163F32DC4B9978CB72AF
B5BE2475889281D88D6FEA270BFEEDBF0C35AD88B334251D86B0C74251C627F9
15C55AAFAD4AA008C9F07DF6255C010EE5D1B06D34BEDE4495A655540B539A44
DFCB26678A18CE6FF0AE4F075DB6532B0A50035EA32E244CE8D33A66B9CEE6BC
B10F07A482832FA09C9EAA82557113DAC73B02B4E6822CCA77CD31C9D6917E5B
4C4D234FFA1B6F14786E77F2144636ED04C88005A1EDB6213386EFC452C81EBC
2185F98F95229C228281B3D434D423ABE15439BB41A255C8D6A6825648DEE976
F64217A00A737B469AEE4CB88C7BD119E7F4324CC7C79A7FCD28F55C23527354
BB9967FA75FAE766A359AED9B0CF9481BDBB8990A587992596ED3B1D635F939A
3DA7E61C0ECEDB550B8709E2D64660663C17783A678C736B306B3809BB909770
074A49F26B36DF5228E047B581AFE3B58E6B6CD01A3878065F25A5FC83DDF602
2AA9AF3924B9738260B73CA9FDB86C664207C497E67D746AA0C6E92F87A6B81D
AF8CDDC72D80D1886DF719833BB072F47807632DE229A7B286921F97D40FF58B
BB4F8617F03F23FCD92CDDE7511D29FF797A2533ACDA5105AAC90B5F0AA9A8D0
AF61D97B845104B3E35556016A588F37FF62BD8B909F52E2880132928089014D
7B659E8315D98497278C805D4FCCB92E1A3BA1EC512289914BED3FB08FE8281C
D4205E157E6BC595A6A03E22F9F2890DDE4C96548E304B75E1B56C1EF8D175C6
C7BE63E6C887A2E2BF732FDB74CE271FC23E20F7B8D7E6F01BB18968849CB0E3
19D1E7A3A44C63B05DA8EC4F4FC5D8B20C307AF6938DECF1324F64160380DB69
DEEA6D08DEA8E49184A845E3AD69C1CA1C2F747A02321C9701D751C905F0453E
701439C660B310A5A8333F6FC9DADE4B5390495060467CB218053D31F204E5DD
36BE2A6D467EC0CA8E6DF1841A53588BF501616D00DD90CF9AB9351B4F20FC26
87489AA3B9A7C0CAC743D424D79920D760601C9DFF3C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (CorrigesSeconde.dvi)
@start /Fa 138[32 1[23 3[31 33 1[15 2[16 32 28 1[27 3[28
29[37 35 10[28 1[28 28 28 28 28 28 48[{ TeXBase1Encoding ReEncodeFont }
19 53.4661 /Utopia-Regular rf /Fb 57[44 44 197[{}2 61.1042
/Fourier-Math-Symbols rf /Fc 154[26 101[{
 TeXBase1Encoding ReEncodeFont }1 49.6466 /Utopia-Regular
rf /Fd 187[35 30 29 29 65[{ TeXBase1Encoding ReEncodeFont }4
45.8281 /Utopia-Italic rf /Ff 162[52 1[52 91[{
 TeXBase1Encoding ReEncodeFont }2 158.413 /Utopia-Regular
rf /Fg 162[63 1[63 91[{ TeXBase1Encoding ReEncodeFont }2
190.034 /Utopia-Regular rf /Fh 165[54 8[58 2[58 9[54
68[{}4 76.3801 /Fourier-Math-BlackBoard rf /Fi 92[37
163[{}1 51.9385 /Fourier-Math-Symbols rf /Fj 151[32 37[33
66[{ TeXBase1Encoding ReEncodeFont }2 51.9385 /Utopia-Italic
rf /Fk 205[28 50[{ TeXBase1Encoding ReEncodeFont }1 51.9385
/Utopia-Regular rf /Fn 135[32 2[38 21 1[25 9[37 2[28
3[34 24[47 6[38 65[{ TeXBase1Encoding ReEncodeFont }9
61.1042 /Utopia-Italic rf /Fo 65[47 7[34 34 31 31 2[42
13[30 30 35[34 34 34 34 8[76 76 70[55 41[{}15 76.3801
/Fourier-Math-Extension rf /Fp 221[90 34[{}1 76.3802
/fourier-orns rf /Fq 21[31 31 45[27 15[27 20[31 28[31
30 1[31 37 21 27 24 36 37 35 38 56 17 1[17 18 37 32 19
31 37 30 1[32 3[20 1[20 11[47 2[35 16[16 16 2[32 1[32
32 32 32 32 32 1[16 1[16 2[21 21 17 36[37 2[{
 TeXBase1Encoding ReEncodeFont }46 61.1042 /Utopia-Regular
rf /Fr 134[27 30 6[32 34 7[35 4[26 1[33 16[36 1[44 53
33 38 20 20 45 1[33 35 44 38 37 36 65[{ TeXBase1Encoding ReEncodeFont }
21 58.049 /Utopia-Italic rf /Fs 159[33 96[{}1 58.049
/Fourier-Math-Letters-Italic rf /Ft 242[83 13[{}1 83.022
/CMSY10 rf /Fu 204[36 36 36 49[{ TeXBase1Encoding ReEncodeFont }3
68.7422 /Utopia-Regular rf /Fv 229[83 1[83 4[62 10[83
4[21 1[42 83{}7 83.022 /LINE10 rf /Fw 134[36 39 2[47
2[31 43 45 7[46 1[24 1[45 34 43 43 16[47 58 58 70 43
50 27 26 59 54 44 46 58 50 48 48 65[{ TeXBase1Encoding ReEncodeFont }28
76.3802 /Utopia-Italic rf /Fx 93[54 47 161[{}2 76.3802
/Fourier-Math-Letters rf /Fy 67[50 91[44 96[{}2 76.3802
/Fourier-Math-Letters-Italic rf /Fz 177[58 78[{}1 83.022
/wasy10 rf /FA 190[66 65[{}1 76.3802 /Fourier-Math-Cal
rf /FB 34[45 20[55 55 55 55 7[55 55 3[55 55 17[55 1[55
21 55 48[64 5[21 42[59 8[0 3[45 78 15[76 33[{}20 76.3802
/Fourier-Math-Symbols rf /FC 58[42 33[42 1[42 112[17
48[{}4 58.049 /Fourier-Math-Symbols rf /FD 22[30 30 109[28
5[20 25 23 1[35 33 36 8[30 3[30 30[37 37 7[31 31 31 31
31 31 31 31 31 31 1[15 1[15 44[{ TeXBase1Encoding ReEncodeFont }25
58.049 /Utopia-Regular rf /FE 221[38 34[{}1 76.3802
/Fourier-Alternate-Roman rf /FF 4[46 1[46 4[44 5[22 3[39
39 39 38 4[40 1[40 31[49 4[34 10[27 4[34 14[67 5[38 31
8[78 17[37 39 37 1[38 46 26 33 30 45 46 44 47 70 21 40
21 22 46 40 24 39 46 38 46 40 3[25 1[25 4[48 60 47 41
49 58 46 58 60 72 43 1[27 27 61 56 44 46 60 52 49 49
1[30 1[44 1[20 20 40 40 40 40 40 40 40 40 40 40 35 20
30 20 2[27 27 21 5[18 29[47 47 2[{ TeXBase1Encoding ReEncodeFont }90
76.3802 /Utopia-Regular rf /FG 22[40 40 55[30 54[40 40
1[40 48 28 34 34 46 47 45 49 72 24 1[24 24 48 41 26 40
46 38 46 42 8[48 1[49 60 48 1[52 1[50 1[56 70 3[29 1[55
45 48 2[52 49 6[21 43 43 43 43 43 43 43 43 43 43 1[21
43[49 2[{ TeXBase1Encoding ReEncodeFont }53 76.3802 /Utopia-Bold
rf /FH 22[57 57 114[69 41 49 48 1[68 64 1[104 34 2[35
1[59 1[57 67 54 67 60 12[69 1[75 3[81 6[80 19[62 62 62
49[{ TeXBase1Encoding ReEncodeFont }24 109.987 /Utopia-Bold
rf /FI 22[47 112[45 4[40 36 2[53 5[27 1[48 1[47 55 45
31[63 67[{ TeXBase1Encoding ReEncodeFont }11 91.6562
/Utopia-Regular rf /FJ 22[68 82[66 32[80 45 58 1[78 1[76
82 122 3[38 80 2[68 79 65 1[69 13[71 5[125 77[{
 TeXBase1Encoding ReEncodeFont }17 131.985 /Utopia-Regular
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -254 -561 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-246 -246 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246
-246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246 -246
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Rappels de calcul et de g\351om\351trie)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (Nombres r\351els)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/Count -0/Dest (section.3) cvn/Title (G\351om\351trie rep\351r\351e)
/OUT pdfmark end
 -246
-246 a -246 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -246 -246 a -246 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -246 -246
a -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 0 TeXcolorgray 1162
166 a FJ(M)n(ath\351matiques)30 b(\226)f(S)n(econde)1496
577 y FI(C)o(orr)q(ig\351s)18 b(des)j(exer)n(cices)-246
937 y
SDict begin H.S end
 -246 937 a -246 937 a
SDict begin 18 H.A end
 -246 937 a -246 937 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -246
937 a FH(T)-10 b(able)22 b(des)h(mati\350r)n(es)p 0 0 1
TeXcolorrgb -246 1120 a
SDict begin H.S end
 -246 1120 a FG(1)67 b(Rappels)14
b(de)i(calcul)e(et)i(de)g(g\351om\351tr)q(ie)1045 1120
y
SDict begin 12 H.L end
 1045 1120 a 1045 1120 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1045 1120 a 0 TeXcolorgray
3058 w FG(2)p 0 0 1 TeXcolorrgb -246 1293 a
SDict begin H.S end
 -246 1293
a FG(2)67 b(N)n(ombr)o(es)15 b(r\351els)375 1293 y
SDict begin 12 H.L end
 375
1293 a 375 1293 a
SDict begin [/Subtype /Link/Dest (section.2) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 375 1293 a 0 TeXcolorgray 3685 w FG(13)p
0 0 1 TeXcolorrgb -246 1466 a
SDict begin H.S end
 -246 1466 a FG(3)67 b(G\351om\351tr)q(ie)
15 b(r)o(ep\351r\351e)532 1466 y
SDict begin 12 H.L end
 532 1466 a 532 1466
a
SDict begin [/Subtype /Link/Dest (section.3) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 532 1466 a 0 TeXcolorgray 3528 w FG(17)p 0 TeXcolorgray
1930 5895 a FF(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -246 -246 a 83 x FH(1)105 b(R)o(appels)23 b(de)f(calcul)i(et)f
(de)f(g\351om\351tr)q(ie)-246 -52 y
SDict begin H.S end
 -246 -52 a -246 -52
a
SDict begin 12 H.A end
 -246 -52 a -246 -52 a
SDict begin [/View [/XYZ H.V]/Dest (exo.1) cvn /DEST pdfmark end
 -246 -52 a 0 TeXcolorgray 73
x FG(Ex)o(er)o(cice)14 b(1)p 0 TeXcolorgray 42 w FF(Dans)i(chaque)i
(question,)i(on)d(obtient)h(la)g(r\351ponse)g(\340)f(l)o('aide)h(d)n
('un)g(tableau)g(de)f(propor)q(tionnalit\351.)-246 64
y
SDict begin H.S end
 -246 64 a -246 64 a
SDict begin 12 H.A end
 -246 64 a -246 64 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -246 64 a 0
TeXcolorgray -141 160 a FF(1.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1435 212 1239 4 v 1435 311 4 100 v 1488
282 a(N)n(ombr)o(e)f(de)h(personnes)p 2302 311 V 145
w(4)p 2526 311 V 144 w(6)p 2670 311 V 1435 315 1239 4
v 1435 414 4 100 v 1653 384 a(F)l(ar)q(ine)h(\(en)f(g\))p
2302 414 V 268 w(250)p 2526 414 V 114 w(?)p 2670 414
V 1435 418 1239 4 v 1435 517 4 100 v 1660 487 a(Lait)h(\(en)f(mL\))p
2302 517 V 276 w(500)p 2526 517 V 114 w(?)p 2670 517
V 1435 521 1239 4 v 1435 620 4 100 v 1779 590 a(\214ufs)p
2302 620 V 435 w(4)p 2526 620 V 144 w(6)p 2670 620 V
1435 624 1239 4 v -38 743 a(P)n(our)g(6)g(personnes)o(,)j(il)e(faut)822
710 y FD(250)p FC(\243)p FD(6)p 822 723 165 5 v 889 772
a(4)1011 743 y FB(\306)1090 710 y FD(1)6 b(500)p 1090
723 130 5 v 1139 772 a(4)1243 743 y FB(\306)15 b FF(375)j(g)f(de)g(far)
q(ine)o(,)1860 710 y FD(500)p FC(\243)p FD(6)p 1860 723
165 5 v 1927 772 a(4)2049 743 y FB(\306)2128 710 y FD(3)6
b(000)p 2128 723 130 5 v 2177 772 a(4)2281 743 y FB(\306)14
b FF(750)19 b(mL)f(de)f(lait)h(et,)g(bien)g(s\373r)-5
b(,)18 b(6)g(\234ufs)o(.)-246 785 y
SDict begin H.S end
 -246 785 a -246 785
a
SDict begin 12 H.A end
 -246 785 a -246 785 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -246 785 a 0 TeXcolorgray -141
869 a FF(2.)p 0 TeXcolorgray 43 w(Les)g(6)g(yaour)q(ts)f(p\350sent)i(6)
10 b FB(\243)g FF(125)16 b FB(\306)e FF(750)19 b(g.)p
0 TeXcolorgray 0 TeXcolorgray 1541 952 1027 4 v 1541
1052 4 100 v 1594 1022 a(masse)f(\(en)g(g\))p 2074 1052
V 102 w(1000)p 2339 1052 V 105 w(750)p 2563 1052 V 1541
1055 1027 4 v 1541 1155 4 100 v 1625 1125 a(pr)q(ix)f(\(en)h
Fz(N)p FF(\))p 2074 1155 V 194 w(2)p 2339 1155 V 214
w(?)p 2563 1155 V 1541 1158 1027 4 v -38 1291 a(J)n(e)f(payer)o(ai)325
1258 y FD(750)p FC(\243)p FD(2)p 325 1271 165 5 v 343
1319 a(1)6 b(000)514 1291 y FB(\306)593 1258 y FD(1)g(500)p
593 1271 130 5 v 593 1319 a(1)g(000)747 1291 y FB(\306)14
b FF(1,)8 b(5)18 b Fz(N)p FF(.)-246 1333 y
SDict begin H.S end
 -246 1333
a -246 1333 a
SDict begin 12 H.A end
 -246 1333 a -246 1333 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -246 1333 a 0 TeXcolorgray
-141 1417 a FF(3.)p 0 TeXcolorgray 43 w(G\351n\351r)o(alement,)i(dans)d
(ce)h(type)f(de)g(question,)j(il)d(vaut)h(mieux)h(conver)q(tir)e(en)h
(minutes)p 0 0 1 TeXcolorrgb 2575 1417 a
SDict begin H.S end
 2575 1417 a
-30 x FD(1)2612 1417 y
SDict begin 12 H.L end
 2612 1417 a 2612 1417 a
SDict begin [/Subtype /Link/Dest (Hfootnote.1) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2612 1417
a 0 TeXcolorgray FF(.)p 0 TeXcolorgray 0 TeXcolorgray
1528 1500 1051 4 v 1528 1599 4 100 v 1605 1570 a(temps)h(\(en)e(min\))p
2208 1599 V 127 w(60)p 2392 1599 V 134 w(?)p 2576 1599
V 1528 1603 1051 4 v 1528 1702 4 100 v 1582 1673 a(distance)g(\(en)h
(km\))p 2208 1702 V 103 w(20)p 2392 1702 V 104 w(45)p
2576 1702 V 1528 1706 1051 4 v -38 1850 a(On)f(mettr)o(a)342
1817 y FD(60)p FC(\243)p FD(45)p 342 1830 165 5 v 394
1879 a(20)531 1850 y FB(\306)599 1829 y Fv(\032)611 1817
y FD(20)o FC(\243)p FD(3)p FC(\243)p FD(45)p 611 1830
238 5 v 688 1897 a Fv(\032)699 1885 y FD(20)872 1850
y FB(\306)d FF(135)19 b(min,)g(soit)f(2)f(h)h(15)g(min)g(\(puisque)h
(135)d FB(\306)e FF(120)c FB(\305)g FF(15\).)-246 1901
y
SDict begin H.S end
 -246 1901 a -246 1901 a
SDict begin 12 H.A end
 -246 1901 a -246 1901 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -246
1901 a 0 TeXcolorgray -141 1976 a FF(4.)p 0 TeXcolorgray
43 w(L)-10 b('\351nonc\351)19 b(donne)e(les)i(infor)q(mations)f(r)o
(ecens\351es)h(dans)e(le)h(tableau)g(ci-dessous)g(et)g(demande)f(de)h
(compl\351ter)g(la)g(case)3554 1973 y Fu(1)3530 1976
y Ft(\015)p FF(.)p 0 TeXcolorgray 0 TeXcolorgray 1629
2057 850 4 v 1629 2157 4 100 v 1696 2127 a(F)o(lor)q(ins)p
2002 2157 V 118 w(7)p 2146 2157 V 113 w(?)p 2289 2157
V 2366 2124 a Fu(1)2342 2127 y Ft(\015)p 2475 2157 V
1629 2160 850 4 v 1629 2260 4 100 v 1685 2230 a FF(Pistoles)p
2002 2260 V 106 w(6)p 2146 2260 V 1 0 0 TeXcolorrgb 104
w(4)p 0 TeXcolorgray 2289 2260 V 0 TeXcolorgray 2366
2227 a Fu(2)p 0 TeXcolorgray 2342 2230 a Ft(\015)p 2475
2260 V 1629 2263 850 4 v 1629 2363 4 100 v 1682 2333
a FF(Deniers)p 2002 2363 V 113 w(?)p 2146 2363 V 1 0 0
TeXcolorrgb 104 w(5)p 0 TeXcolorgray 2289 2363 V 1 0 0
TeXcolorrgb 104 w(30)p 0 TeXcolorgray 2475 2363 V 1629
2366 850 4 v -38 2484 a(On)f(compl\350te)i(d)n('abor)o(d)d(la)i(case)
981 2481 y Fu(2)958 2484 y Ft(\015)f FF(:)h(en)f(\351change)h(de)f(30)i
(deniers)o(,)f(on)f(a)h(4)10 b FB(\243)g FF(30)g FB(\245)g
FF(5)16 b FB(\306)e FF(24)19 b(pistoles)g(:)p 0 TeXcolorgray
0 TeXcolorgray 1629 2567 V 1629 2667 4 100 v 1696 2637
a(F)o(lor)q(ins)p 2002 2667 V 1 0 0 TeXcolorrgb 118 w(7)p
0 TeXcolorgray 2146 2667 V 113 w(?)p 2289 2667 V 0 TeXcolorgray
2366 2634 a Fu(1)p 0 TeXcolorgray 2342 2637 a Ft(\015)p
2475 2667 V 1629 2670 850 4 v 1629 2770 4 100 v 1685
2740 a FF(Pistoles)p 2002 2770 V 1 0 0 TeXcolorrgb 106
w(6)p 0 TeXcolorgray 2146 2770 V 104 w(4)p 2289 2770
V 1 0 0 TeXcolorrgb 104 w(24)p 0 TeXcolorgray 2475 2770
V 1629 2773 850 4 v 1629 2873 4 100 v 1682 2843 a(Deniers)p
2002 2873 V 113 w(?)p 2146 2873 V 104 w(5)p 2289 2873
V 104 w(30)p 2475 2873 V 1629 2876 850 4 v -38 3031 a(On)e(peut)i
(alors)e(compl\351ter)i(la)e(case)1086 3028 y Fu(1)1063
3031 y Ft(\015)g FF(:)h(en)f(\351change)h(de)f(30)h(deniers)o(,)h(on)e
(a)2280 2998 y FD(7)p FC(\243)p FD(24)p 2280 3011 135
5 v 2332 3059 a(6)2439 3031 y FB(\306)2518 2998 y FD(7)p
FC(\243)p FD(4)p FC(\243)2669 3020 y Fv(\003)2664 2998
y FD(6)p 2518 3011 176 5 v 2595 3099 a Fv(\003)2590 3077
y FD(6)2718 3031 y FB(\306)d FF(28)k(\003or)q(ins)o(.)-246
3143 y
SDict begin H.S end
 -246 3143 a -246 3143 a
SDict begin 12 H.A end
 -246 3143 a -246 3143
a
SDict begin [/View [/XYZ H.V]/Dest (exo.2) cvn /DEST pdfmark end
 -246 3143 a -246 3161 a
SDict begin H.S end
 -246 3161 a -246 3161 a
SDict begin 12 H.A end
 -246
3161 a -246 3161 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -246 3161 a 0 TeXcolorgray 78 x FG(Ex)o(er)o(cice)c
(2)p 0 TeXcolorgray 0 TeXcolorgray 147 w FF(1.)p 0 TeXcolorgray
42 w(On)j(compl\350te)i(deux)f(tableaux)g(de)f(propor)q(tionnalit\351)i
(\(on)e(tr)o(availle)i(en)e(min)h(et)g(en)g(km\))f(:)p
0 TeXcolorgray 0 TeXcolorgray 452 3354 1072 4 v 452 3453
4 100 v 528 3423 a(temps)i(\(en)e(min\))p 1131 3453 V
127 w(60)p 1315 3453 V 144 w(?)p 1519 3453 V 452 3457
1072 4 v 452 3556 4 100 v 505 3526 a(distance)h(\(en)f(km\))p
1131 3556 V 123 w(3)p 1315 3556 V 124 w(0,5)p 1519 3556
V 452 3560 1072 4 v 0 TeXcolorgray 0 TeXcolorgray 2615
3354 1011 4 v 2615 3453 4 100 v 2692 3423 a(temps)i(\(en)e(min\))p
3295 3453 V 127 w(60)p 3479 3453 V 114 w(?)p 3622 3453
V 2615 3457 1011 4 v 2615 3556 4 100 v 2668 3526 a(distance)h(\(en)g
(km\))p 3295 3556 V 103 w(15)p 3479 3556 V 104 w(5)p
3622 3556 V 2615 3560 1011 4 v -38 3726 a(S)n(t\351phane)h(nage)497
3689 y FD(60)p FC(\243)p FD(0,5)p 497 3706 181 5 v 571
3754 a(3)701 3726 y FB(\306)780 3693 y FD(30)p 780 3706
62 5 v 796 3754 a(3)866 3726 y FB(\306)14 b FF(10)k(min,)h(puis)f(il)g
(cour)q(t)1649 3693 y FD(60)p FC(\243)p FD(5)p 1649 3706
135 5 v 1685 3754 a(15)1807 3726 y FB(\306)1886 3693
y FD(300)p 1886 3706 93 5 v 1902 3754 a(15)2003 3726
y FB(\306)c FF(20)k(min.)-246 3768 y
SDict begin H.S end
 -246 3768 a -246
3768 a
SDict begin 12 H.A end
 -246 3768 a -246 3768 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -246 3768 a 0 TeXcolorgray
-141 3852 a FF(2.)p 0 TeXcolorgray 43 w(S)n(t\351phane)h(a)e(par)o
(cour)q(u)g(un)h(total)g(de)f(5)10 b FB(\305)g FF(0,)e(5)16
b FB(\306)e FF(5,)8 b(5)19 b(km,)f(en)g(10)10 b FB(\305)g
FF(20)16 b FB(\306)e FF(30)19 b(min.)p 0 TeXcolorgray
0 TeXcolorgray 1518 3933 1072 4 v 1518 4033 4 100 v 1595
4003 a(temps)g(\(en)e(min\))p 2198 4033 V 137 w(30)p
2402 4033 V 114 w(60)p 2586 4033 V 1518 4036 1072 4 v
1518 4136 4 100 v 1571 4106 a(distance)h(\(en)g(km\))p
2198 4136 V 103 w(5,5)p 2402 4136 V 134 w(?)p 2586 4136
V 1518 4139 1072 4 v -38 4287 a(La)f(vitesse)j(mo)n(yenne)d(de)g(S)n
(t\351phane)j(sur)d(l)o('ensemble)j(de)d(son)h(par)o(cours)f(est)h
(donc)2502 4250 y FD(60)p FC(\243)p FD(5,5)p 2502 4267
181 5 v 2562 4315 a(30)2707 4287 y FB(\306)2775 4262
y Fv(\032)2786 4250 y FD(30)o FC(\243)p FD(2)p FC(\243)p
FD(5,5)p 2786 4267 253 5 v 2871 4334 a Fv(\032)2881 4322
y FD(30)3063 4287 y FB(\306)c FF(11)k(km/h.)-246 4389
y
SDict begin H.S end
 -246 4389 a -246 4389 a
SDict begin 12 H.A end
 -246 4389 a -246 4389 a
SDict begin [/View [/XYZ H.V]/Dest (exo.3) cvn /DEST pdfmark end
 -246
4389 a 0 TeXcolorgray 92 x FG(Ex)o(er)o(cice)c(3)p 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1225 5519
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 174.69983 a add def
/d 0.0 a add neg def /h 114.9489 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1225 5519 a 837 5746 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 113.81097 113.81097 199.1692
113.81097 199.1692 56.90549 56.90549 56.90549  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 199.1692 68.2864 187.78827
68.2864 187.78827 56.90549 199.1692 56.90549  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 187.78827 113.81097 187.78827
102.43004 199.1692 102.43004 199.1692 113.81097  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 56.90549 56.90549 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 113.81097 199.1692 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 113.81097 199.1692 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 113.81097 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 113.81097 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 56.90549 113.81097 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0.49803 0 1  setrgbcolor  [ 113.81097
56.90549 101.7393 56.90549 101.7393 68.97714 113.81097 68.97714  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 1.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.26372
113.81097 142.26372 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.26372
56.90549 142.26372 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 837 5746 a
tx@Dict begin { 148.52335 91.04869 } PutCoor PutBegin  end
 837 5746 a 51 x FF(2)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 154.78299 125.1919 } PutCoor PutBegin  end
 837 5746 a 51 x FF(3)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 154.78299 51.21501 } PutCoor PutBegin  end
 837 5746 a 51 x FF(3)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 80.80568 51.21501 } PutCoor PutBegin  end
 837 5746 a 51 x FF(2)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 51.21501 62.02676 } PutCoor PutBegin  end
 837 5746 a 6 w Fw(A)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 201.44547 60.31967 } PutCoor PutBegin  end
 837 5746 a Fw(B)837 5746
y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 201.44547 117.22516 } PutCoor PutBegin  end
 837 5746 a 835 5745 a Fw(C)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 116.08723 117.22516 } PutCoor PutBegin  end
 837 5746 a Fw(D)837 5746
y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 108.1205 45.52455 } PutCoor PutBegin  end
 837 5746 a 2 w Fw(H)837 5746
y
tx@Dict begin  PutEnd  end
 837 5746 a 2675 5519 a
currentpoint initclip moveto
 2675 5519 a 0 TeXcolorgray -246
5569 1757 4 v -154 5646 a Fq(1)q(.)p 0 TeXcolorgray -76
5646 a
SDict begin H.S end
 -76 5646 a -76 5646 a
SDict begin H.R end
 -76 5646 a -76 5646 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.1) cvn /DEST pdfmark
end
 -76
5646 a 0 TeXcolorgray Fq(Les)g(calculs)g(ne)g(sont)f(pas)h(toujours)g
(plus)f(faciles)i(en)f(minutes)f(qu)n('en)i(heur)o(es)o(,)f(mais)g(c)n
('est)g(g\351n\351r)o(alement)h(le)g(cas)o(.)p 0 TeXcolorgray
0 TeXcolorgray 1930 5895 a FF(2)p 0 TeXcolorgray eop
end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -163 a FF(Le)18 b(tr)o(ap\350ze)g(est)g(constitu\351)h(:)p
0 TeXcolorgray -76 -63 a(\225)p 0 TeXcolorgray 42 w(d)n('un)f(r)o
(ectangle)f Fw(B)9 b(H)f(D)t(C)h FF(,)19 b(d)n('air)o(e)e
Fy(`)10 b FB(\243)g Fw(L)18 b FB(\306)c FF(3)c FB(\243)g
FF(2)16 b FB(\306)e FF(6)k(;)p 0 TeXcolorgray -76 37
a(\225)p 0 TeXcolorgray 42 w(d)n('un)g(tr)q(iangle)23
b Fw(A)5 b(H)j(D)d FF(,)18 b(d)n('air)o(e)905 4 y Fr(B)6
b FC(\243)p Fr(h)p 905 17 123 5 v 951 65 a FD(2)1052
37 y FB(\306)1131 4 y FD(2)p FC(\243)p FD(2)p 1131 17
104 5 v 1167 65 a(2)1258 37 y FB(\306)14 b FF(2.)-246
136 y(Donc)j(l)o('air)o(e)h(du)f(tr)o(ap\350ze)h(est)g(6)10
b FB(\305)g FF(2)15 b FB(\306)f FF(8.)-246 286 y FG(R)o(emarque)g(:)k
FF(On)f(peut)h(aussi)h(utiliser)f(la)g(for)q(mule)g(\(hors-progr)o
(amme\))g(:)1301 509 y FA(A)1367 521 y FD(tr)o(ap\350ze)1580
509 y FB(\306)1659 453 y FF(\()p Fw(B)g FB(\305)10 b
Fw(b)t FF(\))g FB(\243)g Fw(h)p 1659 490 358 5 v 1817
566 a FF(2)2040 509 y FB(\306)2120 453 y FF(\(5)g FB(\305)g
FF(3\))g FB(\243)g FF(2)p 2120 490 326 5 v 2262 566 a(2)2469
509 y FB(\306)k FF(8.)-246 649 y
SDict begin H.S end
 -246 649 a -246 649
a
SDict begin 12 H.A end
 -246 649 a -246 649 a
SDict begin [/View [/XYZ H.V]/Dest (exo.4) cvn /DEST pdfmark end
 -246 649 a 0 TeXcolorgray 101
x FG(Ex)o(er)o(cice)g(4)p 0 TeXcolorgray 42 w FF(Le)j(losange)h(est)g
(\253)c(la)j(moiti\351)d(\273)36 b(d)n('un)18 b(r)o(ectangle)f(de)g
(c\364t\351s)h Fy(`)f FF(et)h Fw(L)s FF(,)g(donc)f(son)h(air)o(e)f(est)
2730 717 y Fs(`)p FC(\243)p Fr(L)p 2730 730 111 5 v 2769
779 a FD(2)2850 750 y FF(.)p 0 TeXcolorgray 0 TeXcolorgray
1331 1635 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 149.09253 a add def
/d 0.0 a add neg def /h 92.18704 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1331 1635 a 473 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 142.26372 28.45274 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 113.81097 85.35823 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 142.26372 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 113.81097 85.35823 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 113.81097 28.45274 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 85.35823 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 28.45274 142.26372 28.45274
85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 142.26372 85.35823 28.45274
85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 142.26372 142.26372 28.45274
142.26372   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 142.26372 85.35823 142.26372
142.26372   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial
1331 2108 a
tx@Dict begin { 18.4941 119.50143 } PutCoor PutBegin  end
 1331 2108 a 1 0 0 TeXcolorrgb 57 x Fy(`)p
0 TeXcolorgray 1331 2108 a
tx@Dict begin  PutEnd  end
 1331 2108 a 1331 2108 a
tx@Dict begin { 78.24504 81.37486 } PutCoor PutBegin  end
 1331
2108 a 1 0 0 TeXcolorrgb 53 x Fw(L)p 0 TeXcolorgray 1331
2108 a
tx@Dict begin  PutEnd  end
 1331 2108 a 2569 1635 a
currentpoint initclip moveto
 2569 1635 a -246 1718
a
SDict begin H.S end
 -246 1718 a -246 1718 a
SDict begin 12 H.A end
 -246 1718 a -246 1718 a
SDict begin [/View [/XYZ H.V]/Dest (exo.5) cvn /DEST pdfmark end
 -246
1718 a 0 TeXcolorgray 117 x FG(Ex)o(er)o(cice)d(5)p 0
TeXcolorgray 42 w(Rappels)g(:)p 0 TeXcolorgray -76 1934
a FF(\225)p 0 TeXcolorgray 42 w(une)19 b(hauteur)g(est)g(une)g(droite)f
(qui)h(passe)g(par)g(un)f(sommet)i(et)f(qui)g(est)g(perpendiculair)o(e)
h(au)e(c\364t\351)h(oppos\351)g(\(les)g(hauteurs)h(sont)f(tr)o
(ac\351es)-3 2034 y(en)e(pointill\351s)j(bleus\))9 b(;)p
0 TeXcolorgray -76 2134 a(\225)p 0 TeXcolorgray 42 w(le)16
b(fait)g(que)h(les)f(hauteurs)h(soient)g(\253)12 b(concour)o(antes)g
(\273)33 b(signi\002e)16 b(qu)n('elles)i(passent)f(toutes)g(les)f
(trois)g(par)g(un)g(m\352me)h(point)g(\226)e(qu)n('on)i(appelle)-3
2233 y(\253)d(or)q(thocentr)o(e)j(du)g(tr)q(iangle)d(\273)34
b(\(nomm\351)16 b Fw(O)22 b FF(sur)17 b(la)h(\002gur)o(e)e
(ci-dessous\).)p 0 TeXcolorgray 0 TeXcolorgray 1152 3491
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 192.3404 a add def
/d 0.0 a add neg def /h 138.28035 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1152 3491 a 1015 3619 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ 59.32503
93.77257 70.23923 88.61395 65.08061 77.70018 54.16684 82.85837  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ 112.67305
112.67305 121.20853 104.13713 112.67305 95.60123 104.13713 104.13713
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ 82.90004
28.63725 82.85924 40.70891 94.93047 40.74973 94.97127 28.67805  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 196.32375 29.02191 28.45274 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 82.51277 142.83289 196.32375 29.02191
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 28.45274 82.51277 142.83289
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 82.90004 28.63725 82.51277
142.83289   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 112.67305 112.67305 28.45274
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 59.32503 93.77257 196.32375
29.02191   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 0 1  setrgbcolor  [ 82.71683
82.71683   false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1015 3619 a
tx@Dict begin { 87.06532 68.85558 } PutCoor PutBegin  end
 1015 3619 a 0 0 1 TeXcolorrgb 1013 3618 a
Fw(O)p 0 TeXcolorgray 1015 3619 a
tx@Dict begin  PutEnd  end
 1015 3619 a 2748 3491
a
currentpoint initclip moveto
 2748 3491 a -246 3574 a
SDict begin H.S end
 -246 3574 a -246 3574 a
SDict begin 12 H.A end
 -246
3574 a -246 3574 a
SDict begin [/View [/XYZ H.V]/Dest (exo.6) cvn /DEST pdfmark end
 -246 3574 a 0 TeXcolorgray 117 x FG(Ex)o(er)o(cice)e
(6)p 0 TeXcolorgray 42 w FF(On)j(note)j Fw(H)25 b FF(le)18
b(pied)g(de)f(la)h(hauteur)g(issue)h(de)k Fw(A)d FF(dans)d(le)h(tr)q
(iangle)23 b Fw(A)s(B)5 b(C)k FF(.)p 0 TeXcolorgray 0
TeXcolorgray 1241 4802 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 170.71645 a add def
/d 0.0 a add neg def /h 120.63936 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1241 4802 a 1246 4878 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  [ 56.90549 28.45274
56.90549 40.5244 68.97714 40.5244 68.97714 28.45274  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 1 0.9 0.9  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 28.45274 56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 28.45274 56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 28.45274 28.45274 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.90549 28.45274 56.90549
113.81097   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 113.81097 85.35823 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1246 4878 a
tx@Dict begin { 59.18175 114.94888 } PutCoor PutBegin  end
 1246
4878 a 6 w Fw(A)1246 4878 y
tx@Dict begin  PutEnd  end
 1246 4878 a 1246 4878 a
tx@Dict begin { 142.26372 17.07181 } PutCoor PutBegin  end
 1246
4878 a Fw(B)1246 4878 y
tx@Dict begin  PutEnd  end
 1246 4878 a 1246 4878 a
tx@Dict begin { 19.91682 17.07181 } PutCoor PutBegin  end
 1246
4878 a 1244 4877 a Fw(C)1246 4878 y
tx@Dict begin  PutEnd  end
 1246 4878 a 1246
4878 a
tx@Dict begin { 55.76756 17.07181 } PutCoor PutBegin  end
 1246 4878 a 2 w Fw(H)1246 4878 y
tx@Dict begin  PutEnd  end
 1246 4878 a 1246
4878 a
tx@Dict begin { 86.49614 17.07181 } PutCoor PutBegin  end
 1246 4878 a 2 w Fw(I)1246 4878 y
tx@Dict begin  PutEnd  end
 1246 4878 a 2659
4802 a
currentpoint initclip moveto
 2659 4802 a -246 4986 a FF([)-214 4985 y Fw(A)c(H)-94
4986 y FF(])-52 4985 y(est)18 b(une)g(hauteur)h(dans)e(les)h(tr)q
(iangles)g Fw(B)9 b(I)15 b(A)22 b FF(et)16 b Fw(C)11
b(I)k(A)s FF(,)j(donc)882 5202 y FA(A)948 5214 y Fr(B)8
b(I)j(A)1082 5202 y FB(\306)p 1 0 0 TeXcolorrgb 1161
5146 a Fw(B)e(I)p 0 TeXcolorgray 21 w FB(\243)16 b Fw(A)5
b(H)p 1161 5183 297 5 v 1288 5259 a FF(2)2412 5202 y
FA(A)2476 5214 y Fr(C)k(I)i(A)2611 5202 y FB(\306)p 1 0 0
TeXcolorrgb 2688 5146 a Fw(C)g(I)p 0 TeXcolorgray 21
w FB(\243)16 b Fw(A)5 b(H)p 2690 5183 V 2819 5259 a FF(2)2997
5202 y(.)-246 5374 y(Or)p 1 0 0 TeXcolorrgb 17 w Fw(B)k(I)p
0 TeXcolorgray 26 w FB(\306)p 1 0 0 TeXcolorrgb 12 w
Fw(C)i(I)p 0 TeXcolorgray 28 w FF(puisque)21 b Fw(I)28
b FF(et)17 b(le)h(milieu)h(de)1003 5375 y([)1029 5374
y Fw(B)5 b(C)1141 5375 y FF(])1175 5374 y(,)17 b(donc)g
Fw(B)9 b(I)15 b(A)23 b FF(et)15 b Fw(C)c(I)k(A)22 b FF(ont)17
b(la)h(m\352me)h(air)o(e)o(.)p 0 TeXcolorgray 1930 5895
a(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (exo.7) cvn /DEST pdfmark end
 -246 -246 a -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246
a
SDict begin 12 H.A end
 -246 -246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray
83 x FG(Ex)o(er)o(cice)14 b(7)p 0 TeXcolorgray 0 TeXcolorgray
147 w FF(1.)p 0 TeXcolorgray 42 w(La)k(n\351gation)g(de)p
0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb 1521
-5 a(T)-8 b(ous)p 1521 14 164 5 v 0 TeXcolorgray 18 w(les)18
b(hommes)p 0 0 1 TeXcolorrgb 20 w(sont)g(mor)q(tels)p
2134 14 434 5 v 0 TeXcolorgray 1 w(.)p 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray -38 153
a(est)p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb
1542 312 a(Il)f(existe)p 1542 330 263 5 v 0 TeXcolorgray
19 w(un)h(homme)p 1 0 0 TeXcolorrgb 18 w(immor)q(tel)p
2220 330 325 5 v 0 TeXcolorgray 2 w(.)p 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray -246
393 a
SDict begin H.S end
 -246 393 a -246 393 a
SDict begin 12 H.A end
 -246 393 a -246 393 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -246
393 a 0 TeXcolorgray -141 484 a FF(2.)p 0 TeXcolorgray
43 w(La)f(n\351gation)i(de)p 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 1333 642 a(Il)d(existe)p 1333 660 263
5 v 0 TeXcolorgray 19 w(un)i(desser)q(t)p 0 0 1 TeXcolorrgb
17 w(sans)g(sucr)o(e)p 1987 660 356 5 v 0 TeXcolorgray
17 w(\340)g(la)f(cantine)o(.)p 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 0 TeXcolorgray -38 800 a(est)p 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 1349 958
a(T)-8 b(ous)p 1349 977 164 5 v 0 TeXcolorgray 19 w(les)18
b(desser)q(ts)p 1 0 0 TeXcolorrgb 18 w(sont)g(sucr\351s)p
1939 977 388 5 v 0 TeXcolorgray 18 w(\340)f(la)g(cantine)o(.)p
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray -38 1166 a FG(R)o(emarque)f(:)k FF(Dans)g(les)h(deux)f
(exemples)i(que)f(nous)g(venons)g(de)f(tr)o(aiter)-5
b(,)21 b(pour)f(\351cr)q(ir)o(e)f(la)i(n\351gation)f(d)n('une)h(phr)o
(ase)o(,)g(il)g(suf\002t)f(de)g(r)o(empla-)-38 1266 y(cer)i(les)h(\253)
15 b(tous)h(\273)45 b(par)22 b(\253)15 b(il)23 b(existe)17
b(\273)22 b(,)g(et)h(r\351ciproquement)9 b(;)24 b(et)f(d)n('inverser)g
(les)g(conclusions)h(\(exemple)g(:)f(immor)q(tel/mor)q(tel\).)h(C'est)g
(une)-38 1366 y(technique)19 b(qui)f(fonctionne)h(toujours)o(.)-246
1399 y
SDict begin H.S end
 -246 1399 a -246 1399 a
SDict begin 12 H.A end
 -246 1399 a -246 1399
a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -246 1399 a 0 TeXcolorgray -141 1494 a FF(3.)p 0 TeXcolorgray
43 w(La)e(n\351gation)i(de)p 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 1078 1653 a(Il)e(existe)p 1078 1671
263 5 v 0 TeXcolorgray 19 w(un)g(pays)h(dans)f(lequel)p
0 0 1 TeXcolorrgb 19 w(tous)p 2057 1671 150 5 v 0 TeXcolorgray
18 w(les)h(hommes)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
20 w(savent)g(lir)o(e)p 2657 1671 353 5 v 0 TeXcolorgray(.)p
0 0 1 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 0 1
TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
-38 1811 a(est)p 0 TeXcolorgray 0 TeXcolorgray 1061 1969
a(Dans)p 1 0 0 TeXcolorrgb 17 w(tous)p 1258 1987 150
5 v 0 TeXcolorgray 18 w(les)g(pays)o(,)p 1 0 0 TeXcolorrgb
18 w(il)g(existe)p 1731 1987 259 5 v 0 TeXcolorgray 18
w(un)g(homme)h(qui)p 1 0 0 TeXcolorrgb 18 w(ne)e(sait)h(pas)g(lir)o(e)p
2536 2004 491 5 v 0 TeXcolorgray(.)p 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray -246 2067 a
SDict begin H.S end
 -246 2067 a -246
2067 a
SDict begin 12 H.A end
 -246 2067 a -246 2067 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -246 2067 a 0 TeXcolorgray
-141 2141 a FF(4.)p 0 TeXcolorgray 43 w(Le)g(contr)o(air)o(e)f(de)h
(\253)c(\352tr)o(e)j(all\351)h(en)g(Angleterr)o(e)f(ou)h(en)g(Espagne)c
(\273)35 b(est)18 b(\253)c(n)-6 b('\352tr)o(e)18 b(all\351)g(ni)g(en)g
(Angleterr)o(e)o(,)f(ni)h(en)f(Espagne)d(\273,)19 b(donc)e(la)h
(n\351gation)-38 2241 y(de)p 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 830 2399 a(T)-8 b(ous)p 830 2417 164
5 v 0 TeXcolorgray 19 w(les)18 b(\351l\350ves)h(de)e(la)h(classe)p
0 0 1 TeXcolorrgb 18 w(sont)g(d\351j\340)f(all\351s)i(en)e(Angleterr)o
(e)g(ou)h(en)f(Espagne)p 1753 2436 1505 5 v 0 TeXcolorgray
19 w(.)p 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray -38 2557 a(est)p 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 713 2715 a(Il)g(existe)p 713 2733 263
5 v 0 TeXcolorgray 18 w(un)h(\351l\350ve)h(de)e(la)g(classe)h(qui)p
1 0 0 TeXcolorrgb 18 w(n)-6 b('est)19 b(jamais)f(all\351)g(en)g
(Angleterr)o(e)o(,)f(ni)g(en)h(Espagne)p 1831 2752 1543
5 v 0 TeXcolorgray 1 w(.)p 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray -246 2815 a
SDict begin H.S end
 -246 2815
a -246 2815 a
SDict begin 12 H.A end
 -246 2815 a -246 2815 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -246 2815 a 0 TeXcolorgray
-141 2888 a FF(5.)p 0 TeXcolorgray 43 w(C)o(omme)h(dans)e(l)o('exemple)
j(pr\351c\351dent,)f(le)e(contr)o(air)o(e)h(de)f(\253)d(ni...)k(ni...)c
(\273)35 b(est)18 b(\253)c(ou)g(\273.)j(Donc)g(la)g(n\351gation)h(de)p
0 TeXcolorgray 0 TeXcolorgray 1290 3046 a(Chlo\351)p
0 0 1 TeXcolorrgb 19 w(n)-6 b('aime)18 b(ni)g(les)g(fr)o(aises)o(,)h
(ni)f(les)g(fr)o(amboises)p 1511 3074 1287 5 v 0 TeXcolorgray
1 w(.)p 0 0 1 TeXcolorrgb 0 TeXcolorgray -38 3204 a(est)p
0 TeXcolorgray 0 TeXcolorgray 1364 3362 a(Chlo\351)p
1 0 0 TeXcolorrgb 18 w(aime)g(les)h(fr)o(aises)f(ou)g(les)g(fr)o
(amboises)p 1584 3380 1139 5 v 0 TeXcolorgray 1 w(.)p
1 0 0 TeXcolorrgb 0 TeXcolorgray -246 3495 a
SDict begin H.S end
 -246 3495
a -246 3495 a
SDict begin 12 H.A end
 -246 3495 a -246 3495 a
SDict begin [/View [/XYZ H.V]/Dest (exo.8) cvn /DEST pdfmark end
 -246 3495 a -246
3514 a
SDict begin H.S end
 -246 3514 a -246 3514 a
SDict begin 12 H.A end
 -246 3514 a -246 3514
a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -246 3514 a -246 3514 a
SDict begin H.S end
 -246 3514 a -246 3514 a
SDict begin 12 H.A end
 -246
3514 a -246 3514 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -246 3514 a 0 TeXcolorgray 91 x FG(Ex)o(er)o(cice)c
(8)p 0 TeXcolorgray 0 TeXcolorgray 147 w FF(1.)p 0 TeXcolorgray
0 TeXcolorgray 90 w(\(a\))p 0 TeXcolorgray 41 w(On)j(identi\002e)h(A)f
(et)g(B)h(dans)f(l)o('implication)j(:)p 0 TeXcolorgray
0 TeXcolorgray 1185 3763 a(S)o(i)e(un)f(nombr)o(e)h(se)f(ter)q(mine)i
(par)e(5)1265 3814 y Fo(|)p 1299 3814 411 10 v 411 w({z)p
1778 3814 V 411 w(})1726 3893 y FD(A)2223 3763 y FF(,)h(alors)f(il)h
(est)g(multiple)i(de)d(5)2446 3814 y Fo(|)p 2480 3814
247 10 v 247 w({z)p 2795 3814 V 247 w(})2743 3893 y FD(B)3085
3763 y FF(.)145 4025 y(C)o(ette)h(implication)i(est)e(vr)o(aie)g
(\(cours)f(du)g(pr)q(imair)o(e\).)-246 4056 y
SDict begin H.S end
 -246 4056
a -246 4056 a
SDict begin 12 H.A end
 -246 4056 a -246 4056 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -246 4056 a 0 TeXcolorgray
4 4153 a FF(\(b\))p 0 TeXcolorgray 0 TeXcolorgray 86
w(\225)p 0 TeXcolorgray 41 w(L)-10 b('implication)21
b(contr)o(apos\351e)d(est)p 0 TeXcolorgray 0 TeXcolorgray
1024 4253 a(S)o(i)g(un)f(nombr)o(e)h(n)-6 b('est)18 b(pas)g(multiple)i
(de)d(5)1104 4304 y Fo(|)p 1138 4304 518 10 v 518 w({z)p
1724 4304 V 518 w(})1612 4383 y FD(non)c(B)2275 4253
y FF(,)18 b(alors)f(il)h(ne)g(se)f(ter)q(mine)i(pas)f(par)f(5)2498
4304 y Fo(|)p 2532 4304 360 10 v 360 w({z)p 2960 4304
V 360 w(})2849 4383 y FD(non)d(A)3363 4253 y FF(.)262
4456 y(C)o(ette)20 b(contr)o(apos\351e)g(est)g(vr)o(aie)o(,)f(puisque)i
(l)o('implication)g(or)q(iginale)e(l)o('est)h(\(cf)f(l)o('\351nonc\351)
h(:)f(quand)g(une)g(implication)i(est)e(vr)o(aie)o(,)g(sa)262
4556 y(contr)o(apos\351e)g(l)o('est)g(aussi\).)p 0 TeXcolorgray
190 4705 a(\225)p 0 TeXcolorgray 41 w(L)-10 b('implication)21
b(r\351ciproque)c(est)p 0 TeXcolorgray 0 TeXcolorgray
1244 4805 a(S)o(i)h(un)f(nombr)o(e)g(est)h(multiple)i(de)d(5)1324
4856 y Fo(|)p 1358 4856 418 10 v 418 w({z)p 1844 4856
V 418 w(})1791 4935 y FD(B)2296 4805 y FF(,)g(alors)h(il)g(se)f(ter)q
(mine)i(par)e(5)2519 4856 y Fo(|)p 2553 4856 240 10 v
240 w({z)p 2861 4856 V 240 w(})2809 4935 y FD(A)3144
4805 y FF(.)262 5008 y(Elle)i(est)f(fausse)o(,)h(comme)f(le)g(montr)o
(e)g(le)f(contr)o(e-exemple)j(suivant)e(:)f(10)i(est)f(multiple)i(de)d
(5,)h(mais)g(il)g(ne)f(se)h(ter)q(mine)g(pas)g(par)f(5.)-246
5039 y
SDict begin H.S end
 -246 5039 a -246 5039 a
SDict begin 12 H.A end
 -246 5039 a -246 5039
a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -246 5039 a 0 TeXcolorgray -141 5136 a FF(2.)p 0 TeXcolorgray
43 w(L)-10 b('implication)p 0 TeXcolorgray 0 TeXcolorgray
1074 5294 a(S)o(i)17 b(un)h(nombr)o(e)f(se)h(ter)q(mine)g(par)f(0)1153
5346 y Fo(|)p 1187 5346 411 10 v 411 w({z)p 1666 5346
V 411 w(})1614 5424 y FD(A)2112 5294 y FF(,)g(alors)h(il)f(est)h
(multiple)i(de)d(10)2335 5346 y Fo(|)p 2369 5346 267
10 v 267 w({z)p 2704 5346 V 267 w(})2651 5424 y FD(B)3014
5294 y FF(.)-38 5553 y(et)h(sa)f(r\351ciproque)p 0 TeXcolorgray
1930 5895 a(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1074 -163 a FF(S)o(i)17
b(un)h(nombr)o(e)f(est)h(multiple)i(de)d(10)1153 -111
y Fo(|)p 1187 -111 438 10 v 438 w({z)p 1693 -111 V 438
w(})1641 -33 y FD(B)2166 -163 y FF(,)g(alors)h(il)g(se)f(ter)q(mine)i
(par)e(0)2389 -111 y Fo(|)p 2423 -111 240 10 v 240 w({z)p
2731 -111 V 240 w(})2679 -33 y FD(A)3014 -163 y FF(.)-38
99 y(sont)h(vr)o(aies)g(toutes)h(les)f(deux.)-246 165
y
SDict begin H.S end
 -246 165 a -246 165 a
SDict begin 12 H.A end
 -246 165 a -246 165 a
SDict begin [/View [/XYZ H.V]/Dest (exo.9) cvn /DEST pdfmark end
 -246 165
a 0 TeXcolorgray 133 x FG(Ex)o(er)o(cice)c(9)p 0 TeXcolorgray
42 w FF(S)o(oit)24 b Fw(A)s(B)5 b(C)27 b FF(un)17 b(tr)q(iangle)-246
331 y
SDict begin H.S end
 -246 331 a -246 331 a
SDict begin 12 H.A end
 -246 331 a -246 331 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -246
331 a 0 TeXcolorgray -141 427 a FF(1.)p 0 TeXcolorgray
43 w FG(Th\351or\350me)d(de)i(P)q(ythagor)o(e.)p 0 TeXcolorgray
0 TeXcolorgray 1192 570 a FF(S)o(i)23 b Fw(A)s(B)5 b(C)27
b FF(est)18 b(r)o(ectangle)f(en)24 b Fw(A)s FF(,)17 b(alors)h
Fw(B)5 b(C)2406 540 y FD(2)2456 570 y FB(\306)20 b Fw(A)s(B)2637
540 y FD(2)2683 570 y FB(\305)10 b Fw(B)5 b(C)2860 540
y FD(2)2896 570 y FF(.)p 0 TeXcolorgray 0 TeXcolorgray
1373 1549 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 163.88808 a add def
/d 0.0 a add neg def /h 107.55135 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1373 1549 a 873 1657 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ 85.35823
28.45274 85.35823 40.5244 97.42989 40.5244 97.42989 28.45274  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 28.45274 199.1692 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 113.81097 85.35823 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 28.45274 85.35823 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
873 1657 a
tx@Dict begin { 73.9773 113.81097 } PutCoor PutBegin  end
 873 1657 a 871 1711 a Fw(C)873 1657 y
tx@Dict begin  PutEnd  end
 873
1657 a 873 1657 a
tx@Dict begin { 73.9773 28.45274 } PutCoor PutBegin  end
 873 1657 a 879 1711 a Fw(A)873 1657
y
tx@Dict begin  PutEnd  end
 873 1657 a 873 1657 a
tx@Dict begin { 204.85966 31.29819 } PutCoor PutBegin  end
 873 1657 a 54 x Fw(B)873 1657
y
tx@Dict begin  PutEnd  end
 873 1657 a 2734 1549 a
currentpoint initclip moveto
 2734 1549 a -246 1592 a
SDict begin H.S end
 -246
1592 a -246 1592 a
SDict begin 12 H.A end
 -246 1592 a -246 1592 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -246 1592
a 0 TeXcolorgray -141 1707 a FF(2.)p 0 TeXcolorgray 43
w FG(Th\351or\350me)14 b(contrapos\351)g(de)i(P)q(ythagor)o(e.)p
0 TeXcolorgray 0 TeXcolorgray 1092 1865 a FF(S)o(i)h
Fw(B)5 b(C)1283 1835 y FD(2)1333 1865 y FB(6\306)21 b
Fw(A)s(B)1515 1835 y FD(2)1561 1865 y FB(\305)10 b Fw(B)5
b(C)1738 1835 y FD(2)1773 1865 y FF(,)18 b(alors)23 b
Fw(A)s(B)5 b(C)27 b FF(n)-6 b('est)19 b(pas)e(r)o(ectangle)h(en)23
b Fw(A)s FF(.)-246 1927 y
SDict begin H.S end
 -246 1927 a -246 1927 a
SDict begin 12 H.A end
 -246
1927 a -246 1927 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -246 1927 a 0 TeXcolorgray -141 2023
a FF(3.)p 0 TeXcolorgray 43 w FG(Th\351or\350me)14 b(r\351ciproque)f
(de)j(P)q(ythagor)o(e.)p 0 TeXcolorgray 0 TeXcolorgray
1192 2181 a FF(S)o(i)h Fw(B)5 b(C)1383 2151 y FD(2)1433
2181 y FB(\306)20 b Fw(A)s(B)1614 2151 y FD(2)1660 2181
y FB(\305)10 b Fw(B)5 b(C)1837 2151 y FD(2)1873 2181
y FF(,)17 b(alors)24 b Fw(A)s(B)5 b(C)27 b FF(est)18
b(r)o(ectangle)f(en)24 b Fw(A)s FF(.)-38 2339 y(Le)18
b(th\351or\350me)h(r\351ciproque)e(est)h(bien)g(s\373r)f(vr)o(ai,)i
(comme)f(vous)g(l)o('avez)g(appr)q(is)f(au)h(coll\350ge)o(.)-38
2503 y Fp(")p FF(En)25 b(devoir)-5 b(,)26 b(le)f(corr)o(ecteur)g(ser)o
(a)g(tr\350s)g(attentif)i(au)e(nom)h(du)f(th\351or\350me)h(utilis\351)h
(dans)e(les)h(d\351monstr)o(ations)h(:)e(th\351or\350me)o(,)h
(th\351or\350me)-38 2603 y(contr)o(apos\351)18 b(ou)g(th\351or\350me)h
(r\351ciproque)f(\226)f(il)h(ne)f(faudr)o(a)h(pas)g(confondr)o(e)9
b(!)-246 2686 y
SDict begin H.S end
 -246 2686 a -246 2686 a
SDict begin 12 H.A end
 -246 2686 a -246
2686 a
SDict begin [/View [/XYZ H.V]/Dest (exo.10) cvn /DEST pdfmark end
 -246 2686 a -246 2705 a
SDict begin H.S end
 -246 2705 a -246 2705
a
SDict begin 12 H.A end
 -246 2705 a -246 2705 a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 -246 2705 a 0 TeXcolorgray
97 x FG(Ex)o(er)o(cice)14 b(10)p 0 TeXcolorgray 0 TeXcolorgray
146 w FF(1.)p 0 TeXcolorgray 43 w(P)n(our)j(constr)q(uir)o(e)g(la)g
(\002gur)o(e)o(,)f(on)i(tr)o(ace)f(successivement)k(:)p
0 TeXcolorgray 7 2916 a(\225)p 0 TeXcolorgray 42 w(Le)d(segment)492
2917 y([)518 2916 y Fw(E)8 b(F)626 2917 y FF(])658 2916
y(.)p 0 TeXcolorgray 7 3016 a(\225)p 0 TeXcolorgray 42
w(La)17 b(perpendiculair)o(e)i(\340)806 3017 y([)831
3016 y Fw(E)8 b(F)939 3017 y FF(])981 3016 y(passant)18
b(par)g Fw(E)9 b FF(.)p 0 TeXcolorgray 7 3115 a(\225)p
0 TeXcolorgray 42 w(U)m(n)18 b(ar)o(c)e(de)h(cer)o(cle)g(de)g(centr)o
(e)g Fw(F)m FF(,)h(de)f(r)o(ayon)f(7)i(cm.)g(Il)e(coupe)j(la)e
(perpendiculair)o(e)i(que)f(nous)g(venons)g(de)f(tr)o(acer)g(en)f
Fw(G)6 b FF(.)p 0 TeXcolorgray 0 TeXcolorgray 197 4528
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 190.29268 a add def
/d 0.0 a add neg def /h 156.14926 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 197 4528 a 753 4396 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ -22.76228
0.0 -22.76228 9.65736 -13.1049 9.65736 -13.1049 0.0  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.89961 0.8 1  setrgbcolor  0.1
.setopacityalpha  fill  grestore gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 91.04913 0.0 -22.76228 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 753 4396 a
tx@Dict begin { 22.76228 -4.55238 } PutCoor PutBegin  end
 753
4396 a 51 x FF(5)17 b(cm)753 4396 y
tx@Dict begin  PutEnd  end
 753 4396 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -22.76228 140.21574 -22.76228 -15.93352
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def   /t 2.1976990745518967 def /t1 2.5472509907369547
def /dt t1 t sub 49 div def /F@pstplot (1.*7.*cos(t)+0.*7.*sin(t)+4.|0.*7.*cos(t)+1.*7.*sin(t)+0.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 22.76228 mul
exch 22.76228 mul exch } def  /ps@Exit false def xy moveto  49 1 sub
{ /t t dt add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30
22.76228 mul lt { moveto } { L } ifelse } ifelse  ps@Exit { exit }
if } repeat ps@Exit not { /t t1 def xy  dup 1.e30 22.76228 mul gt {
moveto } { dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse
 } if     gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -22.76228 111.51212 91.04913 0.0  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 753 4396 a
tx@Dict begin { 34.14342 64.1898 } PutCoor PutBegin  end
 753
4396 a 51 x FF(7)g(cm)753 4396 y
tx@Dict begin  PutEnd  end
 753 4396 a 753 4396
a
tx@Dict begin { -34.14342 -6.82875 } PutCoor PutBegin  end
 753 4396 a Fw(E)753 4396 y
tx@Dict begin  PutEnd  end
 753 4396 a 753 4396 a
tx@Dict begin { 94.23582 -6.82875 } PutCoor PutBegin  end
 753
4396 a Fw(F)753 4396 y
tx@Dict begin  PutEnd  end
 753 4396 a 753 4396 a
tx@Dict begin { -32.77774 114.72174 } PutCoor PutBegin  end
 753 4396
a 751 4395 a Fw(G)753 4396 y
tx@Dict begin  PutEnd  end
 753 4396 a 1777 4528 a
currentpoint initclip moveto
 1777
4528 a 0 TeXcolorgray 2050 4645 9 1414 v 0 TeXcolorgray
2095 3315 a FF(D)o('apr\350s)24 b FG(le)d(th\351or\350me)g(de)h(P)q
(ythagor)o(e)g FF(dans)h Fw(E)8 b(F)g(G)29 b FF(r)o(ectangle)24
b(en)2095 3414 y Fw(E)39 b FF(:)2869 3599 y Fw(F)8 b(G)2981
3565 y FD(2)3030 3599 y FB(\306)14 b Fw(E)8 b(F)3207
3565 y FD(2)3251 3599 y FB(\305)i Fw(E)c(G)3428 3565
y FD(2)2940 3735 y FF(7)2980 3701 y FD(2)3030 3735 y
FB(\306)14 b FF(5)3139 3701 y FD(2)3185 3735 y FB(\305)c
Fw(E)c(G)3362 3701 y FD(2)2935 3871 y FF(49)15 b FB(\306)f
FF(25)c FB(\305)g Fw(E)c(G)3366 3837 y FD(2)2778 4008
y FF(49)k FB(\241)g FF(25)17 b FB(\306)d Fw(E)6 b(G)3211
3973 y FD(2)2871 4080 y FB(p)p 2935 4080 82 5 v 69 x
FF(24)15 b FB(\306)f Fw(E)6 b(G)2095 4361 y FF(C)o(onclusion)19
b(:)f Fw(E)6 b(G)20 b FB(\306)2740 4296 y(p)p 2803 4296
V 2803 4361 a FF(24)f(cm.)2095 4528 y Fp(")p FF(S)o(auf)f(si)f(l)o
('\351nonc\351)i(le)f(demande)o(,)f(ne)g(donnez)g(pas)g(de)g(valeur)g
(ap-)2095 4628 y(proch\351e)o(.)-246 4727 y
SDict begin H.S end
 -246 4727
a -246 4727 a
SDict begin 12 H.A end
 -246 4727 a -246 4727 a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 -246 4727 a 0 TeXcolorgray
-141 4842 a FF(2.)p 0 TeXcolorgray 43 w(Le)h(plus)g(gr)o(and)f
(c\364t\351)h(est)726 4843 y([)751 4842 y Fw(B)5 b(C)863
4843 y FF(])897 4842 y(,)18 b(donc)f(le)g(tr)q(iangle)h(ne)g(pourr)o
(ait)g(\352tr)o(e)f(r)o(ectangle)g(qu)n('en)24 b Fw(A)s
FF(.)-38 4956 y(On)17 b(calcule)h(:)1139 5035 y Fw(B)5
b(C)1251 5005 y FD(2)1301 5035 y FB(\306)14 b FF(6)1410
5005 y FD(2)1460 5035 y FB(\306)g FF(36)1145 5135 y Fw(A)s(B)1251
5105 y FD(2)1297 5135 y FB(\305)i Fw(A)o(C)1474 5105
y FD(2)1523 5135 y FB(\306)e FF(5)1632 5105 y FD(2)1677
5135 y FB(\305)c FF(4)1782 5105 y FD(2)1832 5135 y FB(\306)k
FF(25)c FB(\305)g FF(16)17 b FB(\306)d FF(41)2344 4977
y Fo(\276)2399 5087 y Fw(B)5 b(C)2511 5052 y FD(2)2561
5087 y FB(6\306)20 b Fw(A)s(B)2742 5052 y FD(2)2788 5087
y FB(\305)c Fw(A)o(C)2965 5052 y FD(2)3000 5087 y FF(.)-38
5280 y(D)o('apr\350s)h FG(la)e(contrapos\351e)e(du)k(th\351or\350me)e
(de)h(P)q(ythagor)o(e)p FF(,)21 b Fw(A)s(B)5 b(C)26 b
FF(n)-6 b('est)19 b(pas)f(r)o(ectangle)f(en)24 b Fw(A)s
FF(.)-246 5366 y
SDict begin H.S end
 -246 5366 a -246 5366 a
SDict begin 12 H.A end
 -246 5366 a
-246 5366 a
SDict begin [/View [/XYZ H.V]/Dest (exo.11) cvn /DEST pdfmark end
 -246 5366 a 0 TeXcolorgray 114 x FG(Ex)o(er)o(cice)14
b(11)p 0 TeXcolorgray 47 w Fw(A)s(B)5 b(C)k(D)d(E)i(F)g(G)g(H)26
b FF(est)18 b(un)g(par)o(all\351l\351pip\350de)i(r)o(ectangle)d(tel)i
(que)k Fw(A)s(B)f FB(\306)15 b Fw(B)5 b(C)24 b FB(\306)14
b FF(6)k(et)d Fw(C)6 b(G)21 b FB(\306)14 b FF(3.)p 0
TeXcolorgray 1930 5895 a(5)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 895 913 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 254.15918 a add def
/d 0.0 a add neg def /h 139.57541 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 895 913 a 1693
839 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0.49803 0 1  setrgbcolor  [ -85.35823
0.0 -73.9773 0.0 -62.59595 5.69046 -73.9773 5.69046  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.89961 0.8 1  setrgbcolor  0.1
.setopacityalpha  fill  grestore gsave 0.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0.49803 0 1  setrgbcolor  [ 74.11884
14.65575 85.35823 11.38092 85.35823 0.0 74.10971 2.81201  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.89961 0.8 1  setrgbcolor  0.1
.setopacityalpha  fill  grestore gsave 0.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -85.35823 0.0 -28.45274 28.45274  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 0.0 -85.35823 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 28.45274 85.35823 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -28.45274 28.45274 142.26372 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -85.35823 85.35823 -28.45274 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 -85.35823 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 113.81097 85.35823 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -28.45274 113.81097 142.26372 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -85.35823 0.0 -85.35823 85.35823  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -28.45274 28.45274 -28.45274 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 0.0 85.35823 85.35823   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 28.45274 142.26372 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 -28.45274 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 0.0 -28.45274 28.45274   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  2.0  2.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ -62.59595 5.69046
-73.9773 5.69046   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ -73.9773 0.0
-62.59595 5.69046   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 74.11884 14.65575
74.10971 2.81201   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 85.35823 11.38092
74.11884 14.65575   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1693 839 a
tx@Dict begin { -57.4308 25.54086 } PutCoor PutBegin  end
 1693 839 a 52 x FF(6)1693
839 y
tx@Dict begin  PutEnd  end
 1693 839 a 1693 839 a
tx@Dict begin { 0.5683 8.5359 } PutCoor PutBegin  end
 1693 839 a 52 x FF(6)1693
839 y
tx@Dict begin  PutEnd  end
 1693 839 a 1693 839 a
tx@Dict begin { 89.21742 47.23164 } PutCoor PutBegin  end
 1693 839 a 52 x FF(3)1693
839 y
tx@Dict begin  PutEnd  end
 1693 839 a 1693 839 a
tx@Dict begin { -38.41138 33.0856 } PutCoor PutBegin  end
 1693 839 a 6 w Fw(A)1693
839 y
tx@Dict begin  PutEnd  end
 1693 839 a 1693 839 a
tx@Dict begin { -83.36545 5.69046 } PutCoor PutBegin  end
 1693 839 a Fw(B)1693 839
y
tx@Dict begin  PutEnd  end
 1693 839 a 1693 839 a
tx@Dict begin { 87.33145 4.79306 } PutCoor PutBegin  end
 1693 839 a 1691 838 a Fw(C)1693
839 y
tx@Dict begin  PutEnd  end
 1693 839 a 1693 839 a
tx@Dict begin { 143.91566 33.0856 } PutCoor PutBegin  end
 1693 839 a Fw(D)1693 839
y
tx@Dict begin  PutEnd  end
 1693 839 a 1693 839 a
tx@Dict begin { -26.7808 118.43384 } PutCoor PutBegin  end
 1693 839 a Fw(E)1693 839 y
tx@Dict begin  PutEnd  end
 1693
839 a 1693 839 a
tx@Dict begin { -83.36545 90.1413 } PutCoor PutBegin  end
 1693 839 a Fw(F)1693 839 y
tx@Dict begin  PutEnd  end
 1693 839
a 1693 839 a
tx@Dict begin { 83.9355 90.1413 } PutCoor PutBegin  end
 1693 839 a 1691 838 a Fw(G)1693 839 y
tx@Dict begin  PutEnd  end
 1693
839 a 1693 839 a
tx@Dict begin { 143.91566 118.43384 } PutCoor PutBegin  end
 1693 839 a 2 w Fw(H)1693 839 y
tx@Dict begin  PutEnd  end
 1693
839 a 3005 913 a
currentpoint initclip moveto
 3005 913 a -246 1063 a FF(On)18 b(utilise)h(deux)e
(fois)h(de)f(suite)i(le)f(th\351or\350me)h(de)e(Pythagor)o(e)f(:)-246
1251 y(Dans)23 b Fw(A)s(B)5 b(C)27 b FF(r)o(ectangle)17
b(en)h Fw(B)6 b FF(,)642 1550 y Fw(A)o(C)748 1515 y FD(2)797
1550 y FB(\306)20 b Fw(A)s(B)978 1515 y FD(2)1024 1550
y FB(\305)10 b Fw(B)5 b(C)1201 1515 y FD(2)642 1686 y
Fw(A)o(C)748 1652 y FD(2)797 1686 y FB(\306)14 b FF(6)906
1652 y FD(2)952 1686 y FB(\305)c FF(6)1057 1652 y FD(2)642
1822 y Fw(A)o(C)748 1788 y FD(2)797 1822 y FB(\306)k
FF(36)c FB(\305)g FF(36)642 1959 y Fw(A)o(C)748 1924
y FD(2)797 1959 y FB(\306)k FF(72)426 2083 y(\(I)o(nutile)k(de)f
(donner)6 b Fw(A)o(C)26 b FF(!\))p 0 TeXcolorgray 1946
2113 9 946 v 0 TeXcolorgray 1992 1251 a(Dans)c Fw(A)o(C)6
b(G)23 b FF(r)o(ectangle)17 b(en)f Fw(C)9 b FF(,)2774
1534 y Fw(A)o(G)2881 1499 y FD(2)2929 1534 y FB(\306)21
b Fw(A)o(C)3111 1499 y FD(2)3155 1534 y FB(\305)8 b Fw(C)e(G)3334
1499 y FD(2)2774 1670 y Fw(A)o(G)2881 1636 y FD(2)2929
1670 y FB(\306)15 b FF(72)10 b FB(\305)g FF(3)3194 1636
y FD(2)2774 1806 y Fw(A)o(G)2881 1772 y FD(2)2929 1806
y FB(\306)15 b FF(72)10 b FB(\305)g FF(9)2774 1942 y
Fw(A)o(G)2881 1908 y FD(2)2929 1942 y FB(\306)15 b FF(81)2809
2083 y Fw(A)o(G)k FB(\306)2999 2014 y(p)p 3062 2014 82
5 v 3062 2083 a FF(81)c FB(\306)g FF(9)-246 2270 y(C)o(onclusion)20
b(:)j Fw(A)o(G)d FB(\306)14 b FF(9.)-246 2333 y
SDict begin H.S end
 -246
2333 a -246 2333 a
SDict begin 12 H.A end
 -246 2333 a -246 2333 a
SDict begin [/View [/XYZ H.V]/Dest (exo.12) cvn /DEST pdfmark end
 -246 2333
a 0 TeXcolorgray 125 x FG(Ex)o(er)o(cice)g(12)p 0 TeXcolorgray
41 w FF(S)n(ur)21 b(la)e(\002gur)o(e)g(ci-dessous)i(\(qui)f(n)-6
b('est)21 b(pas)f(\340)g(l)o('\351chelle\),)i(le)f(segment)2305
2459 y([)2332 2458 y Fw(M)7 b(K)2471 2459 y FF(])2516
2458 y(mesur)o(e)21 b(3)f(cm,)g(le)h(segment)3397 2459
y([)3424 2458 y Fw(M)9 b(N)3570 2459 y FF(])3615 2458
y(mesur)o(e)21 b(5)f(cm)g(et)-246 2558 y Fw(h)f FB(\306)14
b FF(1,)8 b(2)19 b(cm.)p 0 TeXcolorgray 0 TeXcolorgray
1260 3670 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 166.16391 a add def
/d 0.0 a add neg def /h 124.05399 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1260 3670 a 1180 3736 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  [ 28.45274 28.45274 28.45274
40.5244 40.5244 40.5244 40.5244 28.45274  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8  setgray  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  [ 105.84424 55.76756 115.50156
48.52457 108.25856 38.86723 98.60124 46.11023  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8  setgray  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 28.45274 28.45274 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 113.81097 28.45274 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 28.45274 28.45274 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 28.45274 28.45274 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 105.84424 55.76756 85.35823 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1180 3736 a
tx@Dict begin { 88.20367 49.7923 } PutCoor PutBegin  end
 1180 3736 a 57 x Fw(h)1180 3736 y
tx@Dict begin  PutEnd  end
 1180 3736
a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  [ 28.45274 28.45274
  false NArray  /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1180 3736 a
tx@Dict begin { 17.64055 27.31482 } PutCoor PutBegin  end

1180 3736 a -1 x Fw(K)1180 3736 y
tx@Dict begin  PutEnd  end
 1180 3736 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  [ 142.26372 28.45274
  false NArray  /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1180 3736 a
tx@Dict begin { 145.10916 21.62392 } PutCoor PutBegin  end
 1180 3736 a 2 w
Fw(N)1180 3736 y
tx@Dict begin  PutEnd  end
 1180 3736 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  [ 28.45274 113.81097
  false NArray  /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial 1180 3736 a
tx@Dict begin { 31.86693 116.08723 } PutCoor PutBegin  end
 1180 3736 a 2 w Fw(M)1180 3736
y
tx@Dict begin  PutEnd  end
 1180 3736 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  [ 85.35823 28.45274
  false NArray  /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1180 3736 a
tx@Dict begin { 79.66776 19.34766 } PutCoor PutBegin  end
 1180 3736 a Fw(P)1180 3736 y
tx@Dict begin  PutEnd  end
 1180 3736 a
2640 3670 a
currentpoint initclip moveto
 2640 3670 a -246 3722 a
SDict begin H.S end
 -246 3722 a -246
3722 a
SDict begin 12 H.A end
 -246 3722 a -246 3722 a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 -246 3722 a 0 TeXcolorgray
-141 3833 a FF(1.)p 0 TeXcolorgray 43 w FA(A)29 3845
y Fr(M)7 b(N)f(P)201 3833 y FB(\306)281 3800 y Fr(M)h(N)f
FC(\243)p Fr(h)p 280 3813 193 5 v 361 3862 a FD(2)497
3833 y FB(\306)576 3797 y FD(5)p FC(\243)p FD(1,2)p 576
3814 150 5 v 635 3862 a(2)750 3833 y FB(\306)14 b FF(3)k(cm)985
3803 y FD(2)1020 3833 y FF(.)-246 3873 y
SDict begin H.S end
 -246 3873 a
-246 3873 a
SDict begin 12 H.A end
 -246 3873 a -246 3873 a
SDict begin [/View [/XYZ H.V]/Dest (Item.22) cvn /DEST pdfmark end
 -246 3873 a 0 TeXcolorgray
-141 3965 a FF(2.)p 0 TeXcolorgray 43 w(On)f(a)g(aussi)h
FA(A)400 3977 y Fr(M)7 b(N)f(P)572 3965 y FB(\306)651
3933 y Fr(P)i(N)e FC(\243)q Fr(M)g(K)p 651 3946 244 5
v 758 3994 a FD(2)905 3965 y FF(,)17 b(donc)g(3)e FB(\306)1268
3933 y Fr(P)8 b(N)e FC(\243)p FD(3)p 1268 3946 167 5
v 1336 3994 a(2)1445 3965 y FF(,)17 b(soit)1625 3982
y Fv(\001)1625 3965 y FF(3)11 b FB(\243)f FF(2)15 b FB(\306)f
Fw(P)c(N)19 b FB(\243)2064 3982 y Fv(\001)2064 3965 y
FF(3)f(;)f(et)h(donc)f Fw(P)10 b(N)23 b FB(\306)14 b
FF(2)k(cm.)-246 4005 y
SDict begin H.S end
 -246 4005 a -246 4005 a
SDict begin 12 H.A end
 -246 4005
a -246 4005 a
SDict begin [/View [/XYZ H.V]/Dest (Item.23) cvn /DEST pdfmark end
 -246 4005 a 0 TeXcolorgray -141 4087 a
FF(3.)p 0 TeXcolorgray 43 w(\(N)n(on)e(d\351taill\351.\))j(Il)e(faut)h
(calculer)f(successivement)k Fw(K)14 b(N)9 b FF(,)16
b(puis)j Fw(K)12 b(P)25 b FF(et)20 b Fw(M)7 b(P)-9 b
FF(.)-38 4198 y Fp(")p FF(On)18 b(ne)f(sait)h(pas)o(,)g(\340)g(ce)f
(stade)o(,)g(que)h Fw(P)25 b FF(est)18 b(le)g(milieu)h(de)1700
4199 y([)1726 4198 y Fw(K)14 b(N)1857 4199 y FF(])1889
4198 y(.)p 0 TeXcolorgray 7 4294 a(\225)p 0 TeXcolorgray
42 w(P)n(our)j Fw(K)d(N)9 b FF(,)16 b(on)i(utilise)h(le)f
(th\351or\350me)h(de)e(Pythagor)o(e)f(dans)i(le)f(tr)q(iangle)h
Fw(K)c(M)9 b(N)g FF(.)17 b(On)h(obtient)g Fw(K)c(N)22
b FB(\306)14 b FF(4)k(cm.)p 0 TeXcolorgray 7 4394 a(\225)p
0 TeXcolorgray 42 w Fw(K)12 b(P)22 b FB(\306)14 b Fw(K)g(N)k
FB(\241)10 b Fw(P)g(N)24 b FB(\306)14 b FF(4)c FB(\241)g
FF(2)15 b FB(\306)f FF(2)k(cm.)p 0 TeXcolorgray 7 4494
a(\225)p 0 TeXcolorgray 42 w(En\002n,)f(pour)h(calculer)g
Fw(P)10 b(M)d FF(,)18 b(on)g(utilise)h(le)f(th\351or\350me)g(de)g
(Pythagor)o(e)e(dans)h(le)h(tr)q(iangle)g Fw(K)c(M)7
b(P)-9 b FF(.)18 b(On)f(obtient)j Fw(M)7 b(P)23 b FB(\306)3556
4429 y(p)p 3619 4429 82 5 v 3619 4494 a FF(13)18 b(cm)q(.)-246
4573 y
SDict begin H.S end
 -246 4573 a -246 4573 a
SDict begin 12 H.A end
 -246 4573 a -246 4573
a
SDict begin [/View [/XYZ H.V]/Dest (exo.13) cvn /DEST pdfmark end
 -246 4573 a -246 4589 a
SDict begin H.S end
 -246 4589 a -246 4589 a
SDict begin 12 H.A end
 -246
4589 a -246 4589 a
SDict begin [/View [/XYZ H.V]/Dest (Item.24) cvn /DEST pdfmark end
 -246 4589 a 0 TeXcolorgray 92 x FG(Ex)o(er)o(cice)c
(13)p 0 TeXcolorgray 0 TeXcolorgray 146 w FF(1.)p 0 TeXcolorgray
43 w(Les)k(c\364t\351s)g(de)f(l)o('angle)i(droit)d(d)n('un)i(tr)q
(iangle)f(r)o(ectangle)h(mesur)o(ent)i Fw(a)h FF(et)d
Fw(b)q FF(,)g(l)o('hypot\351nuse)i(mesur)o(e)e Fw(c)5
b FF(.)p 0 TeXcolorgray 0 TeXcolorgray 1373 5646 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 163.88808 a add def
/d 0.0 a add neg def /h 107.55135 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1373
5646 a 873 5754 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ 85.35823
28.45274 85.35823 40.5244 97.42989 40.5244 97.42989 28.45274  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 28.45274 199.1692 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 113.81097 85.35823 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 28.45274 85.35823 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
873 5754 a
tx@Dict begin { 147.95418 74.54604 } PutCoor PutBegin  end
 873 5754 a 38 x Fw(c)873 5754 y
tx@Dict begin  PutEnd  end
 873 5754 a
873 5754 a
tx@Dict begin { 131.45152 25.60728 } PutCoor PutBegin  end
 873 5754 a 875 5792 a Fw(a)873 5754 y
tx@Dict begin  PutEnd  end
 873
5754 a 873 5754 a
tx@Dict begin { 69.70912 71.13185 } PutCoor PutBegin  end
 873 5754 a 57 x Fw(b)873 5754 y
tx@Dict begin  PutEnd  end
 873
5754 a 2734 5646 a
currentpoint initclip moveto
 2734 5646 a 0 TeXcolorgray 1930 5895
a FF(6)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-38 -163 a FF(D)o('apr\350s)17 b(le)h(th\351or\350me)h(de)e(Pythagor)o
(e)o(,)f Fw(c)1202 -193 y FD(2)1252 -163 y FB(\306)g
Fw(a)1370 -193 y FD(2)1415 -163 y FB(\305)10 b Fw(b)1527
-193 y FD(2)1562 -163 y FF(,)17 b(donc)1824 24 y Fw(c)i
FB(\306)1947 -58 y Fo(p)p 2023 -58 241 5 v 2025 24 a
Fw(a)2072 0 y FD(2)2117 24 y FB(\305)10 b Fw(b)2229 0
y FD(2)2264 24 y FF(.)-246 98 y
SDict begin H.S end
 -246 98 a -246 98 a
SDict begin 12 H.A end
 -246
98 a -246 98 a
SDict begin [/View [/XYZ H.V]/Dest (Item.25) cvn /DEST pdfmark end
 -246 98 a 0 TeXcolorgray -141 204 a FF(2.)p
0 TeXcolorgray 43 w(L)-10 b('af\002r)q(mation)p 0 TeXcolorgray
0 TeXcolorgray 1179 339 a(P)n(our)17 b(tous)h(nombr)o(es)g(positifs)j
Fw(a)g FF(et)d Fw(b)q FF(,)2353 269 y FB(p)p 2416 269
241 5 v 2418 339 a Fw(a)2465 315 y FD(2)2510 339 y FB(\305)10
b Fw(b)2622 315 y FD(2)2671 339 y FB(\306)16 b Fw(a)e
FB(\305)c Fw(b)q FF(.)-38 475 y(est)18 b(F)-5 b(A)l(USSE)9
b(!)19 b(V)-5 b(oici)18 b(deux)f(justi\002cations)i(:)p
0 TeXcolorgray 7 587 a(\225)p 0 TeXcolorgray 42 w FG(P)m(ar)c(le)g
(calcul.)h FF(Il)g(suf\002t)i(de)g(donner)f(un)h(contr)o(e-exemple)h(:)
e(on)h(choisit)i Fw(a)e FB(\306)c FF(4)k(et)g Fw(b)g
FB(\306)c FF(3.)k(Dans)f(ce)g(cas)732 689 y Fo(p)p 809
689 V 811 771 a Fw(a)858 747 y FD(2)903 771 y FB(\305)10
b Fw(b)1015 747 y FD(2)1064 771 y FB(\306)1133 689 y
Fo(p)p 1209 689 227 5 v 82 x FF(4)1249 747 y FD(2)1295
771 y FB(\305)g FF(3)1400 747 y FD(2)1450 771 y FB(\306)1519
703 y(p)p 1582 703 197 5 v 1582 771 a FF(16)g FB(\305)g
FF(9)16 b FB(\306)1863 703 y(p)p 1926 703 82 5 v 1926
771 a FF(25)f FB(\306)g FF(5)146 b(est)18 b(diff\351r)o(ent)g(de)148
b Fw(a)14 b FB(\305)c Fw(b)18 b FB(\306)d FF(4)10 b FB(\305)g
FF(3)15 b FB(\306)f FF(7.)p 0 TeXcolorgray 7 939 a(\225)p
0 TeXcolorgray 42 w FG(G\351om\351tr)q(iquement)q(.)782
869 y FB(p)p 845 869 241 5 v 847 939 a Fw(a)894 915 y
FD(2)939 939 y FB(\305)c Fw(b)1051 915 y FD(2)1105 939
y FF(est)19 b(la)g(longueur)g(de)g(l)o('hypot\351nuse)j
Fw(c)i FF(du)19 b(tr)q(iangle)f(r)o(ectangle)h(de)g(la)g(question)h(1)9
b(;)19 b(tandis)g(que)j Fw(a)15 b FB(\305)c Fw(b)80 1039
y FF(est)19 b(la)f(somme)h(des)g(longueurs)g(des)f(c\364t\351s)h(de)f
(l)o('angle)h(droit.)f(Or)g(cette)g(somme)i(est)f(str)q(ictement)h
(plus)f(gr)o(ande)f(que)g(celle)h(de)f(l)o('hypo-)80
1138 y(t\351nuse)o(,)g(puisque)i(le)d(chemin)i(le)f(plus)g(cour)q(t)f
(d)n('un)h(point)h(\340)e(un)g(autr)o(e)h(est)g(la)f(ligne)h(droite)o
(.)-246 1219 y
SDict begin H.S end
 -246 1219 a -246 1219 a
SDict begin 12 H.A end
 -246 1219 a -246
1219 a
SDict begin [/View [/XYZ H.V]/Dest (exo.14) cvn /DEST pdfmark end
 -246 1219 a 0 TeXcolorgray 110 x FG(Ex)o(er)o(cice)c(14)p
0 TeXcolorgray 41 w FF(S)o(oit)24 b Fw(A)c FF(un)e(point)h(et)e
Fx(\242)h FF(une)g(droite)f(du)g(plan.)h(Le)g(projet\351)g(or)q
(thogonal)g(de)23 b Fw(A)d FF(sur)d Fx(\242)h FF(est)g(le)g(point)i
Fw(H)26 b FF(de)17 b Fx(\242)h FF(tel)g(que)g(\()6 b
Fw(A)f(H)j FF(\))14 b FB(?)g Fx(\242)p FF(.)-246 1372
y
SDict begin H.S end
 -246 1372 a -246 1372 a
SDict begin 12 H.A end
 -246 1372 a -246 1372 a
SDict begin [/View [/XYZ H.V]/Dest (Item.26) cvn /DEST pdfmark end
 -246
1372 a 0 TeXcolorgray -141 1465 a FF(1.)p 0 TeXcolorgray
43 w(On)j(tr)o(ace)h(la)f(perpendiculair)o(e)i(\340)e
Fx(\242)g FF(passant)i(par)k Fw(A)s FF(.)17 b(Elle)i(coupe)f
Fx(\242)g FF(en)i Fw(H)8 b FF(.)p 0 TeXcolorgray 0 TeXcolorgray
1296 2577 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 182.66698 a add def
/d 0.0 a add neg def /h 125.19188 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1296 2577 a 1910 2426 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ 27.77068
18.96255 23.74997 30.34479 35.1322 34.36548 39.15291 22.98326  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.6 def /x1 3.82 def /dx x1 x sub
49 div def /F@pstplot ((--1.2932--1.42*x)/4.02)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -2.6 def /x1 3.82
def /dx x1 x sub 49 div def /F@pstplot ((-4.87--4.02*x)/-1.42)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap [  2.0  2.0
] 0 0 add  DashLine  grestore end
 
@endspecial 1910 2426 a
tx@Dict begin { -43.24829 8.5359 } PutCoor PutBegin  end
 1910 2426 a 54 x
Fx(\242)1910 2426 y
tx@Dict begin  PutEnd  end
 1910 2426 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 5.12128 83.08195   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end


@endspecial 1910 2426 a
tx@Dict begin { 7.39755 88.77242 } PutCoor PutBegin  end
 1910 2426 a 0.30196 0.30196 1
TeXcolorrgb 6 w Fw(A)p 0 TeXcolorgray 1910 2426 a
tx@Dict begin  PutEnd  end
 1910
2426 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 27.77068 18.96255   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1910 2426
a
tx@Dict begin { 19.91682 6.25963 } PutCoor PutBegin  end
 1910 2426 a 0.30196 0.30196 1 TeXcolorrgb 2 w Fw(H)p
0 TeXcolorgray 1910 2426 a
tx@Dict begin  PutEnd  end
 1910 2426 a 2812 2577 a
currentpoint initclip moveto
 2812
2577 a -246 2613 a
SDict begin H.S end
 -246 2613 a -246 2613 a
SDict begin 12 H.A end
 -246 2613
a -246 2613 a
SDict begin [/View [/XYZ H.V]/Dest (Item.27) cvn /DEST pdfmark end
 -246 2613 a 0 TeXcolorgray -141 2725 a
FF(2.)p 0 TeXcolorgray 43 w(P)m(ar)16 b(constr)q(uction,)i(le)f(tr)q
(iangle)22 b Fw(A)5 b(M)k(H)26 b FF(est)17 b(r)o(ectangle)g(en)h
Fw(H)8 b FF(,)18 b(donc)e(son)h(hypot\351nuse)25 b Fw(A)5
b(M)24 b FF(est)17 b(str)q(ictement)h(plus)g(gr)o(ande)e(que)h(le)g
(c\364t\351)g(de)-38 2825 y(l)o('angle)h(droit)23 b Fw(A)5
b(H)26 b FF(\(c)n('est)17 b(le)h(m\352me)h(r)o(aisonnement)g(que)f
(celui)h(de)e(l)o('exer)o(cice)h(pr\351c\351dent\))g(:)1876
2993 y Fw(A)5 b(M)22 b FB(\310)e Fw(A)5 b(H)j FF(.)p
0 TeXcolorgray 0 TeXcolorgray 1253 4109 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 192.90955 a add def
/d 0.0 a add neg def /h 125.19188 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1253 4109 a
1867 3958 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ 27.77068
18.96255 23.74997 30.34479 35.1322 34.36548 39.15291 22.98326  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.6 def /x1 4.18 def /dx x1 x sub
49 div def /F@pstplot ((--1.2932--1.42*x)/4.02)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -2.6 def /x1 4.18
def /dx x1 x sub 49 div def /F@pstplot ((-4.87--4.02*x)/-1.42)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap [  2.0  2.0
] 0 0 add  DashLine  grestore end
 
@endspecial
1867 3958 a
tx@Dict begin { -43.24829 8.5359 } PutCoor PutBegin  end
 1867 3958 a 53 x Fx(\242)1867 3958 y
tx@Dict begin  PutEnd  end
 1867
3958 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 5.12128 83.08195 81.44693 37.92294
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 5.12128 83.08195   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1867 3958 a
tx@Dict begin { 7.39755 88.77242 } PutCoor PutBegin  end
 1867 3958 a 0.30196 0.30196 1
TeXcolorrgb 6 w Fw(A)p 0 TeXcolorgray 1867 3958 a
tx@Dict begin  PutEnd  end
 1867
3958 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 27.77068 18.96255   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1867 3958
a
tx@Dict begin { 19.91682 6.25963 } PutCoor PutBegin  end
 1867 3958 a 0.30196 0.30196 1 TeXcolorrgb 2 w Fw(H)p
0 TeXcolorgray 1867 3958 a
tx@Dict begin  PutEnd  end
 1867 3958 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 81.44693 37.92294   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1867 3958 a
tx@Dict begin { 83.65112 43.81703 } PutCoor PutBegin  end
 1867 3958 a 0.30196 0.30196 1
TeXcolorrgb 2 w Fw(M)p 0 TeXcolorgray 1867 3958 a
tx@Dict begin  PutEnd  end
 1867
3958 a 2855 4109 a
currentpoint initclip moveto
 2855 4109 a -246 4145 a
SDict begin H.S end
 -246 4145
a -246 4145 a
SDict begin 12 H.A end
 -246 4145 a -246 4145 a
SDict begin [/View [/XYZ H.V]/Dest (Item.28) cvn /DEST pdfmark end
 -246 4145 a 0 TeXcolorgray
-141 4257 a FF(3.)p 0 TeXcolorgray 43 w(Le)18 b(segment)374
4258 y([)406 4257 y Fw(A)5 b(H)526 4258 y FF(])568 4257
y(est)18 b(la)g(hauteur)p 0 0 1 TeXcolorrgb 1048 4257
a
SDict begin H.S end
 1048 4257 a -30 x FD(2)1084 4257 y
SDict begin 12 H.L end
 1084 4257 a 1084
4257 a
SDict begin [/Subtype /Link/Dest (Hfootnote.2) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1084 4257 a 0 TeXcolorgray 17 w FF(issue)h(de)k
Fw(A)d FF(dans)d(le)h(tr)q(iangle)24 b Fw(A)s(B)5 b(C)k
FF(.)p 0 TeXcolorgray 0 TeXcolorgray 1253 5371 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 192.90955 a add def
/d 0.0 a add neg def /h 125.19188 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1253
5371 a 1867 5220 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ 27.77068
18.96255 23.74997 30.34479 35.1322 34.36548 39.15291 22.98326  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 5.12128 83.08195 81.44693 37.92294
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -36.14725 -3.61563 5.12128 83.08195
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 81.44693 37.92294 -36.14725 -3.61563
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 5.12128 83.08195 27.77068
18.96255   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 5.12128 83.08195   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1867 5220 a
tx@Dict begin { 7.39755 88.77242 } PutCoor PutBegin  end
 1867 5220 a 0.30196 0.30196 1
TeXcolorrgb 6 w Fw(A)p 0 TeXcolorgray 1867 5220 a
tx@Dict begin  PutEnd  end
 1867
5220 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 27.77068 18.96255   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1867 5220
a
tx@Dict begin { 19.91682 6.25963 } PutCoor PutBegin  end
 1867 5220 a 0.30196 0.30196 1 TeXcolorrgb 2 w Fw(H)p
0 TeXcolorgray 1867 5220 a
tx@Dict begin  PutEnd  end
 1867 5220 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 81.44693 37.92294   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1867 5220 a
tx@Dict begin { 83.65112 43.81703 } PutCoor PutBegin  end
 1867 5220 a 0.30196 0.30196 1
TeXcolorrgb 1865 5219 a Fw(C)p 0 TeXcolorgray 1867 5220
a
tx@Dict begin  PutEnd  end
 1867 5220 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.49019 0.49019 1  setrgbcolor
 [ -36.14725 -3.61563   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
1867 5220 a
tx@Dict begin { -46.94684 1.13791 } PutCoor PutBegin  end
 1867 5220 a 0.49019 0.49019 1 TeXcolorrgb
Fw(B)p 0 TeXcolorgray 1867 5220 a
tx@Dict begin  PutEnd  end
 1867 5220 a 2855 5371
a
currentpoint initclip moveto
 2855 5371 a 0 TeXcolorgray -246 5481 1757 4 v -154
5557 a Fq(2)q(.)p 0 TeXcolorgray -76 5557 a
SDict begin H.S end
 -76 5557
a -76 5557 a
SDict begin H.R end
 -76 5557 a -76 5557 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.2) cvn /DEST pdfmark
end
 -76 5557 a 0 TeXcolorgray
Fq(Le)k(mot)g Fn(hauteur)h Fq(est)f(polys\351mique)g(\(il)g(a)f
(plusieurs)g(sens\))g(:)h(le)g(segment)1699 5558 y([)1724
5557 y Fn(A)5 b(H)1820 5558 y Fq(])1853 5557 y(peut)12
b(\352tr)o(e)h(appel\351)h Fn(hauteur)p Fq(,)d(la)i(droite)2797
5558 y(\()2823 5557 y Fn(A)5 b(H)2919 5558 y Fq(\))2953
5557 y(peut)13 b(\351galement)g(\352tr)o(e)g(appel\351e)h
Fn(hauteur)c Fq(;)h(en\002n)-246 5646 y(la)j(longueur)19
b Fn(A)5 b(H)20 b Fq(peut)14 b(elle)h(aussi)e(\352tr)o(e)h(appel\351e)h
Fn(hauteur)h Fq(\226)d(c)n('est)h(cette)h(longueur)l(,)g(par)e(exemple)
o(,)j(que)e(l)o('on)g(r)o(etrouve)g(dans)e(la)i(formule)3108
5620 y Fj(B)5 b Fi(\243)p Fj(h)p 3108 5631 110 4 v 3149
5669 a Fk(2)3241 5646 y Fq(pour)14 b(l)o('air)o(e)g(du)f(triangle)o(.)p
0 TeXcolorgray 0 TeXcolorgray 1930 5895 a FF(7)p 0 TeXcolorgray
eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (exo.15) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 83 x FG(Ex)o(er)o(cice)14
b(15)p 0 TeXcolorgray 41 w FF(On)j(r\351sout)i(les)f(\351quations)h(:)
-1 455 y Fw(x)c FB(\305)10 b FF(7)15 b FB(\306)g FF(18)-97
580 y Fw(x)g FB(\305)22 596 y Fv(\001)22 580 y FF(7)p
1 0 0 TeXcolorrgb 2 w FB(\241)119 596 y Fv(\001)119 580
y FF(7)p 0 TeXcolorgray 14 w FB(\306)g FF(18)p 1 0 0
TeXcolorrgb FB(\241)p FF(7)p 0 TeXcolorgray 115 704 a
Fw(x)k FB(\306)c FF(11)-246 1240 y(La)j(solution)h(est)h
Fw(x)f FB(\306)c FF(11)p 0 TeXcolorgray 604 1258 9 1304
v 0 TeXcolorgray 872 315 a(3)r Fw(x)g FB(\305)10 b FF(4)15
b FB(\306)g FF(19)776 439 y(3)r Fw(x)g FB(\305)937 455
y Fv(\001)937 439 y FF(4)p 1 0 0 TeXcolorrgb 2 w FB(\241)1034
455 y Fv(\001)1034 439 y FF(4)p 0 TeXcolorgray 14 w FB(\306)g
FF(19)p 1 0 0 TeXcolorrgb FB(\241)p FF(4)p 0 TeXcolorgray
987 564 a(3)r Fw(x)20 b FB(\306)15 b FF(15)977 710 y
Fv(\001)977 694 y FF(3)s Fw(x)p 977 731 87 5 v 0 0 1
TeXcolorrgb 1001 827 a Fv(\001)1001 811 y FF(3)p 0 TeXcolorgray
1088 750 a FB(\306)1168 694 y FF(15)p 1168 731 82 5 v
0 0 1 TeXcolorrgb 1188 807 a(3)p 0 TeXcolorgray 1030
914 a Fw(x)k FB(\306)c FF(5)649 1240 y(La)j(solution)h(est)h
Fw(x)f FB(\306)c FF(5.)p 0 TeXcolorgray 1498 1258 9 1304
v 0 TeXcolorgray 1752 201 a(3,)8 b(5)r Fw(x)15 b FB(\241)10
b FF(9)17 b FB(\306)d FF(5)1657 325 y(3,)8 b(5)r Fw(x)15
b FB(\241)1886 341 y Fv(\001)1886 325 y FF(9)p 1 0 0
TeXcolorrgb 2 w FB(\305)1983 341 y Fv(\001)1983 325 y
FF(9)p 0 TeXcolorgray 15 w FB(\306)f FF(5)p 1 0 0 TeXcolorrgb
FB(\305)p FF(9)p 0 TeXcolorgray 1868 450 a(3,)8 b(5)r
Fw(x)21 b FB(\306)14 b FF(14)1850 576 y Fv(\010)1893
554 y(\010)1858 565 y FF(3,)8 b(5)s Fw(x)p 1858 601 156
5 v 0 0 1 TeXcolorrgb 1873 689 a Fv(\010)1916 668 y(\010)1881
678 y FF(3,)g(5)p 0 TeXcolorgray 2038 621 a FB(\306)2131
565 y FF(14)p 2117 601 110 5 v 0 0 1 TeXcolorrgb 2117
678 a(3,)g(5)p 0 TeXcolorgray 1979 829 a Fw(x)20 b FB(\306)2131
773 y FF(14)p 2117 810 V 2117 886 a(3,)8 b(5)1544 1041
y(Or)1674 1008 y FD(14)p 1666 1021 77 5 v 1666 1070 a(3,5)1774
1041 y FB(\306)1868 1008 y FD(14)p FC(\243)p FD(2)p 1860
1021 150 5 v 1860 1070 a(3,5)p FC(\243)p FD(2)2041 1041
y FB(\306)2127 1008 y FD(28)p 2127 1021 62 5 v 2142 1070
a(7)2219 1041 y FB(\306)21 b FF(4,)1544 1141 y(donc)e(la)g(solution)h
(est)i Fw(x)f FB(\306)1544 1240 y FF(4.)p 0 TeXcolorgray
2393 1258 9 1304 v 0 TeXcolorgray 2595 214 a Fw(x)15
b FB(\305)10 b FF(1)16 b FB(\306)e(\241)p FF(2)r Fw(x)h
FB(\241)10 b FF(5)2453 339 y Fw(x)15 b FB(\305)10 b FF(1)p
0 1 0 TeXcolorrgb FB(\305)p FF(2)r Fw(x)p 0 TeXcolorgray
22 w FB(\306)2831 333 y Fv(\030)2906 314 y(\030)2839
339 y FB(\241)p FF(2)r Fw(x)16 b FB(\241)10 b FF(5)p
0 1 0 TeXcolorrgb FB(\305)-8 b Fv(\010)3163 329 y(\010)3151
339 y FF(2)r Fw(x)p 0 TeXcolorgray 2553 463 a FF(3)r
Fw(x)15 b FB(\305)10 b FF(1)16 b FB(\306)e(\241)p FF(5)2457
588 y(3)r Fw(x)h FB(\305)2618 604 y Fv(\001)2618 588
y FF(1)p 1 0 0 TeXcolorrgb 2 w FB(\241)2715 604 y Fv(\001)2715
588 y FF(1)p 0 TeXcolorgray 15 w FB(\306)f(\241)p FF(5)p
1 0 0 TeXcolorrgb FB(\241)p FF(1)p 0 TeXcolorgray 2669
712 a(3)r Fw(x)20 b FB(\306)14 b(\241)p FF(6)2658 858
y Fv(\001)2659 842 y FF(3)r Fw(x)p 2659 879 87 5 v 0 0 1
TeXcolorrgb 2682 976 a Fv(\001)2682 959 y FF(3)p 0 TeXcolorgray
2770 899 a FB(\306)2849 842 y(\241)p FF(6)p 2849 879
96 5 v 0 0 1 TeXcolorrgb 2876 956 a(3)p 0 TeXcolorgray
2711 1063 a Fw(x)20 b FB(\306)14 b(\241)p FF(2)2439 1240
y(La)j(solution)j(est)g Fw(x)f FB(\306)14 b(\241)p FF(2.)p
0 TeXcolorgray 3288 1258 9 1304 v 0 TeXcolorgray 3476
222 a FB(\241)p FF(2)r Fw(x)h FB(\305)10 b FF(4)16 b
FB(\306)e FF(3)r Fw(x)h FB(\241)10 b FF(6)3334 347 y
FB(\241)p FF(2)r Fw(x)15 b FB(\305)10 b FF(4)p 0 1 0
TeXcolorrgb FB(\241)p FF(3)r Fw(x)p 0 TeXcolorgray 22
w FB(\306)c Fv(\010)3829 337 y(\010)3817 347 y FF(3)r
Fw(x)16 b FB(\241)10 b FF(6)p 0 1 0 TeXcolorrgb FB(\241)-8
b Fv(\010)4086 337 y(\010)4074 347 y FF(3)r Fw(x)p 0
TeXcolorgray 3476 471 a FB(\241)p FF(5)r Fw(x)15 b FB(\305)10
b FF(4)16 b FB(\306)e(\241)p FF(6)3380 596 y FB(\241)p
FF(5)r Fw(x)h FB(\305)3596 612 y Fv(\001)3596 596 y FF(4)p
1 0 0 TeXcolorrgb 2 w FB(\241)3693 612 y Fv(\001)3693
596 y FF(4)p 0 TeXcolorgray 15 w FB(\306)f(\241)p FF(6)p
1 0 0 TeXcolorrgb FB(\241)p FF(4)p 0 TeXcolorgray 3591
720 a FB(\241)p FF(5)r Fw(x)21 b FB(\306)14 b(\241)p
FF(10)3573 839 y Fv(\010)3602 825 y(\010)3582 837 y FB(\241)p
FF(5)r Fw(x)p 3582 874 142 5 v 0 0 1 TeXcolorrgb 3597
952 a Fv(\010)3625 938 y(\010)3605 950 y FB(\241)p FF(5)p
0 TeXcolorgray 3748 893 a FB(\306)3827 837 y(\241)p FF(10)p
3827 874 136 5 v 0 0 1 TeXcolorrgb 3847 950 a FB(\241)p
FF(5)p 0 TeXcolorgray 3689 1053 a Fw(x)20 b FB(\306)14
b FF(2)3334 1240 y(La)j(solution)i(est)h Fw(x)g FB(\306)14
b FF(2.)-246 1340 y
SDict begin H.S end
 -246 1340 a -246 1340 a
SDict begin 12 H.A end
 -246 1340
a -246 1340 a
SDict begin [/View [/XYZ H.V]/Dest (exo.16) cvn /DEST pdfmark end
 -246 1340 a 0 TeXcolorgray 100 x FG(Ex)o(er)o(cice)g(16)p
0 TeXcolorgray 41 w FF(Les)k(deux)g(plateaux)h(de)e(la)g(balance)h
(ci-dessous)g(sont)g(en)g(\351quilibr)o(e)o(.)g(Les)g(poids)g(noirs)f
(ont)h(tous)g(la)g(m\352me)g(masse)j Fw(M)k FF(kg.)p
0 TeXcolorgray 0 TeXcolorgray 1213 2283 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 177.54483 a add def
/d 0.0 a add neg def /h 88.31741 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1213 2283 a
1241 2438 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 164.74118 72.15639 164.74118
83.53754 150.51482 83.53754 150.51482 72.15639  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 16.787 71.24605 16.787
82.6272 2.56064 82.6272 2.56064 71.24605  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 36.98865 71.24605 36.98865
82.6272 22.76227 82.6272 22.76227 71.24605  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 56.3363 71.47354 56.3363
82.85469 42.10992 82.85469 42.10992 71.47354  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 114.94888 72.61172 137.71117
72.61172 137.71117 95.60152 114.94888 95.37401  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 42.67911 102.43027 42.67911
91.04913 14.22636 91.04913 14.22636 102.43027  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 68.28685 85.35823 22.76228
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 68.28685 85.35823 22.76228
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 68.28685 0.0 68.28685   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 68.28685 113.81097 68.28685
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 150.51482 83.53754 150.51482 72.15639
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 164.74118 83.53754 150.51482 83.53754
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 164.74118 72.15639 164.74118 83.53754
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 150.51482 72.15639 164.74118 72.15639
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 2.56064 82.6272 2.56064 71.24605  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 16.787 82.6272 2.56064 82.6272   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 16.787 71.24605 16.787 82.6272   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 2.56064 71.24605 16.787 71.24605  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 22.76227 82.6272 22.76227 71.24605
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 36.98865 82.6272 22.76227 82.6272 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 36.98865 71.24605 36.98865 82.6272
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 22.76227 71.24605 36.98865 71.24605
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.10992 82.85469 42.10992 71.47354
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.3363 82.85469 42.10992 82.85469
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.3363 71.47354 56.3363 82.85469 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.10992 71.47354 56.3363 71.47354
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 137.71117 95.60152 114.94888 95.37401
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 137.71117 72.61172 137.71117 95.60152
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 114.94888 72.61172 137.71117 72.61172
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 114.94888 95.37401 114.94888 72.61172
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1241 2438 a
tx@Dict begin { 115.23369 86.95209 } PutCoor PutBegin  end
 1241 2438 a 57 x FF(10)19 b(kg)1241 2438
y
tx@Dict begin  PutEnd  end
 1241 2438 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 14.22636 91.04913 14.22636 102.43027
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.67911 91.04913 14.22636 91.04913
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.67911 102.43027 42.67911 91.04913
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 14.22636 102.43027 42.67911 102.43027
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1241 2438 a
tx@Dict begin { 21.33955 100.60924 } PutCoor PutBegin  end
 1241 2438 a 57 x FF(7)f(kg)1241 2438 y
tx@Dict begin  PutEnd  end
 1241
2438 a 2687 2283 a
currentpoint initclip moveto
 2687 2283 a -246 2466 a FF(Le)g(fait)g(que)g(la)g
(balance)f(soit)h(en)g(\351quilibr)o(e)g(se)f(tr)o(aduit)h(par)f(l)o
('\351quation)1662 2648 y(3)r Fw(M)i FB(\305)10 b FF(7)k
FB(\306)h FF(10)10 b FB(\305)i Fw(M)7 b FF(.)-246 2831
y(On)18 b(la)f(r\351sout)h(:)1538 3113 y(3)r Fw(M)g FB(\305)10
b FF(7)p 0 1 0 TeXcolorrgb FB(\241)r Fw(M)p 0 TeXcolorgray
23 w FB(\306)k FF(10)c FB(\305)2139 3123 y Fv(\032)2153
3113 y(\032)-87 b Fw(M)p 0 1 0 TeXcolorrgb 9 w FB(\241)2275
3123 y Fv(\032)2288 3113 y(\032)h Fw(M)p 0 TeXcolorgray
1672 3238 a FF(2)r Fw(M)19 b FB(\305)10 b FF(7)15 b FB(\306)f
FF(10)1577 3362 y(2)r Fw(M)k FB(\305)1772 3378 y Fv(\001)1772
3362 y FF(7)p 1 0 0 TeXcolorrgb 1 w FB(\241)1868 3378
y Fv(\001)1868 3362 y FF(7)p 0 TeXcolorgray 15 w FB(\306)c
FF(10)p 1 0 0 TeXcolorrgb FB(\241)p FF(7)p 0 TeXcolorgray
1788 3487 a(2)r Fw(M)23 b FB(\306)14 b FF(3)1778 3633
y Fv(\001)1778 3617 y FF(2)s Fw(M)p 1778 3654 121 5 v
0 0 1 TeXcolorrgb 1818 3750 a Fv(\001)1818 3734 y FF(2)p
0 TeXcolorgray 1923 3673 a FB(\306)2002 3617 y FF(3)p
2002 3654 41 5 v 0 0 1 TeXcolorrgb 2002 3730 a(2)p 0
TeXcolorgray 1831 3837 a Fw(M)22 b FB(\306)14 b FF(1,)8
b(5)-246 4020 y(C)o(onclusion)20 b(:)d(la)g(solution)i(est)h
Fw(M)i FB(\306)15 b FF(1,)8 b(5.)-246 4097 y
SDict begin H.S end
 -246 4097
a -246 4097 a
SDict begin 12 H.A end
 -246 4097 a -246 4097 a
SDict begin [/View [/XYZ H.V]/Dest (exo.17) cvn /DEST pdfmark end
 -246 4097 a 0 TeXcolorgray
122 x FG(Ex)o(er)o(cice)14 b(17)p 0 TeXcolorgray 41 w
FF(Le)j(stade)g(des)g(Gones)h(compte)g(15)12 b(000)19
b(places)o(.)e(Il)f(y)g(a)j Fw(x)j FF(places)17 b(dans)g(les)g(vir)o
(ages)h(et)f(les)g(autr)o(es)g(dans)f(les)i(tr)q(ibunes)o(.)f(U)m(ne)g
(place)g(en)-246 4319 y(vir)o(age)h(co\373te)g(15)g FE(")g
FF(et)f(une)h(place)g(dans)g(les)g(tr)q(ibunes)g(co\373te)g(25)g
FE(")p FF(.)-246 4468 y(A)n(ujour)o(d)n('hui,)h(le)f(stade)f(est)h
(plein)h(et)e(la)h(r)o(ecette)f(est)h(de)g(295)12 b(000)20
b FE(")p FF(.)-246 4516 y
SDict begin H.S end
 -246 4516 a -246 4516 a
SDict begin 12 H.A end
 -246
4516 a -246 4516 a
SDict begin [/View [/XYZ H.V]/Dest (Item.29) cvn /DEST pdfmark end
 -246 4516 a 0 TeXcolorgray -141 4612
a FF(1.)p 0 TeXcolorgray 43 w(Il)d(y)f(a)k Fw(x)i FF(places)c(dans)g
(les)g(vir)o(ages)o(,)g(donc)f(\(15)8 b(000)i FB(\241)i
Fw(x)5 b FF(\))20 b(places)f(dans)e(les)h(tr)q(ibunes)o(.)g(La)f(r)o
(ecette)h(totale)g(en)g FE(")f FF(est)h(donc)1634 4794
y(15)10 b FB(\243)i Fw(x)j FB(\305)10 b FF(25)g FB(\243)g
FF(\(15)e(000)i FB(\241)i Fw(x)5 b FF(\).)-38 4977 y(C)o(omme)19
b(cette)f(r)o(ecette)f(est)h(295)12 b(000)21 b FE(")p
FF(,)e Fw(x)k FF(est)18 b(solution)h(de)e(l)o('\351quation)1542
5160 y(15)r Fw(x)e FB(\305)10 b FF(25\(15)e(000)i FB(\241)i
Fw(x)5 b FF(\))19 b FB(\306)c FF(295)8 b(000.)-246 5252
y
SDict begin H.S end
 -246 5252 a -246 5252 a
SDict begin 12 H.A end
 -246 5252 a -246 5252 a
SDict begin [/View [/XYZ H.V]/Dest (Item.30) cvn /DEST pdfmark end
 -246
5252 a 0 TeXcolorgray -141 5357 a FF(2.)p 0 TeXcolorgray
43 w(On)17 b(r\351sout)h(l)o('\351quation)i(de)d(la)g(question)i
(pr\351c\351dente)g(:)p 0 TeXcolorgray 1930 5895 a(8)p
0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.9) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1542 20 a FF(15)r Fw(x)15 b FB(\305)10 b FF(25\(15)e(000)i
FB(\241)i Fw(x)5 b FF(\))20 b FB(\306)14 b FF(295)8 b(000)1255
145 y(15)r Fw(x)15 b FB(\305)10 b FF(25)g FB(\243)g FF(15)e(000)i
FB(\305)g FF(2)q(5)g FB(\243)h FF(\()p FB(\241)r Fw(x)5
b FF(\))20 b FB(\306)14 b FF(295)8 b(000)1555 269 y(15)r
Fw(x)15 b FB(\305)10 b FF(375)e(000)i FB(\241)g FF(25)r
Fw(x)26 b FB(\306)14 b FF(295)8 b(000)1703 394 y FB(\241)p
FF(10)r Fw(x)15 b FB(\305)10 b FF(375)e(000)19 b FB(\306)14
b FF(295)8 b(000)1396 518 y FB(\241)p FF(10)r Fw(x)15
b FB(\305)1644 526 y Fv(\030)1729 505 y(\030)1812 485
y(\030)1831 480 y(\030)1652 518 y FF(375)8 b(000)p 1 0 0
TeXcolorrgb 5 w FB(\241)1952 526 y Fv(\030)2035 505 y(\030)2118
485 y(\030)2137 480 y(\030)1960 518 y FF(375)g(000)p
0 TeXcolorgray 18 w FB(\306)14 b FF(295)8 b(000)p 1 0 0
TeXcolorrgb FB(\241)p FF(375)g(000)p 0 TeXcolorgray 2029
643 a FB(\241)p FF(10)r Fw(x)21 b FB(\306)14 b(\241)p
FF(80)8 b(000)2011 751 y Fv(\030)2080 733 y(\030)p 0 0 1
TeXcolorrgb 2019 757 a FB(\241)p FF(10)p 0 TeXcolorgray
3 w Fw(x)p 2019 794 183 5 v 0 0 1 TeXcolorrgb 2034 864
a Fv(\030)2104 846 y(\030)2042 870 y FB(\241)p FF(10)p
0 TeXcolorgray 2226 813 a FB(\306)2305 757 y(\241)p FF(80)g(000)p
2305 794 266 5 v 0 0 1 TeXcolorrgb 2370 870 a FB(\241)p
FF(10)p 0 TeXcolorgray 2167 973 a Fw(x)20 b FB(\306)14
b FF(8000.)-38 1220 y(C)o(onclusion)19 b(:)f(il)f(y)g(a)i
Fw(x)h FB(\306)14 b FF(8)8 b(000)19 b(places)g(dans)e(les)h(vir)o(ages)
g(\(et)g(donc)f(7)12 b(000)19 b(dans)e(les)i(tr)q(ibunes\).)-246
1306 y
SDict begin H.S end
 -246 1306 a -246 1306 a
SDict begin 12 H.A end
 -246 1306 a -246 1306
a
SDict begin [/View [/XYZ H.V]/Dest (exo.18) cvn /DEST pdfmark end
 -246 1306 a 0 TeXcolorgray 114 x FG(Ex)o(er)o(cice)14
b(18)p 0 TeXcolorgray 598 1634 a Fw(A)j FB(\306)742 1578
y FF(5)p 742 1615 41 5 v 742 1691 a(6)803 1634 y FB(\305)878
1578 y FF(2)p 878 1615 V 878 1691 a(3)943 1634 y FB(\306)1022
1578 y FF(5)p 1022 1615 V 1022 1691 a(6)1083 1634 y FB(\305)1158
1578 y FF(2)10 b FB(\243)g FF(2)p 1158 1615 157 5 v 1158
1691 a(3)g FB(\243)g FF(2)1338 1634 y FB(\306)1417 1578
y FF(5)p 1417 1615 41 5 v 1417 1691 a(6)1478 1634 y FB(\305)1553
1578 y FF(4)p 1553 1615 V 1553 1691 a(6)1618 1634 y FB(\306)1697
1578 y FF(5)g FB(\305)g FF(4)p 1697 1615 157 5 v 1755
1691 a(6)1877 1634 y FB(\306)1956 1578 y FF(9)p 1956
1615 41 5 v 1956 1691 a(6)2021 1634 y FB(\306)2100 1578
y FF(3)g FB(\243)2215 1594 y Fv(\001)2215 1578 y FF(3)p
2100 1615 157 5 v 2100 1695 a(2)g FB(\243)2215 1711 y
Fv(\001)2215 1695 y FF(3)2281 1634 y FB(\306)2360 1578
y FF(3)p 2360 1615 41 5 v 2360 1691 a(2)593 1836 y Fw(B)22
b FB(\306)742 1780 y FF(3)p 742 1817 V 742 1893 a(4)803
1836 y FB(\241)878 1780 y FF(1)p 878 1817 V 878 1893
a(6)943 1836 y FB(\306)1022 1780 y FF(3)10 b FB(\243)g
FF(3)p 1022 1817 157 5 v 1022 1893 a(4)g FB(\243)g FF(3)1198
1836 y FB(\241)1273 1780 y FF(1)g FB(\243)g FF(2)p 1273
1817 V 1273 1893 a(6)g FB(\243)g FF(2)1454 1836 y FB(\306)1553
1780 y FF(9)p 1533 1817 82 5 v 1533 1893 a(12)1634 1836
y FB(\241)1729 1780 y FF(2)p 1709 1817 V 1709 1893 a(12)1814
1836 y FB(\306)1893 1780 y FF(9)g FB(\241)g FF(2)p 1893
1817 157 5 v 1931 1893 a(12)2074 1836 y FB(\306)2173
1780 y FF(7)p 2153 1817 82 5 v 2153 1893 a(12)590 2034
y Fw(C)23 b FB(\306)14 b FF(2)c FB(\305)858 1978 y FF(1)p
858 2015 41 5 v 858 2091 a(5)923 2034 y FB(\306)1002
1978 y FF(2)p 1002 2015 V 1002 2091 a(1)1063 2034 y FB(\305)1138
1978 y FF(1)p 1138 2015 V 1138 2091 a(5)1202 2034 y FB(\306)1281
1978 y FF(2)g FB(\243)g FF(5)p 1281 2015 157 5 v 1281
2091 a(1)g FB(\243)g FF(5)1458 2034 y FB(\305)1533 1978
y FF(1)p 1533 2015 41 5 v 1533 2091 a(5)1598 2034 y FB(\306)1677
1978 y FF(10)p 1677 2015 82 5 v 1697 2091 a(5)1778 2034
y FB(\305)1853 1978 y FF(1)p 1853 2015 41 5 v 1853 2091
a(5)1918 2034 y FB(\306)1997 1978 y FF(11)p 1997 2015
82 5 v 2017 2091 a(5)585 2243 y Fw(D)20 b FB(\306)763
2187 y FF(3)p 742 2224 V 742 2300 a(10)844 2243 y FB(\243)919
2187 y FF(5)p 919 2224 41 5 v 919 2300 a(6)983 2243 y
FB(\306)1083 2187 y FF(3)10 b FB(\243)g FF(5)p 1062 2224
197 5 v 1062 2300 a(10)g FB(\243)g FF(6)1283 2243 y FB(\306)1362
2187 y FF(15)p 1362 2224 82 5 v 1362 2300 a(60)1468 2243
y FB(\306)1596 2198 y Fv(\032)1611 2187 y(\032)-89 b
FF(15)p 1547 2224 197 5 v 1539 2311 a Fv(\032)1553 2300
y(\032)g FF(15)11 b FB(\243)f FF(4)1768 2243 y FB(\306)1847
2187 y FF(1)p 1847 2224 41 5 v 1847 2300 a(4)596 2457
y Fw(E)21 b FB(\306)14 b FF(2)c FB(\243)858 2401 y FF(5)p
858 2437 V 858 2514 a(6)919 2457 y FB(\241)994 2401 y
FF(4)p 994 2437 V 994 2514 a(9)1059 2457 y FB(\306)1138
2401 y FF(2)g FB(\243)g FF(5)p 1138 2437 157 5 v 1196
2514 a(6)1314 2457 y FB(\241)1389 2401 y FF(4)p 1389
2437 41 5 v 1389 2514 a(9)1454 2457 y FB(\306)1533 2401
y FF(10)g FB(\243)g FF(3)p 1533 2437 197 5 v 1553 2514
a(6)g FB(\243)g FF(3)1750 2457 y FB(\241)1825 2401 y
FF(4)g FB(\243)g FF(2)p 1825 2437 157 5 v 1825 2514 a(9)g
FB(\243)g FF(2)2005 2457 y FB(\306)2084 2401 y FF(30)p
2084 2437 82 5 v 2084 2514 a(18)2186 2457 y FB(\241)2281
2401 y FF(8)p 2261 2437 V 2261 2514 a(18)2366 2457 y
FB(\306)2445 2401 y FF(30)g FB(\241)g FF(8)p 2445 2437
197 5 v 2503 2514 a(18)2666 2457 y FB(\306)2745 2401
y FF(22)p 2745 2437 82 5 v 2745 2514 a(18)2850 2457 y
FB(\306)2929 2401 y FF(11)g FB(\243)3084 2417 y Fv(\001)3084
2401 y FF(2)p 2929 2437 197 5 v 2950 2518 a(9)g FB(\243)3065
2534 y Fv(\001)3065 2518 y FF(2)3150 2457 y FB(\306)3230
2401 y FF(11)p 3230 2437 82 5 v 3250 2514 a(9)595 2675
y Fw(F)24 b FB(\306)14 b FF(4)c FB(\241)g FF(3)g FB(\243)974
2618 y FF(5)p 974 2655 41 5 v 974 2732 a(6)1039 2675
y FB(\306)1118 2618 y FF(4)p 1118 2655 V 1118 2732 a(1)1178
2675 y FB(\241)1253 2618 y FF(3)g FB(\243)g FF(5)p 1253
2655 157 5 v 1311 2732 a(6)1434 2675 y FB(\306)1513 2618
y FF(4)g FB(\243)g FF(6)p 1513 2655 V 1513 2732 a(1)g
FB(\243)g FF(6)1689 2675 y FB(\241)1764 2618 y FF(15)p
1764 2655 82 5 v 1785 2732 a(6)1870 2675 y FB(\306)1949
2618 y FF(24)p 1949 2655 V 1969 2732 a(6)2050 2675 y
FB(\241)2125 2618 y FF(15)p 2125 2655 V 2145 2732 a(6)2230
2675 y FB(\306)2309 2618 y FF(24)g FB(\241)g FF(15)p
2309 2655 238 5 v 2408 2732 a(6)2571 2675 y FB(\306)2650
2618 y FF(9)p 2650 2655 41 5 v 2650 2732 a(6)2715 2675
y FB(\306)2794 2618 y FF(3)g FB(\243)2909 2634 y Fv(\001)2909
2618 y FF(3)p 2794 2655 157 5 v 2794 2735 a(2)g FB(\243)2909
2752 y Fv(\001)2909 2735 y FF(3)2974 2675 y FB(\306)3053
2618 y FF(3)p 3053 2655 41 5 v 3053 2732 a(2)589 2887
y Fw(G)20 b FB(\306)763 2831 y FF(6)p 742 2868 82 5 v
742 2944 a(10)844 2887 y FB(\243)919 2831 y FF(15)p 919
2868 V 939 2944 a(8)1024 2887 y FB(\306)1103 2831 y FF(6)10
b FB(\243)g FF(15)p 1103 2868 197 5 v 1103 2944 a(10)g
FB(\243)g FF(8)1324 2887 y FB(\306)1403 2831 y FF(90)p
1403 2868 82 5 v 1403 2944 a(80)1508 2887 y FB(\306)1587
2831 y FF(9)g FB(\243)1694 2842 y Fv(\032)1709 2831 y(\032)-90
b FF(10)p 1587 2868 197 5 v 1587 2944 a(8)10 b FB(\243)1694
2955 y Fv(\032)1709 2944 y(\032)-90 b FF(10)1808 2887
y FB(\306)1887 2831 y FF(9)p 1887 2868 41 5 v 1887 2944
a(8)581 3105 y Fw(H)23 b FB(\306)732 2995 y Fo(\265)777
3049 y FF(2)p 777 3086 V 777 3162 a(3)827 2995 y Fo(\266)861
3017 y FD(2)910 3105 y FB(\306)989 3049 y FF(2)p 989
3086 V 989 3162 a(3)1050 3105 y FB(\243)1125 3049 y FF(2)p
1125 3086 V 1125 3162 a(3)1190 3105 y FB(\306)1269 3049
y FF(2)10 b FB(\243)g FF(2)p 1269 3086 157 5 v 1269 3162
a(3)g FB(\243)g FF(3)1449 3105 y FB(\306)1529 3049 y
FF(4)p 1529 3086 41 5 v 1529 3162 a(9)-246 3259 y
SDict begin H.S end
 -246
3259 a -246 3259 a
SDict begin 12 H.A end
 -246 3259 a -246 3259 a
SDict begin [/View [/XYZ H.V]/Dest (exo.19) cvn /DEST pdfmark end
 -246 3259
a 0 TeXcolorgray 81 x FG(Ex)o(er)o(cice)k(19)p 0 TeXcolorgray
41 w FF(Le)k(p\350r)o(e)f(donne)h(le)g(tiers)g(de)f(la)g(somme)i
(n\351cessair)o(e)f(et)g(le)g(petit-fr\350r)o(e)g(donne)g(le)g(quar)q
(t,)f(donc)g(\340)g(eux)h(deux)g(ils)g(en)f(donnent)1324
3500 y(1)p 1324 3537 41 5 v 1324 3613 a(3)1384 3556 y
FB(\305)1460 3500 y FF(1)p 1460 3537 V 1460 3613 a(4)1524
3556 y FB(\306)1603 3500 y FF(1)10 b FB(\243)g FF(4)p
1603 3537 157 5 v 1603 3613 a(3)g FB(\243)g FF(4)1780
3556 y FB(\305)1855 3500 y FF(1)g FB(\243)g FF(3)p 1855
3537 V 1855 3613 a(4)g FB(\243)g FF(3)2035 3556 y FB(\306)2135
3500 y FF(4)p 2114 3537 82 5 v 2114 3613 a(12)2216 3556
y FB(\305)2311 3500 y FF(3)p 2291 3537 V 2291 3613 a(12)2396
3556 y FB(\306)2495 3500 y FF(7)p 2475 3537 V 2475 3613
a(12)2566 3556 y(.)-246 3777 y(Ainsi)18 b(il)f(r)o(este)214
3744 y FD(5)p 198 3757 62 5 v 198 3805 a(12)286 3777
y FF(du)g(pr)q(ix)g(\340)g(payer)f(\340)h(la)g(charge)f(du)h(gr)o
(and-fr\350r)o(e)o(.)f(Or)g(on)i(sait)f(que)h(le)f(gr)o(and)f(fr\350r)o
(e)h(a)g(donn\351)g(10)h Fz(N)p FF(,)f(donc)f(le)i(pr)q(ix)f(du)f(livr)
o(e)i(\(soit)4074 3744 y FD(12)p 4074 3757 V 4074 3805
a(12)-246 3876 y FF(du)g(pr)q(ix\))e(est)i(\351gal)g(\340)1419
3954 y(12)p 1419 3991 82 5 v 1439 4068 a(5)1520 4011
y FB(\243)10 b FF(10)15 b FB(\306)1759 3954 y FF(12)10
b FB(\243)g FF(10)p 1759 3991 238 5 v 1858 4068 a(5)2021
4011 y FB(\306)2100 3954 y FF(120)p 2100 3991 122 5 v
2141 4068 a(5)2246 4011 y FB(\306)k FF(24)k Fz(N)p FF(.)-246
4247 y FG(R)o(emarque)c(:)j FF(Il)g(peut)h(\352tr)o(e)f(agr\351able)g
(de)g(pr\351senter)h(les)g(choses)g(avec)f(le)h(sch\351ma)g(ci-dessous)
g(:)g(chaque)f(petite)i(tr)o(anche)f(r)o(epr\351sente)3827
4215 y FD(1)p 3812 4228 62 5 v 3812 4276 a(12)3901 4247
y FF(du)f(pr)q(ix)-246 4356 y(du)g(livr)o(e)g(et)g(vaut)g(2)h
Fz(N)p FF(.)e(Ainsi,)i(les)776 4323 y FD(5)p 761 4336
V 761 4385 a(12)849 4356 y FF(du)f(pr)q(ix)g(pay\351)f(\(c)n
('est-\340-dir)o(e)h(le)g(pr)q(ix)g(pay\351)g(par)f(le)i(gr)o
(and-fr\350r)o(e\))d(valent)j(5)9 b FB(\243)g FF(2)15
b FB(\306)f FF(10)k Fz(N)9 b FF(;)16 b(et)h(la)g(valeur)g(totale)h(du)
-246 4456 y(livr)o(e)g(est)g(12)10 b FB(\243)g FF(2)16
b FB(\306)e FF(24)k Fz(N)p FF(.)p 0 TeXcolorgray 0 TeXcolorgray
455 5157 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 360.21182 a add def
/d 0.0 a add neg def /h 73.40813 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 455 5157 a 998 5445 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  [ -56.90549 85.35823
85.35823 85.35823 85.35823 56.90549 -56.90549 56.90549  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 0.8 1  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 284.52744 56.90549 -56.90549 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 284.52744 85.35823 284.52744 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -56.90549 85.35823 284.52744 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -56.90549 56.90549 -56.90549 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -28.45274 56.90549 -28.45274 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 56.90549 0.0 85.35823   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 56.90549 28.45274 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 56.90549 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 56.90549 85.35823 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 56.90549 113.81097 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 56.90549 142.26372 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 56.90549 170.71646 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 56.90549 199.1692 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 227.62195 56.90549 227.62195 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07469 56.90549 256.07469 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 85.35823 56.90549 -56.90549
56.90549   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 85.35823 85.35823 85.35823
56.90549   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -56.90549 85.35823 85.35823
85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -56.90549 56.90549 -56.90549
85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 998 5445 a
tx@Dict begin { -32.72047 98.44667 } PutCoor PutBegin  end
 998
5445 a 0 0 1 TeXcolorrgb 57 x FF(par)q(t)f(du)g(gr)o(and)g(fr\350r)o(e)
p FB(\306)d FF(10)k Fz(N)p 0 TeXcolorgray 998 5445 a
tx@Dict begin  PutEnd  end

998 5445 a 998 5445 a
tx@Dict begin { -50.07666 75.11522 } PutCoor PutBegin  end
 998 5445 a 57 x FF(2)g Fz(N)998
5445 y
tx@Dict begin  PutEnd  end
 998 5445 a 998 5445 a
tx@Dict begin { 42.67911 51.7842 } PutCoor PutBegin  end
 998 5445 a 57 x FF(valeur)g(totale)g(du)f
(livr)o(e)p FB(\306)e FF(24)j Fz(N)998 5445 y
tx@Dict begin  PutEnd  end
 998 5445
a 3445 5157 a
currentpoint initclip moveto
 3445 5157 a -246 5240 a
SDict begin H.S end
 -246 5240 a -246
5240 a
SDict begin 12 H.A end
 -246 5240 a -246 5240 a
SDict begin [/View [/XYZ H.V]/Dest (exo.20) cvn /DEST pdfmark end
 -246 5240 a 0 TeXcolorgray
1930 5895 a FF(9)p 0 TeXcolorgray eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.10) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -246 -163 a FG(Ex)o(er)o(cice)14 b(20)p
0 TeXcolorgray 669 46 a Fw(A)j FB(\306)813 -10 y FF(2)853
-40 y FD(15)930 -10 y FB(\243)10 b FF(3)1035 -40 y FD(6)p
813 27 257 5 v 813 103 a FF(2)853 79 y FD(12)930 103
y FB(\243)g FF(3)1035 79 y FD(4)1094 46 y FB(\306)1174
-10 y FF(2)1214 -40 y FD(15)p 1174 27 107 5 v 1174 103
a FF(2)1214 79 y FD(12)1300 46 y FB(\243)1375 -10 y FF(3)1415
-40 y FD(6)p 1375 27 76 5 v 1375 103 a FF(3)1415 79 y
FD(4)1475 46 y FB(\306)k FF(2)1584 12 y FD(15)p FC(\241)p
FD(12)1763 46 y FB(\243)c FF(3)1868 12 y FD(6)p FC(\241)p
FD(4)1991 46 y FB(\306)k FF(2)2100 12 y FD(3)2146 46
y FB(\243)c FF(3)2251 12 y FD(2)2300 46 y FB(\306)15
b FF(8)10 b FB(\243)g FF(9)15 b FB(\306)f FF(72)664 262
y Fw(B)22 b FB(\306)813 206 y FF(5)853 176 y FD(3)899
206 y FB(\243)10 b FF(5)1004 176 y FD(6)p 813 243 227
5 v 889 319 a FF(5)929 295 y FD(7)1064 262 y FB(\306)1143
206 y FF(5)1183 176 y FD(3)p FC(\305)p FD(6)p 1143 243
149 5 v 1179 319 a FF(5)1219 295 y FD(7)1315 262 y FB(\306)1394
206 y FF(5)1434 176 y FD(9)p 1394 243 76 5 v 1394 319
a FF(5)1434 295 y FD(7)1494 262 y FB(\306)k FF(5)1603
228 y FD(9)p FC(\241)p FD(7)1725 262 y FB(\306)g FF(5)1834
228 y FD(2)1884 262 y FB(\306)g FF(25)661 478 y Fw(C)23
b FB(\306)871 422 y FF(2)911 391 y FD(18)p 813 458 223
5 v 813 535 a FF(8)10 b FB(\243)g FF(2)968 511 y FD(12)1059
478 y FB(\306)1214 422 y FF(2)1254 391 y FD(18)p 1139
458 257 5 v 1139 535 a FF(2)1179 511 y FD(3)1224 535
y FB(\243)g FF(2)1329 511 y FD(12)1420 478 y FB(\306)1535
422 y FF(2)1575 391 y FD(18)p 1499 458 179 5 v 1499 535
a FF(2)1539 511 y FD(3)p FC(\305)p FD(12)1702 478 y FB(\306)1781
422 y FF(2)1821 391 y FD(18)p 1781 458 107 5 v 1781 535
a FF(2)1821 511 y FD(15)1911 478 y FB(\306)15 b FF(2)2021
443 y FD(18)p FC(\241)p FD(15)2204 478 y FB(\306)f FF(2)2313
443 y FD(3)2363 478 y FB(\306)g FF(8)656 694 y Fw(D)20
b FB(\306)889 637 y FF(6)929 607 y FD(6)p 813 674 227
5 v 813 750 a FF(2)853 726 y FD(5)899 750 y FB(\243)10
b FF(3)1004 726 y FD(4)1064 694 y FB(\306)1143 637 y
FF(\(2)g FB(\243)g FF(3\))1352 607 y FD(6)p 1143 674
245 5 v 1152 750 a FF(2)1192 726 y FD(5)1238 750 y FB(\243)g
FF(3)1343 726 y FD(4)1412 694 y FB(\306)1491 637 y FF(2)1531
607 y FD(6)1576 637 y FB(\243)g FF(3)1681 607 y FD(6)p
1491 674 227 5 v 1491 750 a FF(2)1531 726 y FD(5)1576
750 y FB(\243)g FF(3)1681 726 y FD(4)1741 694 y FB(\306)1820
637 y FF(2)1860 607 y FD(6)p 1820 674 76 5 v 1820 750
a FF(2)1860 726 y FD(5)1916 694 y FB(\243)1991 637 y
FF(3)2031 607 y FD(6)p 1991 674 V 1991 750 a FF(3)2031
726 y FD(4)2090 694 y FB(\306)15 b FF(2)2200 659 y FD(6)p
FC(\241)p FD(5)2318 694 y FB(\243)10 b FF(3)2423 659
y FD(6)p FC(\241)p FD(4)2545 694 y FB(\306)k FF(2)2654
659 y FD(1)2700 694 y FB(\243)c FF(3)2805 659 y FD(2)2855
694 y FB(\306)k FF(2)c FB(\243)g FF(9)15 b FB(\306)f
FF(18)666 929 y Fw(E)22 b FB(\306)813 803 y Fo(\241)843
868 y FF(10)923 837 y FD(4)959 803 y Fo(\242)989 823
y FD(3)p 813 910 211 5 v 860 986 a FF(10)940 962 y FD(8)1048
929 y FB(\306)1127 873 y FF(10)1207 843 y FD(4)p FC(\243)p
FD(3)p 1127 910 189 5 v 1163 986 a FF(10)1243 962 y FD(8)1339
929 y FB(\306)1419 873 y FF(10)1499 843 y FD(12)p 1419
910 147 5 v 1434 986 a FF(10)1514 962 y FD(8)1590 929
y FB(\306)14 b FF(10)1739 895 y FD(12)p FC(\241)p FD(8)1892
929 y FB(\306)g FF(10)2041 895 y FD(4)2092 929 y FB(\306)g
FF(10)8 b(000)666 1145 y Fw(F)24 b FB(\306)813 1089 y
FF(4)853 1058 y FD(5)p 813 1125 76 5 v 813 1202 a FF(8)853
1178 y FD(3)913 1145 y FB(\306)992 1089 y FF(\(2)1059
1058 y FD(2)1094 1089 y FF(\))1121 1058 y FD(5)p 992
1125 164 5 v 992 1202 a FF(\(2)1059 1178 y FD(3)1094
1202 y FF(\))1121 1178 y FD(3)1180 1145 y FB(\306)1259
1089 y FF(2)1299 1058 y FD(2)p FC(\243)p FD(5)p 1259
1125 149 5 v 1259 1202 a FF(2)1299 1178 y FD(3)p FC(\243)p
FD(3)1431 1145 y FB(\306)1510 1089 y FF(2)1550 1058 y
FD(10)p 1510 1125 107 5 v 1526 1202 a FF(2)1566 1178
y FD(9)1641 1145 y FB(\306)14 b FF(2)1750 1110 y FD(10)p
FC(\241)p FD(9)1903 1145 y FB(\306)g FF(2)660 1370 y
Fw(G)20 b FB(\306)813 1314 y FF(10)893 1283 y FD(10)970
1314 y FB(\305)10 b FF(10)1115 1283 y FD(8)p 813 1350
338 5 v 924 1427 a FF(10)1004 1403 y FD(7)1175 1370 y
FB(\306)1255 1314 y FF(10)1335 1283 y FD(10)p 1255 1350
147 5 v 1270 1427 a FF(10)1350 1403 y FD(7)1421 1370
y FB(\305)1496 1314 y FF(10)1576 1283 y FD(8)p 1496 1350
116 5 v 1496 1427 a FF(10)1576 1403 y FD(7)1637 1370
y FB(\306)k FF(10)1786 1335 y FD(10)p FC(\241)p FD(7)1935
1370 y FB(\305)c FF(10)2080 1335 y FD(8)p FC(\241)p FD(7)2203
1370 y FB(\306)k FF(10)2352 1335 y FD(3)2398 1370 y FB(\305)c
FF(10)2543 1335 y FD(1)2594 1370 y FB(\306)k FF(1)8 b(000)i
FB(\305)g FF(1)17 b FB(\306)d FF(1)8 b(001)-246 1502
y
SDict begin H.S end
 -246 1502 a -246 1502 a
SDict begin 12 H.A end
 -246 1502 a -246 1502 a
SDict begin [/View [/XYZ H.V]/Dest (exo.21) cvn /DEST pdfmark end
 -246
1502 a 0 TeXcolorgray 85 x FG(Ex)o(er)o(cice)14 b(21)p
0 TeXcolorgray 41 w FF(P)n(our)26 b(r)o(anger)g(les)h(nombr)o(es)g(par)
f(or)o(dr)o(e)f(croissant,)h(on)h(les)g(\351cr)q(it)f(sous)h(for)q(me)g
(d\351cimale)o(,)g(en)g(\351cr)q(ivant)f(\340)g(chaque)h(fois)h(quatr)o
(e)-246 1687 y(chiffr)o(es)18 b(apr\350s)g(la)g(virgule)f(pour)h
(simpli\002er)h(les)f(compar)o(aisons)o(.)-246 1821 y(On)23
b(r)o(appelle)i(avant)e(cela)h(que)f(10)797 1791 y FC(\241)p
FD(3)895 1821 y FB(\306)1017 1765 y FF(1)p 980 1802 116
5 v 980 1878 a(10)1060 1854 y FD(3)1125 1821 y FB(\306)1271
1765 y FF(1)p 1210 1802 163 5 v 1210 1878 a(1000)1402
1821 y FB(\306)36 b FF(0,)8 b(00)1493 1866 y Fo(|)p 1527
1866 7 10 v 7 w({z)p 1602 1866 V 7 w(})1477 1945 y FD(3)k(z\351ros)1667
1821 y FF(1,)24 b(donc)f(multiplier)i(un)f(nombr)o(e)f(par)f(10)2950
1791 y FC(\241)p FD(3)3051 1821 y FF(r)o(evient)i(\340)f(d\351caler)g
(la)g(virgule)g(de)g(3)-246 2030 y(r)o(angs)18 b(vers)f(la)h(gauche)f
(\(le)h(r)o(aisonnement)h(est)f(le)g(m\352me)h(pour)f(10)1765
2000 y FC(\241)p FD(2)1842 2030 y FF(\).)645 2304 y Fw(A)f
FB(\306)d FF(35,)8 b(4)i FB(\243)g FF(10)1082 2270 y
FC(\241)p FD(3)2969 2304 y FB(\306)k FF(0,)8 b(0354)639
2429 y Fw(B)23 b FB(\306)14 b FF(0,)8 b(034)2002 b FB(\306)14
b FF(0,)8 b(0340)637 2565 y Fw(C)23 b FB(\306)14 b FF(3,)8
b(6)i FB(\243)g FF(10)1042 2531 y FC(\241)p FD(2)1135
2565 y FB(\306)15 b FF(0,)8 b(036)1576 b FB(\306)14 b
FF(0,)8 b(0360)631 2736 y Fw(D)21 b FB(\306)789 2680
y FF(355)p 789 2716 122 5 v 792 2793 a(10)872 2769 y
FD(4)935 2736 y FB(\306)1058 2680 y FF(355)p 1014 2716
211 5 v 1014 2793 a(10)8 b(000)2969 2736 y FB(\306)14
b FF(0,)8 b(0355)642 2949 y Fw(E)22 b FB(\306)809 2893
y FF(7)p 789 2930 82 5 v 789 3006 a(60)890 2949 y FB(\243)985
2893 y FF(3)p 965 2930 V 965 3006 a(10)1070 2949 y FB(\306)1190
2893 y FF(7)10 b FB(\243)g FF(3)p 1149 2930 238 5 v 1149
3006 a(60)g FB(\243)g FF(10)1411 2949 y FB(\306)1588
2893 y FF(7)g FB(\243)1703 2909 y Fv(\001)1703 2893 y
FF(3)p 1490 2930 354 5 v 1490 3010 a(20)g FB(\243)1645
3026 y Fv(\001)1645 3010 y FF(3)i FB(\243)e FF(10)1867
2949 y FB(\306)1987 2893 y FF(7)p 1946 2930 122 5 v 1946
3006 a(200)2969 2949 y FB(\306)k FF(0,)8 b(0350)-246
3151 y(C)o(onclusion)20 b(:)d Fw(B)22 b FB(\307)14 b
Fw(E)22 b FB(\307)e Fw(A)d FB(\307)d Fw(D)21 b FB(\307)12
b Fw(C)d FF(.)-246 3217 y
SDict begin H.S end
 -246 3217 a -246 3217 a
SDict begin 12 H.A end
 -246
3217 a -246 3217 a
SDict begin [/View [/XYZ H.V]/Dest (exo.22) cvn /DEST pdfmark end
 -246 3217 a 0 TeXcolorgray 128 x FG(Ex)o(er)o(cice)
14 b(22)p 0 TeXcolorgray 41 w FF(A)-5 b(vant)22 b(de)f(commencer)-5
b(,)23 b(il)e(est)h(utile)h(de)e(se)g(r)o(appeler)i(que)e(10)i(cm=1)e
(dm)9 b(;)21 b(et)h(que)f(1)h Fy(`)c FB(\306)g FF(1)j(dm)3090
3313 y FD(3)3125 3345 y FF(.)g(A)n(utr)o(ement)h(dit,)f(un)h(litr)o(e)f
(est)h(le)-246 3445 y(volume)f(d)n('un)f(cube)f(qui)h(mesur)o(e)f(1)h
(dm)f(sur)h(1)f(dm)g(sur)h(1)f(dm,)h(ou)f(encor)o(e)g(10)h(cm)g(sur)f
(10)h(cm)f(sur)h(10)g(cm)f(\(la)g(\002gur)o(e)f(ci-dessous)j(n)-6
b('est)20 b(bien)f(s\373r)-246 3545 y(pas)f(\340)f(l)o('\351chelle\).)p
0 TeXcolorgray 0 TeXcolorgray 1260 4736 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 166.1639 a add def
/d 0.0 a add neg def /h 131.45152 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1260 4736 a
1596 4472 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 56.90549 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 56.90549 56.90549 56.90549   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 0.0 0.0 56.90549   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 85.35823 0.0 56.90549   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 28.45274 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 56.90549 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 28.45274 56.90549 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 28.45274 85.35823 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1596 4472 a
tx@Dict begin { 16.50264 -4.55254 } PutCoor PutBegin  end
 1596 4472 a 57 x FF(1)g(dm)1596 4472 y
tx@Dict begin  PutEnd  end
 1596
4472 a 1596 4472 a
tx@Dict begin { -28.45274 32.4361 } PutCoor PutBegin  end
 1596 4472 a 57 x FF(1)g(dm)1596 4472
y
tx@Dict begin  PutEnd  end
 1596 4472 a 1596 4472 a
tx@Dict begin { 76.82231 14.79555 } PutCoor PutBegin  end
 1596 4472 a 57 x FF(1)g(dm)1596
4472 y
tx@Dict begin  PutEnd  end
 1596 4472 a 1596 4472 a
tx@Dict begin { 26.17647 35.28156 } PutCoor PutBegin  end
 1596 4472 a 57 x FF(1)g
Fy(`)1596 4472 y
tx@Dict begin  PutEnd  end
 1596 4472 a 2640 4736 a
currentpoint initclip moveto
 2640 4736 a
-246 4958 a FF(On)g(r)o(emplit)h(d)n('eau)g(un)f(aquar)q(ium)h(r)o
(ectangulair)o(e)e(dont)h(la)h(largeur)e(est)i(80)f(cm,)h(la)f
(profondeur)g(30)h(cm)f(et)h(la)f(hauteur)h(40)g(cm.)f(On)g(dispose)h
(d)n('un)-246 5057 y(robinet)f(dont)h(le)g(d\351bit)f(est)h(de)f(6)h
(litr)o(es)g(par)f(minute)o(.)-246 5101 y
SDict begin H.S end
 -246 5101 a
-246 5101 a
SDict begin 12 H.A end
 -246 5101 a -246 5101 a
SDict begin [/View [/XYZ H.V]/Dest (Item.31) cvn /DEST pdfmark end
 -246 5101 a 0 TeXcolorgray
-141 5197 a FF(1.)p 0 TeXcolorgray 43 w(Les)h(dimensions)h(de)e(l)o
('aquar)q(ium)i(sont)f(:)1025 5371 y(largeur)c FB(\306)g
FF(8)k(dm,)155 b(profondeur)14 b FB(\306)g FF(3)k(dm,)155
b(hauteur)15 b FB(\306)f FF(4)k(dm,)-38 5546 y(donc)f(son)h(volume)h
(est)1795 5646 y(8)10 b FB(\243)g FF(3)g FB(\243)g FF(4)16
b FB(\306)e FF(96)19 b Fy(`)p FF(.)p 0 TeXcolorgray 1909
5895 a(10)p 0 TeXcolorgray eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.11) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 994 926
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 255.20395 a add def
/d 0.0 a add neg def /h 141.11893 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 994 926 a 910 946 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.39554 21.33955 42.67911 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.39554 106.69777 213.39554 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.67911 106.69777 42.67911 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.39554 106.69777 42.67911 106.69777
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35822 128.03732 42.67911 106.69777
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 128.03732 85.35822 128.03732
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 128.03732 213.39554 106.69777
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 42.67911 213.39554 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 128.03732 256.07465 42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35822 42.67911 85.35822 128.03732
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35822 42.67911 42.67911 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 42.67911 85.35822 42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 910 946 a
tx@Dict begin { 122.08083 17.51845 } PutCoor PutBegin  end
 910 946 a 57 x FF(8)18
b(dm)910 946 y
tx@Dict begin  PutEnd  end
 910 946 a 910 946 a
tx@Dict begin { 19.8912 68.34283 } PutCoor PutBegin  end
 910 946 a 57 x FF(4)g(dm)910
946 y
tx@Dict begin  PutEnd  end
 910 946 a 910 946 a
tx@Dict begin { 236.70636 31.57625 } PutCoor PutBegin  end
 910 946 a 57 x FF(3)g(dm)910
946 y
tx@Dict begin  PutEnd  end
 910 946 a 3113 926 a
currentpoint initclip moveto
 3113 926 a -246 966 a
SDict begin H.S end
 -246
966 a -246 966 a
SDict begin 12 H.A end
 -246 966 a -246 966 a
SDict begin [/View [/XYZ H.V]/Dest (Item.32) cvn /DEST pdfmark end
 -246 966 a 0 TeXcolorgray
-141 1079 a FF(2.)p 0 TeXcolorgray 43 w(On)i(peut)i(se)f(passer)g(d)n
('un)g(tableau)g(de)f(propor)q(tionnalit\351)i(:)e(le)h(d\351bit)g(du)f
(robinet)g(est)h(de)f(6)h Fy(`)p FF(/min,)h(donc)e(il)h(faut)g(96)11
b FB(\245)g FF(6)19 b FB(\306)f FF(16)j(min)g(pour)-38
1178 y(r)o(emplir)d(les)g(96)g Fy(`)f FF(de)g(l)o('aquar)q(ium.)-246
1260 y
SDict begin H.S end
 -246 1260 a -246 1260 a
SDict begin 12 H.A end
 -246 1260 a -246 1260
a
SDict begin [/View [/XYZ H.V]/Dest (exo.23) cvn /DEST pdfmark end
 -246 1260 a 0 TeXcolorgray 113 x FG(Ex)o(er)o(cice)d(23)p
0 TeXcolorgray 41 w FF(On)j(utilise)j(les)e(identit\351s)h(r)o
(emarquables)e(pour)h(calculer)f(:)464 1648 y(99)544
1614 y FD(2)594 1648 y FB(\306)d FF(\(100)c FB(\241)g
FF(1\))952 1614 y FD(2)1003 1648 y FB(\306)k FF(100)1192
1614 y FD(2)1239 1648 y FB(\241)c FF(2)g FB(\243)g FF(100)g
FB(\243)g FF(1)g FB(\305)g FF(1)1769 1614 y FD(2)1822
1648 y FB(\306)k FF(10)8 b(000)i FB(\241)g FF(200)g FB(\305)g
FF(1)20 b FB(\306)14 b FF(9)8 b(801)687 b(\(IR)17 b(n\2602\))423
1785 y(103)543 1750 y FD(2)594 1785 y FB(\306)d FF(\(100)c
FB(\305)g FF(3\))952 1750 y FD(2)1003 1785 y FB(\306)k
FF(100)1192 1750 y FD(2)1239 1785 y FB(\305)c FF(2)g
FB(\243)g FF(100)g FB(\243)g FF(3)g FB(\305)g FF(3)1769
1750 y FD(2)1822 1785 y FB(\306)k FF(10)8 b(000)i FB(\305)g
FF(600)g FB(\305)g FF(9)20 b FB(\306)14 b FF(10)8 b(609)647
b(\(IR)17 b(n\2601\))342 1921 y(71)10 b FB(\243)g FF(69)17
b FB(\306)d FF(\(70)c FB(\305)g FF(1\)\(70)g FB(\241)g
FF(1\))17 b FB(\306)d FF(70)1327 1886 y FD(2)1373 1921
y FB(\241)c FF(1)1478 1886 y FD(2)1528 1921 y FB(\306)k
FF(4)8 b(900)i FB(\241)g FF(1)17 b FB(\306)d FF(4)8 b(899)1219
b(\(IR)17 b(n\2603\))395 2057 y(2,)8 b(05)543 2023 y
FD(2)594 2057 y FB(\306)14 b FF(\(2)c FB(\305)g FF(0,)e(05\))980
2023 y FD(2)1031 2057 y FB(\306)15 b FF(2)1141 2023 y
FD(2)1186 2057 y FB(\305)10 b FF(2)g FB(\243)g FF(2)g
FB(\243)g FF(0,)e(05)i FB(\305)g FF(0,)e(05)1852 2023
y FD(2)1907 2057 y FB(\306)14 b FF(4)c FB(\305)g FF(0,)e(2)i
FB(\305)g FF(0,)e(0025)20 b FB(\306)14 b FF(4,)8 b(2025)534
b(\(IR)17 b(n\2601\))286 2193 y(4,)8 b(3)i FB(\243)g
FF(3,)e(7)17 b FB(\306)d FF(\(4)c FB(\305)g FF(0,)e(3\)\(4)i
FB(\241)g FF(0,)e(3\))18 b FB(\306)c FF(4)1344 2159 y
FD(2)1389 2193 y FB(\241)c FF(0,)e(3)1562 2159 y FD(2)1613
2193 y FB(\306)14 b FF(16)c FB(\241)g FF(0,)e(09)18 b
FB(\306)c FF(15,)8 b(91)1093 b(\(IR)17 b(n\2603\))-246
2369 y FG(R)o(emarque)i(:)j FF(C)o(omment)i(calculer)f(0,)8
b(05)1004 2338 y FD(2)1063 2369 y FF(de)22 b(t\352te)9
b(?)22 b(C)o(omme)i(0,)8 b(05)1807 2338 y FD(2)1863 2369
y FB(\306)19 b FF(0,)8 b(05)k FB(\243)g FF(0,)c(05)26
b(et)d(que)f(0,)8 b(05)24 b(a)e(deux)h(chiffr)o(es)g(apr\350s)f(la)h
(virgule)o(,)f(0,)8 b(05)4000 2338 y FD(2)4059 2369 y
FF(en)-246 2468 y(aur)o(a)18 b(2)10 b FB(\305)g FF(2)15
b FB(\306)f FF(4.)k(Il)f(ne)h(r)o(este)f(alors)h(plus)g(qu)n('\340)g
(calculer)g(5)1445 2438 y FD(2)1494 2468 y FB(\306)c
FF(25)19 b(pour)e(pouvoir)i(conclur)o(e)e(:)g(0,)8 b(05)2638
2438 y FD(2)2689 2468 y FB(\306)15 b FF(0,)8 b(0025.)-246
2568 y(A)o(ttention)19 b(cependant)f(\340)f(cette)h(m\351thode)h(:)e
(les)h(der)q(niers)g(chiffr)o(es)g(du)f(r\351sultat)h(peuvent)h(\352tr)
o(e)f(des)f(0,)h(comme)g(dans)g(l)o('exemple)i(suivant)e(:)1514
2743 y(0,)8 b(05)i FB(\243)g FF(0,)e(0006)19 b FB(\306)c
FF(0,)8 b(000030,)-246 2918 y(puisque)20 b(6)10 b FB(\243)g
FF(5)15 b FB(\306)f FF(30)k(et)g(que)g(le)g(r\351sultat)g(doit)g(avoir)
f(2)10 b FB(\305)g FF(4)16 b FB(\306)e FF(6)j(chiffr)o(es)h(apr\350s)g
(la)g(virgule)g(\(le)f(der)q(nier)-5 b(,)18 b(ici,)f(\351tant)i(un)e
(0\).)-246 3002 y
SDict begin H.S end
 -246 3002 a -246 3002 a
SDict begin 12 H.A end
 -246 3002 a
-246 3002 a
SDict begin [/View [/XYZ H.V]/Dest (exo.24) cvn /DEST pdfmark end
 -246 3002 a 0 TeXcolorgray 111 x FG(Ex)o(er)o(cice)d(24)p
0 TeXcolorgray 41 w FF(Le)k(c\364t\351)g(du)f(gr)o(and)g(carr\351)f
(mesur)o(e)k Fw(a)14 b FB(\305)c Fw(b)q FF(,)18 b(donc)f(son)h(air)o(e)
f(est)h(\()r Fw(a)c FB(\305)c Fw(b)t FF(\))2283 3083
y FD(2)2317 3113 y FF(.)-246 3213 y(D)o('un)15 b(autr)o(e)g
(c\364t\351,)h(le)g(gr)o(and)f(carr\351)f(peut)j(\352tr)o(e)e
(d\351coup\351)h(en)g(quatr)o(e)f(par)q(ties)h(:)f(un)h(carr\351)f(de)g
(c\364t\351)i Fw(a)t FF(,)f(donc)f(d)n('air)o(e)h Fw(a)3166
3183 y FD(2)3216 3213 y FF(\(hachur\351)g(en)g(bleu\),)f(un)h(carr\351)
-246 3313 y(de)j(c\364t\351)h Fw(b)q FF(,)f(donc)g(d)n('air)o(e)g
Fw(b)563 3282 y FD(2)616 3313 y FF(\(hachur\351)h(en)f(ver)q(t\))g(et)g
(deux)h(r)o(ectangles)f(de)g(c\364t\351s)i Fw(a)i FF(et)c
Fw(b)q FF(,)h(donc)f(d)n('air)o(es)i Fw(a)15 b FB(\243)c
Fw(b)22 b FF(\(hachur\351s)e(en)f(rouge\).)g(Ainsi)g(l)o('air)o(e)-246
3412 y(du)f(gr)o(and)e(carr\351)h(est-elle)i(aussi)f(\351gale)g(\340)
1642 3512 y Fw(a)1689 3478 y FD(2)1734 3512 y FB(\305)10
b Fw(b)1846 3478 y FD(2)1891 3512 y FB(\305)g FF(2)g
FB(\243)i Fw(a)i FB(\243)c Fw(b)q FF(.)-246 3657 y(En)18
b(compar)o(ant)g(avec)f(la)h(pr)o(emi\350r)o(e)f(m\351thode)i(de)e
(calcul)h(de)f(l)o('air)o(e)o(,)h(on)f(obtient)h(la)g(r)o(elation)f
(attendue)i(:)1542 3833 y(\()1571 3832 y Fw(a)14 b FB(\305)c
Fw(b)1740 3833 y FF(\))1767 3798 y FD(2)1816 3832 y FB(\306)16
b Fw(a)1934 3798 y FD(2)1979 3832 y FB(\305)10 b FF(2)r
Fw(a)t(b)k FB(\305)c Fw(b)2302 3798 y FD(2)2337 3832
y FF(.)p 0 TeXcolorgray 0 TeXcolorgray 1230 5032 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 173.56189 a add def
/d 0.0 a add neg def /h 133.15862 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1230
5032 a 1532 4782 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1  setrgbcolor   0.8 SLW 0
0 1  setrgbcolor  /ArrowA { /lineto load stopped { moveto } if } def
/ArrowB { } def /ArrowInside { } def    /x 0. def /x1 2. def /dx x1
x sub 49 div def /F@pstplot (2.0)  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false
def xy /lineto load stopped { moveto } if  49 1 sub { /x x dx add def
xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul
lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  56.90549 0.0
lineto 0.0 0.0 lineto closepath gsave 90 rotate  /clipType { clip }
def 45.0 rotate 0.8 SLW 0 0 1  setrgbcolor 5.69046 0.0 0.0 LineFill
 grestore gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor   0.8 SLW 1
0 0  setrgbcolor  /ArrowA { /lineto load stopped { moveto } if } def
/ArrowB { } def /ArrowInside { } def    /x 2. def /x1 3. def /dx x1
x sub 49 div def /F@pstplot (2.0)  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false
def xy /lineto load stopped { moveto } if  49 1 sub { /x x dx add def
xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul
lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  85.35823 0.0
lineto 56.90549 0.0 lineto closepath gsave 90 rotate  /clipType { clip
} def 45.0 rotate 0.8 SLW 1 0 0  setrgbcolor 5.69046 0.0 0.0 LineFill
 grestore gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor   0.8 SLW 1
0 0  setrgbcolor  /ArrowA { /lineto load stopped { moveto } if } def
/ArrowB { } def /ArrowInside { } def    /x 0. def /x1 2. def /dx x1
x sub 49 div def /F@pstplot (2.0)  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false
def xy /lineto load stopped { moveto } if  49 1 sub { /x x dx add def
xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul
lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  56.90549 85.35823
lineto  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def /ArrowInside { } def    /x 2. def
/x1 0. def /dx x1 x sub 49 div def /F@pstplot (3.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy /lineto load stopped { moveto } if  49 1 sub
{ /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit
} if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } if  0.0 56.90549 lineto closepath gsave 90 rotate  /clipType { clip
} def 45.0 rotate 0.8 SLW 1 0 0  setrgbcolor 5.69046 0.0 0.0 LineFill
 grestore gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 1 0  setrgbcolor   0.8 SLW 0
1 0  setrgbcolor  /ArrowA { /lineto load stopped { moveto } if } def
/ArrowB { } def /ArrowInside { } def    /x 2. def /x1 3. def /dx x1
x sub 49 div def /F@pstplot (2.0)  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false
def xy /lineto load stopped { moveto } if  49 1 sub { /x x dx add def
xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul
lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  85.35823 85.35823
lineto  0.8 SLW 0 1 0  setrgbcolor  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def /ArrowInside { } def    /x 3. def
/x1 2. def /dx x1 x sub 49 div def /F@pstplot (3.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy /lineto load stopped { moveto } if  49 1 sub
{ /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit
} if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } if  56.90549 56.90549 lineto closepath gsave 90 rotate  /clipType
{ clip } def 45.0 rotate 0.8 SLW 0 1 0  setrgbcolor 5.69046 0.0 0.0
LineFill  grestore gsave 0.8 SLW 0 1 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1532 4782 a
tx@Dict begin { 24.185 -3.98335 } PutCoor PutBegin  end
 1532 4782 a 1534 4819 a Fw(a)1532 4782 y
tx@Dict begin  PutEnd  end

1532 4782 a 1532 4782 a
tx@Dict begin { 68.2864 -3.98335 } PutCoor PutBegin  end
 1532 4782 a 57 x Fw(b)1532 4782
y
tx@Dict begin  PutEnd  end
 1532 4782 a 1532 4782 a
tx@Dict begin { -12.51927 29.02191 } PutCoor PutBegin  end
 1532 4782 a 1534 4819 a Fw(a)1532
4782 y
tx@Dict begin  PutEnd  end
 1532 4782 a 1532 4782 a
tx@Dict begin { -12.51927 74.54604 } PutCoor PutBegin  end
 1532 4782 a 57 x Fw(b)1532
4782 y
tx@Dict begin  PutEnd  end
 1532 4782 a 2670 5032 a
currentpoint initclip moveto
 2670 5032 a -246 5108
a
SDict begin H.S end
 -246 5108 a -246 5108 a
SDict begin 12 H.A end
 -246 5108 a -246 5108 a
SDict begin [/View [/XYZ H.V]/Dest (exo.25) cvn /DEST pdfmark end
 -246
5108 a -246 5114 a
SDict begin H.S end
 -246 5114 a -246 5114 a
SDict begin 12 H.A end
 -246 5114
a -246 5114 a
SDict begin [/View [/XYZ H.V]/Dest (Item.33) cvn /DEST pdfmark end
 -246 5114 a 0 TeXcolorgray 113 x FG(Ex)o(er)o(cice)k(25)p
0 TeXcolorgray 0 TeXcolorgray 146 w FF(1.)p 0 TeXcolorgray
43 w(P)n(our)j(compar)o(er)g(les)h(fr)o(actions)i Fw(a)e
FB(\306)1511 5194 y FD(4)p 1511 5207 31 5 v 1511 5256
a(5)1569 5227 y FF(et)g Fw(b)g FB(\306)1792 5194 y FD(5)p
1792 5207 V 1792 5256 a(6)1833 5227 y FF(,)f(on)h(les)g(r\351duit)g(au)
f(m\352me)i(d\351nominateur)g(:)1394 5447 y Fw(a)f FB(\306)1534
5391 y FF(4)10 b FB(\243)g FF(6)p 1534 5428 157 5 v 1534
5504 a(5)g FB(\243)g FF(6)1714 5447 y FB(\306)1793 5391
y FF(24)p 1793 5428 82 5 v 1793 5504 a(30)2030 5447 y(,)155
b Fw(b)18 b FB(\306)2345 5391 y FF(5)10 b FB(\243)g FF(5)p
2345 5428 157 5 v 2345 5504 a(6)g FB(\243)g FF(5)2526
5447 y FB(\306)2605 5391 y FF(25)p 2605 5428 82 5 v 2605
5504 a(30)2696 5447 y(.)-38 5646 y(C)o(omme)19 b(24)c
FB(\307)f FF(25,)19 b(on)e(obtient)j Fw(a)e FB(\307)c
Fw(b)q FF(.)p 0 TeXcolorgray 1909 5895 a(11)p 0 TeXcolorgray
eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.12) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246
-246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.34) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163
a FF(2.)p 0 TeXcolorgray 43 w(On)26 b(compar)o(e)h(\340)f(pr\351sent)i
Fw(c)h FB(\306)932 -195 y FD(524)p 932 -182 93 5 v 932
-134 a(525)1061 -163 y FF(et)d Fw(d)31 b FB(\306)1317
-195 y FD(525)p 1317 -182 V 1317 -134 a(526)1419 -163
y FF(.)c(On)f(r\351duit)h(l\340)g(aussi)g(au)g(m\352me)h
(d\351nominateur)-5 b(,)29 b(mais)e(on)g(n)-6 b('effectue)29
b(aucun)e(calcul)-38 -63 y(\(comme)18 b(nous)g(allons)h(le)e(voir)-5
b(,)18 b(ce)g(n)-6 b('est)18 b(pas)g(n\351cessair)o(e\))g(:)1416
153 y Fw(c)h FB(\306)1549 97 y FF(524)10 b FB(\243)g
FF(526)p 1549 133 319 5 v 1549 210 a(525)g FB(\243)g
FF(526)2023 153 y(,)155 b Fw(d)21 b FB(\306)2343 97 y
FF(525)10 b FB(\243)g FF(525)p 2343 133 V 2343 210 a(526)g
FB(\243)g FF(525)2672 153 y(.)-38 358 y(Les)18 b(d\351nominateurs)h
(sont)f(identiques)o(,)i(donc)d(il)h(suf\002t)g(de)f(compar)o(er)g(les)
h(num\351r)o(ateurs)o(.)h(D)o('apr\350s)e(l)o('identit\351)j(r)o
(emarquable)d(n\2603,)1179 541 y(524)10 b FB(\243)g FF(526)17
b FB(\306)e FF(\(525)10 b FB(\241)g FF(1\)\(525)g FB(\305)g
FF(1\))17 b FB(\306)e FF(525)2366 507 y FD(2)2412 541
y FB(\241)10 b FF(1)2517 507 y FD(2)2567 541 y FB(\306)k
FF(525)2756 507 y FD(2)2803 541 y FB(\241)c FF(1.)-38
724 y(C)o(e)18 b(nombr)o(e)f(est)h(str)q(ictement)h(inf\351r)q(ieur)f
(\340)f(525)10 b FB(\243)g FF(525)17 b FB(\306)e FF(525)1791
694 y FD(2)1827 724 y FF(,)j(donc)f Fw(c)i FB(\307)c
Fw(d)7 b FF(.)-246 801 y
SDict begin H.S end
 -246 801 a -246 801 a
SDict begin 12 H.A end
 -246 801
a -246 801 a
SDict begin [/View [/XYZ H.V]/Dest (exo.26) cvn /DEST pdfmark end
 -246 801 a 0 TeXcolorgray 122 x FG(Ex)o(er)o(cice)14
b(26)p 0 TeXcolorgray 41 w FF(La)21 b(par)q(tie)g(hachur\351e)h(de)e
(la)h(\002gur)o(e)e(de)i(gauche)g(est)g(un)g(r)o(ectangle)g(de)f
(c\364t\351s)h(\()r Fw(a)15 b FB(\241)c Fw(b)t FF(\))21
b(et)g(\()r Fw(a)15 b FB(\305)c Fw(b)t FF(\),)20 b(donc)h(son)g(air)o
(e)f(est)h(\351gale)g(\340)g(\()r Fw(a)15 b FB(\241)-246
1023 y Fw(b)t FF(\)\()r Fw(a)f FB(\305)c Fw(b)t FF(\).)-246
1122 y(Quant)19 b(\340)g(la)f(par)q(tie)h(hachur\351e)h(de)e(la)h
(\002gur)o(e)f(de)g(droite)o(,)g(c)n('est)h(un)g(carr\351)f(de)h
(c\364t\351)i Fw(a)h FF(duquel)e(on)e(a)h(r)o(etir\351)f(un)h(carr\351)
f(de)h(c\364t\351)g Fw(b)q FF(.)f(S)o(on)h(air)o(e)g(est)g(donc)-246
1222 y(\351gale)f(\340)h Fw(a)57 1192 y FD(2)102 1222
y FB(\241)10 b Fw(b)214 1192 y FD(2)249 1222 y FF(.)-246
1321 y(L)-10 b('identit\351)20 b(r)o(emarquable)d(n\2603)g(nous)h(dit)g
(que)g(\()r Fw(a)c FB(\241)c Fw(b)t FF(\)\()r Fw(a)k
FB(\305)c Fw(b)t FF(\))j FB(\306)j Fw(a)1717 1291 y FD(2)1762
1321 y FB(\241)10 b Fw(b)1874 1291 y FD(2)1909 1321 y
FF(,)17 b(donc)g(les)h(air)o(es)f(des)h(deux)f(zones)h(hachur\351es)g
(sont)g(les)g(m\352mes)o(.)p 0 TeXcolorgray 0 TeXcolorgray
1100 2564 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 204.86188 a add def
/d 0.0 a add neg def /h 136.57458 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1100 2564 a -284 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 17.07182 51.21547 85.35912
51.21547 85.35912 -17.07182 17.07182 -17.07182  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 17.07182 -17.07182 68.2873
-17.07182 68.2873 68.2873 17.07182 68.2873  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 90 rotate  /clipType { clip } def
45.0 rotate 0.8 SLW 0.5  setgray 7.96672 0.0 0.0 LineFill  grestore
gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin 0
 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 85.35912 51.21547 85.35912
68.2873 68.2873 68.2873 68.2873 51.21547  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 187.79005 51.21547 187.79005
-17.07182 119.50276 -17.07182 119.50276 51.21547  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 90 rotate  /clipType { clip } def
45.0 rotate 0.8 SLW 0.5  setgray 7.96672 0.0 0.0 LineFill  grestore
gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin 0
 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  [ 187.79005 34.14365 170.71823
34.14365 170.71823 51.21547 187.79005 51.21547  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.5  setgray  1.0 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 85.35912 -17.07182 17.07182
-17.07182   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 85.35912 51.21547 85.35912
-17.07182   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 17.07182 51.21547 85.35912
51.21547   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 17.07182 -17.07182 17.07182
51.21547   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 68.2873 68.2873 17.07182 68.2873
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 68.2873 -17.07182 68.2873 68.2873
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 17.07182 -17.07182 68.2873
-17.07182   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 17.07182 68.2873 17.07182 -17.07182
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1100 2280 a
tx@Dict begin { 7.34074 65.72661 } PutCoor PutBegin  end
 1100 2280 a 57 x Fw(b)1100 2280 y
tx@Dict begin  PutEnd  end
 1100 2280
a 1100 2280 a
tx@Dict begin { 73.7504 -3.4143 } PutCoor PutBegin  end
 1100 2280 a 57 x Fw(b)1100 2280 y
tx@Dict begin  PutEnd  end
 1100
2280 a 1100 2280 a
tx@Dict begin { 5.80435 20.48613 } PutCoor PutBegin  end
 1100 2280 a 1102 2318 a Fw(a)1100
2280 y
tx@Dict begin  PutEnd  end
 1100 2280 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 84.33484
-27.65627 47.11813 -27.65627   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 16.7303
-27.65627 47.11813 -27.65627   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1100 2280 a
tx@Dict begin { 47.28902 -21.33977 } PutCoor PutBegin  end
 1100
2280 a 1102 2318 a Fw(a)1100 2280 y
tx@Dict begin  PutEnd  end
 1100 2280 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 68.2873 68.2873 68.2873 51.21547
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 85.35912 68.2873 68.2873 68.2873
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 85.35912 51.21547 85.35912
68.2873   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 68.2873 51.21547 85.35912 51.21547
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 119.50276 -17.07182 119.50276
51.21547   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 187.79005 -17.07182 119.50276
-17.07182   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 187.79005 51.21547 187.79005
-17.07182   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 119.50276 51.21547 187.79005
51.21547   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1100 2280 a
tx@Dict begin { 152.11 -22.19342 } PutCoor PutBegin  end
 1100 2280 a 1102 2318 a Fw(a)1100 2280 y
tx@Dict begin  PutEnd  end

1100 2280 a 1100 2280 a
tx@Dict begin { 109.25955 23.90044 } PutCoor PutBegin  end
 1100 2280 a 1102 2318 a Fw(a)1100
2280 y
tx@Dict begin  PutEnd  end
 1100 2280 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 170.71823 51.21547 187.79005
51.21547   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 170.71823 34.14365 170.71823
51.21547   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 187.79005 34.14365 170.71823
34.14365   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 187.79005 51.21547 187.79005
34.14365   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0.5  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1100 2280 a
tx@Dict begin { 175.1568 66.58 } PutCoor PutBegin  end
 1100 2280 a 57 x Fw(b)1100 2280 y
tx@Dict begin  PutEnd  end
 1100 2280
a 1100 2280 a
tx@Dict begin { 189.83858 52.0691 } PutCoor PutBegin  end
 1100 2280 a 57 x Fw(b)1100 2280 y
tx@Dict begin  PutEnd  end
 1100
2280 a 2800 2564 a
currentpoint initclip moveto
 2800 2564 a -246 2647 a
SDict begin H.S end
 -246 2647
a -246 2647 a
SDict begin 12 H.A end
 -246 2647 a -246 2647 a
SDict begin [/View [/XYZ H.V]/Dest (exo.27) cvn /DEST pdfmark end
 -246 2647 a 0 TeXcolorgray
116 x FG(Ex)o(er)o(cice)c(27)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1115 3651 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 201.10605 a add def
/d 0.0 a add neg def /h 95.94356 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1115 3651 a -23 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 187.79005 17.07182 17.07182 17.07182
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 17.07182 85.35912 17.07182 17.07182
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 187.79005 68.2873 187.79005 17.07182
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 96.45569 17.07182 17.07182 85.35912
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 54.7806 50.21907 57.45276 53.32521
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 187.79005 68.2873 96.45569 17.07182
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.3805 40.47523 140.37651 44.04898
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1092 3651 a
tx@Dict begin { 8.5359 51.21547 } PutCoor PutBegin  end
 1092 3651 a 51 x
FF(4)1092 3651 y
tx@Dict begin  PutEnd  end
 1092 3651 a 1092 3651 a
tx@Dict begin { 192.91165 43.02106 } PutCoor PutBegin  end
 1092 3651 a
51 x FF(3)1092 3651 y
tx@Dict begin  PutEnd  end
 1092 3651 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.25  setgray  [ 17.07182 17.07182
  false NArray  /DS 2.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial 1092 3651 a
tx@Dict begin { 5.1216 18.7791 } PutCoor PutBegin  end
 1092 3651 a 2 w Fw(M)1092 3651
y
tx@Dict begin  PutEnd  end
 1092 3651 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.25  setgray  [ 187.79005 17.07182
  false NArray  /DS 2.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1092 3651 a
tx@Dict begin { 189.49733 18.43759 } PutCoor PutBegin  end
 1092 3651 a 2 w Fw(N)1092 3651 y
tx@Dict begin  PutEnd  end
 1092 3651
a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.25  setgray  [ 17.07182 85.35912
  false NArray  /DS 2.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1092 3651 a
tx@Dict begin { 9.21866 85.35912 } PutCoor PutBegin  end

1092 3651 a 6 w Fw(A)1092 3651 y
tx@Dict begin  PutEnd  end
 1092 3651 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.25  setgray  [ 187.79005 68.2873
  false NArray  /DS 2.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1092 3651 a
tx@Dict begin { 189.15582 69.65306 } PutCoor PutBegin  end
 1092 3651 a Fw(B)1092
3651 y
tx@Dict begin  PutEnd  end
 1092 3651 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.25  setgray  [ 96.45569 17.07182
  false NArray  /DS 2.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1092 3651 a
tx@Dict begin { 96.62657 20.82764 } PutCoor PutBegin  end
 1092 3651 a Fw(P)1092 3651 y
tx@Dict begin  PutEnd  end
 1092 3651 a
1092 3651 a
tx@Dict begin { 51.21547 5.1216 } PutCoor PutBegin  end
 1092 3651 a 1094 3650 a Fw(x)1092 3651 y
tx@Dict begin  PutEnd  end

1092 3651 a 1092 3651 a
tx@Dict begin { 136.57458 5.1216 } PutCoor PutBegin  end
 1092 3651 a -1 x FF(10)c FB(\241)i
Fw(x)1092 3651 y
tx@Dict begin  PutEnd  end
 1092 3651 a 2785 3651 a
currentpoint initclip moveto
 2785 3651 a
-246 3834 a FF(On)18 b(pose)i Fw(M)7 b(P)23 b FB(\306)16
b Fw(x)5 b FF(,)18 b(on)f(a)h(donc)f Fw(P)10 b(N)23 b
FB(\306)16 b Fw(M)9 b(N)19 b FB(\241)12 b Fw(M)7 b(P)24
b FB(\306)14 b FF(10)c FB(\241)i Fw(x)5 b FF(.)-246 3933
y(D)o('apr\350s)17 b(le)h(th\351or\350me)h(de)e(Pythagor)o(e)g(dans)g
(chacun)h(des)f(deux)h(tr)q(iangles)f(r)o(ectangles)24
b Fw(A)5 b(M)i(P)26 b FF(et)19 b Fw(N)9 b(B)e(P)41 b
FF(:)514 4361 y Fw(A)s(P)620 4327 y FD(2)669 4361 y FB(\306)16
b Fw(M)7 b(P)872 4327 y FD(2)918 4361 y FB(\305)12 b
Fw(M)h(A)1119 4327 y FD(2)514 4497 y Fw(A)s(P)620 4463
y FD(2)669 4497 y FB(\306)j Fw(x)784 4463 y FD(2)830
4497 y FB(\305)10 b FF(4)935 4463 y FD(2)514 4633 y Fw(A)s(P)620
4599 y FD(2)669 4633 y FB(\306)16 b Fw(x)784 4599 y FD(2)830
4633 y FB(\305)10 b FF(16)p 0 TeXcolorgray 1946 4892
9 843 v 0 TeXcolorgray 1992 4317 a Fw(B)d(P)2102 4282
y FD(2)2152 4317 y FB(\306)14 b Fw(P)c(N)2345 4282 y
FD(2)2390 4317 y FB(\305)g Fw(B)f(N)2579 4282 y FD(2)1992
4453 y Fw(B)e(P)2102 4419 y FD(2)2152 4453 y FB(\306)14
b FF(\(10)c FB(\241)i Fw(x)5 b FF(\))2476 4419 y FD(2)2522
4453 y FB(\305)10 b FF(3)2627 4419 y FD(2)1992 4589 y
Fw(B)d(P)2102 4555 y FD(2)2152 4589 y FB(\306)14 b FF(10)2301
4555 y FD(2)2347 4589 y FB(\241)c FF(2)g FB(\243)g FF(10)g
FB(\243)i Fw(x)j FB(\305)d Fw(x)2849 4555 y FD(2)2897
4589 y FB(\305)e FF(9)147 b(\(on)17 b(d\351veloppe)i(gr\342ce)e(\340)g
(l)o('IR)h(n\2602\))1992 4726 y Fw(B)7 b(P)2102 4691
y FD(2)2152 4726 y FB(\306)14 b FF(100)c FB(\241)g FF(20)r
Fw(x)15 b FB(\305)d Fw(x)2663 4691 y FD(2)2712 4726 y
FB(\305)e FF(9)1992 4862 y Fw(B)d(P)2102 4827 y FD(2)2152
4862 y FB(\306)16 b Fw(x)2267 4827 y FD(2)2312 4862 y
FB(\241)10 b FF(20)r Fw(x)15 b FB(\305)10 b FF(109)-246
5061 y(On)18 b(sait)f(que)24 b Fw(A)s(P)e FB(\306)15
b Fw(B)7 b(P)-9 b FF(,)19 b(donc)k Fw(A)s(P)795 5031
y FD(2)844 5061 y FB(\306)14 b Fw(B)7 b(P)1023 5031 y
FD(2)1076 5061 y FF(;)17 b(et)h(d)n('apr\350s)g(les)g(deux)g(calculs)g
(ci-dessus)g(:)1531 5267 y Fv(\000)1546 5252 y(\000)1541
5255 y Fw(x)1585 5220 y FD(2)1630 5255 y FB(\305)10 b
FF(16)16 b FB(\306)1852 5267 y Fv(\000)1867 5252 y(\000)1862
5255 y Fw(x)1906 5220 y FD(2)1951 5255 y FB(\241)10 b
FF(20)r Fw(x)15 b FB(\305)10 b FF(109.)-246 5437 y(Il)17
b(n)-6 b('y)17 b(a)g(plus)i(qu)n('\340)e(r\351soudr)o(e)g(:)p
0 TeXcolorgray 1909 5895 a(12)p 0 TeXcolorgray eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.13) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1678 12 a FF(16)15 b FB(\306)g(\241)p
FF(20)r Fw(x)g FB(\305)10 b FF(109)1502 137 y(16)p 1 0 0
TeXcolorrgb FB(\241)p FF(109)p 0 TeXcolorgray 16 w FB(\306)15
b(\241)p FF(20)r Fw(x)g FB(\305)2091 146 y Fv(\010)2147
118 y(\010)2099 137 y FF(109)p 1 0 0 TeXcolorrgb 3 w
FB(\241)2269 146 y Fv(\010)2324 118 y(\010)2277 137 y
FF(109)p 0 TeXcolorgray 1613 251 a FB(\241)p FF(93)p
1613 288 136 5 v 0 0 1 TeXcolorrgb 1613 364 a FB(\241)p
FF(20)p 0 TeXcolorgray 1773 307 a FB(\306)1844 245 y
Fv(\030)1914 227 y(\030)1853 251 y FB(\241)p FF(20)s
Fw(x)p 1853 288 183 5 v 0 0 1 TeXcolorrgb 1868 358 a
Fv(\030)1937 340 y(\030)1876 364 y FB(\241)p FF(20)p
0 TeXcolorgray 1609 467 a(4,)8 b(65)16 b FB(\306)h Fw(x)-246
642 y FF(C)o(onclusion)j(:)f Fw(M)7 b(P)23 b FB(\306)14
b FF(4,)8 b(65.)-246 717 y
SDict begin H.S end
 -246 717 a -246 717 a
SDict begin 12 H.A end
 -246
717 a -246 717 a
SDict begin [/View [/XYZ H.V]/Dest (exo.28) cvn /DEST pdfmark end
 -246 717 a 0 TeXcolorgray 120 x FG(Ex)o(er)o(cice)14
b(28)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1227
1908 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 174.13065 a add def
/d 0.0 a add neg def /h 118.93227 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1227 1908 a 1010 1993 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ 56.90549
28.45274 56.90549 40.5244 68.97714 40.5244 68.97714 28.45274  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 28.45274 56.90549 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 113.81097 56.90549 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 28.45274 56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1010 1993 a
tx@Dict begin { 95.60123 25.03854 } PutCoor PutBegin  end
 1010 1993 a 1012 2031 a Fw(x)1010 1993 y
tx@Dict begin  PutEnd  end

1010 1993 a 1010 1993 a
tx@Dict begin { 38.12657 72.26978 } PutCoor PutBegin  end
 1010 1993 a 1014 2031 a Fw(y)1010
1993 y
tx@Dict begin  PutEnd  end
 1010 1993 a 1010 1993 a
tx@Dict begin { 120.63979 75.11522 } PutCoor PutBegin  end
 1010 1993 a 51 x FF(13)1010
1993 y
tx@Dict begin  PutEnd  end
 1010 1993 a 2673 1908 a
currentpoint initclip moveto
 2673 1908 a -246 1970
a
SDict begin H.S end
 -246 1970 a -246 1970 a
SDict begin 12 H.A end
 -246 1970 a -246 1970 a
SDict begin [/View [/XYZ H.V]/Dest (Item.35) cvn /DEST pdfmark end
 -246
1970 a 0 TeXcolorgray -141 2082 a FF(1.)p 0 TeXcolorgray
43 w(D)o('apr\350s)j(le)h(th\351or\350me)h(de)e(Pythagor)o(e)o(,)1724
2182 y Fw(x)1768 2148 y FD(2)1814 2182 y FB(\305)d Fw(y)1926
2148 y FD(2)1975 2182 y FB(\306)g FF(13)2124 2148 y FD(2)2174
2182 y FB(\306)g FF(169.)-38 2340 y(D)o('apr\350s)j(l)o('IR)i(n\2601,)f
(\()r Fw(x)d FB(\305)f Fw(y)7 b FF(\))757 2310 y FD(2)807
2340 y FB(\306)17 b Fw(x)923 2310 y FD(2)968 2340 y FB(\305)d
Fw(y)1080 2310 y FD(2)1126 2340 y FB(\305)c FF(2)r Fw(x)g(y)q
FF(.)20 b(Or)f Fw(x)1510 2310 y FD(2)1556 2340 y FB(\305)14
b Fw(y)1668 2310 y FD(2)1718 2340 y FB(\306)g FF(169,)20
b(et)2041 2298 y Fr(x)t FC(\243)s Fr(y)p 2040 2321 113
5 v 2081 2369 a FD(2)2177 2340 y FB(\306)15 b FF(30,)k(puisque)g(c)n
('est)g(l)o('air)o(e)f(du)g(tr)q(iangle)o(.)f(On)h(en)g(d\351duit)i
Fw(x)15 b FB(\243)f Fw(y)23 b FB(\306)-38 2440 y FF(30)10
b FB(\243)g FF(2)16 b FB(\306)e FF(60,)19 b(puis)1107
2539 y(\()r Fw(x)c FB(\305)f Fw(y)7 b FF(\))1329 2505
y FD(2)1379 2539 y FB(\306)p 0 0 1 TeXcolorrgb 16 w Fw(x)1494
2505 y FD(2)1539 2539 y FB(\305)14 b Fw(y)1651 2505 y
FD(2)p 0 TeXcolorgray 1696 2539 a FB(\305)c FF(2)p 1 0 0
TeXcolorrgb 2 w Fw(x)g(y)p 0 TeXcolorgray 22 w FB(\306)p
0 0 1 TeXcolorrgb 15 w FF(169)p 0 TeXcolorgray 11 w FB(\305)g
FF(2)g FB(\243)p 1 0 0 TeXcolorrgb 10 w FF(60)p 0 TeXcolorgray
16 w FB(\306)15 b FF(169)10 b FB(\305)g FF(120)17 b FB(\306)d
FF(289.)-38 2684 y(F)o(inalement,)20 b(comme)f(\()r Fw(x)c
FB(\305)f Fw(y)7 b FF(\))898 2654 y FD(2)947 2684 y FB(\306)14
b FF(289,)1745 2784 y Fw(x)h FB(\305)f Fw(y)22 b FB(\306)1995
2715 y(p)p 2058 2715 122 5 v 2058 2784 a FF(289)16 b
FB(\306)e FF(17.)-246 2847 y
SDict begin H.S end
 -246 2847 a -246 2847 a
SDict begin 12 H.A end

-246 2847 a -246 2847 a
SDict begin [/View [/XYZ H.V]/Dest (Item.36) cvn /DEST pdfmark end
 -246 2847 a 0 TeXcolorgray -141
2941 a FF(2.)p 0 TeXcolorgray 43 w(On)j(utilise)i(cette)f(fois)g(l)o
('IR)g(n\2602)g(:)1128 3041 y(\()r Fw(x)d FB(\241)f Fw(y)7
b FF(\))1350 3007 y FD(2)1399 3041 y FB(\306)p 0 0 1
TeXcolorrgb 16 w Fw(x)1514 3007 y FD(2)1560 3041 y FB(\305)14
b Fw(y)1672 3007 y FD(2)p 0 TeXcolorgray 1717 3041 a
FB(\241)c FF(2)p 1 0 0 TeXcolorrgb 2 w Fw(x)g(y)p 0 TeXcolorgray
22 w FB(\306)p 0 0 1 TeXcolorrgb 14 w FF(169)p 0 TeXcolorgray
11 w FB(\241)g FF(2)g FB(\243)p 1 0 0 TeXcolorrgb 10
w FF(60)p 0 TeXcolorgray 17 w FB(\306)k FF(169)c FB(\241)g
FF(120)17 b FB(\306)e FF(49.)-38 3199 y(Or)k Fw(x)c FB(\241)f
Fw(y)22 b FB(\270)14 b FF(0,)k(puisque)j Fw(x)i FF(est)18
b(plus)g(gr)o(and)f(que)22 b Fw(y)r FF(,)c(donc)1785
3374 y Fw(x)d FB(\241)f Fw(y)22 b FB(\306)2035 3305 y(p)p
2099 3305 82 5 v 69 x FF(49)15 b FB(\306)f FF(7.)-38
3562 y Fp(")p FF(S)o(i)k(on)f(ne)h(savait)g(pas)f(lequel)i(des)f(deux)f
(c\364t\351s)h(est)g(le)g(plus)h(gr)o(and,)d(on)i(pourr)o(ait)g(avoir)h
Fw(x)c FB(\241)f Fw(y)22 b FB(\306)14 b(\241)p FF(7)k(!!!)-38
3721 y(On)f(sait)h(\340)f(pr\351sent)i(que)h Fw(x)15
b FB(\305)f Fw(y)21 b FB(\306)15 b FF(17)j(et)i Fw(x)15
b FB(\241)f Fw(y)21 b FB(\306)14 b FF(7.)k(On)g(ajoute)g(membr)o(e)g
(\340)f(membr)o(e)g(ces)h(\351galit\351s)g(et)g(on)g(en)f(d\351duit)j
Fw(x)37 b FF(:)1654 4009 y(\()r Fw(x)15 b FB(\305)f Fw(y)7
b FF(\))j FB(\305)g FF(\()r Fw(x)15 b FB(\241)f Fw(y)7
b FF(\))15 b FB(\306)f FF(17)c FB(\305)g FF(7)1763 4133
y Fw(x)15 b FB(\305)1885 4165 y Fv(\001)1886 4133 y Fw(y)j
FB(\305)12 b Fw(x)j FB(\241)2129 4165 y Fv(\001)2130
4133 y Fw(y)22 b FB(\306)14 b FF(24)2076 4279 y Fv(\001)2076
4264 y FF(2)s Fw(x)p 2076 4300 87 5 v 2099 4397 a Fv(\001)2100
4381 y FF(2)2188 4320 y FB(\306)2267 4264 y FF(24)p 2267
4300 82 5 v 2287 4377 a(2)2129 4484 y Fw(x)20 b FB(\306)14
b FF(12)-38 4672 y(En\002n,)j(comme)k Fw(x)15 b FB(\305)f
Fw(y)22 b FB(\306)14 b FF(17,)k(on)g(trouve)j Fw(y)g
FB(\306)14 b FF(17)c FB(\241)i Fw(x)21 b FB(\306)14 b
FF(17)c FB(\241)g FF(12)17 b FB(\306)d FF(5.)-38 4785
y(C)o(onclusion)19 b(:)h Fw(x)f FB(\306)14 b FF(12,)23
b Fw(y)e FB(\306)14 b FF(5.)-246 4930 y
SDict begin H.S end
 -246 4930 a -246
4930 a
SDict begin 12 H.A end
 -246 4930 a -246 4930 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 -246 4930 a 130 x FH(2)105
b(N)m(ombr)n(es)24 b(r\351els)-246 5145 y
SDict begin H.S end
 -246 5145 a
-246 5145 a
SDict begin 12 H.A end
 -246 5145 a -246 5145 a
SDict begin [/View [/XYZ H.V]/Dest (exo.29) cvn /DEST pdfmark end
 -246 5145 a -246
5132 a
SDict begin H.S end
 -246 5132 a -246 5132 a
SDict begin 12 H.A end
 -246 5132 a -246 5132
a
SDict begin [/View [/XYZ H.V]/Dest (Item.37) cvn /DEST pdfmark end
 -246 5132 a 0 TeXcolorgray 112 x FG(Ex)o(er)o(cice)14
b(29)p 0 TeXcolorgray 0 TeXcolorgray 146 w FF(1.)p 0
TeXcolorgray 43 w FB(\241)p FF(7)g FB(2)h Fh(Q)p FF(.)i
FG(VRAI.)-38 5388 y FF(J)m(usti\002cation)h(:)g FB(\241)p
FF(7)c FB(\306)622 5332 y(\241)p FF(7)p 622 5369 96 5
v 649 5445 a(1)727 5388 y(,)j(donc)h FB(\241)p FF(7)c
FB(2)h Fh(Q)i FF(\(il)g(s)m('\351cr)q(it)h(comme)g(le)g(quotient)h(de)e
(deux)h(entiers\).)-246 5458 y
SDict begin H.S end
 -246 5458 a -246 5458
a
SDict begin 12 H.A end
 -246 5458 a -246 5458 a
SDict begin [/View [/XYZ H.V]/Dest (Item.38) cvn /DEST pdfmark end
 -246 5458 a 0 TeXcolorgray
-141 5533 a FF(2.)p 0 TeXcolorgray 43 w FB(\241)p FF(7)d
FB(2)f Fh(N)p FF(.)j FG(F)-5 b(A)m(UX.)-38 5646 y FF(J)m
(usti\002cation)18 b(:)g FB(\241)p FF(7)f(est)h(str)q(ictement)h
(n\351gatif,)g(donc)e(ce)g(n)-6 b('est)18 b(pas)g(un)g(entier)g(natur)o
(el.)p 0 TeXcolorgray 1909 5895 a(13)p 0 TeXcolorgray
eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.14) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246
-246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.39) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -138
a FF(3.)p 0 TeXcolorgray 43 w FB(\241)27 -195 y FF(13)p
27 -158 82 5 v 47 -81 a(4)132 -138 y FB(2)15 b Fh(Z)p
FF(.)i FG(F)-5 b(A)m(UX.)-38 49 y FF(J)m(usti\002cation)18
b(:)g FB(\241)498 -7 y FF(13)p 498 30 V 518 106 a(4)603
49 y FB(\306)c(\241)p FF(3,)8 b(25)19 b(a)e(des)h(chiffr)o(es)g
(apr\350s)g(la)f(virgule)o(,)h(donc)f(il)g(n)-6 b('est)19
b(pas)f(entier)-5 b(.)-38 236 y FG(R)o(emarque)17 b(:)k
FF(P)n(our)f(obtenir)862 180 y(13)p 862 217 V 883 293
a(4)971 236 y FB(\306)d FF(3,)8 b(25)23 b(sans)e(calculatr)q(ice)o(,)f
(trois)h(possibilit\351s)i(:)2477 233 y Fu(1)2454 236
y Ft(\015)d FF(Diviser)h(de)f(t\352te)i(13)f(par)g(2)g(deux)f(fois)i
(de)e(suite)i(\226)4086 233 y Fu(2)4063 236 y Ft(\015)-38
409 y FF(P)n(oser)17 b(la)g(division)i(\226)619 406 y
Fu(3)596 409 y Ft(\015)e FF(R)o(emarquer)g(que)1258 353
y(13)p 1258 389 V 1278 466 a(4)1363 409 y FB(\306)1442
353 y FF(12)p 1442 389 V 1462 466 a(4)1543 409 y FB(\305)1618
353 y FF(1)p 1618 389 41 5 v 1618 466 a(4)1683 409 y
FB(\306)d FF(3)c FB(\305)g FF(0,)e(25)17 b FB(\306)d
FF(3,)8 b(25.)-246 480 y
SDict begin H.S end
 -246 480 a -246 480 a
SDict begin 12 H.A end
 -246 480
a -246 480 a
SDict begin [/View [/XYZ H.V]/Dest (Item.40) cvn /DEST pdfmark end
 -246 480 a 0 TeXcolorgray -141 611 a FF(4.)p
0 TeXcolorgray 43 w FB(\241)27 554 y FF(13)p 27 591 82
5 v 47 667 a(4)132 611 y FB(2)15 b Fh(D)p FF(.)i FG(VRAI.)-38
798 y FF(J)m(usti\002cation)h(:)g FB(\241)498 742 y FF(13)p
498 778 V 518 855 a(4)603 798 y FB(\306)c(\241)p FF(3,)8
b(25)19 b(a)e(deux)h(chiffr)o(es)g(apr\350s)g(la)f(virgule)o(,)h(donc)f
(il)g(est)h(d\351cimal.)-246 869 y
SDict begin H.S end
 -246 869 a -246 869
a
SDict begin 12 H.A end
 -246 869 a -246 869 a
SDict begin [/View [/XYZ H.V]/Dest (Item.41) cvn /DEST pdfmark end
 -246 869 a 0 TeXcolorgray -141
945 a FF(5.)p 0 TeXcolorgray 43 w(5,)8 b(824)17 b FB(2)d
Fh(D)p FF(.)k FG(VRAI.)-38 1059 y FF(J)m(usti\002cation)g(:)g(5,)8
b(824)19 b(a)f(trois)f(chiffr)o(es)h(apr\350s)g(la)f(virgule)o(,)h
(donc)f(il)g(est)h(d\351cimal)-246 1093 y
SDict begin H.S end
 -246 1093 a
-246 1093 a
SDict begin 12 H.A end
 -246 1093 a -246 1093 a
SDict begin [/View [/XYZ H.V]/Dest (Item.42) cvn /DEST pdfmark end
 -246 1093 a 0 TeXcolorgray
-141 1188 a FF(6.)p 0 TeXcolorgray 43 w(5,)8 b(824)17
b FB(2)d Fh(Q)p FF(.)j FG(VRAI.)-38 1302 y FF(J)m(usti\002cation)h
(n\2601)g(:)f(5,)8 b(824)20 b(est)e(d\351cimal)g(\(cf)f(question)i
(pr\351c\351dente\),)g(donc)e(il)g(est)h(r)o(ationnel)h(d)n('apr\350s)f
(le)g(cours)f(\()p Fh(D)e FB(\275)f Fh(Q)p FF(\).)-38
1450 y(J)m(usti\002cation)k(n\2602)g(:)f(5,)8 b(824)17
b FB(\306)848 1394 y FF(5)8 b(824)p 848 1431 171 5 v
848 1507 a(1)g(000)1028 1450 y(,)18 b(donc)f(5,)8 b(824)16
b FB(2)f Fh(Q)i FF(\(il)h(s)m('\351cr)q(it)f(comme)h(le)g(quotient)h
(de)e(deux)h(entiers\).)-246 1522 y
SDict begin H.S end
 -246 1522 a -246
1522 a
SDict begin 12 H.A end
 -246 1522 a -246 1522 a
SDict begin [/View [/XYZ H.V]/Dest (Item.43) cvn /DEST pdfmark end
 -246 1522 a 0 TeXcolorgray
-141 1652 a FF(7.)p 0 TeXcolorgray -28 1596 a(10)p -28
1633 82 5 v -8 1709 a(6)77 1652 y FB(2)d Fh(D)p FF(.)i
FG(F)-5 b(A)m(UX.)-38 1789 y FF(J)m(usti\002cation)18
b(:)g(On)f(pose)h(la)g(division)g(:)p 0 TeXcolorgray
0 TeXcolorgray 1887 1944 a(1)33 b(0)1798 2043 y FB(\241)p
1871 2070 147 4 v 107 w FF(6)1960 2143 y(4)h(0)1871 2243
y FB(\241)p 1944 2269 V 34 w FF(3)g(6)2034 2342 y(4)p
2125 2371 4 499 v 2127 1970 183 4 v 2180 1944 a(6)2180
2043 y(1)6 b(,)h(6)-38 2545 y(C)o(omme)17 b(on)f(obtient)g(deux)g(fois)
h(le)f(m\352me)h(r)o(este)e(\(4\),)h(\347a)f(va)h(continuer)h
(ind\351\002niment.)g(C)o(onclusion)h(:)3060 2489 y(10)p
3060 2526 82 5 v 3081 2602 a(6)3166 2545 y FB(\306)c
FF(1,)8 b(666)g FB(\242)g(\242)g(\242)27 b FF(n)-6 b('est)16
b(pas)h(d\351cimal,)-38 2668 y(puisqu)n('il)i(a)e(une)h(in\002nit\351)h
(de)e(chiffr)o(es)h(apr\350s)g(la)f(virgule)o(.)-246
2701 y
SDict begin H.S end
 -246 2701 a -246 2701 a
SDict begin 12 H.A end
 -246 2701 a -246 2701
a
SDict begin [/View [/XYZ H.V]/Dest (Item.44) cvn /DEST pdfmark end
 -246 2701 a 0 TeXcolorgray -141 2832 a FF(8.)p 0 TeXcolorgray
-28 2775 a(17)p -28 2812 82 5 v -28 2889 a(11)77 2832
y FB(2)e Fh(D)p FF(.)i FG(F)-5 b(A)m(UX.)-38 2969 y FF(J)m
(usti\002cation)18 b(:)g(On)f(pose)h(la)g(division)g(:)p
0 TeXcolorgray 0 TeXcolorgray 1814 3123 a(1)33 b(7)1725
3223 y FB(\241)p 1798 3249 147 4 v 34 w FF(1)g(1)1887
3322 y(6)g(0)1798 3422 y FB(\241)p 1871 3448 V 34 w FF(5)g(5)1960
3521 y(5)h(0)1871 3621 y FB(\241)p 1944 3648 V 34 w FF(4)g(4)2034
3721 y(6)p 2125 3750 4 698 v 2127 3150 256 4 v 2180 3123
a(1)f(1)2180 3223 y(1)6 b(,)h(5)33 b(4)-38 3924 y(C)o(omme)13
b(on)g(obtient)g(deux)g(fois)g(le)g(m)q(\352me)h(r)o(este)f(\(6)q(\),)g
(\347a)g(va)g(cont)q(inue)q(r)g(ind\351\002nim)q(ent.)h(C)o(on)q(clusi)
q(on)f(:)3027 3868 y(17)p 3027 3905 82 5 v 3027 3981
a(11)3132 3924 y FB(\306)h FF(1,)8 b(5454)g FB(\242)g(\242)g(\242)25
b FF(n)-6 b('est)13 b(pas)g(d\351cimal,)-38 4046 y(puisqu)n('il)19
b(a)e(une)h(in\002nit\351)h(de)e(chiffr)o(es)h(apr\350s)g(la)f(virgule)
o(.)-246 4131 y
SDict begin H.S end
 -246 4131 a -246 4131 a
SDict begin 12 H.A end
 -246 4131 a -246
4131 a
SDict begin [/View [/XYZ H.V]/Dest (exo.30) cvn /DEST pdfmark end
 -246 4131 a -246 4150 a
SDict begin H.S end
 -246 4150 a -246 4150
a
SDict begin 12 H.A end
 -246 4150 a -246 4150 a
SDict begin [/View [/XYZ H.V]/Dest (Item.45) cvn /DEST pdfmark end
 -246 4150 a 0 TeXcolorgray
95 x FG(Ex)o(er)o(cice)d(30)p 0 TeXcolorgray 0 TeXcolorgray
146 w FF(1.)p 0 TeXcolorgray 1361 4345 a Fw(I)1391 4357
y FD(1)1441 4345 y FB(\306)1510 4346 y FF([)1536 4345
y(1;)8 b(4)1644 4346 y(])1827 4345 y Fw(I)1857 4357 y
FD(2)1907 4345 y FB(\306)1976 4346 y FF([)2001 4345 y(5;)g
FB(\3051)2202 4346 y FF([)2384 4345 y Fw(I)2414 4357
y FD(3)2464 4345 y FB(\306)2534 4346 y FF(])2559 4345
y FB(\241)p FF(2;)g(0)2722 4346 y([)p 0 TeXcolorgray
0 TeXcolorgray 670 4854 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 333.46617 a add def
/d 0.0 a add neg def /h 51.7842 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 670 4854 a 1180 4651 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 272.00815  0 -61.45802  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -61.45802
 272.00815  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-24.46938  def /maxTickline 27.31482  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 272.00815
0.0 -61.45802 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1165 4748 a FD(0)205 b(1)g(2)g(3)g(4)g(5)h(6)f(7)g(8)g(9)-2414
b FC(\241)p FD(1)-309 b FC(\241)p FD(2)1180 4651 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.81097 0.0 28.45274
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 3.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 264.6106 0.0 142.26372
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 3.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0.0 0.0 -56.90549 0.0
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 3.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1180 4651 a
tx@Dict begin { 62.59595 14.22636 } PutCoor PutBegin  end
 1180
4651 a 1 0 0 TeXcolorrgb 1182 4705 a Fw(I)1212 4717 y
FD(1)p 0 TeXcolorgray 1180 4651 a
tx@Dict begin  PutEnd  end
 1180 4651 a 1180 4651
a
tx@Dict begin { 204.29048 14.22636 } PutCoor PutBegin  end
 1180 4651 a 0 0 1 TeXcolorrgb 1182 4705 a Fw(I)1212
4717 y FD(2)p 0 TeXcolorgray 1180 4651 a
tx@Dict begin  PutEnd  end
 1180 4651 a
1180 4651 a
tx@Dict begin { -35.28156 14.22636 } PutCoor PutBegin  end
 1180 4651 a 0 1 0 TeXcolorrgb 1182 4705 a
Fw(I)1212 4717 y FD(3)p 0 TeXcolorgray 1180 4651 a
tx@Dict begin  PutEnd  end
 1180
4651 a 1180 4651 a
tx@Dict begin { -60.31967 9.10507 } PutCoor PutBegin  end
 1180 4651 a 0 1 0 TeXcolorrgb 135
x Fg(])p 0 TeXcolorgray 1180 4651 a
tx@Dict begin  PutEnd  end
 1180 4651 a 1180
4651 a
tx@Dict begin { -3.41418 9.10507 } PutCoor PutBegin  end
 1180 4651 a 0 1 0 TeXcolorrgb 135 x Fg([)p 0 TeXcolorgray
1180 4651 a
tx@Dict begin  PutEnd  end
 1180 4651 a 1180 4651 a
tx@Dict begin { 25.03854 9.10507 } PutCoor PutBegin  end
 1180 4651 a 1 0 0
TeXcolorrgb 135 x Fg([)p 0 TeXcolorgray 1180 4651 a
tx@Dict begin  PutEnd  end
 1180
4651 a 1180 4651 a
tx@Dict begin { 110.39677 9.10507 } PutCoor PutBegin  end
 1180 4651 a 1 0 0 TeXcolorrgb 135
x Fg(])p 0 TeXcolorgray 1180 4651 a
tx@Dict begin  PutEnd  end
 1180 4651 a 1180
4651 a
tx@Dict begin { 138.84952 9.10507 } PutCoor PutBegin  end
 1180 4651 a 0 0 1 TeXcolorrgb 135 x Fg([)p 0 TeXcolorgray
1180 4651 a
tx@Dict begin  PutEnd  end
 1180 4651 a 3438 4854 a
currentpoint initclip moveto
 3438 4854 a -246
4898 a
SDict begin H.S end
 -246 4898 a -246 4898 a
SDict begin 12 H.A end
 -246 4898 a -246 4898
a
SDict begin [/View [/XYZ H.V]/Dest (Item.46) cvn /DEST pdfmark end
 -246 4898 a 0 TeXcolorgray -141 5012 a FF(2.)p 0 TeXcolorgray
1287 5112 a Fw(I)1317 5124 y FD(1)1368 5112 y FB(\306)1437
5113 y FF([)1462 5112 y FB(\241)p FF(1;)8 b(1)1625 5113
y([)1808 5112 y Fw(I)1838 5124 y FD(2)1888 5112 y FB(\306)1957
5113 y FF(])1982 5112 y(3;)g FB(\3051)2183 5113 y FF([)2366
5112 y Fw(I)2396 5124 y FD(3)2446 5112 y FB(\306)2515
5113 y FF(])2540 5112 y FB(\2411)p FF(;)g FB(\241)p FF(2)2796
5113 y(])p 0 TeXcolorgray 0 TeXcolorgray 433 5622 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 390.37166 a add def
/d 0.0 a add neg def /h 51.7842 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 433
5622 a 1888 5418 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 215.10266  0 -175.269  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -175.269
 215.10266  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-24.46938  def /maxTickline 27.31482  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 215.10266
0.0 -175.269 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1873 5515 a FD(0)205
b(1)g(2)h(3)f(4)g(5)g(6)h(7)-1942 b FC(\241)p FD(1)-309
b FC(\241)p FD(2)f FC(\241)p FD(3)h FC(\241)p FD(4)g
FC(\241)p FD(5)g FC(\241)p FD(6)1888 5418 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 28.45274 0.0 -28.45274
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 3.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 264.6106 0.0 85.35823
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 3.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -56.90549 0.0 -175.269
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 3.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1888 5418 a
tx@Dict begin { -8.5359 14.22636 } PutCoor PutBegin  end
 1888
5418 a 1 0 0 TeXcolorrgb 1890 5472 a Fw(I)1920 5484 y
FD(1)p 0 TeXcolorgray 1888 5418 a
tx@Dict begin  PutEnd  end
 1888 5418 a 1888 5418
a
tx@Dict begin { 147.385 14.22636 } PutCoor PutBegin  end
 1888 5418 a 0 0 1 TeXcolorrgb 1890 5472 a Fw(I)1920
5484 y FD(2)p 0 TeXcolorgray 1888 5418 a
tx@Dict begin  PutEnd  end
 1888 5418 a
1888 5418 a
tx@Dict begin { -128.03734 14.22636 } PutCoor PutBegin  end
 1888 5418 a 0 1 0 TeXcolorrgb 1890 5472 a
Fw(I)1920 5484 y FD(3)p 0 TeXcolorgray 1888 5418 a
tx@Dict begin  PutEnd  end
 1888
5418 a 1888 5418 a
tx@Dict begin { -60.31967 9.10507 } PutCoor PutBegin  end
 1888 5418 a 0 1 0 TeXcolorrgb 135
x Fg(])p 0 TeXcolorgray 1888 5418 a
tx@Dict begin  PutEnd  end
 1888 5418 a 1888
5418 a
tx@Dict begin { -31.86693 9.10507 } PutCoor PutBegin  end
 1888 5418 a 1 0 0 TeXcolorrgb 135 x Fg([)p 0 TeXcolorgray
1888 5418 a
tx@Dict begin  PutEnd  end
 1888 5418 a 1888 5418 a
tx@Dict begin { 25.03854 9.10507 } PutCoor PutBegin  end
 1888 5418 a 1 0 0
TeXcolorrgb 135 x Fg([)p 0 TeXcolorgray 1888 5418 a
tx@Dict begin  PutEnd  end
 1888
5418 a 1888 5418 a
tx@Dict begin { 81.94403 9.10507 } PutCoor PutBegin  end
 1888 5418 a 0 0 1 TeXcolorrgb 135
x Fg(])p 0 TeXcolorgray 1888 5418 a
tx@Dict begin  PutEnd  end
 1888 5418 a 3674
5622 a
currentpoint initclip moveto
 3674 5622 a -246 5688 a
SDict begin H.S end
 -246 5688 a -246 5688
a
SDict begin 12 H.A end
 -246 5688 a -246 5688 a
SDict begin [/View [/XYZ H.V]/Dest (exo.31) cvn /DEST pdfmark end
 -246 5688 a 0 TeXcolorgray
1909 5895 a FF(14)p 0 TeXcolorgray eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.15) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246
-246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.47) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 83 x FG(Ex)o(er)o(cice)14
b(31)p 0 TeXcolorgray 0 TeXcolorgray 146 w FF(1.)p 0
TeXcolorgray 43 w(5)h FB(2)517 -162 y FF([)542 -163 y(2;)8
b(6)650 -162 y([)-246 -137 y
SDict begin H.S end
 -246 -137 a -246 -137 a
SDict begin 12 H.A end

-246 -137 a -246 -137 a
SDict begin [/View [/XYZ H.V]/Dest (Item.48) cvn /DEST pdfmark end
 -246 -137 a 0 TeXcolorgray -141
-34 a FF(2.)p 0 TeXcolorgray 43 w FB(\241)p FF(2)15 b
FB(\335)131 -33 y FF(])156 -34 y FB(\241)p FF(2;)8 b(1)319
-33 y(])-246 -8 y
SDict begin H.S end
 -246 -8 a -246 -8 a
SDict begin 12 H.A end
 -246 -8 a -246
-8 a
SDict begin [/View [/XYZ H.V]/Dest (Item.49) cvn /DEST pdfmark end
 -246 -8 a 0 TeXcolorgray -141 95 a FF(3.)p 0 TeXcolorgray
43 w Fy(\274)14 b FB(2)85 96 y FF(])111 95 y(3;)8 b(4)219
96 y([)263 95 y(\(on)17 b(r)o(appelle)i(que)f Fy(\274)c
FB(\274)g FF(3,)8 b(14\))-246 179 y
SDict begin H.S end
 -246 179 a -246 179
a
SDict begin 12 H.A end
 -246 179 a -246 179 a
SDict begin [/View [/XYZ H.V]/Dest (exo.32) cvn /DEST pdfmark end
 -246 179 a -246 197 a
SDict begin H.S end
 -246 197
a -246 197 a
SDict begin 12 H.A end
 -246 197 a -246 197 a
SDict begin [/View [/XYZ H.V]/Dest (Item.50) cvn /DEST pdfmark end
 -246 197 a 0 TeXcolorgray
97 x FG(Ex)o(er)o(cice)14 b(32)p 0 TeXcolorgray 0 TeXcolorgray
146 w FF(1.)p 0 TeXcolorgray 43 w(5)c FB(\243)g(j)g(\241)g
FF(6)p FB(j)16 b(\306)e FF(5)c FB(\243)g FF(6)16 b FB(\306)e
FF(30)-246 321 y
SDict begin H.S end
 -246 321 a -246 321 a
SDict begin 12 H.A end
 -246 321 a -246
321 a
SDict begin [/View [/XYZ H.V]/Dest (Item.51) cvn /DEST pdfmark end
 -246 321 a 0 TeXcolorgray -141 423 a FF(2.)p 0
TeXcolorgray 43 w FB(j)p FF(3)p FB(j)c(\305)g(j)g(\241)g
FF(3)p FB(j)17 b(\306)d FF(3)c FB(\305)g FF(3)15 b FB(\306)f
FF(6)-246 450 y
SDict begin H.S end
 -246 450 a -246 450 a
SDict begin 12 H.A end
 -246 450 a -246
450 a
SDict begin [/View [/XYZ H.V]/Dest (Item.52) cvn /DEST pdfmark end
 -246 450 a 0 TeXcolorgray -141 552 a FF(3.)p 0
TeXcolorgray 43 w FB(j)p FF(5)p FB(j)c(\241)g(j)g(\241)g
FF(5)p FB(j)17 b(\306)d FF(5)c FB(\241)g FF(5)15 b FB(\306)f
FF(0)-246 578 y
SDict begin H.S end
 -246 578 a -246 578 a
SDict begin 12 H.A end
 -246 578 a -246
578 a
SDict begin [/View [/XYZ H.V]/Dest (Item.53) cvn /DEST pdfmark end
 -246 578 a 0 TeXcolorgray -141 681 a FF(4.)p 0
TeXcolorgray 43 w FB(j)c(\241)g FF(4)p FB(j)g(\243)g(j)p
FF(2)p FB(j)17 b(\306)d FF(4)c FB(\243)g FF(2)15 b FB(\306)f
FF(8)-246 707 y
SDict begin H.S end
 -246 707 a -246 707 a
SDict begin 12 H.A end
 -246 707 a -246
707 a
SDict begin [/View [/XYZ H.V]/Dest (Item.54) cvn /DEST pdfmark end
 -246 707 a 0 TeXcolorgray -141 810 a FF(5.)p 0
TeXcolorgray 43 w FB(j)p FF(7)c FB(\241)g FF(4)p FB(j)16
b(\306)e(j)p FF(3)p FB(j)h(\306)f FF(3)-246 836 y
SDict begin H.S end
 -246
836 a -246 836 a
SDict begin 12 H.A end
 -246 836 a -246 836 a
SDict begin [/View [/XYZ H.V]/Dest (Item.55) cvn /DEST pdfmark end
 -246 836 a 0 TeXcolorgray
-141 939 a FF(6.)p 0 TeXcolorgray 43 w FB(j)p FF(4)c
FB(\241)g FF(7)p FB(j)16 b(\306)e(j)c(\241)g FF(3)p FB(j)16
b(\306)e FF(3)-246 965 y
SDict begin H.S end
 -246 965 a -246 965 a
SDict begin 12 H.A end
 -246 965
a -246 965 a
SDict begin [/View [/XYZ H.V]/Dest (Item.56) cvn /DEST pdfmark end
 -246 965 a 0 TeXcolorgray -141 1067 a FF(7.)p
0 TeXcolorgray 43 w FB(j)p FF(4)c FB(\241)g FF(3)p FB(j)g(\305)g(j)p
FF(5)g FB(\241)g FF(6)p FB(j)18 b(\306)c(j)p FF(1)p FB(j)c(\305)g(j)g
(\241)g FF(1)p FB(j)17 b(\306)d FF(1)c FB(\305)g FF(1)16
b FB(\306)e FF(2)-246 1094 y
SDict begin H.S end
 -246 1094 a -246 1094 a
SDict begin 12 H.A end

-246 1094 a -246 1094 a
SDict begin [/View [/XYZ H.V]/Dest (Item.57) cvn /DEST pdfmark end
 -246 1094 a 0 TeXcolorgray -141
1196 a FF(8.)p 0 TeXcolorgray 43 w FB(j)p FF(5)c FB(\241)g
FF(11)p FB(j)g(\305)g FF(2)g FB(\243)g(j)p FF(7)g FB(\241)g
FF(8)p FB(j)19 b(\306)14 b(j)c(\241)g FF(6)p FB(j)g(\305)g
FF(2)g FB(\243)g(j)g(\241)g FF(1)p FB(j)18 b(\306)c FF(6)c
FB(\305)g FF(2)g FB(\243)g FF(1)17 b FB(\306)d FF(6)c
FB(\305)g FF(2)15 b FB(\306)f FF(8)-246 1223 y
SDict begin H.S end
 -246 1223
a -246 1223 a
SDict begin 12 H.A end
 -246 1223 a -246 1223 a
SDict begin [/View [/XYZ H.V]/Dest (Item.58) cvn /DEST pdfmark end
 -246 1223 a 0 TeXcolorgray
-141 1325 a FF(9.)p 0 TeXcolorgray 43 w FB(j)p FF(8)c
FB(\241)g FF(5)p FB(j)g(\243)g(j)p FF(7)g FB(\241)g FF(10)p
FB(j)18 b(\306)d(j)p FF(3)p FB(j)10 b(\243)g(j)g(\241)g
FF(3)p FB(j)16 b(\306)f FF(3)10 b FB(\243)g FF(3)15 b
FB(\306)f FF(9)-246 1351 y
SDict begin H.S end
 -246 1351 a -246 1351 a
SDict begin 12 H.A end
 -246
1351 a -246 1351 a
SDict begin [/View [/XYZ H.V]/Dest (Item.59) cvn /DEST pdfmark end
 -246 1351 a 0 TeXcolorgray -181 1454
a FF(10.)p 0 TeXcolorgray 43 w FB(j)p FF(15)c FB(\241)g
FF(6)p FB(j)g(\241)g FF(4)g FB(\243)g(j)p FF(1)g FB(\241)g
FF(4)p FB(j)19 b(\306)14 b(j)p FF(9)p FB(j)c(\241)g FF(4)g
FB(\243)g(j)g(\241)g FF(3)p FB(j)18 b(\306)c FF(9)c FB(\241)g
FF(4)g FB(\243)g FF(3)16 b FB(\306)e FF(9)c FB(\241)g
FF(12)16 b FB(\306)f(\241)p FF(3)-246 1532 y
SDict begin H.S end
 -246 1532
a -246 1532 a
SDict begin 12 H.A end
 -246 1532 a -246 1532 a
SDict begin [/View [/XYZ H.V]/Dest (exo.33) cvn /DEST pdfmark end
 -246 1532 a -246
1551 a
SDict begin H.S end
 -246 1551 a -246 1551 a
SDict begin 12 H.A end
 -246 1551 a -246 1551
a
SDict begin [/View [/XYZ H.V]/Dest (Item.60) cvn /DEST pdfmark end
 -246 1551 a 0 TeXcolorgray 102 x FG(Ex)o(er)o(cice)f(33)p
0 TeXcolorgray 0 TeXcolorgray 146 w FF(1.)p 0 TeXcolorgray
43 w(On)j(r\351sout)h(l)o('\351quation)i FB(j)r Fw(x)15
b FB(\241)10 b FF(2)p FB(j)16 b(\306)e FF(3.)-38 1852
y FG(M\351thode)i(n\2601)f(:)i(av)o(ec)d(la)h(d\351\002nition)h(de)g
(la)f(v)o(aleur)f(absolue.)-38 1993 y FF(Les)k(nombr)o(es)f(dont)h(la)f
(valeur)h(absolue)g(vaut)g(3)g(sont)g(3)f(et)h FB(\241)p
FF(3.)-38 2100 y(Donc)f(dir)o(e)f(que)823 2200 y FB(j)r
Fw(x)f FB(\241)10 b FF(2)p FB(j)16 b(\306)e FF(3)-38
2325 y(r)o(evient)k(\340)f(dir)o(e)g(que)410 2467 y Fw(x)e
FB(\241)10 b FF(2)16 b FB(\306)e FF(3)146 b(ou)18 b(que)149
b Fw(x)15 b FB(\241)10 b FF(2)15 b FB(\306)f(\241)p FF(3)-38
2616 y(Donc)244 2865 y Fw(x)h FB(\241)363 2881 y Fv(\001)363
2865 y FF(2)c FB(\305)479 2881 y Fv(\001)479 2865 y FF(2)k
FB(\306)f FF(3)c FB(\305)g FF(2)148 b(ou)166 b Fw(x)15
b FB(\241)1281 2881 y Fv(\001)1281 2865 y FF(2)c FB(\305)1397
2881 y Fv(\001)1397 2865 y FF(2)k FB(\306)f(\241)p FF(3)c
FB(\305)g FF(2)244 2990 y Fw(x)20 b FB(\306)14 b FF(5)494
b(ou)166 b Fw(x)19 b FB(\306)14 b(\241)p FF(1)-38 3264
y(C)o(onclusion)19 b(:)f(l)o('\351quation)h(a)e(deux)h(solutions)h(:)h
Fw(x)f FB(\306)14 b FF(5)k(et)i Fw(x)f FB(\306)14 b(\241)p
FF(1.)p 0 TeXcolorgray 2050 3283 9 1514 v 0 TeXcolorgray
2095 1852 a FG(M\351thode)i(n\2602)g(:)g(av)o(ec)f(la)g(distance.)2095
2088 y FF(Dir)o(e)h(que)2956 2263 y FB(j)r Fw(x)f FB(\241)10
b FF(2)p FB(j)16 b(\306)e FF(3)2095 2487 y(r)o(evient)k(\340)g(dir)o(e)
e(que)i(la)g(distance)g(entr)o(e)h Fw(x)k FF(et)17 b(2)h(est)g
(\351gale)g(\340)f(3.)p 0 TeXcolorgray 0 TeXcolorgray
2268 3018 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 205.39366 a add def
/d 0.0 a add neg def /h 43.01123 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2268 3018 a 2610 2921 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 164.13728  0 -41.25638  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -41.25638
 164.13728  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-11.67528  def /maxTickline 31.33595  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 164.13728
0.0 -41.25638 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2595
3018 a FD(0)64 b(0.5)41 b(1.0)g(1.5)g(2.0)g(2.5)h(3.0)f(3.5)g(4.0)g
(4.5)g(5.0)-1397 b FC(\241)p FD(0.5)-237 b FC(\241)p
FD(1.0)2610 2921 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
-28.45274 14.22636 14.22636 14.22636   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 14.22636 14.22636 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2610 2921 a
tx@Dict begin { -8.5359 28.45274 } PutCoor PutBegin  end
 2610
2921 a 1 0 0 TeXcolorrgb 57 x FF(distance)18 b FB(\306)f
FF(3)p 0 TeXcolorgray 2610 2921 a
tx@Dict begin  PutEnd  end
 2610 2921 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 14.22636 99.5846 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
142.26372 14.22636 99.5846 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
2610 2921 a
tx@Dict begin { 76.82231 28.45274 } PutCoor PutBegin  end
 2610 2921 a 1 0 0 TeXcolorrgb 57 x FF(distance)h
FB(\306)f FF(3)p 0 TeXcolorgray 2610 2921 a
tx@Dict begin  PutEnd  end
 2610 2921
a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 0 1  setrgbcolor  [ 56.90549
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 1 0  setrgbcolor  [ 142.26372
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 1 0  setrgbcolor  [ -28.45274
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
3973 3018 a
currentpoint initclip moveto
 3973 3018 a 2095 3264 a FF(On)g(voit)h(qu)n('il)h(y)d(a)i
(deux)f(solutions)i(:)h Fw(x)f FB(\306)c FF(5)i(et)j
Fw(x)g FB(\306)14 b(\241)p FF(1.)-246 3363 y
SDict begin H.S end
 -246 3363
a -246 3363 a
SDict begin 12 H.A end
 -246 3363 a -246 3363 a
SDict begin [/View [/XYZ H.V]/Dest (Item.61) cvn /DEST pdfmark end
 -246 3363 a 0 TeXcolorgray
-141 3478 a FF(2.)p 0 TeXcolorgray 43 w(On)j(r\351sout)h(l)o
('\351quation)i FB(j)r Fw(x)15 b FB(\241)10 b FF(1)p
FB(j)16 b(\306)e FF(4.)-38 3677 y FG(M\351thode)i(n\2601)f(:)i(av)o(ec)
d(la)h(d\351\002nition)h(de)g(la)f(v)o(aleur)f(absolue.)-38
3818 y FF(Les)k(nombr)o(es)f(dont)h(la)f(valeur)h(absolue)g(vaut)g(4)g
(sont)g(4)f(et)h FB(\241)p FF(4.)-38 3925 y(Donc)f(dir)o(e)f(que)823
4024 y FB(j)r Fw(x)f FB(\241)10 b FF(1)p FB(j)16 b(\306)e
FF(4)-38 4149 y(r)o(evient)k(\340)f(dir)o(e)g(que)410
4291 y Fw(x)e FB(\241)10 b FF(1)16 b FB(\306)e FF(4)146
b(ou)18 b(que)149 b Fw(x)15 b FB(\241)10 b FF(1)15 b
FB(\306)f(\241)p FF(4)-38 4441 y(Donc)244 4690 y Fw(x)h
FB(\241)363 4706 y Fv(\001)363 4690 y FF(1)c FB(\305)479
4706 y Fv(\001)479 4690 y FF(1)k FB(\306)f FF(4)c FB(\305)g
FF(1)148 b(ou)166 b Fw(x)15 b FB(\241)1281 4706 y Fv(\001)1281
4690 y FF(1)c FB(\305)1397 4706 y Fv(\001)1397 4690 y
FF(1)k FB(\306)f(\241)p FF(4)c FB(\305)g FF(1)244 4814
y Fw(x)20 b FB(\306)14 b FF(5)494 b(ou)166 b Fw(x)19
b FB(\306)14 b(\241)p FF(3)-38 5088 y(C)o(onclusion)19
b(:)f(l)o('\351quation)h(a)e(deux)h(solutions)h(:)h Fw(x)f
FB(\306)14 b FF(5)k(et)i Fw(x)f FB(\306)14 b(\241)p FF(3.)p
0 TeXcolorgray 2050 5107 9 1514 v 0 TeXcolorgray 2095
3677 a FG(M\351thode)i(n\2602)g(:)g(av)o(ec)f(la)g(distance.)2095
3898 y FF(Dir)o(e)h(que)2956 4058 y FB(j)r Fw(x)f FB(\241)10
b FF(1)p FB(j)16 b(\306)e FF(4)2095 4267 y(r)o(evient)k(\340)g(dir)o(e)
e(que)i(la)g(distance)g(entr)o(e)h Fw(x)k FF(et)17 b(1)h(est)g
(\351gale)g(\340)f(4.)p 0 TeXcolorgray 0 TeXcolorgray
2095 4860 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 262.29915 a add def
/d 0.0 a add neg def /h 43.01123 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2095 4860 a 2910 4763 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 164.13728  0 -98.16187  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -98.16187
 164.13728  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-11.67528  def /maxTickline 31.33595  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 164.13728
0.0 -98.16187 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2895
4860 a FD(0)64 b(0.5)41 b(1.0)g(1.5)g(2.0)g(2.5)g(3.0)h(3.5)f(4.0)g
(4.5)g(5.0)-1397 b FC(\241)p FD(0.5)-237 b FC(\241)p
FD(1.0)g FC(\241)p FD(1.5)f FC(\241)p FD(2.0)h FC(\241)p
FD(2.5)g FC(\241)p FD(3.0)2910 4763 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 14.22636 14.22636 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
-85.35823 14.22636 14.22636 14.22636   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 2910
4763 a
tx@Dict begin { -51.21501 28.45274 } PutCoor PutBegin  end
 2910 4763 a 1 0 0 TeXcolorrgb 57 x FF(distance)18
b FB(\306)f FF(4)p 0 TeXcolorgray 2910 4763 a
tx@Dict begin  PutEnd  end
 2910 4763
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 14.22636 99.5846 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
142.26372 14.22636 99.5846 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2910 4763 a
tx@Dict begin { 51.21501 28.45274 } PutCoor PutBegin  end
 2910 4763 a 1 0 0
TeXcolorrgb 57 x FF(distance)h FB(\306)f FF(4)p 0 TeXcolorgray
2910 4763 a
tx@Dict begin  PutEnd  end
 2910 4763 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 0 1  setrgbcolor  [ 28.45274
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 1 0  setrgbcolor  [ 142.26372
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 1 0  setrgbcolor  [ -85.35823
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 4273 4860 a
currentpoint initclip moveto
 4273 4860 a 2095
5088 a FF(On)g(voit)h(qu)n('il)h(y)d(a)i(deux)f(solutions)i(:)h
Fw(x)f FB(\306)c FF(5)i(et)j Fw(x)g FB(\306)14 b(\241)p
FF(3.)-246 5188 y
SDict begin H.S end
 -246 5188 a -246 5188 a
SDict begin 12 H.A end
 -246 5188 a
-246 5188 a
SDict begin [/View [/XYZ H.V]/Dest (Item.62) cvn /DEST pdfmark end
 -246 5188 a 0 TeXcolorgray -141 5302 a FF(3.)p
0 TeXcolorgray 43 w(On)j(r\351sout)h(l)o('\351quation)i
FB(j)r Fw(x)15 b FB(\305)10 b FF(2)p FB(j)16 b(\306)e
FF(2.)p 0 TeXcolorgray 1909 5895 a(15)p 0 TeXcolorgray
eop end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.16) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -38 -163 a FG(M\351thode)16 b(n\2601)f(:)i(av)o(ec)d(la)
h(d\351\002nition)h(de)g(la)f(v)o(aleur)f(absolue.)-38
-3 y FF(Les)k(nombr)o(es)f(dont)h(la)f(valeur)h(absolue)g(vaut)g(2)g
(sont)g(2)f(et)h FB(\241)p FF(2.)-38 109 y(Donc)f(dir)o(e)f(que)823
209 y FB(j)r Fw(x)f FB(\305)10 b FF(2)p FB(j)16 b(\306)e
FF(2)-38 354 y(r)o(evient)k(\340)f(dir)o(e)g(que)410
528 y Fw(x)e FB(\305)10 b FF(2)16 b FB(\306)e FF(2)146
b(ou)18 b(que)149 b Fw(x)15 b FB(\305)10 b FF(2)15 b
FB(\306)f(\241)p FF(2)-38 716 y(Donc)244 1003 y Fw(x)h
FB(\305)363 1019 y Fv(\001)363 1003 y FF(2)c FB(\241)479
1019 y Fv(\001)479 1003 y FF(2)k FB(\306)f FF(2)c FB(\241)g
FF(2)148 b(ou)166 b Fw(x)15 b FB(\305)1281 1019 y Fv(\001)1281
1003 y FF(2)c FB(\241)1397 1019 y Fv(\001)1397 1003 y
FF(2)k FB(\306)f(\241)p FF(2)c FB(\241)g FF(2)244 1128
y Fw(x)20 b FB(\306)14 b FF(0)494 b(ou)166 b Fw(x)19
b FB(\306)14 b(\241)p FF(4)-38 1440 y(C)o(onclusion)19
b(:)f(l)o('\351quation)h(a)e(deux)h(solutions)h(:)h Fw(x)f
FB(\306)14 b FF(0)k(et)i Fw(x)f FB(\306)14 b(\241)p FF(4.)p
0 TeXcolorgray 2050 1458 9 1705 v 0 TeXcolorgray 2095
-163 a FG(M\351thode)i(n\2602)g(:)g(av)o(ec)f(la)g(distance.)2095
3 y FF(Il)i(y)g(a)g(une)h(vr)o(aie)g(dif\002cult\351)g(:)g(l)o
('\351galit\351)h FB(j)r Fw(x)c FB(\305)10 b FF(2)p FB(j)15
b(\306)g FF(2)i(se)h(r\351\351cr)q(it)2902 186 y FB(j)r
Fw(x)d FB(\241)10 b FF(\()p FB(\241)p FF(2\))p FB(j)15
b(\306)f FF(2)2095 370 y(\(il)26 b(faut)h(absolument)g(fair)o(e)f
(appar)o(a\356tr)o(e)h(un)f(\253)16 b FB(\241)g FF(\273)51
b(pour)27 b(pouvoir)2095 469 y(interpr\351ter)19 b(en)f(ter)q(mes)g(de)
f(distance\).)h(Donc)e(dir)o(e)h(que)2956 653 y FB(j)r
Fw(x)e FB(\305)10 b FF(2)p FB(j)16 b(\306)e FF(2)2095
836 y(r)o(evient)k(\340)g(dir)o(e)e(que)i(la)g(distance)g(entr)o(e)h
Fw(x)k FF(et)17 b FB(\241)p FF(2)h(est)g(\351gale)g(\340)f(2.)p
0 TeXcolorgray 0 TeXcolorgray 2445 1280 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 162.71454 a add def
/d 0.0 a add neg def /h 43.01123 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2445 1280 a
3496 1183 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 36.09993  0 -126.61461  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -126.61461
 36.09993  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-11.67528  def /maxTickline 31.33595  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 36.09993
0.0 -126.61461 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 3481 1280 a FD(0)64 b(0.5)-334
b FC(\241)p FD(0.5)-237 b FC(\241)p FD(1.0)g FC(\241)p
FD(1.5)f FC(\241)p FD(2.0)h FC(\241)p FD(2.5)g FC(\241)p
FD(3.0)g FC(\241)p FD(3.5)g FC(\241)p FD(4.0)3496 1183
y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
-113.81097 14.22636 -85.35823 14.22636   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
-56.90549 14.22636 -85.35823 14.22636   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 3496 1183 a
tx@Dict begin { -99.5846 28.45274 } PutCoor PutBegin  end
 3496 1183 a 1 0 0
TeXcolorrgb 57 x FF(dist.)18 b FB(\306)f FF(2)p 0 TeXcolorgray
3496 1183 a
tx@Dict begin  PutEnd  end
 3496 1183 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
-56.90549 14.22636 -28.45274 14.22636   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
0.0 14.22636 -28.45274 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 3496 1183 a
tx@Dict begin { -42.67911 28.45274 } PutCoor PutBegin  end
 3496
1183 a 1 0 0 TeXcolorrgb 57 x FF(dist.)h FB(\306)f FF(2)p
0 TeXcolorgray 3496 1183 a
tx@Dict begin  PutEnd  end
 3496 1183 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 0 1  setrgbcolor  [ -56.90549
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 1 0  setrgbcolor  [ -113.81097
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 1 0  setrgbcolor  [ 0.0 0.0 
 false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 3796 1280 a
currentpoint initclip moveto
 3796
1280 a 2095 1440 a FF(On)g(voit)h(qu)n('il)h(y)d(a)i(deux)f(solutions)i
(:)h Fw(x)f FB(\306)c FF(0)i(et)j Fw(x)g FB(\306)14 b(\241)p
FF(4.)-246 1539 y
SDict begin H.S end
 -246 1539 a -246 1539 a
SDict begin 12 H.A end
 -246 1539 a
-246 1539 a
SDict begin [/View [/XYZ H.V]/Dest (Item.63) cvn /DEST pdfmark end
 -246 1539 a 0 TeXcolorgray -141 1654 a FF(4.)p
0 TeXcolorgray 43 w(On)j(r\351sout)h(l)o('\351quation)i
FB(j)r Fw(x)15 b FB(\241)10 b FF(2)p FB(j)16 b(\306)e(j)r
Fw(x)h FB(\241)10 b FF(6)p FB(j)p FF(.)-38 1768 y(C)o(onfor)q
(m\351ment)25 b(\340)d(l)o('indication,)j(on)e(tr)o(availle)h(avec)f
(la)g(distance)g(:)g(dir)o(e)f(que)h FB(j)r Fw(x)18 b
FB(\241)12 b FF(2)p FB(j)21 b(\306)e(j)r Fw(x)f FB(\241)12
b FF(6)p FB(j)p FF(,)24 b(c)n('est)g(dir)o(e)e(que)h(la)g(distance)g
(entr)o(e)i Fw(x)j FF(et)-38 1867 y(2)22 b(est)h(la)f(m\352me)h(que)g
(la)f(distance)h(entr)o(e)h Fw(x)j FF(et)22 b(6.)h(A)n(utr)o(ement)f
(dit,)j Fw(x)i FF(est)22 b(\340)g(\351gale)h(distance)f(de)g(2)g(et)h
(de)e(6.)i(Il)e(y)h(a)f(un)i(seul)g(nombr)o(e)h Fw(x)j
FF(qui)-38 1967 y(convienne)19 b(:)e(le)h(milieu)h(de)e(l)o('inter)q
(valle)1184 1968 y([)1209 1967 y(2;)8 b(6)1317 1968 y(])1352
1967 y(,)17 b(c)n('est-\340-dir)o(e)i Fw(x)h FB(\306)14
b FF(4.)p 0 TeXcolorgray 0 TeXcolorgray 1345 2402 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 170.71646 a add def
/d 0.0 a add neg def /h 43.01123 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1345
2402 a 1109 2305 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 199.1692  0 28.45274  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 28.45274
 199.1692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-11.67528  def /maxTickline 31.33595  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 28.45274 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1094 2402 a FD(0)64
b(0.5)41 b(1.0)g(1.5)g(2.0)g(2.5)g(3.0)g(3.5)g(4.0)g(4.5)h(5.0)f(5.5)g
(6.0)g(6.5)-1494 b(0.5)41 b(1.0)1109 2305 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
170.71646 14.22636 128.03734 14.22636   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
113.81097 14.22636 128.03734 14.22636   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1109 2305 a
tx@Dict begin { 51.21501 28.45274 } PutCoor PutBegin  end
 1109 2305 a 1 0 0 TeXcolorrgb 57 x FF(4)18
b(est)g(\340)f(\351gale)g(distance)h(de)f(2)h(et)g(6)p
0 TeXcolorgray 1109 2305 a
tx@Dict begin  PutEnd  end
 1109 2305 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 14.22636 71.13185 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
113.81097 14.22636 71.13185 14.22636   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 1 0  setrgbcolor  [ 113.81097
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 0 1  setrgbcolor  [ 170.71646
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 0 1  setrgbcolor  [ 56.90549
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
2762 2402 a
currentpoint initclip moveto
 2762 2402 a -38 2560 a FF(C)o(onclusion)h(:)f(il)f(y)g(a)g
(une)h(seule)h(solution,)i Fw(x)f FB(\306)14 b FF(4.)-246
2645 y
SDict begin H.S end
 -246 2645 a -246 2645 a
SDict begin 12 H.A end
 -246 2645 a -246 2645
a
SDict begin [/View [/XYZ H.V]/Dest (exo.34) cvn /DEST pdfmark end
 -246 2645 a 0 TeXcolorgray 114 x FG(Ex)o(er)o(cice)g(34)p
0 TeXcolorgray 41 w FF(C)o(ommen\347ons)20 b(par)d(deux)h(exemples)h(:)
p 0 TeXcolorgray -76 2859 a(\225)p 0 TeXcolorgray 42
w(si)g Fw(x)h FB(\306)14 b FF(3,)k(alors)463 2788 y FB(p)p
526 2788 82 5 v 528 2859 a Fw(x)572 2835 y FD(2)622 2859
y FB(\306)691 2788 y(p)p 755 2788 76 5 v 71 x FF(3)795
2835 y FD(2)844 2859 y FB(\306)914 2794 y(p)p 977 2794
41 5 v 977 2859 a FF(9)d FB(\306)f FF(3.)p 0 TeXcolorgray
-76 2958 a(\225)p 0 TeXcolorgray 42 w(si)19 b Fw(x)h
FB(\306)14 b(\241)p FF(3,)k(alors)518 2888 y FB(p)p 581
2888 82 5 v 583 2958 a Fw(x)627 2934 y FD(2)677 2958
y FB(\306)746 2885 y Fo(p)p 822 2885 184 5 v 73 x FF(\()p
FB(\241)p FF(3\))971 2934 y FD(2)1021 2958 y FB(\306)1090
2893 y(p)p 1153 2893 41 5 v 1153 2958 a FF(9)d FB(\306)f
FF(3.)-246 3058 y(On)19 b(compr)o(end)f(que)h(quand)i
Fw(x)i FF(est)c(positif,)i(on)d(aur)o(a)h(toujours)1678
2987 y FB(p)p 1742 2987 82 5 v 1744 3058 a Fw(x)1788
3034 y FD(2)1838 3058 y FB(\306)f Fw(x)i FB(\306)c(j)r
Fw(x)5 b FB(j)19 b FF(;)f(tandis)h(que)g(dans)f(le)h(cas)g(o\371)h
Fw(x)k FF(est)19 b(n\351gatif,)g(le)g(signe)g FB(\241)f
FF(\253)c(dispa-)-246 3157 y(r)o(a\356t)g(\273)35 b(lorsqu)n('on)18
b(\351l\350ve)g(au)g(carr\351,)f(ce)g(qui)h(donne)g(\002nalement)1674
3087 y FB(p)p 1737 3087 V 1739 3157 a Fw(x)1783 3134
y FD(2)1833 3157 y FB(\306)c(j)r Fw(x)5 b FB(j)p FF(.)-246
3257 y(A)n(utr)o(ement)18 b(dit,)g(quel)g(que)g(soit)i
Fw(x)j FF(\(y)16 b(compr)q(is)i(si)i Fw(x)g FB(\306)14
b FF(0\),)k(on)f(a)g(l)o('\351galit\351)1775 3374 y Fo(p)p
1851 3374 V 1853 3456 a Fw(x)1897 3432 y FD(2)1947 3456
y FB(\306)d(j)r Fw(x)5 b FB(j)p FF(.)-246 3535 y
SDict begin H.S end
 -246
3535 a -246 3535 a
SDict begin 12 H.A end
 -246 3535 a -246 3535 a
SDict begin [/View [/XYZ H.V]/Dest (exo.35) cvn /DEST pdfmark end
 -246 3535
a -246 3553 a
SDict begin H.S end
 -246 3553 a -246 3553 a
SDict begin 12 H.A end
 -246 3553 a -246
3553 a
SDict begin [/View [/XYZ H.V]/Dest (Item.64) cvn /DEST pdfmark end
 -246 3553 a 0 TeXcolorgray 103 x FG(Ex)o(er)o(cice)14
b(35)p 0 TeXcolorgray 0 TeXcolorgray 146 w FF(1.)p 0
TeXcolorgray 43 w(Dir)o(e)19 b(que)h FB(j)r Fw(x)d FB(\241)11
b FF(2)p FB(j)18 b(\307)g FF(3,)i(c)n('est)h(dir)o(e)f(que)g(la)h
(distance)g(entr)o(e)h Fw(x)j FF(et)c(2)g(est)f(str)q(ictement)i
(inf\351r)q(ieur)o(e)f(\340)f(3.)h(On)f(voit)h(que)f(les)j
Fw(x)j FF(qui)-38 3755 y(conviennent)20 b(sont)e(tous)g(les)g(nombr)o
(es)f(de)g(l)o('inter)q(valle)1674 3756 y(])1700 3755
y FB(\241)p FF(1;)8 b(5)1863 3756 y([)1906 3755 y(\(extr\351mit\351s)19
b(ex)o(clues)o(,)h(puisque)f(l)o('in\351galit\351)g(est)f(str)q
(icte\).)p 0 TeXcolorgray 0 TeXcolorgray 1201 4198 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 205.39366 a add def
/d 0.0 a add neg def /h 43.01123 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end

1201 4198 a 1544 4101 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 164.13728  0 -41.25638  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -41.25638
 164.13728  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-11.67528  def /maxTickline 31.33595  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 164.13728
0.0 -41.25638 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1529 4198 a FD(0)63
b(0.5)41 b(1.0)h(1.5)f(2.0)g(2.5)g(3.0)g(3.5)g(4.0)g(4.5)g(5.0)-1397
b FC(\241)p FD(0.5)-237 b FC(\241)p FD(1.0)1544 4101
y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
-28.45274 14.22636 14.22636 14.22636   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 14.22636 14.22636 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1544 4101 a
tx@Dict begin { -8.5359 28.45274 } PutCoor PutBegin  end
 1544 4101 a 1 0 0
TeXcolorrgb 57 x FF(distance)18 b FB(\306)f FF(3)p 0
TeXcolorgray 1544 4101 a
tx@Dict begin  PutEnd  end
 1544 4101 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 14.22636 99.5846 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
142.26372 14.22636 99.5846 14.22636   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1544
4101 a
tx@Dict begin { 76.82231 28.45274 } PutCoor PutBegin  end
 1544 4101 a 1 0 0 TeXcolorrgb 57 x FF(distance)h
FB(\306)f FF(3)p 0 TeXcolorgray 1544 4101 a
tx@Dict begin  PutEnd  end
 1544 4101
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 142.26372 0.0 -28.45274
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 3.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1544 4101 a
tx@Dict begin { 138.84952 9.10507 } PutCoor PutBegin  end

1544 4101 a 0 1 0 TeXcolorrgb 134 x Fg([)p 0 TeXcolorgray
1544 4101 a
tx@Dict begin  PutEnd  end
 1544 4101 a 1544 4101 a
tx@Dict begin { -31.86693 9.10507 } PutCoor PutBegin  end
 1544 4101 a 0 1 0
TeXcolorrgb 134 x Fg(])p 0 TeXcolorgray 1544 4101 a
tx@Dict begin  PutEnd  end
 1544
4101 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 0 1  setrgbcolor  [ 56.90549
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 2906 4198
a
currentpoint initclip moveto
 2906 4198 a -246 4242 a
SDict begin H.S end
 -246 4242 a -246 4242 a
SDict begin 12 H.A end
 -246
4242 a -246 4242 a
SDict begin [/View [/XYZ H.V]/Dest (Item.65) cvn /DEST pdfmark end
 -246 4242 a 0 TeXcolorgray -141 4356
a FF(2.)p 0 TeXcolorgray 43 w(Les)24 b(points)g(de)f(l)o('inter)q
(valle)j(ci-dessous)e(sont)g(les)g(nombr)o(es)h Fw(x)j
FF(dont)23 b(la)h(distance)f(\340)g(8)h(est)f(inf\351r)q(ieur)o(e)h(ou)
f(\351gale)h(\340)f(2)g(\(donc)g(extr\351mit\351s)-38
4456 y(incluses\))9 b(;)19 b(autr)o(ement)f(dit,)g(ce)f(sont)h(les)g
(nombr)o(es)h Fw(x)k FF(tels)18 b(que)1879 4638 y FB(j)r
Fw(x)d FB(\241)10 b FF(8)p FB(j)16 b(\267)e FF(2.)p 0
TeXcolorgray 0 TeXcolorgray 1109 5119 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 227.62195 a add def
/d 0.0 a add neg def /h 45.52455 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1109 5119 a 164
5001 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 341.43292  0 113.81097  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 113.81097
 341.43292  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-14.22636  def /maxTickline 14.79555  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 341.43292
0.0 113.81097 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 149 5098 a FD(0)205 b(1)g(2)g(3)h(4)f(5)g(6)g
(7)g(8)h(9)189 b(10)175 b(11)-2409 b(1)205 b(2)g(3)h(4)164
5001 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 0.0 170.71646
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 3.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 164 5001
a
tx@Dict begin { 167.30226 7.96672 } PutCoor PutBegin  end
 164 5001 a 0 1 0 TeXcolorrgb 112 x Ff([)p 0 TeXcolorgray
164 5001 a
tx@Dict begin  PutEnd  end
 164 5001 a 164 5001 a
tx@Dict begin { 281.11324 7.96672 } PutCoor PutBegin  end
 164 5001 a 0 1 0 TeXcolorrgb
112 x Ff(])p 0 TeXcolorgray 164 5001 a
tx@Dict begin  PutEnd  end
 164 5001 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
284.52744 14.22636 241.84831 14.22636   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
227.62195 14.22636 241.84831 14.22636   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
164 5001 a
tx@Dict begin { 179.25237 28.45274 } PutCoor PutBegin  end
 164 5001 a 1 0 0 TeXcolorrgb 57 x FF(dist.)18
b FB(\306)f FF(2)p 0 TeXcolorgray 164 5001 a
tx@Dict begin  PutEnd  end
 164 5001
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
170.71646 14.22636 184.94283 14.22636   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
227.62195 14.22636 184.94283 14.22636   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 164 5001 a
tx@Dict begin { 233.31241 28.45274 } PutCoor PutBegin  end
 164 5001 a 1 0 0
TeXcolorrgb 57 x FF(dist.)h FB(\306)f FF(2)p 0 TeXcolorgray
164 5001 a
tx@Dict begin  PutEnd  end
 164 5001 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0 0 1  setrgbcolor  [ 227.62195
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
2999 5119 a
currentpoint initclip moveto
 2999 5119 a -246 5186 a
SDict begin H.S end
 -246 5186 a -246
5186 a
SDict begin 12 H.A end
 -246 5186 a -246 5186 a
SDict begin [/View [/XYZ H.V]/Dest (exo.36) cvn /DEST pdfmark end
 -246 5186 a 0 TeXcolorgray
133 x FG(Ex)o(er)o(cice)d(36)p 0 TeXcolorgray 41 w FF(Le)23
b(but)f(de)g(l)o('exer)o(cice)h(est)g(de)f(prouver)h(que)1569
5254 y FB(p)p 1632 5254 41 5 v 1632 5319 a FF(2)g(n)-6
b('est)23 b(pas)g(un)f(nombr)o(e)h(r)o(ationnel.)h(P)n(our)d(cela,)i
(on)f(fait)h(un)g(r)o(aisonnement)i(par)-246 5418 y(l)o('absur)o(de)18
b(:)f(on)g(suppose)i(que)691 5353 y FB(p)p 754 5353 V
754 5418 a FF(2)f(est)g(r)o(ationnel,)g(c)n('est-\340-dir)o(e)f(qu)n
('on)h(peut)g(l)o('\351cr)q(ir)o(e)f(sous)h(for)q(me)g(de)f(fr)o
(action)g(irr\351ductible)3551 5353 y FB(p)p 3615 5353
V 65 x FF(2)d FB(\306)3749 5376 y Fr(p)p 3748 5399 40
5 v 3750 5447 a(q)3798 5418 y FF(,)k(o\371)h Fw(p)j FF(et)e
Fw(q)-246 5526 y FF(sont)e(deux)g(entiers)g(str)q(ictement)h(positifs)o
(.)g(Il)e(faut,)h(par)q(tant)g(de)f(l\340,)h(aboutir)f(\340)g(une)h
(absur)o(dit\351.)p 0 TeXcolorgray 1909 5895 a(16)p 0
TeXcolorgray eop end
%%Page: 17 17
TeXDict begin 17 16 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.17) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246
-246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.66) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163
a FF(1.)p 0 TeXcolorgray 43 w(On)17 b(par)q(t)g(de)g(l)o
('\351galit\351)633 -228 y FB(p)p 697 -228 41 5 v 65
x FF(2)e FB(\306)832 -205 y Fr(p)p 831 -182 40 5 v 833
-134 a(q)881 -163 y FF(,)i(on)h(\351l\350ve)g(au)f(carr\351)g(et)h(on)f
(multiplie)j(par)g Fw(q)2227 -193 y FD(2)2293 -163 y
FF(:)1840 87 y FB(p)p 1903 87 41 5 v 1903 156 a FF(2)1944
103 y FD(2)1993 156 y FB(\306)2062 46 y Fo(\265)2108
100 y Fw(p)p 2106 137 53 5 v 2109 213 a(q)2169 46 y Fo(\266)2203
67 y FD(2)1938 359 y FF(2)15 b FB(\306)2074 303 y Fw(p)p
2072 340 V 2075 416 a(q)2145 359 y FB(\243)2222 303 y
Fw(p)p 2220 340 V 2223 416 a(q)1938 593 y FF(2)g FB(\306)2074
537 y Fw(p)2125 507 y FD(2)p 2072 574 88 5 v 2075 650
a Fw(q)2124 626 y FD(2)1797 827 y FF(2)p 1 0 0 TeXcolorrgb
FB(\243)r Fw(q)1943 793 y FD(2)p 0 TeXcolorgray 1993
827 a FB(\306)2074 771 y Fw(p)2125 741 y FD(2)p 2072
808 V 2064 926 a Fv(\000)2085 904 y(\000)2075 899 y Fw(q)2124
869 y FD(2)p 1 0 0 TeXcolorrgb 2169 827 a FB(\243)2226
854 y Fv(\023)2246 829 y(\023)2226 827 y Fw(q)2275 793
y FD(2)p 0 TeXcolorgray 1852 1024 a FF(2)r Fw(q)1943
990 y FD(2)1993 1024 y FB(\306)h Fw(p)2115 990 y FD(2)-246
1124 y
SDict begin H.S end
 -246 1124 a -246 1124 a
SDict begin 12 H.A end
 -246 1124 a -246 1124
a
SDict begin [/View [/XYZ H.V]/Dest (Item.67) cvn /DEST pdfmark end
 -246 1124 a 0 TeXcolorgray -141 1207 a FF(2.)p 0 TeXcolorgray
43 w(C)o(ommen\347ons)i(par)e(un)h(exemple)h(:)e(pr)o(enons)h(un)g
(nombr)o(e)f(qui)h(\253)c(se)j(ter)q(mine)h(par)f(4)d(\273)32
b(\(donc)16 b(le)g(chiffr)o(e)h(des)f(unit\351s)i(est)f(4\).)f(Le)h
(carr\351)f(de)g(ce)-38 1306 y(nombr)o(e)h(va)g(\253)d(se)j(ter)q
(miner)h(par)g(6)c(\273,)j(puisque)i(4)1403 1276 y FD(2)1453
1306 y FB(\306)14 b FF(16.)19 b(A)n(utr)o(ement)f(dit,)f(le)h(chiffr)o
(e)g(des)f(unit\351s)i(du)e(carr\351)g(est)h(6.)-38 1418
y(A)-5 b(vec)15 b(la)h(m\352me)h(technique)o(,)g(on)f(voit)g(que)g(si)g
(le)f(chiffr)o(e)h(des)g(unit\351s)h(est)f(9,)g(celui)h(du)e(carr\351)g
(est)h(1)g(\(puisque)h(9)3182 1388 y FD(2)3231 1418 y
FB(\306)e FF(81\))9 b(;)16 b(etc)o(.)g(On)f(r)o(emplit)i(ainsi)-38
1518 y(le)h(tableau)g(:)p 0 TeXcolorgray 0 TeXcolorgray
878 1580 2352 4 v 878 1679 4 100 v 931 1650 a(Chiffr)o(e)g(des)g
(unit\351s)g(de)h Fw(p)p 1792 1679 V 144 w FF(0)p 1935
1679 V 103 w(1)p 2079 1679 V 104 w(2)p 2222 1679 V 103
w(3)p 2366 1679 V 104 w(4)p 2509 1679 V 103 w(5)p 2653
1679 V 104 w(6)p 2796 1679 V 103 w(7)p 2939 1679 V 104
w(8)p 3083 1679 V 103 w(9)p 3226 1679 V 878 1683 2352
4 v 878 1782 4 100 v 931 1753 a(Chiffr)o(e)f(des)g(unit\351s)g(de)h
Fw(p)1707 1722 y FD(2)p 1792 1782 V 1845 1753 a FF(0)p
1935 1782 V 103 w(1)p 2079 1782 V 104 w(4)p 2222 1782
V 103 w(9)p 2366 1782 V 104 w(6)p 2509 1782 V 103 w(5)p
2653 1782 V 104 w(6)p 2796 1782 V 103 w(9)p 2939 1782
V 104 w(4)p 3083 1782 V 103 w(1)p 3226 1782 V 878 1786
2352 4 v -246 1823 a
SDict begin H.S end
 -246 1823 a -246 1823 a
SDict begin 12 H.A end
 -246 1823
a -246 1823 a
SDict begin [/View [/XYZ H.V]/Dest (Item.68) cvn /DEST pdfmark end
 -246 1823 a 0 TeXcolorgray -141 1913 a
FF(3.)p 0 TeXcolorgray 43 w(P)n(our)f(avoir)h(le)g(chiffr)o(e)g(des)f
(unit\351s)i(de)f(2)r Fw(q)1221 1883 y FD(2)1256 1913
y FF(,)g(il)g(suf\002t)g(de)f(r)o(epr)o(endr)o(e)g(la)g(deuxi\350me)j
(ligne)e(du)f(tableau)h(pr\351c\351dent)h(et)f(de)f(multiplier)j(par)e
(2.)-38 2013 y(P)m(ar)f(exemple)o(,)j(si)e(le)h(chiffr)o(e)f(des)g
(unit\351s)h(de)h Fw(q)k FF(est)19 b(7,)h(alors)f(celui)h(de)g
Fw(q)2087 1982 y FD(2)2141 2013 y FF(est)f(9)h(;)f(et)g(celui)h(de)f(2)
r Fw(q)2822 1982 y FD(2)2875 2013 y FF(est)h(8)f(\(puisque)i(2)11
b FB(\243)g FF(9)16 b FB(\306)g FF(18\).)k(On)e(r)o(emplit)-38
2112 y(ainsi)g(le)g(nouveau)g(tableau)g(:)p 0 TeXcolorgray
0 TeXcolorgray 859 2174 2391 4 v 859 2274 4 100 v 912
2244 a(Chiffr)o(e)g(des)f(unit\351s)i(de)g Fw(q)p 1811
2274 V 184 w FF(0)p 1955 2274 V 104 w(1)p 2098 2274 V
103 w(2)p 2241 2274 V 104 w(3)p 2385 2274 V 103 w(4)p
2528 2274 V 104 w(5)p 2672 2274 V 103 w(6)p 2815 2274
V 103 w(7)p 2959 2274 V 104 w(8)p 3102 2274 V 103 w(9)p
3246 2274 V 859 2277 2391 4 v 859 2377 4 100 v 912 2347
a(Chiffr)o(e)f(des)f(unit\351s)i(de)e(2)r Fw(q)1726 2317
y FD(2)p 1811 2377 V 1864 2347 a FF(0)p 1955 2377 V 104
w(2)p 2098 2377 V 103 w(8)p 2241 2377 V 104 w(8)p 2385
2377 V 103 w(2)p 2528 2377 V 104 w(0)p 2672 2377 V 103
w(2)p 2815 2377 V 103 w(8)p 2959 2377 V 104 w(8)p 3102
2377 V 103 w(2)p 3246 2377 V 859 2380 2391 4 v -246 2417
a
SDict begin H.S end
 -246 2417 a -246 2417 a
SDict begin 12 H.A end
 -246 2417 a -246 2417 a
SDict begin [/View [/XYZ H.V]/Dest (Item.69) cvn /DEST pdfmark end
 -246
2417 a 0 TeXcolorgray -141 2507 a FF(4.)p 0 TeXcolorgray
43 w(D)o('apr\350s)k(la)g(question)i(1,)f(2)r Fw(q)831
2477 y FD(2)884 2507 y FB(\306)e Fw(p)1010 2477 y FD(2)1045
2507 y FF(.)h(Les)h(nombr)o(es)g(2)r Fw(q)1644 2477 y
FD(2)1700 2507 y FF(et)i Fw(p)1840 2477 y FD(2)1895 2507
y FF(\351tant)e(\351gaux,)g(ils)g(ont)g(le)f(m\352me)i(chiffr)o(e)f
(des)f(unit\351s)o(.)h(Or)f(dans)h(nos)f(deux)-38 2607
y(tableaux,)e(le)f(seul)h(chiffr)o(e)f(en)g(commun)h(des)f
(deuxi\350mes)h(lignes)g(est)f(le)g(0)g(;)g(et)g(on)g(l)o('obtient)i
(lorsque)e(le)h(chiffr)o(e)f(des)g(unit\351s)h(de)g Fw(p)k
FF(est)c(0,)f(et)-38 2706 y(lorsque)g(le)g(chiffr)o(e)g(des)f
(unit\351s)i(de)g Fw(q)k FF(est)18 b(0)g(ou)f(5.)-246
2738 y
SDict begin H.S end
 -246 2738 a -246 2738 a
SDict begin 12 H.A end
 -246 2738 a -246 2738
a
SDict begin [/View [/XYZ H.V]/Dest (Item.70) cvn /DEST pdfmark end
 -246 2738 a 0 TeXcolorgray -141 2831 a FF(5.)p 0 TeXcolorgray
43 w(S)n(upposons)25 b(que)518 2766 y FB(p)p 582 2766
41 5 v 65 x FF(2)e(soit)g(r)o(ationnel)h(:)f(on)g(peut)g(donc)g(l)o
('\351cr)q(ir)o(e)f(sous)i(for)q(me)e(de)h(fr)o(action)g
(irr\351ductible)3167 2766 y FB(p)p 3231 2766 V 65 x
FF(2)d FB(\306)3376 2788 y Fr(p)p 3375 2812 40 5 v 3377
2859 a(q)3425 2831 y FF(.)j(D)o('apr\350s)f(la)h(question)-38
2939 y(pr\351c\351dente)o(,)18 b Fw(p)j FF(se)16 b(ter)q(mine)g(par)g
(0)f(et)j Fw(q)j FF(se)16 b(ter)q(mine)g(par)g(0)g(ou)f(5.)h(M)o(ais)g
(alors)i Fw(p)j FF(et)d Fw(q)j FF(sont)16 b(tous)g(deux)g(multiples)i
(de)d(5,)h(et)g(donc)f(la)h(fr)o(action)-27 2996 y Fr(p)p
-28 3019 V -26 3067 a(q)39 3039 y FF(n)-6 b('est)18 b(pas)g
(irr\351ductible)o(,)g(en)f(contr)o(adiction)h(avec)g(l)o
('hypoth\350se)i(que)e(nous)g(avons)g(faite)g(au)f(d\351par)q(t.)-38
3221 y(C)o(onclusion)i(:)f(supposant)h(que)940 3156 y
FB(p)p 1003 3156 41 5 v 1003 3221 a FF(2)f(\351tait)g(r)o(ationnel,)h
(on)f(aboutit)g(\340)f(une)h(absur)o(dit\351)9 b(;)17
b(c)n('est)h(donc)f(que)3056 3156 y FB(p)p 3119 3156
V 3119 3221 a FF(2)h(est)g(irr)o(ationnel)h(:)3716 3156
y FB(p)p 3780 3156 V 65 x FF(2)14 b FB(\335)h Fh(Q)p
FF(.)-246 3364 y
SDict begin H.S end
 -246 3364 a -246 3364 a
SDict begin 12 H.A end
 -246 3364 a
-246 3364 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 -246 3364 a 132 x FH(3)105 b(G\351om\351tr)q(ie)23
b(r)n(ep\351r\351e)-246 3605 y
SDict begin H.S end
 -246 3605 a -246 3605
a
SDict begin 12 H.A end
 -246 3605 a -246 3605 a
SDict begin [/View [/XYZ H.V]/Dest (exo.37) cvn /DEST pdfmark end
 -246 3605 a -246 3593 a
SDict begin H.S end
 -246
3593 a -246 3593 a
SDict begin 12 H.A end
 -246 3593 a -246 3593 a
SDict begin [/View [/XYZ H.V]/Dest (Item.71) cvn /DEST pdfmark end
 -246 3593
a 0 TeXcolorgray 87 x FG(Ex)o(er)o(cice)14 b(37)p 0 TeXcolorgray
0 TeXcolorgray 146 w FF(1.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 934 5208 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 269.73187 a add def
/d 0.0 a add neg def /h 176.97607 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 934 5208 a 1950 4386 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 147.385 0.0 -122.34688 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 77.96066 0.0 -99.01541   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 147.385  0 -122.34688  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -122.34688
 147.385  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.01541  def /maxTickline 77.96066  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.96066
0.0 -99.01541   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 147.385
0.0 -122.34688 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.96066  0 -99.01541  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.01541
 77.96066  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.34688  def /maxTickline 147.385  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.96066
0.0 -99.01541   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 147.385
0.0 -122.34688 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1935 4483 a FD(0)205 b(1)g(2)g(3)g(4)-1233 b FC(\241)p
FD(1)-309 b FC(\241)p FD(2)g FC(\241)p FD(3)g FC(\241)p
FD(4)1861 4405 y(0)1819 4641 y FC(\241)p FD(1)1819 4877
y FC(\241)p FD(2)1819 5113 y FC(\241)p FD(3)1861 4169
y(1)1861 3933 y(2)1950 4386 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 71.13185 0.0 28.45274
56.90549   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 46.20705 27.54231 51.67001
31.63943   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 47.91458 25.26604 53.37755
29.36316   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.81097 -56.90549 71.13185
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 88.88615 -29.36316 94.34912
-25.26604   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 90.59369 -31.63943 96.05666
-27.54231   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -28.45274 -14.22636 -113.81097
56.90549   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -73.31783 18.71638 -68.94588
23.9627   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.90549 -85.35823 -28.45274
-14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 12.04039 -52.41545 16.41234
-47.16913   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 28.45274 56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1950 4386 a
tx@Dict begin { 30.729 62.59595 } PutCoor PutBegin  end
 1950
4386 a 0.30196 0.30196 1 TeXcolorrgb 6 w Fw(A)p 0 TeXcolorgray
1950 4386 a
tx@Dict begin  PutEnd  end
 1950 4386 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 113.81097 -56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
1950 4386 a
tx@Dict begin { 116.08723 -51.21501 } PutCoor PutBegin  end
 1950 4386 a 0.30196 0.30196 1 TeXcolorrgb
Fw(B)p 0 TeXcolorgray 1950 4386 a
tx@Dict begin  PutEnd  end
 1950 4386 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 1 0  setrgbcolor  [ 71.13185
0.0   false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1950 4386 a
tx@Dict begin { 73.40813 4.55254 } PutCoor PutBegin  end
 1950 4386 a 0 1 0
TeXcolorrgb 2 w Fw(I)p 0 TeXcolorgray 1950 4386 a
tx@Dict begin  PutEnd  end
 1950
4386 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ -113.81097 56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1950 4386
a
tx@Dict begin { -111.5347 62.59595 } PutCoor PutBegin  end
 1950 4386 a 0.30196 0.30196 1 TeXcolorrgb 1948 4385
a Fw(C)p 0 TeXcolorgray 1950 4386 a
tx@Dict begin  PutEnd  end
 1950 4386 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 56.90549 -85.35823   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1950 4386 a
tx@Dict begin { 59.18175 -79.66776 } PutCoor PutBegin  end
 1950 4386 a 0.30196 0.30196 1
TeXcolorrgb Fw(D)p 0 TeXcolorgray 1950 4386 a
tx@Dict begin  PutEnd  end
 1950 4386
a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 1 0  setrgbcolor  [ -28.45274
-14.22636   false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1950 4386 a
tx@Dict begin { -36.98865 -21.05518 } PutCoor PutBegin  end

1950 4386 a 0 1 0 TeXcolorrgb 1955 4377 a Fw(J)p 0 TeXcolorgray
1950 4386 a
tx@Dict begin  PutEnd  end
 1950 4386 a 3173 5208 a
currentpoint initclip moveto
 3173 5208 a -246
5245 a
SDict begin H.S end
 -246 5245 a -246 5245 a
SDict begin 12 H.A end
 -246 5245 a -246 5245
a
SDict begin [/View [/XYZ H.V]/Dest (Item.72) cvn /DEST pdfmark end
 -246 5245 a 0 TeXcolorgray 10 5357 a FF(\(a\))p 0 TeXcolorgray
41 w(On)17 b(a)23 b Fw(A)s FF(\()15 b(1)409 5403 y Fr(x)444
5413 y Fd(A)496 5357 y FF(;)41 b(2)544 5403 y Fr(y)577
5413 y Fd(A)613 5357 y FF(\))16 b(et)i Fw(B)7 b FF(\()16
b(4)822 5403 y Fr(x)854 5413 y Fd(B)910 5357 y FF(;)26
b FB(\241)p FF(2)971 5403 y Fr(y)1001 5413 y Fd(B)1051
5357 y FF(\).)17 b(On)g(calcule)i(les)f(coor)o(donn\351es)f(de)i
Fw(I)42 b FF(:)983 5617 y Fw(I)1027 5530 y Fo(\263)1071
5561 y Fw(x)1116 5573 y Fr(A)1170 5561 y FB(\305)12 b
Fw(x)1278 5573 y Fr(B)p 1069 5598 257 5 v 1177 5674 a
FF(2)1336 5617 y(;)1378 5561 y Fw(y)1421 5573 y Fr(A)1475
5561 y FB(\305)i Fw(y)1583 5573 y Fr(B)p 1374 5598 256
5 v 1482 5674 a FF(2)1640 5530 y Fo(\264)1828 5617 y
Fw(I)1872 5507 y Fo(\265)1916 5561 y FF(1)c FB(\305)g
FF(4)p 1916 5598 157 5 v 1974 5674 a(2)2082 5617 y(;)2121
5561 y(2)g FB(\305)g FF(\()p FB(\241)p FF(2\))p 2121
5598 265 5 v 2233 5674 a(2)2395 5507 y Fo(\266)2586 5617
y Fw(I)2630 5507 y Fo(\265)2675 5561 y FF(5)p 2675 5598
41 5 v 2675 5674 a(2)2725 5617 y(;)2763 5561 y(0)p 2763
5598 V 2763 5674 a(2)2814 5507 y Fo(\266)3004 5617 y
Fw(I)3048 5618 y FF(\()3075 5617 y(2,)e(5;)g(0)3251 5618
y(\))3289 5617 y(.)p 0 TeXcolorgray 1909 5895 a(17)p
0 TeXcolorgray eop end
%%Page: 18 18
TeXDict begin 18 17 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.18) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246
-246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.73) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 4 -163
a FF(\(b\))p 0 TeXcolorgray 635 -33 a Fw(A)s(B)22 b FB(\306)825
-136 y Fo(q)p 902 -136 771 5 v 902 -32 a FF(\()930 -33
y Fw(x)971 -21 y Fr(B)1029 -33 y FB(\241)12 b Fw(x)1141
-21 y Fr(A)1185 -32 y FF(\))1211 -62 y FD(2)1257 -33
y FB(\305)1322 -97 y Fo(\241)1355 -33 y Fw(y)1394 -21
y Fr(B)1451 -33 y FB(\241)i Fw(y)1563 -21 y Fr(A)1607
-97 y Fo(\242)1637 -76 y FD(2)1686 -33 y FB(\306)1755
-136 y Fo(q)p 1831 -136 620 5 v 104 x FF(\()1858 -33
y(4)c FB(\241)g FF(1)2013 -32 y(\))2041 -62 y FD(2)2086
-33 y FB(\305)2151 -32 y FF(\()2178 -33 y FB(\241)p FF(2)g
FB(\241)g FF(2)2388 -32 y(\))2416 -62 y FD(2)2465 -33
y FB(\306)2534 -136 y Fo(q)p 2611 -136 335 5 v 2611 -33
a FF(3)2651 -57 y FD(2)2696 -33 y FB(\305)2761 -32 y
FF(\()2788 -33 y FB(\241)p FF(4)2883 -32 y(\))2910 -62
y FD(2)2960 -33 y FB(\306)3029 -102 y(p)p 3092 -102 197
5 v 3092 -33 a FF(9)g FB(\305)g FF(16)16 b FB(\306)3373
-102 y(p)p 3436 -102 82 5 v 3436 -33 a FF(25)f FB(\306)g
FF(5.)-246 48 y
SDict begin H.S end
 -246 48 a -246 48 a
SDict begin 12 H.A end
 -246 48 a -246 48
a
SDict begin [/View [/XYZ H.V]/Dest (Item.74) cvn /DEST pdfmark end
 -246 48 a -246 48 a
SDict begin H.S end
 -246 48 a -246 48 a
SDict begin 12 H.A end
 -246 48 a -246
48 a
SDict begin [/View [/XYZ H.V]/Dest (Item.75) cvn /DEST pdfmark end
 -246 48 a 0 TeXcolorgray -141 131 a FF(2.)p 0 TeXcolorgray
0 TeXcolorgray 91 w(\(a\))p 0 TeXcolorgray 41 w(On)i(a)e
Fw(C)9 b FF(\()p FB(\241)p FF(4)421 177 y Fr(x)452 187
y Fd(C)520 131 y FF(;)41 b(2)569 177 y Fr(y)598 187 y
Fd(C)637 131 y FF(\))17 b(et)g Fw(D)6 b FF(\()18 b(2)855
177 y Fr(x)887 187 y Fd(D)948 131 y FF(;)25 b FB(\241)p
FF(3)1006 177 y Fr(y)1036 187 y Fd(D)1089 131 y FF(\).)17
b(On)g(calcule)h(les)g(coor)o(donn\351es)g(de)k Fw(J)39
b FF(:)839 404 y Fw(J)882 316 y Fo(\263)926 347 y Fw(x)965
359 y Fr(C)1025 347 y FB(\305)12 b Fw(x)1133 359 y Fr(D)p
924 384 263 5 v 1035 461 a FF(2)1197 404 y(;)1239 347
y Fw(y)1276 359 y Fr(C)1336 347 y FB(\305)i Fw(y)1444
359 y Fr(D)p 1235 384 V 1346 461 a FF(2)1507 316 y Fo(\264)1698
404 y Fw(J)1741 294 y Fo(\265)1785 347 y FB(\241)p FF(4)c
FB(\305)g FF(2)p 1785 384 212 5 v 1871 461 a(2)2006 404
y(;)2045 347 y(2)g FB(\305)g FF(\()p FB(\241)p FF(3\))p
2045 384 265 5 v 2157 461 a(2)2319 294 y Fo(\266)2513
404 y Fw(J)2556 294 y Fo(\265)2600 347 y FB(\241)p FF(2)p
2600 384 96 5 v 2627 461 a(2)2705 404 y(;)2744 347 y
FB(\241)p FF(1)p 2744 384 V 2771 461 a(2)2849 294 y Fo(\266)3043
404 y Fw(J)3086 405 y FF(\()3112 404 y FB(\241)p FF(1;)e
FB(\241)p FF(0,)g(5)3398 405 y(\))3435 404 y(.)-246 557
y
SDict begin H.S end
 -246 557 a -246 557 a
SDict begin 12 H.A end
 -246 557 a -246 557 a
SDict begin [/View [/XYZ H.V]/Dest (Item.76) cvn /DEST pdfmark end
 -246 557
a 0 TeXcolorgray 4 637 a FF(\(b\))p 0 TeXcolorgray 604
767 a Fw(C)h(D)20 b FB(\306)810 664 y Fo(q)p 887 664
784 5 v 887 768 a FF(\()916 767 y Fw(x)957 779 y Fr(D)1020
767 y FB(\241)12 b Fw(x)1126 779 y Fr(C)1176 768 y FF(\))1203
738 y FD(2)1248 767 y FB(\305)1313 702 y Fo(\241)1347
767 y Fw(y)1386 779 y Fr(D)1450 767 y FB(\241)i Fw(y)1556
779 y Fr(C)1605 702 y Fo(\242)1635 724 y FD(2)1684 767
y FB(\306)1753 663 y Fo(q)p 1830 663 729 5 v 1830 768
a FF(\()1856 767 y(2)c FB(\241)g FF(\()p FB(\241)p FF(4\))2120
768 y(\))2148 737 y FD(2)2193 767 y FB(\305)2258 768
y FF(\()2285 767 y FB(\241)p FF(3)g FB(\241)g FF(2)2495
768 y(\))2523 738 y FD(2)2572 767 y FB(\306)2641 664
y Fo(q)p 2717 664 335 5 v 103 x FF(6)2757 743 y FD(2)2803
767 y FB(\305)2868 768 y FF(\()2895 767 y FB(\241)p FF(5)2990
768 y(\))3017 738 y FD(2)3066 767 y FB(\306)3135 698
y(p)p 3199 698 238 5 v 69 x FF(36)g FB(\305)g FF(25)16
b FB(\306)3520 698 y(p)p 3583 698 82 5 v 3583 767 a FF(61)q(.)-246
865 y
SDict begin H.S end
 -246 865 a -246 865 a
SDict begin 12 H.A end
 -246 865 a -246 865 a
SDict begin [/View [/XYZ H.V]/Dest (exo.38) cvn /DEST pdfmark end
 -246
865 a -246 883 a
SDict begin H.S end
 -246 883 a -246 883 a
SDict begin 12 H.A end
 -246 883 a -246
883 a
SDict begin [/View [/XYZ H.V]/Dest (Item.77) cvn /DEST pdfmark end
 -246 883 a 0 TeXcolorgray 83 x FG(Ex)o(er)o(cice)e(38)p
0 TeXcolorgray 0 TeXcolorgray 146 w FF(1.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 847 2970 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 290.78706 a add def
/d 0.0 a add neg def /h 233.3124 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 847 2970 a 1201
2346 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -56.90549 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 248.10796 0.0 -42.67911 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -28.45274 0.0 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 158.19717 0.0 -75.11522   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 248.10796  0 -42.67911  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -42.67911
 248.10796  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.11522  def /maxTickline 158.19717  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 158.19717
0.0 -75.11522   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 248.10796
0.0 -42.67911 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 158.19717  0 -75.11522  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -75.11522
 158.19717  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.67911  def /maxTickline 248.10796  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 158.19717
0.0 -75.11522   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 248.10796
0.0 -42.67911 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1186 2443 a FD(0)205 b(1)g(2)g(3)h(4)f(5)g(6)g
(7)g(8)-2177 b FC(\241)p FD(1)1112 2366 y(0)1070 2602
y FC(\241)p FD(1)1070 2838 y FC(\241)p FD(2)1112 2130
y(1)1112 1893 y(2)1112 1657 y(3)1112 1421 y(4)1112 1185
y(5)1201 2346 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 0.0 0.0 -56.90549   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 142.26372 142.26372 0.0  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 85.35823 199.1692 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 -56.90549 56.90549 85.35823   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 99.5846 42.67911 0.0
-56.90549   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 51.20068 -10.53345 46.37202
-5.70479   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 53.21255 -8.52158 48.3839
-3.69292   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 199.1692 142.26372 99.5846
42.67911   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 150.7853 89.05115 145.95663
93.8798   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 152.79716 91.06302 147.9685
95.89168   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 99.5846 42.67911 56.90549
85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 75.8307 61.60434 80.65936
66.433   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 142.26372 0.0 99.5846
42.67911   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 118.50983 18.92522 123.33849
23.75388   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 0.0 -56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1201 2346 a
tx@Dict begin { -9.10507 -49.50792 } PutCoor PutBegin  end
 1201 2346 a 0.30196 0.30196 1
TeXcolorrgb 6 w Fw(A)p 0 TeXcolorgray 1201 2346 a
tx@Dict begin  PutEnd  end
 1201
2346 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 199.1692 142.26372   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1201 2346
a
tx@Dict begin { 201.44547 147.95418 } PutCoor PutBegin  end
 1201 2346 a 0.30196 0.30196 1 TeXcolorrgb Fw(B)p 0
TeXcolorgray 1201 2346 a
tx@Dict begin  PutEnd  end
 1201 2346 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 56.90549 85.35823   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end


@endspecial 1201 2346 a
tx@Dict begin { 59.18175 91.04869 } PutCoor PutBegin  end
 1201 2346 a 0.30196 0.30196 1
TeXcolorrgb 1199 2345 a Fw(C)p 0 TeXcolorgray 1201 2346
a
tx@Dict begin  PutEnd  end
 1201 2346 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 142.26372 0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1201 2346 a
tx@Dict begin { 147.95418 5.69046 } PutCoor PutBegin  end
 1201 2346 a 0.30196 0.30196 1 TeXcolorrgb
Fw(D)p 0 TeXcolorgray 1201 2346 a
tx@Dict begin  PutEnd  end
 1201 2346 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.25  setgray  [ 99.5846 42.67911
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 3261 2970 a
currentpoint initclip moveto
 3261 2970 a -246
3014 a
SDict begin H.S end
 -246 3014 a -246 3014 a
SDict begin 12 H.A end
 -246 3014 a -246 3014
a
SDict begin [/View [/XYZ H.V]/Dest (Item.78) cvn /DEST pdfmark end
 -246 3014 a 0 TeXcolorgray -141 3128 a FF(2.)p 0 TeXcolorgray
43 w(On)17 b(calcule)h(les)g(coor)o(donn\351es)g(de)h
Fw(M)39 b FF(:)802 3334 y Fw(M)888 3247 y Fo(\263)931
3278 y Fw(x)976 3290 y Fr(A)1030 3278 y FB(\305)12 b
Fw(x)1138 3290 y Fr(B)p 929 3315 257 5 v 1037 3391 a
FF(2)1195 3334 y(;)1238 3278 y Fw(y)1281 3290 y Fr(A)1334
3278 y FB(\305)i Fw(y)1442 3290 y Fr(B)p 1234 3315 256
5 v 1341 3391 a FF(2)1499 3247 y Fo(\264)1687 3334 y
Fw(M)1773 3224 y Fo(\265)1817 3278 y FF(0)c FB(\305)g
FF(7)p 1817 3315 157 5 v 1875 3391 a(2)1983 3334 y(;)2022
3278 y FB(\241)p FF(2)g FB(\305)g FF(5)p 2022 3315 212
5 v 2107 3391 a(2)2243 3224 y Fo(\266)2433 3334 y Fw(M)2519
3224 y Fo(\265)2563 3278 y FF(7)p 2563 3315 41 5 v 2563
3391 a(2)2614 3334 y(;)2652 3278 y(3)p 2652 3315 V 2652
3391 a(2)2703 3224 y Fo(\266)2893 3334 y Fw(M)2979 3335
y FF(\()3006 3334 y(3,)e(5;)g(1,)g(5)3250 3335 y(\))3288
3334 y(.)-38 3559 y(P)o(uis)18 b(celles)g(de)i Fw(M)517
3528 y FC(0)570 3559 y FF(:)780 3794 y Fw(M)857 3760
y FC(0)887 3707 y Fo(\263)931 3738 y Fw(x)970 3750 y
Fr(C)1030 3738 y FB(\305)12 b Fw(x)1138 3750 y Fr(D)p
929 3775 263 5 v 1040 3851 a FF(2)1202 3794 y(;)1244
3738 y Fw(y)1281 3750 y Fr(C)1341 3738 y FB(\305)i Fw(y)1449
3750 y Fr(D)p 1240 3775 V 1351 3851 a FF(2)1512 3707
y Fo(\264)1700 3794 y Fw(M)1777 3760 y FC(0)1807 3684
y Fo(\265)1851 3738 y FF(2)c FB(\305)g FF(5)p 1851 3775
157 5 v 1909 3851 a(2)2017 3794 y(;)2056 3738 y(3)g FB(\305)g
FF(0)p 2056 3775 V 2114 3851 a(2)2222 3684 y Fo(\266)2412
3794 y Fw(M)2489 3760 y FC(0)2519 3684 y Fo(\265)2564
3738 y FF(7)p 2564 3775 41 5 v 2564 3851 a(2)2614 3794
y(;)2652 3738 y(3)p 2652 3775 V 2652 3851 a(2)2703 3684
y Fo(\266)2893 3794 y Fw(M)2970 3760 y FC(0)3000 3795
y FF(\()3027 3794 y(3,)e(5;)g(1,)g(5)3271 3795 y(\))3309
3794 y(.)-246 3914 y
SDict begin H.S end
 -246 3914 a -246 3914 a
SDict begin 12 H.A end
 -246 3914
a -246 3914 a
SDict begin [/View [/XYZ H.V]/Dest (Item.79) cvn /DEST pdfmark end
 -246 3914 a 0 TeXcolorgray -141 4000 a
FF(3.)p 0 TeXcolorgray 43 w(On)16 b(constate)i(dans)f(la)g(question)h
(pr\351c\351dente)g(que)h Fw(M)j FB(\306)16 b Fw(M)1771
3970 y FC(0)1793 4000 y FF(,)h(les)h(diagonales)2330
4001 y([)2361 4000 y Fw(A)s(B)2467 4001 y FF(])2510 4000
y(et)2592 4001 y([)2615 4000 y Fw(C)9 b(D)2738 4001 y
FF(])2780 4000 y(du)17 b(quadr)q(ilat\350r)o(e)22 b Fw(A)o(C)9
b(B)e(D)24 b FF(se)17 b(coupent)h(donc)-38 4100 y(en)27
b(leur)g(milieu.)i(D)o('apr\350s)e(une)h(propr)q(i\351t\351)f(du)g
(coll\350ge)o(,)g(cela)g(entr)o(a\356ne)h(que)34 b Fw(A)o(C)9
b(B)e(D)33 b FF(est)28 b(un)f(par)o(all\351logr)o(amme)o(,)i(puis)f
(que)f(ses)h(c\364t\351s)-38 4199 y(oppos\351s)19 b(sont)f(de)f
(m\352me)i(longueur)f(:)f Fw(B)7 b(D)22 b FB(\306)e Fw(A)o(C)9
b FF(,)15 b Fw(C)9 b(B)22 b FB(\306)e Fw(A)s(D)t FF(.)-246
4233 y
SDict begin H.S end
 -246 4233 a -246 4233 a
SDict begin 12 H.A end
 -246 4233 a -246 4233
a
SDict begin [/View [/XYZ H.V]/Dest (Item.80) cvn /DEST pdfmark end
 -246 4233 a 0 TeXcolorgray -141 4328 a FF(4.)p 0 TeXcolorgray
43 w(On)d(calcule)h(les)g(longueurs)25 b Fw(A)o(C)g FF(et)16
b Fw(C)9 b(B)39 b FF(:)p 0 TeXcolorgray 7 4477 a(\225)p
0 TeXcolorgray 48 w Fw(A)o(C)22 b FB(\306)274 4379 y
Fo(q)p 351 4379 772 5 v 351 4478 a FF(\()380 4477 y Fw(x)419
4489 y Fr(C)479 4477 y FB(\241)12 b Fw(x)591 4489 y Fr(A)635
4478 y FF(\))661 4448 y FD(2)707 4477 y FB(\305)772 4413
y Fo(\241)805 4477 y Fw(y)842 4489 y Fr(C)902 4477 y
FB(\241)i Fw(y)1014 4489 y Fr(A)1058 4413 y Fo(\242)1087
4435 y FD(2)1136 4477 y FB(\306)1206 4401 y Fo(p)p 1282
4401 674 5 v 77 x FF(\()1309 4477 y(2)c FB(\241)g FF(0)1464
4478 y(\))1492 4448 y FD(2)1537 4477 y FB(\305)1602 4478
y FF(\()1629 4477 y(3)g FB(\241)g FF(\()p FB(\241)p FF(2\))1893
4478 y(\))1920 4448 y FD(2)1969 4477 y FB(\306)2038 4407
y(p)p 2102 4407 227 5 v 70 x FF(2)2142 4453 y FD(2)2188
4477 y FB(\305)g FF(5)2293 4453 y FD(2)2342 4477 y FB(\306)2412
4413 y(p)p 2475 4413 197 5 v 2475 4477 a FF(4)g FB(\305)g
FF(25)16 b FB(\306)2755 4413 y(p)p 2819 4413 82 5 v 64
x FF(29)q(.)p 0 TeXcolorgray 7 4629 a(\225)p 0 TeXcolorgray
40 w Fw(C)9 b(B)22 b FB(\306)276 4530 y Fo(q)p 352 4530
771 5 v 100 x FF(\()381 4629 y Fw(x)422 4641 y Fr(B)480
4629 y FB(\241)12 b Fw(x)586 4641 y Fr(C)636 4630 y FF(\))662
4600 y FD(2)708 4629 y FB(\305)773 4565 y Fo(\241)806
4629 y Fw(y)845 4641 y Fr(B)902 4629 y FB(\241)i Fw(y)1008
4641 y Fr(C)1058 4565 y Fo(\242)1088 4586 y FD(2)1137
4629 y FB(\306)1206 4553 y Fo(p)p 1282 4553 565 5 v 77
x FF(\()1309 4629 y(7)c FB(\241)g FF(2)1464 4630 y(\))1492
4600 y FD(2)1537 4629 y FB(\305)1602 4630 y FF(\()1629
4629 y(5)g FB(\241)g FF(3)1784 4630 y(\))1812 4600 y
FD(2)1861 4629 y FB(\306)1930 4559 y(p)p 1994 4559 227
5 v 70 x FF(5)2034 4605 y FD(2)2080 4629 y FB(\305)g
FF(2)2185 4605 y FD(2)2234 4629 y FB(\306)2304 4564 y(p)p
2367 4564 197 5 v 2367 4629 a FF(25)g FB(\305)g FF(4)16
b FB(\306)2647 4564 y(p)p 2711 4564 82 5 v 65 x FF(29)q(.)-38
4743 y(On)h(constate)h(que)24 b Fw(A)o(C)f FB(\306)12
b Fw(C)d(B)d FF(,)18 b(donc)f(d)n('apr\350s)h(la)f(question)i
(pr\351c\351dente)g(:)1687 4926 y Fw(B)7 b(D)21 b FB(\306)g
Fw(A)o(C)h FB(\306)12 b Fw(C)d(B)22 b FB(\306)f Fw(A)s(D)t
FF(.)-38 5123 y(C)o(onclusion)e(:)f(le)f(quadr)q(ilat\350r)o(e)23
b Fw(A)o(C)9 b(B)e(D)24 b FF(a)18 b(quatr)o(e)f(c\364t\351s)h(de)f
(m\352me)i(longueur)-5 b(,)18 b(donc)f(c)n('est)h(un)g(losange)o(.)-246
5208 y
SDict begin H.S end
 -246 5208 a -246 5208 a
SDict begin 12 H.A end
 -246 5208 a -246 5208
a
SDict begin [/View [/XYZ H.V]/Dest (exo.39) cvn /DEST pdfmark end
 -246 5208 a 0 TeXcolorgray 114 x FG(Ex)o(er)o(cice)c(39)p
0 TeXcolorgray 0 TeXcolorgray 1909 5895 a FF(18)p 0 TeXcolorgray
eop end
%%Page: 19 19
TeXDict begin 19 18 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.19) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1149 1691
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 192.90955 a add def
/d 0.0 a add neg def /h 233.3124 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1149 1691 a 1891 813 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -85.35823 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 103.56796 0.0 -89.34158 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 127.46815 0.0 -105.84424   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 103.56796  0 -89.34158  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -89.34158
 103.56796  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-105.84424  def /maxTickline 127.46815  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 127.46815
0.0 -105.84424   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 103.56796
0.0 -89.34158 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 127.46815  0 -105.84424  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -105.84424
 127.46815  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-89.34158  def /maxTickline 103.56796  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 127.46815
0.0 -105.84424   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 103.56796
0.0 -89.34158 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1876 910 a FD(0)205
b(1)g(2)g(3)-997 b FC(\241)p FD(1)-309 b FC(\241)p FD(2)g
FC(\241)p FD(3)1802 832 y(0)1760 1068 y FC(\241)p FD(1)1760
1304 y FC(\241)p FD(2)1760 1541 y FC(\241)p FD(3)1802
596 y(1)1802 360 y(2)1802 123 y(3)1891 813 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ -56.90549
28.45274 -47.24815 35.69574 -40.00558 26.0384 -49.66248 18.79541  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -56.90549 28.45274 28.45274 -85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -10.64111 -27.54231 -16.10408 -31.63943
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -12.34865 -25.26604 -17.81161 -29.36316
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 113.81097 -56.90549 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.91042 67.5466 -3.18669 73.00957 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 3.18669 69.25414 -0.91042 74.7171 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 -85.35823 56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 56.90549 113.81097   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1891 813 a
tx@Dict begin { 59.18175 118.36351 } PutCoor PutBegin  end
 1891
813 a 0.30196 0.30196 1 TeXcolorrgb 6 w Fw(A)p 0 TeXcolorgray
1891 813 a
tx@Dict begin  PutEnd  end
 1891 813 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ -56.90549 28.45274   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
1891 813 a
tx@Dict begin { -66.57932 32.4361 } PutCoor PutBegin  end
 1891 813 a 0.30196 0.30196 1 TeXcolorrgb Fw(B)p
0 TeXcolorgray 1891 813 a
tx@Dict begin  PutEnd  end
 1891 813 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 28.45274 -85.35823   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end


@endspecial 1891 813 a
tx@Dict begin { 34.1432 -84.2203 } PutCoor PutBegin  end
 1891 813 a 0.30196 0.30196 1
TeXcolorrgb 1889 812 a Fw(C)p 0 TeXcolorgray 1891 813
a
tx@Dict begin  PutEnd  end
 1891 813 a 2751 1691 a
currentpoint initclip moveto
 2751 1691 a -246 1874 a FF(On)18
b(calcule)g(la)f(longueur)h(des)g(trois)f(c\364t\351s)h(:)p
0 TeXcolorgray -76 2009 a(\225)p 0 TeXcolorgray 48 w
Fw(A)s(B)k FB(\306)193 1910 y Fo(q)p 269 1910 771 5 v
100 x FF(\()298 2009 y Fw(x)339 2021 y Fr(B)397 2009
y FB(\241)12 b Fw(x)509 2021 y Fr(A)553 2010 y FF(\))579
1980 y FD(2)624 2009 y FB(\305)689 1944 y Fo(\241)723
2009 y Fw(y)762 2021 y Fr(B)819 2009 y FB(\241)i Fw(y)931
2021 y Fr(A)975 1944 y Fo(\242)1005 1966 y FD(2)1054
2009 y FB(\306)1123 1933 y Fo(p)p 1199 1933 620 5 v 77
x FF(\()1226 2009 y FB(\241)p FF(2)c FB(\241)g FF(2)1436
2010 y(\))1464 1980 y FD(2)1509 2009 y FB(\305)1574 2010
y FF(\()1601 2009 y(1)g FB(\241)g FF(4)1756 2010 y(\))1784
1980 y FD(2)1833 2009 y FB(\306)1902 1935 y Fo(p)p 1979
1935 444 5 v 1979 2009 a FF(\()p FB(\241)p FF(4\))2128
1985 y FD(2)2173 2009 y FB(\305)g FF(\()p FB(\241)p FF(3\))2387
1985 y FD(2)2436 2009 y FB(\306)2505 1944 y(p)p 2569
1944 197 5 v 65 x FF(16)g FB(\305)g FF(9)16 b FB(\306)2849
1944 y(p)p 2912 1944 82 5 v 2912 2009 a FF(25)g FB(\306)e
FF(5.)p 0 TeXcolorgray -76 2160 a(\225)p 0 TeXcolorgray
48 w Fw(A)o(C)22 b FB(\306)191 2062 y Fo(q)p 268 2062
772 5 v 268 2161 a FF(\()297 2160 y Fw(x)336 2172 y Fr(C)396
2160 y FB(\241)12 b Fw(x)508 2172 y Fr(A)552 2161 y FF(\))578
2131 y FD(2)624 2160 y FB(\305)689 2096 y Fo(\241)722
2160 y Fw(y)759 2172 y Fr(C)819 2160 y FB(\241)i Fw(y)931
2172 y Fr(A)975 2096 y Fo(\242)1004 2117 y FD(2)1053
2160 y FB(\306)1123 2084 y Fo(p)p 1199 2084 620 5 v 77
x FF(\()1226 2160 y(1)c FB(\241)g FF(2)1381 2161 y(\))1409
2131 y FD(2)1454 2160 y FB(\305)1519 2161 y FF(\()1546
2160 y FB(\241)p FF(3)g FB(\241)g FF(4)1756 2161 y(\))1784
2131 y FD(2)1833 2160 y FB(\306)1902 2087 y Fo(p)p 1978
2087 444 5 v 73 x FF(\()p FB(\241)p FF(1\))2127 2136
y FD(2)2172 2160 y FB(\305)g FF(\()p FB(\241)p FF(7\))2386
2136 y FD(2)2436 2160 y FB(\306)2505 2096 y(p)p 2568
2096 197 5 v 2568 2160 a FF(1)g FB(\305)g FF(49)16 b
FB(\306)2849 2096 y(p)p 2912 2096 82 5 v 2912 2160 a
FF(50)q(.)p 0 TeXcolorgray -76 2312 a(\225)p 0 TeXcolorgray
42 w Fw(B)5 b(C)24 b FB(\306)193 2213 y Fo(q)p 269 2213
771 5 v 100 x FF(\()298 2312 y Fw(x)337 2324 y Fr(C)397
2312 y FB(\241)12 b Fw(x)505 2324 y Fr(B)553 2313 y FF(\))579
2283 y FD(2)625 2312 y FB(\305)690 2248 y Fo(\241)723
2312 y Fw(y)760 2324 y Fr(C)820 2312 y FB(\241)i Fw(y)928
2324 y Fr(B)975 2248 y Fo(\242)1005 2269 y FD(2)1054
2312 y FB(\306)1123 2236 y Fo(p)p 1199 2236 729 5 v 77
x FF(\()1226 2312 y(1)c FB(\241)g FF(\()p FB(\241)p FF(2\))1490
2313 y(\))1518 2282 y FD(2)1563 2312 y FB(\305)1628 2313
y FF(\()1655 2312 y FB(\241)p FF(3)g FB(\241)g FF(1)1865
2313 y(\))1893 2283 y FD(2)1942 2312 y FB(\306)2011 2236
y Fo(p)p 2087 2236 335 5 v 76 x FF(3)2127 2288 y FD(2)2173
2312 y FB(\305)2238 2313 y FF(\()2265 2312 y FB(\241)p
FF(4)2360 2313 y(\))2387 2283 y FD(2)2436 2312 y FB(\306)2505
2247 y(p)p 2569 2247 197 5 v 65 x FF(9)g FB(\305)g FF(16)16
b FB(\306)2849 2247 y(p)p 2913 2247 82 5 v 65 x FF(25)f
FB(\306)f FF(5.)-240 2412 y Fw(A)s(B)22 b FB(\306)15
b Fw(B)5 b(C)k FF(,)18 b(donc)23 b Fw(A)s(B)5 b(C)27
b FF(est)18 b(isoc\350le)g(en)g Fw(B)5 b FF(.)18 b(On)f(utilise)j(le)d
(th\351or\350me)i(r\351ciproque)f(de)f(Pythagor)o(e)g(pour)g(prouver)h
(qu)n('il)g(est)g(r)o(ectangle)f(:)1036 2613 y Fw(A)o(C)1142
2583 y FD(2)1191 2613 y FB(\306)1260 2549 y(p)p 1324
2549 V 64 x FF(50)1405 2564 y FD(2)1454 2613 y FB(\306)d
FF(50)1036 2713 y Fw(A)s(B)1142 2683 y FD(2)1188 2713
y FB(\305)c Fw(B)5 b(C)1365 2683 y FD(2)1415 2713 y FB(\306)15
b FF(5)1525 2683 y FD(2)1570 2713 y FB(\305)10 b FF(5)1675
2683 y FD(2)1725 2713 y FB(\306)k FF(25)c FB(\305)g FF(25)17
b FB(\306)d FF(50)2237 2522 y Fo(\))2306 2656 y Fw(A)o(C)2412
2621 y FD(2)2461 2656 y FB(\306)20 b Fw(A)s(B)2642 2621
y FD(2)2688 2656 y FB(\305)10 b Fw(B)5 b(C)2865 2621
y FD(2)2901 2656 y FF(.)-246 2864 y(D)o('apr\350s)17
b(le)h(th\351or\350me)h(r\351ciproque)f(de)f(Pythagor)o(e)o(,)22
b Fw(A)s(B)5 b(C)27 b FF(est)18 b(r)o(ectangle)f(en)h
Fw(B)5 b FF(.)-246 2949 y
SDict begin H.S end
 -246 2949 a -246 2949 a
SDict begin 12 H.A end
 -246
2949 a -246 2949 a
SDict begin [/View [/XYZ H.V]/Dest (exo.40) cvn /DEST pdfmark end
 -246 2949 a -246 2967 a
SDict begin H.S end
 -246 2967
a -246 2967 a
SDict begin 12 H.A end
 -246 2967 a -246 2967 a
SDict begin [/View [/XYZ H.V]/Dest (Item.81) cvn /DEST pdfmark end
 -246 2967 a 0 TeXcolorgray
131 x FG(Ex)o(er)o(cice)14 b(40)p 0 TeXcolorgray 0 TeXcolorgray
146 w FF(1.)p 0 TeXcolorgray 0 TeXcolorgray 88 w(\225)p
0 TeXcolorgray 48 w Fw(A)s(B)22 b FB(\306)717 2999 y
Fo(q)p 793 2999 771 5 v 100 x FF(\()822 3098 y Fw(x)863
3110 y Fr(B)920 3098 y FB(\241)12 b Fw(x)1032 3110 y
Fr(A)1076 3099 y FF(\))1103 3069 y FD(2)1148 3098 y FB(\305)1213
3034 y Fo(\241)1247 3098 y Fw(y)1286 3110 y Fr(B)1343
3098 y FB(\241)i Fw(y)1455 3110 y Fr(A)1499 3034 y Fo(\242)1529
3055 y FD(2)1578 3098 y FB(\306)1647 3024 y Fo(p)p 1723
3024 565 5 v 74 x FF(\(1)c FB(\241)g FF(6\))1932 3074
y FD(2)1978 3098 y FB(\305)g FF(\(5)g FB(\241)g FF(0\))2252
3074 y FD(2)2302 3098 y FB(\306)2371 3024 y Fo(p)p 2448
3024 335 5 v 2448 3098 a FF(\()p FB(\241)p FF(5\))2597
3074 y FD(2)2642 3098 y FB(\305)g FF(5)2747 3074 y FD(2)2796
3098 y FB(\306)2866 3033 y(p)p 2929 3033 238 5 v 2929
3098 a FF(25)g FB(\305)g FF(25)17 b FB(\306)3250 3033
y(p)p 3313 3033 82 5 v 3313 3098 a FF(50)q(.)p 0 TeXcolorgray
7 3250 a(\225)p 0 TeXcolorgray 48 w Fw(A)o(C)22 b FB(\306)274
3151 y Fo(q)p 351 3151 772 5 v 351 3251 a FF(\()380 3250
y Fw(x)419 3262 y Fr(C)479 3250 y FB(\241)12 b Fw(x)591
3262 y Fr(A)635 3251 y FF(\))661 3221 y FD(2)707 3250
y FB(\305)772 3185 y Fo(\241)805 3250 y Fw(y)842 3262
y Fr(C)902 3250 y FB(\241)i Fw(y)1014 3262 y Fr(A)1058
3185 y Fo(\242)1087 3207 y FD(2)1136 3250 y FB(\306)1206
3176 y Fo(p)p 1282 3176 565 5 v 74 x FF(\(0)c FB(\241)g
FF(6\))1491 3226 y FD(2)1537 3250 y FB(\305)g FF(\(2)g
FB(\241)g FF(0\))1811 3226 y FD(2)1861 3250 y FB(\306)1930
3176 y Fo(p)p 2006 3176 335 5 v 74 x FF(\()p FB(\241)p
FF(6\))2155 3226 y FD(2)2200 3250 y FB(\305)g FF(2)2305
3226 y FD(2)2355 3250 y FB(\306)2424 3185 y(p)p 2488
3185 197 5 v 65 x FF(36)g FB(\305)g FF(4)16 b FB(\306)2768
3185 y(p)p 2832 3185 82 5 v 65 x FF(40)q(.)p 0 TeXcolorgray
7 3401 a(\225)p 0 TeXcolorgray 42 w Fw(B)5 b(C)24 b FB(\306)276
3302 y Fo(q)p 352 3302 771 5 v 100 x FF(\()381 3401 y
Fw(x)420 3413 y Fr(C)480 3401 y FB(\241)12 b Fw(x)588
3413 y Fr(B)636 3402 y FF(\))662 3372 y FD(2)708 3401
y FB(\305)773 3337 y Fo(\241)806 3401 y Fw(y)843 3413
y Fr(C)903 3401 y FB(\241)i Fw(y)1011 3413 y Fr(B)1058
3337 y Fo(\242)1088 3358 y FD(2)1137 3401 y FB(\306)1206
3328 y Fo(p)p 1282 3328 565 5 v 73 x FF(\(0)c FB(\241)g
FF(1\))1491 3377 y FD(2)1537 3401 y FB(\305)g FF(\(2)g
FB(\241)g FF(5\))1811 3377 y FD(2)1861 3401 y FB(\306)1930
3328 y Fo(p)p 2007 3328 444 5 v 2007 3401 a FF(\()p FB(\241)p
FF(1\))2156 3377 y FD(2)2201 3401 y FB(\305)g FF(\()p
FB(\241)p FF(3\))2415 3377 y FD(2)2464 3401 y FB(\306)2533
3336 y(p)p 2597 3336 157 5 v 65 x FF(1)g FB(\305)g FF(9)15
b FB(\306)2837 3336 y(p)p 2900 3336 82 5 v 2900 3401
a FF(10)q(.)-38 3515 y(On)i(a)g(donc)g(:)1037 3613 y
Fw(A)s(B)1143 3583 y FD(2)1193 3613 y FB(\306)1262 3549
y(p)p 1325 3549 V 1325 3613 a FF(50)1407 3564 y FD(2)1456
3613 y FB(\306)d FF(50)1037 3731 y Fw(A)o(C)1143 3701
y FD(2)1187 3731 y FB(\305)c Fw(B)5 b(C)1364 3701 y FD(2)1414
3731 y FB(\306)1483 3667 y(p)p 1547 3667 V 64 x FF(40)1628
3682 y FD(2)1673 3731 y FB(\305)1738 3667 y(p)p 1802
3667 V 64 x FF(10)1883 3682 y FD(2)1932 3731 y FB(\306)14
b FF(40)c FB(\305)g FF(10)17 b FB(\306)d FF(50)2444 3532
y Fo(\))2514 3665 y Fw(A)s(B)2620 3630 y FD(2)2669 3665
y FB(\306)21 b Fw(A)o(C)2851 3630 y FD(2)2895 3665 y
FB(\305)10 b Fw(B)5 b(C)3072 3630 y FD(2)3108 3665 y
FF(.)-38 3876 y(D)o('apr\350s)17 b(le)h(th\351or\350me)h(r\351ciproque)
e(de)g(Pythagor)o(e)o(,)23 b Fw(A)s(B)5 b(C)27 b FF(est)18
b(r)o(ectangle)f(en)f Fw(C)9 b FF(.)-246 3910 y
SDict begin H.S end
 -246
3910 a -246 3910 a
SDict begin 12 H.A end
 -246 3910 a -246 3910 a
SDict begin [/View [/XYZ H.V]/Dest (Item.82) cvn /DEST pdfmark end
 -246 3910
a 0 TeXcolorgray -141 4005 a FF(2.)p 0 TeXcolorgray 43
w(D)o('apr\350s)17 b(la)g(for)q(mule)i(du)e(cours)g(:)1104
4227 y Fw(I)1148 4140 y Fo(\263)1192 4171 y Fw(x)1237
4183 y Fr(A)1291 4171 y FB(\305)12 b Fw(x)1399 4183 y
Fr(B)p 1190 4207 257 5 v 1298 4284 a FF(2)1456 4227 y(;)1499
4171 y Fw(y)1542 4183 y Fr(A)1595 4171 y FB(\305)i Fw(y)1703
4183 y Fr(B)p 1495 4207 256 5 v 1602 4284 a FF(2)1760
4140 y Fo(\264)1948 4227 y Fw(I)1992 4117 y Fo(\265)2037
4171 y FF(6)c FB(\305)g FF(1)p 2037 4207 157 5 v 2095
4284 a(2)2203 4227 y(;)2241 4171 y(0)g FB(\305)g FF(5)p
2241 4207 V 2299 4284 a(2)2407 4117 y Fo(\266)2598 4227
y Fw(I)2642 4228 y FF(\()2669 4227 y(3,)e(5)19 b(;)25
b(2,)8 b(5)2949 4228 y(\))2986 4227 y(.)-246 4380 y
SDict begin H.S end
 -246
4380 a -246 4380 a
SDict begin 12 H.A end
 -246 4380 a -246 4380 a
SDict begin [/View [/XYZ H.V]/Dest (Item.83) cvn /DEST pdfmark end
 -246 4380
a 0 TeXcolorgray -141 4460 a FF(3.)p 0 TeXcolorgray 43
w(Le)16 b(tr)q(iangle)23 b Fw(A)s(B)5 b(C)25 b FF(\351tant)17
b(r)o(ectangle)f(en)e Fw(C)9 b FF(,)16 b(le)h(milieu)i
Fw(I)27 b FF(de)15 b(l)o('hypot\351nuse)2187 4461 y([)2218
4460 y Fw(A)s(B)2324 4461 y FF(])2366 4460 y(est)i(le)f(centr)o(e)g(de)
g Fx(\241)g FF(\(r)o(appel)h(de)e(l)o('\351nonc\351\))9
b(;)18 b(et)e(le)g(r)o(ayon)g(de)-38 4559 y Fx(\241)h
FF(est)313 4680 y Fw(r)24 b FB(\306)17 b Fw(I)e(A)j FB(\306)616
4577 y Fo(q)p 693 4577 744 5 v 693 4681 a FF(\()721 4680
y Fw(x)766 4692 y Fr(A)820 4680 y FB(\241)12 b Fw(x)930
4692 y Fr(I)962 4681 y FF(\))989 4651 y FD(2)1034 4680
y FB(\305)1099 4615 y Fo(\241)1133 4680 y Fw(y)1176 4692
y Fr(A)1230 4680 y FB(\241)i Fw(y)1340 4692 y Fr(I)1371
4615 y Fo(\242)1401 4637 y FD(2)1450 4680 y FB(\306)1519
4603 y Fo(p)p 1596 4603 703 5 v 1596 4680 a FF(\(6)c
FB(\241)g FF(3,)e(5\))1873 4656 y FD(2)1919 4680 y FB(\305)i
FF(\(0)g FB(\241)g FF(2,)e(5\))2261 4656 y FD(2)2312
4680 y FB(\306)2382 4603 y Fo(p)p 2458 4603 473 5 v 77
x FF(2,)g(5)2566 4656 y FD(2)2612 4680 y FB(\305)i FF(\()p
FB(\241)p FF(2,)e(5\))2894 4656 y FD(2)2944 4680 y FB(\306)3014
4608 y Fo(p)p 3090 4608 376 5 v 72 x FF(6,)g(25)i FB(\305)g
FF(6,)e(25)18 b FB(\306)3548 4608 y Fo(p)p 3625 4608
150 5 v 3625 4680 a FF(12,)8 b(5)r(.)-246 4761 y
SDict begin H.S end
 -246
4761 a -246 4761 a
SDict begin 12 H.A end
 -246 4761 a -246 4761 a
SDict begin [/View [/XYZ H.V]/Dest (Item.84) cvn /DEST pdfmark end
 -246 4761
a 0 TeXcolorgray -141 4844 a FF(4.)p 0 TeXcolorgray 43
w(S)o(avoir)18 b(si)j Fw(H)8 b FF(\(3,)g(5)20 b(;)27
b(6\))19 b(appar)q(tient)g(\340)g Fx(\241)f FF(r)o(evient)h(\340)f
(savoir)h(si)g(la)g(longueur)i Fw(I)11 b(H)28 b FF(est)19
b(\351gale)g(\340)g Fw(r)29 b FF(ou)18 b(non.)i(On)e(calcule)h(cette)h
(longueur)f(avec)f(la)-38 4943 y(for)q(mule)g(du)f(cours)h(:)432
5140 y Fw(I)11 b(H)24 b FB(\306)622 5044 y Fo(q)p 698
5044 758 5 v 96 x FF(\()r Fw(x)770 5152 y Fr(H)835 5140
y FB(\241)12 b Fw(x)945 5152 y Fr(I)978 5140 y FF(\))1005
5116 y FD(2)1049 5140 y FB(\305)e FF(\()t Fw(y)1186 5152
y Fr(H)1252 5140 y FB(\241)k Fw(y)1362 5152 y Fr(I)1393
5140 y FF(\))1420 5116 y FD(2)1469 5140 y FB(\306)1538
5063 y Fo(p)p 1615 5063 772 5 v 1615 5140 a FF(\(3,)8
b(5)i FB(\241)g FF(3,)e(5\))1960 5116 y FD(2)2007 5140
y FB(\305)i FF(\(6)g FB(\241)g FF(2,)e(5\))2349 5116
y FD(2)2400 5140 y FB(\306)2469 5063 y Fo(p)p 2546 5063
296 5 v 2546 5140 a FF(0)2586 5116 y FD(2)2631 5140 y
FB(\305)i FF(3,)e(5)2804 5116 y FD(2)2855 5140 y FB(\306)2924
5069 y Fo(p)p 3001 5069 307 5 v 3001 5140 a FF(0)i FB(\305)g
FF(12,)e(25)17 b FB(\306)3390 5069 y Fo(p)p 3467 5069
191 5 v 3467 5140 a FF(12,)8 b(25)r(.)-38 5338 y(C)o(omme)255
5279 y FB(p)p 318 5279 V 318 5338 a FF(12,)g(25)17 b
FB(6\306)592 5279 y(p)p 656 5279 150 5 v 59 x FF(12,)8
b(5)r(,)17 b(le)h(point)g(H)f(n)-6 b('appar)q(tient)19
b(pas)f(\340)f Fx(\241)p FF(.)-38 5502 y FG(N.B.)26 b
FF(La)e(\002gur)o(e)g(est)h(trompeuse)o(,)h(puisqu)n('on)g(a)e(l)o
('impr)o(ession)j(que)g Fw(H)33 b FF(est)25 b(sur)g Fx(\241)p
FF(.)f(En)h(r\351alit\351,)h(si)e(vous)i(avez)e(pr)q(is)g(1)h(cm)g
(comme)g(unit\351)-38 5602 y(gr)o(aphique)o(,)18 b(le)g(point)i
Fw(H)26 b FF(est)18 b(\340)f(environ)h(trois)g(cheveux)g(\(au)f(sens)h
(propr)o(e\))f(du)g(cer)o(cle)o(.)p 0 TeXcolorgray 1909
5895 a(19)p 0 TeXcolorgray eop end
%%Page: 20 20
TeXDict begin 20 19 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.20) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 899 1706
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 253.22923 a add def
/d 0.0 a add neg def /h 235.01949 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 899 1706 a 1230 1290 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 217.9481 0.0 -41.54118 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -28.45274 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 187.2191 0.0 -50.07666   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 769.36198  0 -39.83366  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -39.83366
 769.36198  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-50.07666  def /maxTickline 363.05684  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 363.05684
0.0 -50.07666   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 769.36198
0.0 -39.83366 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 363.05684  0 -50.07666  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -50.07666
 363.05684  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-39.83366  def /maxTickline 769.36198  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 363.05684
0.0 -50.07666   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 769.36198
0.0 -39.83366 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1215 1387 a FD(0)204
b(1)i(2)f(3)g(4)g(5)g(6)h(7)f(8)g(9)190 b(10)174 b(11)g(12)h(13)f(14)g
(15)g(16)g(17)h(18)f(19)g(20)g(21)h(22)f(23)g(24)g(25)g(26)-6445
b FC(\241)p FD(1)1141 1309 y(0)1099 1545 y FC(\241)p
FD(1)1141 1073 y(1)1141 837 y(2)1141 600 y(3)1141 364
y(4)1141 128 y(5)1141 -108 y(6)1141 -345 y(7)1141 -581
y(8)1141 -817 y(9)1110 -1053 y(10)1110 -1289 y(11)1110
-1525 y(12)1230 1290 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0 0  setcmykcolor  [ 0.0 56.90549
4.83691 71.13185 18.7789 66.29494 14.22636 52.06856  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.89961 0.8 1  setrgbcolor  0.25
.setopacityalpha  fill  grestore gsave 2.0 SLW 0 1 0 0  setcmykcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 142.26372 0.0 56.90549   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 0.0 28.45274 142.26372  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 0.0 0.0 56.90549   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor   99.5846 71.13185
2 copy moveto 100.72252 0 CLW mul round sub dup 0 rmoveto 0 360 arc
closepath  gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1230 1290 a
tx@Dict begin { 181.813 59.75093 } PutCoor PutBegin  end
 1230
1290 a 0 1 0 TeXcolorrgb 53 x Fx(\241)p 0 TeXcolorgray
1230 1290 a
tx@Dict begin  PutEnd  end
 1230 1290 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1  setrgbcolor  [ 170.71646
0.0   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1230 1290 a
tx@Dict begin { 168.44019 9.67383 } PutCoor PutBegin  end
 1230 1290 a 0 0 1 TeXcolorrgb 6 w Fw(A)p
0 TeXcolorgray 1230 1290 a
tx@Dict begin  PutEnd  end
 1230 1290 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1  setrgbcolor  [ 28.45274
142.26372   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1230 1290 a
tx@Dict begin { 25.60728 148.52335 } PutCoor PutBegin  end
 1230 1290 a 0 0 1
TeXcolorrgb Fw(B)p 0 TeXcolorgray 1230 1290 a
tx@Dict begin  PutEnd  end
 1230 1290
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1  setrgbcolor  [ 0.0 56.90549
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1230 1290 a
tx@Dict begin { -11.09654 61.7424 } PutCoor PutBegin  end

1230 1290 a 0 0 1 TeXcolorrgb 1228 1289 a Fw(C)p 0 TeXcolorgray
1230 1290 a
tx@Dict begin  PutEnd  end
 1230 1290 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1  setrgbcolor  [ 99.5846 71.13185
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1230 1290 a
tx@Dict begin { 102.14523 75.11522 } PutCoor PutBegin  end
 1230 1290 a 0 0 1 TeXcolorrgb 2 w Fw(I)p
0 TeXcolorgray 1230 1290 a
tx@Dict begin  PutEnd  end
 1230 1290 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 99.5846 170.71646
  false NArray  /DS 3.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1230 1290 a
tx@Dict begin { 106.4134 157.628 } PutCoor PutBegin  end
 1230 1290 a 1 0 0
TeXcolorrgb 2 w Fw(H)p 0 TeXcolorgray 1230 1290 a
tx@Dict begin  PutEnd  end
 1230
1290 a 3001 1706 a
currentpoint initclip moveto
 3001 1706 a -246 1781 a
SDict begin H.S end
 -246 1781
a -246 1781 a
SDict begin 12 H.A end
 -246 1781 a -246 1781 a
SDict begin [/View [/XYZ H.V]/Dest (exo.41) cvn /DEST pdfmark end
 -246 1781 a 0 TeXcolorgray
119 x FG(Ex)o(er)o(cice)14 b(41)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 785 3921 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 280.54405 a add def
/d 0.0 a add neg def /h 233.3124 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 785 3921 a 1480 3094 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -85.35823 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 196.89293 0.0 -83.65112 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 133.7278 0.0 -99.5846   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 196.89293  0 -83.65112  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -83.65112
 196.89293  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 133.7278  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 133.7278
0.0 -99.5846   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 196.89293
0.0 -83.65112 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 133.7278  0 -99.5846  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.5846
 133.7278  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-83.65112  def /maxTickline 196.89293  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 133.7278
0.0 -99.5846   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 196.89293
0.0 -83.65112 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1465 3191 a FD(0)205 b(1)g(2)g(3)g(4)h(5)f(6)-1706 b
FC(\241)p FD(1)-309 b FC(\241)p FD(2)1391 3113 y(0)1349
3350 y FC(\241)p FD(1)1349 3586 y FC(\241)p FD(2)1349
3822 y FC(\241)p FD(3)1391 2877 y(1)1391 2641 y(2)1391
2405 y(3)1391 2169 y(4)1480 3094 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 113.81097 -56.90549 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 28.45274 0.0 113.81097  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 -85.35823 170.71646 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -56.90549 0.0 113.81097 -85.35823 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.90549 14.22636 -56.90549
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -0.98813 3.54877 -1.83516
10.32462   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 1.83516 3.90173 0.98813
10.67758   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.71646 28.45274 56.90549
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 112.82283 17.77515 111.9758
24.551   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 115.64613 18.12811 114.7991
24.90396   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.81097 -85.35823 56.90549
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 81.68788 -36.02483 87.6167
-32.63669   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 83.09975 -38.49516 89.02856
-35.10703   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0.0 113.81097 56.90549
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 32.12308 64.47757 26.19426
61.08943   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 30.71121 66.9479 24.7824
63.55977   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 0.0 113.81097   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1480 3094 a
tx@Dict begin { 2.27626 119.50143 } PutCoor PutBegin  end
 1480
3094 a 0.30196 0.30196 1 TeXcolorrgb 6 w Fw(A)p 0 TeXcolorgray
1480 3094 a
tx@Dict begin  PutEnd  end
 1480 3094 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 170.71646 28.45274   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
1480 3094 a
tx@Dict begin { 172.99272 34.1432 } PutCoor PutBegin  end
 1480 3094 a 0.30196 0.30196 1 TeXcolorrgb
Fw(B)p 0 TeXcolorgray 1480 3094 a
tx@Dict begin  PutEnd  end
 1480 3094 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 113.81097 -85.35823   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1480 3094 a
tx@Dict begin { 121.20853 -83.08195 } PutCoor PutBegin  end
 1480 3094 a 0.30196 0.30196 1
TeXcolorrgb 1478 3093 a Fw(C)p 0 TeXcolorgray 1480 3094
a
tx@Dict begin  PutEnd  end
 1480 3094 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ -56.90549 0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1480 3094 a
tx@Dict begin { -63.7343 7.39755 } PutCoor PutBegin  end
 1480 3094 a 0.30196 0.30196 1 TeXcolorrgb
Fw(D)p 0 TeXcolorgray 1480 3094 a
tx@Dict begin  PutEnd  end
 1480 3094 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.25  setgray  [ 56.90549 14.22636
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 3115 3921 a
currentpoint initclip moveto
 3115 3921 a -246
3983 a
SDict begin H.S end
 -246 3983 a -246 3983 a
SDict begin 12 H.A end
 -246 3983 a -246 3983
a
SDict begin [/View [/XYZ H.V]/Dest (Item.85) cvn /DEST pdfmark end
 -246 3983 a 0 TeXcolorgray -141 4096 a FF(1.)p 0 TeXcolorgray
0 TeXcolorgray 88 w(\225)p 0 TeXcolorgray 42 w(Le)18
b(milieu)h(du)e(segment)841 4097 y([)872 4096 y Fw(A)o(C)978
4097 y FF(])1020 4096 y(a)g(pour)g(coor)o(donn\351es)1210
4224 y Fo(\263)1254 4255 y Fw(x)1299 4267 y Fr(A)1353
4255 y FB(\305)12 b Fw(x)1459 4267 y Fr(C)p 1252 4292
258 5 v 1360 4368 a FF(2)1519 4311 y(;)1561 4255 y Fw(y)1604
4267 y Fr(A)1658 4255 y FB(\305)i Fw(y)1764 4267 y Fr(C)p
1557 4292 257 5 v 1665 4368 a FF(2)1823 4224 y Fo(\264)2009
4201 y(\265)2053 4255 y FF(0)c FB(\305)g FF(4)p 2053
4292 157 5 v 2111 4368 a(2)2219 4311 y(;)2258 4255 y(4)g
FB(\305)g FF(\()p FB(\241)p FF(3\))p 2258 4292 265 5
v 2370 4368 a(2)2532 4201 y Fo(\266)2721 4312 y FF(\()2748
4311 y(2)17 b(;)26 b(0,)8 b(5)2959 4312 y(\))2995 4311
y(.)p 0 TeXcolorgray 7 4522 a(\225)p 0 TeXcolorgray 42
w(Le)18 b(milieu)h(du)e(segment)841 4523 y([)866 4522
y Fw(B)7 b(D)985 4523 y FF(])1029 4522 y(a)17 b(pour)h(coor)o
(donn\351es)1205 4650 y Fo(\263)1248 4681 y Fw(x)1289
4693 y Fr(B)1347 4681 y FB(\305)12 b Fw(x)1455 4693 y
Fr(D)p 1246 4718 263 5 v 1357 4794 a FF(2)1519 4737 y(;)1561
4681 y Fw(y)1600 4693 y Fr(B)1657 4681 y FB(\305)i Fw(y)1765
4693 y Fr(D)p 1557 4718 262 5 v 1668 4794 a FF(2)1829
4650 y Fo(\264)2014 4627 y(\265)2058 4681 y FF(6)c FB(\305)g
FF(\()p FB(\241)p FF(2\))p 2058 4718 265 5 v 2170 4794
a(2)2333 4737 y(;)2371 4681 y(1)g FB(\305)g FF(0)p 2371
4718 157 5 v 2429 4794 a(2)2538 4627 y Fo(\266)2726 4738
y FF(\()2753 4737 y(2)17 b(;)26 b(0,)8 b(5)2964 4738
y(\))3000 4737 y(.)-38 4961 y(Les)18 b(diagonales)g(du)f(quadr)q
(ilat\350r)o(e)23 b Fw(A)s(B)5 b(C)k(D)24 b FF(se)18
b(coupent)h(en)f(leur)f(milieu,)j(donc)d(c)n('est)h(un)f(par)o
(all\351logr)o(amme)j(\(propr)q(i\351t\351)d(du)h(coll\350ge\).)-38
5120 y Fp(")p FF(S)o(i)j(vous)h(donnez)e(un)h(nom)h(aux)f(milieux)i
(des)e(diagonales)g FG(av)o(ant)d(de)h(fair)o(e)f(les)g(calculs)p
FF(,)i(donnez-leur)h(des)g(noms)h(diff\351r)o(ents)f(:)g(avant)-38
5220 y(de)c(fair)o(e)g(les)h(calculs)o(,)h(on)e(n)-6
b('a)18 b(pas)g(encor)o(e)f(prouv\351)h(que)g(les)g(milieux)h
(\351taient)g(les)f(m\352mes)o(.)-246 5250 y
SDict begin H.S end
 -246 5250
a -246 5250 a
SDict begin 12 H.A end
 -246 5250 a -246 5250 a
SDict begin [/View [/XYZ H.V]/Dest (Item.86) cvn /DEST pdfmark end
 -246 5250 a 0 TeXcolorgray
-141 5346 a FF(2.)p 0 TeXcolorgray 43 w(On)f(calcule)h(la)g(longueur)g
(des)f(diagonales)h(:)p 0 TeXcolorgray 7 5494 a(\225)p
0 TeXcolorgray 48 w Fw(A)o(C)k FB(\306)274 5395 y Fo(q)p
351 5395 772 5 v 351 5495 a FF(\()380 5494 y Fw(x)419
5506 y Fr(C)479 5494 y FB(\241)12 b Fw(x)591 5506 y Fr(A)635
5495 y FF(\))661 5465 y FD(2)707 5494 y FB(\305)772 5430
y Fo(\241)805 5494 y Fw(y)842 5506 y Fr(C)902 5494 y
FB(\241)i Fw(y)1014 5506 y Fr(A)1058 5430 y Fo(\242)1087
5451 y FD(2)1136 5494 y FB(\306)1206 5420 y Fo(p)p 1282
5420 620 5 v 74 x FF(\(4)c FB(\241)g FF(0\))1491 5470
y FD(2)1537 5494 y FB(\305)g FF(\()p FB(\241)p FF(3)g
FB(\241)g FF(4\))1866 5470 y FD(2)1916 5494 y FB(\306)1985
5420 y Fo(p)p 2061 5420 335 5 v 74 x FF(4)2101 5470 y
FD(2)2147 5494 y FB(\305)g FF(\()p FB(\241)p FF(7\))2361
5470 y FD(2)2410 5494 y FB(\306)2479 5429 y(p)p 2543
5429 238 5 v 65 x FF(16)g FB(\305)g FF(49)16 b FB(\306)2864
5429 y(p)p 2927 5429 82 5 v 2927 5494 a FF(65)q(.)p 0
TeXcolorgray 7 5646 a(\225)p 0 TeXcolorgray 42 w Fw(B)7
b(D)21 b FB(\306)284 5547 y Fo(q)p 360 5547 782 5 v 100
x FF(\()389 5646 y Fw(x)430 5658 y Fr(D)494 5646 y FB(\241)12
b Fw(x)602 5658 y Fr(B)649 5647 y FF(\))676 5617 y FD(2)721
5646 y FB(\305)786 5581 y Fo(\241)820 5646 y Fw(y)859
5658 y Fr(D)922 5646 y FB(\241)i Fw(y)1030 5658 y Fr(B)1077
5581 y Fo(\242)1107 5603 y FD(2)1156 5646 y FB(\306)1225
5572 y Fo(p)p 1302 5572 620 5 v 1302 5646 a FF(\()p FB(\241)p
FF(2)c FB(\241)g FF(6\))1566 5622 y FD(2)1611 5646 y
FB(\305)g FF(\(0)g FB(\241)g FF(1\))1885 5622 y FD(2)1935
5646 y FB(\306)2004 5572 y Fo(p)p 2081 5572 444 5 v 2081
5646 a FF(\()p FB(\241)p FF(8\))2230 5622 y FD(2)2275
5646 y FB(\305)g FF(\()p FB(\241)p FF(1\))2489 5622 y
FD(2)2538 5646 y FB(\306)2607 5581 y(p)p 2671 5581 197
5 v 65 x FF(64)g FB(\305)g FF(1)16 b FB(\306)2951 5581
y(p)p 3015 5581 82 5 v 65 x FF(65)q(.)p 0 TeXcolorgray
1909 5895 a(20)p 0 TeXcolorgray eop end
%%Page: 21 21
TeXDict begin 21 20 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.21) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -38 -163 a FF(Les)18 b(diagonales)g(du)f(par)o
(all\351logr)o(amme)26 b Fw(A)s(B)5 b(C)k(D)24 b FF(sont)18
b(de)f(m\352me)i(longueur)-5 b(,)19 b(donc)e(c)n('est)h(un)f(r)o
(ectangle)h(\(propr)q(i\351t\351)f(du)g(coll\350ge\).)-246
-79 y
SDict begin H.S end
 -246 -79 a -246 -79 a
SDict begin 12 H.A end
 -246 -79 a -246 -79 a
SDict begin [/View [/XYZ H.V]/Dest (exo.42) cvn /DEST pdfmark end
 -246
-79 a -246 -62 a
SDict begin H.S end
 -246 -62 a -246 -62 a
SDict begin 12 H.A end
 -246 -62 a -246
-62 a
SDict begin [/View [/XYZ H.V]/Dest (Item.87) cvn /DEST pdfmark end
 -246 -62 a 0 TeXcolorgray 95 x FG(Ex)o(er)o(cice)d(42)p
0 TeXcolorgray 0 TeXcolorgray 146 w FF(1.)p 0 TeXcolorgray
43 w(Le)k(sym\351tr)q(ique)g(de)f(2)h(par)f(r)o(appor)q(t)h(\340)f(5,)8
b(5)18 b(est)g(9.)p 0 TeXcolorgray 0 TeXcolorgray 776
671 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 307.85844 a add def
/d 0.0 a add neg def /h 67.14848 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 776 671 a 889 397 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 294.20126  0 -13.65718  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -13.65718
 294.20126  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-33.00528  def /maxTickline 34.1432  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 294.20126
0.0 -13.65718 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 874 494 a FD(0)205
b(1)g(2)g(3)h(4)f(5)g(6)g(7)h(8)f(9)889 397 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 156.49008 0.0 56.90549
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 105.27505 -3.41418 105.27505
3.41418   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 108.1205 -3.41418 108.1205
3.41418   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 256.07469 0.0 156.49008
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 204.85966 -3.41418 204.85966
3.41418   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 207.70511 -3.41418 207.70511
3.41418   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 56.90549 0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 156.49008 0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 256.07469 0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 3332 671 a
currentpoint initclip moveto
 3332
671 a -246 711 a
SDict begin H.S end
 -246 711 a -246 711 a
SDict begin 12 H.A end
 -246 711 a -246
711 a
SDict begin [/View [/XYZ H.V]/Dest (Item.88) cvn /DEST pdfmark end
 -246 711 a 0 TeXcolorgray -141 825 a FF(2.)p 0
TeXcolorgray 43 w(On)26 b(g\351n\351r)o(alise)h(le)g(tr)o(avail)f(de)g
(la)g(question)i(pr\351c\351dente)f(:)f Fw(c)32 b FF(est)27
b(le)f(sym\351tr)q(ique)h(de)h Fw(a)i FF(par)c(r)o(appor)q(t)g(\340)g
Fw(b)k FF(lorsque)d Fw(b)j FF(est)c(le)h(milieu)h(du)-38
924 y(segment)19 b(qui)e(va)h(de)h Fw(a)i FF(\340)c Fw(c)5
b FF(.)p 0 TeXcolorgray 0 TeXcolorgray 776 1563 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 307.85844 a add def
/d 0.0 a add neg def /h 67.14848 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 776
1563 a 889 1289 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 156.49008 0.0 56.90549
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 105.27505 -3.41418 105.27505
3.41418   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 108.1205 -3.41418 108.1205
3.41418   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 256.07469 0.0 156.49008
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 204.85966 -3.41418 204.85966
3.41418   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 207.70511 -3.41418 207.70511
3.41418   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 889 1289 a
tx@Dict begin { 48.36957 -4.55254 } PutCoor PutBegin  end
 889 1289 a 891 1326
a Fw(a)889 1289 y
tx@Dict begin  PutEnd  end
 889 1289 a 889 1289 a
tx@Dict begin { 148.52335 -4.55254 } PutCoor PutBegin  end
 889 1289 a 57
x Fw(b)889 1289 y
tx@Dict begin  PutEnd  end
 889 1289 a 889 1289 a
tx@Dict begin { 248.67712 -4.55254 } PutCoor PutBegin  end
 889 1289 a 37
x Fw(c)889 1289 y
tx@Dict begin  PutEnd  end
 889 1289 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 56.90549 0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 156.49008 0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 256.07469 0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 3332 1563 a
currentpoint initclip moveto
 3332 1563 a -38
1716 a FF(A)n(utr)o(ement)18 b(dit)f Fw(b)h FB(\306)601
1683 y Fr(a)s FC(\305)p Fr(c)p 600 1696 110 5 v 640 1745
a FD(2)719 1716 y FF(,)g(ce)f(qui)h(donne)g Fw(b)p 1 0 0
TeXcolorrgb 4 w FB(\243)p FF(2)p 0 TeXcolorgray 14 w
FB(\306)1459 1683 y Fr(a)s FC(\305)p Fr(c)p 1458 1696
V 1503 1784 a Fv(\003)1498 1762 y FD(2)p 1 0 0 TeXcolorrgb
1577 1716 a FB(\243)1632 1732 y Fv(\001)1632 1716 y FF(2)p
0 TeXcolorgray 1 w(,)f(soit)h(2)p Fw(b)h FB(\306)d Fw(a)e
FB(\305)c Fw(c)23 b FF(;)17 b(et)h(donc)1876 1906 y Fw(c)i
FB(\306)14 b FF(2)p Fw(b)g FB(\241)e Fw(a)t FF(.)-246
1983 y
SDict begin H.S end
 -246 1983 a -246 1983 a
SDict begin 12 H.A end
 -246 1983 a -246 1983
a
SDict begin [/View [/XYZ H.V]/Dest (Item.89) cvn /DEST pdfmark end
 -246 1983 a 0 TeXcolorgray -141 2095 a FF(3.)p 0 TeXcolorgray
43 w(On)17 b(place)f Fw(C)9 b FF(,)17 b(sym\351tr)q(ique)i(du)e(point)
24 b Fw(A)c FF(par)e(r)o(appor)q(t)f(au)h(point)g Fw(B)5
b FF(.)p 0 TeXcolorgray 0 TeXcolorgray 984 4298 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 257.78178 a add def
/d 0.0 a add neg def /h 255.5055 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 984
4298 a 1470 2814 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -170.71646 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 199.1692 0.0 -58.61258 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 76.82231 0.0 -178.68318   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 199.1692  0 -58.61258  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -58.61258
 199.1692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-178.68318  def /maxTickline 76.82231  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 76.82231
0.0 -178.68318   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -58.61258 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 76.82231  0 -178.68318  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -178.68318
 76.82231  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-58.61258  def /maxTickline 199.1692  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 76.82231
0.0 -178.68318   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -58.61258 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1455 2911 a FD(0)205
b(1)g(2)h(3)f(4)g(5)g(6)-1705 b FC(\241)p FD(1)-309 b
FC(\241)p FD(2)1381 2833 y(0)1340 3070 y FC(\241)p FD(1)1340
3306 y FC(\241)p FD(2)1340 3542 y FC(\241)p FD(3)1340
3779 y FC(\241)p FD(4)1340 4015 y FC(\241)p FD(5)1340
4251 y FC(\241)p FD(6)1381 2597 y(1)1381 2361 y(2)1470
2814 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 92.4714 -49.7923 28.45274
56.90549   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.80258 3.01997 62.65802
6.53314   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 58.26611 0.58002 64.12157
4.0932   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 156.49008 -156.49008
92.4714 -49.7923   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 120.82126 -103.6778 126.6767
-100.16463   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 122.28479 -106.11775
128.14023 -102.60457   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 28.45274 56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1470 2814 a
tx@Dict begin { 30.729 62.59595 } PutCoor PutBegin  end
 1470
2814 a 0.30196 0.30196 1 TeXcolorrgb 6 w Fw(A)p 0 TeXcolorgray
1470 2814 a
tx@Dict begin  PutEnd  end
 1470 2814 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 92.4714 -49.7923   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
1470 2814 a
tx@Dict begin { 95.03206 -44.3862 } PutCoor PutBegin  end
 1470 2814 a 0.30196 0.30196 1 TeXcolorrgb
Fw(B)p 0 TeXcolorgray 1470 2814 a
tx@Dict begin  PutEnd  end
 1470 2814 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 156.49008 -156.49008   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1470 2814 a
tx@Dict begin { 158.76636 -150.79962 } PutCoor PutBegin  end
 1470 2814 a 0.30196 0.30196 1
TeXcolorrgb 1468 2813 a Fw(C)p 0 TeXcolorgray 1470 2814
a
tx@Dict begin  PutEnd  end
 1470 2814 a 3124 4298 a
currentpoint initclip moveto
 3124 4298 a -38 4451 a FF(P)m(ar)21
b(d\351\002nition)g(d)n('une)h(sym\351tr)q(ie)g(centr)o(ale)o(,)g
Fw(B)29 b FF(est)22 b(le)g(milieu)h(du)e(segment)2268
4452 y([)2299 4451 y Fw(A)o(C)2405 4452 y FF(])2438 4451
y(,)g(donc)g(d)n('apr\350s)h(la)f(for)q(mule)h(du)f(cours)h(pour)f(le)h
(milieu)-38 4551 y(d)n('un)c(segment)g(:)1435 4677 y
Fw(x)1476 4689 y Fr(B)1538 4677 y FB(\306)1619 4621 y
Fw(x)1664 4633 y Fr(A)1718 4621 y FB(\305)12 b Fw(x)1824
4633 y Fr(C)p 1617 4658 258 5 v 1725 4734 a FF(2)2030
4677 y(,)158 b Fw(y)2247 4689 y Fr(B)2309 4677 y FB(\306)2392
4621 y Fw(y)2435 4633 y Fr(A)2488 4621 y FB(\305)14 b
Fw(y)2594 4633 y Fr(C)p 2388 4658 257 5 v 2496 4734 a
FF(2)2654 4677 y(.)-38 4859 y(A)n(utr)o(ement)k(dit,)g(en)f(r)o
(empla\347ant)h(avec)g(les)g(donn\351es)g(de)f(l)o('\351nonc\351)i(:)
1396 5068 y(3,)8 b(25)16 b FB(\306)1639 5012 y FF(1)10
b FB(\305)i Fw(x)1795 5024 y Fr(C)p 1639 5049 207 5 v
1722 5125 a FF(2)2002 5068 y(,)155 b FB(\241)p FF(1,)8
b(75)16 b FB(\306)2475 5012 y FF(2)10 b FB(\305)k Fw(y)2631
5024 y Fr(C)p 2475 5049 V 2558 5125 a FF(2)2691 5068
y(.)-38 5280 y(En)j(r)o(aisonnant)i(comme)f(dans)g(la)f(question)i
(pr\351c\351dente)o(,)f(on)g(obtient)1055 5456 y Fw(x)1094
5468 y Fr(C)1158 5456 y FB(\306)d FF(2)10 b FB(\243)g
FF(3,)e(25)i FB(\241)g FF(1)17 b FB(\306)d FF(5,)8 b(5)148
b(,)158 b Fw(y)2163 5468 y Fr(C)2227 5456 y FB(\306)14
b FF(2)c FB(\243)g FF(\()p FB(\241)p FF(1,)e(75\))i FB(\241)g
FF(2)18 b FB(\306)c(\241)p FF(5,)8 b(5.)-38 5646 y(C)o(onclusion)19
b(:)d Fw(C)9 b FF(\(5,)f(5)18 b(;)25 b FB(\241)p FF(5,)8
b(5\).)-246 5721 y
SDict begin H.S end
 -246 5721 a -246 5721 a
SDict begin 12 H.A end
 -246 5721
a -246 5721 a
SDict begin [/View [/XYZ H.V]/Dest (exo.43) cvn /DEST pdfmark end
 -246 5721 a 0 TeXcolorgray 1909 5895 a
FF(21)p 0 TeXcolorgray eop end
%%Page: 22 22
TeXDict begin 22 21 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.22) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -246 -163 a FG(Ex)o(er)o(cice)14
b(43)p 0 TeXcolorgray 41 w FF(C)o(et)k(exer)o(cice)g(d)n('introduction)
g(\340)f(la)g(notion)h(de)g(vecteur)f(appelle)j(quelques)f(commentair)o
(es)g(:)-246 -116 y
SDict begin H.S end
 -246 -116 a -246 -116 a
SDict begin 12 H.A end
 -246 -116
a -246 -116 a
SDict begin [/View [/XYZ H.V]/Dest (Item.90) cvn /DEST pdfmark end
 -246 -116 a 0 TeXcolorgray -141 -8 a FF(1.)p
0 TeXcolorgray 43 w(La)e(t\351l\351cabine)i Fw(E)8 b(F)g(G)g(H)25
b FF(glisse)18 b(pour)g(aboutir)f(\340)g(la)h(position)j
Fw(I)14 b(J)8 b(K)k(L)s FF(.)19 b(C)o(e)f(d\351placement)h(est)f
(appel\351)h(\253)14 b(tr)o(anslation)k(de)f(vecteur)3775
-62 y FB(\241)-18 b(!)3781 -8 y Fw(A)s(B)22 b FF(\273.)-246
25 y
SDict begin H.S end
 -246 25 a -246 25 a
SDict begin 12 H.A end
 -246 25 a -246 25 a
SDict begin [/View [/XYZ H.V]/Dest (Item.91) cvn /DEST pdfmark end
 -246 25
a 0 TeXcolorgray -141 133 a FF(2.)p 0 TeXcolorgray 43
w(Le)i(vecteur)348 80 y FB(\241)-19 b(!)354 133 y Fw(A)s(B)31
b FF(a)23 b(\351t\351)h(r)o(epr\351sent\351)g(en)g(violet)g(sur)g(la)f
(\002gur)o(e)o(,)f(il)i(est)g(\351gal)f(\340)g(chacun)h(des)g(vecteurs)
2998 80 y FB(\241)-40 b(!)2998 133 y Fw(E)10 b(I)g FF(,)3133
80 y FB(\241)-38 b(!)3133 133 y Fw(F)15 b(J)8 b FF(,)3270
80 y FB(\241)-33 b(\241)g(!)3268 133 y Fw(G)6 b(K)35
b FF(et)3502 80 y FB(\241)-35 b(\241)g(!)3504 133 y Fw(H)8
b(L)t FF(.)23 b(On)g(peut)i(donc)-38 233 y(\351cr)q(ir)o(e)1610
279 y FB(\241)-19 b(!)1616 332 y Fw(A)s(B)22 b FB(\306)1806
279 y(\241)-40 b(!)1806 332 y Fw(E)10 b(I)24 b FB(\306)1981
279 y(\241)-38 b(!)1981 332 y Fw(F)15 b(J)22 b FB(\306)2158
279 y(\241)-33 b(\241)g(!)2156 332 y Fw(G)6 b(K)26 b
FB(\306)2361 279 y(\241)-35 b(\241)g(!)2363 332 y Fw(H)8
b(L)d FF(.)-246 391 y
SDict begin H.S end
 -246 391 a -246 391 a
SDict begin 12 H.A end
 -246 391
a -246 391 a
SDict begin [/View [/XYZ H.V]/Dest (Item.92) cvn /DEST pdfmark end
 -246 391 a 0 TeXcolorgray -141 496 a FF(3.)p
0 TeXcolorgray 43 w(P)n(our)21 b(aller)i(de)k Fw(A)e
FF(\340)d Fw(B)6 b FF(,)22 b(on)g(avance)g(de)g(4)g(carr)o(eaux)f(en)i
(abscisse)f(et)g(on)g(descend)g(de)g(1)g(carr)o(eau)f(en)i(or)o
(donn\351e)9 b(;)21 b(on)h(dit)g(que)3783 443 y FB(\241)-19
b(!)3789 496 y Fw(A)s(B)29 b FF(a)22 b(pour)-38 643 y(abscisse)c(4)g
(et)f(pour)h(or)o(donn\351e)f FB(\241)p FF(1.)h(On)f(note)1369
589 y FB(\241)-18 b(!)1375 643 y Fw(A)s(B)1490 533 y
Fo(\265)1552 591 y FF(4)1525 691 y FB(\241)p FF(1)1620
533 y Fo(\266)1662 643 y FF(.)p 0 TeXcolorgray 0 TeXcolorgray
1093 2121 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 206.56676 a add def
/d 0.0 a add neg def /h 157.62799 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1093 2121 a 1896 1908 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 6 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 109.8276 0.0 -96.73915 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 132.0207 0.0 -25.60728   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 109.8276  0 -96.73915  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -96.73915
 109.8276  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-25.60728  def /maxTickline 132.0207  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 132.0207
0.0 -25.60728   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 109.8276
0.0 -96.73915 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 132.0207  0 -25.60728  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -25.60728
 132.0207  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.73915  def /maxTickline 109.8276  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 132.0207
0.0 -25.60728   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 109.8276
0.0 -96.73915 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1881 2005 a FD(0)204
b(1)i(2)f(3)-997 b FC(\241)p FD(1)-309 b FC(\241)p FD(2)g
FC(\241)p FD(3)1807 1692 y(1)1807 1455 y(2)1807 1219
y(3)1807 983 y(4)1896 1908 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  [ -85.35823 28.45274
-28.45274 28.45274 -28.45274 85.35823 -85.35823 85.35823  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 1 0.8 0.8  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  [ 28.45274 0.0 85.35823
0.0 85.35823 56.90549 28.45274 56.90549  /Lineto /lineto load def 0
 setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop
pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0
ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div
def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 1 0.8 0.8  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -28.45274 85.35823 -85.35823
85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -28.45274 28.45274 -28.45274
85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -85.35823 28.45274 -28.45274
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -85.35823 85.35823 -85.35823
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 85.35823 56.90549 28.45274
56.90549   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 85.35823 0.0 85.35823
56.90549   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 28.45274 0.0 85.35823
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 28.45274 56.90549 28.45274
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -56.90549 85.35823 -56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 56.90549 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 85.35823 -56.90549 113.81097   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
85.35823 56.90549 -28.45274 85.35823   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 56.90549 -85.35823 85.35823   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 0.0 -85.35823 28.45274   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
85.35823 0.0 -28.45274 28.45274   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1896 1908 a
tx@Dict begin { -54.62921 119.50143 } PutCoor PutBegin  end
 1896
1908 a 0.30196 0.30196 1 TeXcolorrgb 6 w Fw(A)p 0 TeXcolorgray
1896 1908 a
tx@Dict begin  PutEnd  end
 1896 1908 a 1896 1908 a
tx@Dict begin { 59.18175 91.04869 } PutCoor PutBegin  end
 1896 1908 a 0.30196 0.30196 1
TeXcolorrgb Fw(B)p 0 TeXcolorgray 1896 1908 a
tx@Dict begin  PutEnd  end
 1896 1908
a 1896 1908 a
tx@Dict begin { -83.08195 91.04869 } PutCoor PutBegin  end
 1896 1908 a 0.30196 0.30196 1 TeXcolorrgb
Fw(E)p 0 TeXcolorgray 1896 1908 a
tx@Dict begin  PutEnd  end
 1896 1908 a 1896 1908
a
tx@Dict begin { -26.17647 91.04869 } PutCoor PutBegin  end
 1896 1908 a 0.30196 0.30196 1 TeXcolorrgb Fw(F)p 0
TeXcolorgray 1896 1908 a
tx@Dict begin  PutEnd  end
 1896 1908 a 1896 1908 a
tx@Dict begin { -26.17647 34.1432 } PutCoor PutBegin  end
 1896
1908 a 0.30196 0.30196 1 TeXcolorrgb 1894 1907 a Fw(G)p
0 TeXcolorgray 1896 1908 a
tx@Dict begin  PutEnd  end
 1896 1908 a 1896 1908 a
tx@Dict begin { -83.08195 34.1432 } PutCoor PutBegin  end
 1896
1908 a 0.30196 0.30196 1 TeXcolorrgb 2 w Fw(H)p 0 TeXcolorgray
1896 1908 a
tx@Dict begin  PutEnd  end
 1896 1908 a 1896 1908 a
tx@Dict begin { 29.59065 59.75093 } PutCoor PutBegin  end
 1896 1908 a 0.30196 0.30196 1
TeXcolorrgb 2 w Fw(I)p 0 TeXcolorgray 1896 1908 a
tx@Dict begin  PutEnd  end
 1896
1908 a 1896 1908 a
tx@Dict begin { 87.63449 62.59595 } PutCoor PutBegin  end
 1896 1908 a 0.30196 0.30196 1 TeXcolorrgb
1901 1899 a Fw(J)p 0 TeXcolorgray 1896 1908 a
tx@Dict begin  PutEnd  end
 1896 1908
a 1896 1908 a
tx@Dict begin { 87.63449 5.69046 } PutCoor PutBegin  end
 1896 1908 a 0.30196 0.30196 1 TeXcolorrgb
-1 x Fw(K)p 0 TeXcolorgray 1896 1908 a
tx@Dict begin  PutEnd  end
 1896 1908 a 1896
1908 a
tx@Dict begin { 30.729 2.84544 } PutCoor PutBegin  end
 1896 1908 a 0.30196 0.30196 1 TeXcolorrgb Fw(L)p
0 TeXcolorgray 1896 1908 a
tx@Dict begin  PutEnd  end
 1896 1908 a 2807 2121 a
currentpoint initclip moveto
 2807
2121 a -246 2204 a
SDict begin H.S end
 -246 2204 a -246 2204 a
SDict begin 12 H.A end
 -246 2204
a -246 2204 a
SDict begin [/View [/XYZ H.V]/Dest (exo.44) cvn /DEST pdfmark end
 -246 2204 a -246 2206 a
SDict begin H.S end
 -246 2206 a -246
2206 a
SDict begin 12 H.A end
 -246 2206 a -246 2206 a
SDict begin [/View [/XYZ H.V]/Dest (Item.93) cvn /DEST pdfmark end
 -246 2206 a 0 TeXcolorgray
114 x FG(Ex)o(er)o(cice)14 b(44)p 0 TeXcolorgray 0 TeXcolorgray
146 w FF(1.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
939 3616 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 268.59395 a add def
/d 0.0 a add neg def /h 147.95416 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 939 3616 a 1813 3058 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 163.3189 0.0 -105.27505 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -85.35823 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 80.80568 0.0 -67.14848   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 163.3189  0 -105.27505  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -105.27505
 163.3189  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-67.14848  def /maxTickline 80.80568  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 80.80568
0.0 -67.14848   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 163.3189
0.0 -105.27505 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 80.80568  0 -67.14848  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -67.14848
 80.80568  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-105.27505  def /maxTickline 163.3189  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 80.80568
0.0 -67.14848   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 163.3189
0.0 -105.27505 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1798 3155 a FD(0)205
b(1)g(2)g(3)g(4)h(5)-1470 b FC(\241)p FD(1)-309 b FC(\241)p
FD(2)g FC(\241)p FD(3)1724 3078 y(0)1682 3314 y FC(\241)p
FD(1)1682 3550 y FC(\241)p FD(2)1724 2841 y(1)1724 2605
y(2)1813 3058 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 56.90549 -85.35823 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
142.26372 0.0 28.45274 -56.90549   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ -85.35823 0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1813 3058 a
tx@Dict begin { -95.03206 6.25963 } PutCoor PutBegin  end
 1813 3058 a 0.30196 0.30196 1
TeXcolorrgb 6 w Fw(A)p 0 TeXcolorgray 1813 3058 a
tx@Dict begin  PutEnd  end
 1813
3058 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 28.45274 56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1813 3058
a
tx@Dict begin { 30.729 62.59595 } PutCoor PutBegin  end
 1813 3058 a 0.30196 0.30196 1 TeXcolorrgb Fw(B)p 0
TeXcolorgray 1813 3058 a
tx@Dict begin  PutEnd  end
 1813 3058 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 28.45274 -56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end


@endspecial 1813 3058 a
tx@Dict begin { 19.91682 -52.35294 } PutCoor PutBegin  end
 1813 3058 a 0.30196 0.30196 1
TeXcolorrgb 2 w Fw(I)p 0 TeXcolorgray 1813 3058 a
tx@Dict begin  PutEnd  end
 1813
3058 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 142.26372 0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1813 3058
a
tx@Dict begin { 144.53998 5.69046 } PutCoor PutBegin  end
 1813 3058 a 0.30196 0.30196 1 TeXcolorrgb 1818 3049
a Fw(J)p 0 TeXcolorgray 1813 3058 a
tx@Dict begin  PutEnd  end
 1813 3058 a 3169
3616 a
currentpoint initclip moveto
 3169 3616 a -246 3660 a
SDict begin H.S end
 -246 3660 a -246 3660
a
SDict begin 12 H.A end
 -246 3660 a -246 3660 a
SDict begin [/View [/XYZ H.V]/Dest (Item.94) cvn /DEST pdfmark end
 -246 3660 a 0 TeXcolorgray
-141 3774 a FF(2.)p 0 TeXcolorgray 43 w(On)17 b(calcule)h(les)g(coor)o
(donn\351es)g(de)1026 3720 y FB(\241)-19 b(!)1032 3774
y Fw(A)s(B)39 b FF(:)1321 3934 y FB(\241)-19 b(!)1327
3988 y Fw(A)s(B)1442 3878 y Fo(\265)1478 3936 y Fw(x)1519
3948 y Fr(B)1576 3936 y FB(\241)12 b Fw(x)1688 3948 y
Fr(A)1480 4036 y Fw(y)1519 4048 y Fr(B)1576 4036 y FB(\241)i
Fw(y)1688 4048 y Fr(A)1732 3878 y Fo(\266)1921 3934 y
FB(\241)-19 b(!)1927 3988 y Fw(A)s(B)2042 3878 y Fo(\265)2076
3936 y FF(1)10 b FB(\241)g FF(\()p FB(\241)p FF(3\))2130
4036 y(2)g FB(\241)g FF(0)2340 3878 y Fo(\266)2529 3934
y FB(\241)-19 b(!)2535 3988 y Fw(A)s(B)2650 3878 y Fo(\265)2684
3936 y FF(4)2684 4036 y(2)2724 3878 y Fo(\266)2767 3988
y FF(.)-246 4149 y
SDict begin H.S end
 -246 4149 a -246 4149 a
SDict begin 12 H.A end
 -246 4149
a -246 4149 a
SDict begin [/View [/XYZ H.V]/Dest (Item.95) cvn /DEST pdfmark end
 -246 4149 a 0 TeXcolorgray -141 4257 a
FF(3.)p 0 TeXcolorgray 43 w(On)17 b(calcule)h(les)g(coor)o(donn\351es)g
(de)1026 4203 y FB(\241)-53 b(!)1028 4257 y Fw(I)14 b(J)41
b FF(:)1385 4342 y FB(\241)-53 b(!)1387 4395 y Fw(I)14
b(J)1472 4285 y Fo(\265)1508 4344 y Fw(x)1553 4356 y
Fr(J)1594 4344 y FB(\241)e Fw(x)1704 4356 y Fr(I)1510
4444 y Fw(y)1553 4456 y Fr(J)1594 4444 y FB(\241)i Fw(y)1704
4456 y Fr(I)1736 4285 y Fo(\266)1925 4342 y FB(\241)-53
b(!)1927 4395 y Fw(I)14 b(J)2011 4285 y Fo(\265)2100
4344 y FF(5)c FB(\241)g FF(1)2045 4444 y(0)g FB(\241)g
FF(\()p FB(\241)p FF(2\))2310 4285 y Fo(\266)2498 4342
y FB(\241)-53 b(!)2500 4395 y Fw(I)14 b(J)2585 4285 y
Fo(\265)2619 4344 y FF(4)2619 4444 y(2)2660 4285 y Fo(\266)2702
4395 y FF(.)-38 4617 y(C)o(onclusion)19 b(:)f(les)g(vecteurs)830
4563 y FB(\241)-19 b(!)836 4617 y Fw(A)s(B)25 b FF(et)1043
4563 y FB(\241)-53 b(!)1045 4617 y Fw(I)14 b(J)26 b FF(ont)18
b(les)g(m\352mes)h(coor)o(donn\351es)o(,)f(donc)f(ils)h(sont)g
(\351gaux)g(:)2852 4563 y FB(\241)-19 b(!)2858 4617 y
Fw(A)s(B)22 b FB(\306)3048 4563 y(\241)-53 b(!)3050 4617
y Fw(I)14 b(J)c FF(.)p 0 TeXcolorgray 1909 5895 a(22)p
0 TeXcolorgray eop end
%%Page: 23 23
TeXDict begin 23 22 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.23) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246
-246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (exo.45) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 83 x FG(Ex)o(er)o(cice)14
b(45)p 0 TeXcolorgray 41 w FF(On)j(consid\350r)o(e)h(les)g(points)25
b Fw(A)s FF(\()p FB(\241)p FF(3;)8 b FB(\241)p FF(2\),)18
b Fw(B)7 b FF(\(5;)h FB(\241)p FF(2\),)17 b Fw(C)9 b
FF(\(1;)f(4\),)18 b Fw(D)6 b FF(\()p FB(\241)p FF(1;)i(1\),)19
b Fw(E)8 b FF(\(3;)g(1\),)18 b Fw(F)10 b FF(\(5;)e(4\).)p
0 TeXcolorgray 0 TeXcolorgray 901 1306 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 252.66048 a add def
/d 0.0 a add neg def /h 198.03128 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 901 1306 a 1719
730 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -42.67911 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 115.66034 0.0 -73.83499 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 21.33955 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -64.01866 0.0 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 96.45486 0.0 -52.06856   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 21.33955 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 115.66034  0 -73.83499  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -73.83499
 115.66034  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-52.06856  def /maxTickline 96.45486  def /dT 1398509 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 21.33955
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 96.45486
0.0 -52.06856   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 115.66034
0.0 -73.83499 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 96.45486  0 -52.06856  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -52.06856
 96.45486  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-73.83499  def /maxTickline 115.66034  def /dT 1398509 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 21.33955  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 96.45486
0.0 -52.06856   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 115.66034
0.0 -73.83499 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1704 827 a FD(0)145 b(1)h(2)h(3)f(4)g(5)-1115
b FC(\241)p FD(1)-250 b FC(\241)p FD(2)g FC(\241)p FD(3)1630
749 y(0)1588 927 y FC(\241)p FD(1)1588 1104 y FC(\241)p
FD(2)1630 572 y(1)1630 395 y(2)1630 218 y(3)1630 41 y(4)1719
730 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 106.69777 -42.67911 -64.01866 -42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 21.33955 85.35822 -64.01866 -42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 106.69777 -42.67911 21.33955 85.35822
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 64.01866 21.33955 -21.33955 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 106.69777 85.35822 21.33955 85.35822
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 106.69777 85.35822 64.01866 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 64.01866 21.33955 -64.01866 -42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 106.69777 85.35822 -21.33955 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -64.01866 -42.67911
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1719 730 a
tx@Dict begin { -69.56682 -38.41125 } PutCoor PutBegin  end
 1719 730 a 6 w Fw(A)1719 730 y
tx@Dict begin  PutEnd  end
 1719 730 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 106.69777 -42.67911
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1719 730 a
tx@Dict begin { 108.40497 -40.11845 } PutCoor PutBegin  end
 1719
730 a Fw(B)1719 730 y
tx@Dict begin  PutEnd  end
 1719 730 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 21.33955 85.35822
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial 1719 730 a
tx@Dict begin { 23.04675 87.91885 } PutCoor PutBegin  end
 1719 730 a 1717 729 a Fw(C)1719
730 y
tx@Dict begin  PutEnd  end
 1719 730 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -21.33955 21.33955
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1719 730 a
tx@Dict begin { -29.87524 25.18051 } PutCoor PutBegin  end
 1719 730 a Fw(D)1719 730 y
tx@Dict begin  PutEnd  end
 1719 730 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 64.01866 21.33955
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1719 730 a
tx@Dict begin { 70.42058 16.21794 } PutCoor PutBegin  end
 1719 730 a Fw(E)1719
730 y
tx@Dict begin  PutEnd  end
 1719 730 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 106.69777 85.35822
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1719 730 a
tx@Dict begin { 108.40497 87.91885 } PutCoor PutBegin  end
 1719 730 a Fw(F)1719 730 y
tx@Dict begin  PutEnd  end
 1719 730 a 2999
1306 a
currentpoint initclip moveto
 2999 1306 a -246 1253 a FF(Il)18 b(y)g(a)g(trop)g(de)f
(possibilit\351s)k(pour)e(que)g(les)f(justi\002e)i(toutes)o(.)f(J)n(e)f
(vais)g(me)h(contenter)g(de)f(donner)g(un)h(couple)g(de)f(vecteurs)h
(\351gaux,)g(avec)f(la)h(justi\002-)-246 1352 y(cation)9
b(;)18 b(puis)g(donner)g(toutes)g(les)h(autr)o(es)e(\351galit\351s)h
(possibles)o(,)i(mais)e(sans)g(les)g(justi\002er)g(:)-246
1386 y
SDict begin H.S end
 -246 1386 a -246 1386 a
SDict begin 12 H.A end
 -246 1386 a -246 1386
a
SDict begin [/View [/XYZ H.V]/Dest (Item.96) cvn /DEST pdfmark end
 -246 1386 a 0 TeXcolorgray -141 1481 a FF(1.)p 0 TeXcolorgray
43 w FG(U)l(ne)d(\351galit\351)g(et)h(sa)f(justi\002cation.)-38
1555 y FB(\241)-33 b(\241)h(!)-38 1608 y Fw(D)t(C)23
b FB(\306)167 1555 y(\241)-25 b(!)167 1608 y Fw(E)8 b(F)h
FF(.)17 b(En)h(effet,)g(ces)g(vecteurs)g(ont)g(les)g(m\352mes)h(coor)o
(donn\351es)f(:)p 0 TeXcolorgray 7 1748 a(\225)p 0 TeXcolorgray
80 1695 a FB(\241)-33 b(\241)h(!)80 1748 y Fw(D)t(C)209
1638 y Fo(\265)245 1697 y Fw(x)284 1709 y Fr(C)344 1697
y FB(\241)12 b Fw(x)452 1709 y Fr(D)248 1796 y Fw(y)285
1808 y Fr(C)344 1796 y FB(\241)i Fw(y)452 1808 y Fr(D)506
1638 y Fo(\266)695 1695 y FB(\241)-33 b(\241)h(!)695
1748 y Fw(D)t(C)824 1638 y Fo(\265)858 1697 y FF(1)10
b FB(\241)g FF(\()p FB(\241)p FF(1\))912 1796 y(4)g FB(\241)g
FF(1)1123 1638 y Fo(\266)1311 1695 y FB(\241)-32 b(\241)f(!)1311
1748 y Fw(D)t(C)1441 1638 y Fo(\265)1475 1697 y FF(2)1475
1796 y(3)1515 1638 y Fo(\266)1558 1748 y FF(.)p 0 TeXcolorgray
7 1956 a(\225)p 0 TeXcolorgray 80 1902 a FB(\241)-24
b(!)80 1956 y Fw(E)8 b(F)195 1846 y Fo(\265)231 1904
y Fw(x)272 1916 y Fr(F)328 1904 y FB(\241)k Fw(x)436
1916 y Fr(E)234 2004 y Fw(y)273 2016 y Fr(F)328 2004
y FB(\241)i Fw(y)436 2016 y Fr(E)481 1846 y Fo(\266)670
1902 y FB(\241)-24 b(!)670 1956 y Fw(E)8 b(F)785 1846
y Fo(\265)819 1904 y FF(5)i FB(\241)g FF(3)819 2004 y(4)g
FB(\241)g FF(1)976 1846 y Fo(\266)1164 1902 y FB(\241)-24
b(!)1164 1956 y Fw(E)8 b(F)1279 1846 y Fo(\265)1313 1904
y FF(2)1313 2004 y(3)1354 1846 y Fo(\266)1396 1956 y
FF(.)-246 2048 y
SDict begin H.S end
 -246 2048 a -246 2048 a
SDict begin 12 H.A end
 -246 2048 a
-246 2048 a
SDict begin [/View [/XYZ H.V]/Dest (Item.97) cvn /DEST pdfmark end
 -246 2048 a 0 TeXcolorgray -141 2129 a FF(2.)p
0 TeXcolorgray 43 w FG(T)-7 b(outes)15 b(les)h(autr)o(es)e
(\351galit\351s.)-38 2202 y FB(\241)-21 b(!)-40 2255
y Fw(C)9 b(F)24 b FB(\306)156 2202 y(\241)-34 b(\241)g(!)156
2255 y Fw(D)6 b(E)420 2202 y FB(\241)-21 b(!)420 2255
y Fw(F)8 b(C)23 b FB(\306)614 2202 y(\241)-34 b(\241)g(!)614
2255 y Fw(E)8 b(D)878 2202 y FB(\241)-33 b(\241)h(!)876
2255 y Fw(C)9 b(D)20 b FB(\306)1082 2202 y(\241)-24 b(!)1082
2255 y Fw(F)10 b(E)1336 2202 y FB(\241)-33 b(\241)h(!)1336
2255 y Fw(D)t(C)23 b FB(\306)1540 2202 y(\241)-32 b(\241)f(!)1546
2255 y Fw(A)s(D)1808 2202 y FB(\241)-24 b(!)1808 2255
y Fw(E)8 b(F)23 b FB(\306)1998 2202 y(\241)-32 b(\241)f(!)2004
2255 y Fw(A)s(D)2266 2202 y FB(\241)g(\241)g(!)2266 2255
y Fw(D)12 b(A)17 b FB(\306)2470 2202 y(\241)-32 b(\241)f(!)2468
2255 y Fw(C)9 b(D)2738 2202 y FB(\241)-33 b(\241)g(!)2738
2255 y Fw(D)12 b(A)17 b FB(\306)2942 2202 y(\241)-24
b(!)2942 2255 y Fw(F)10 b(E)3196 2202 y FB(\241)-22 b(!)3202
2255 y Fw(A)s(E)21 b FB(\306)3389 2202 y(\241)-34 b(\241)g(!)3389
2255 y Fw(D)6 b(F)3653 2202 y FB(\241)-21 b(!)3653 2255
y Fw(E)14 b(A)j FB(\306)3847 2202 y(\241)-34 b(\241)g(!)3847
2255 y Fw(F)10 b(D)4111 2202 y FB(\241)-21 b(!)4109 2255
y Fw(C)9 b(E)22 b FB(\306)-38 2302 y(\241)-22 b(!)-38
2355 y Fw(E)8 b(B)218 2302 y FB(\241)-22 b(!)218 2355
y Fw(E)6 b(C)22 b FB(\306)411 2302 y(\241)-22 b(!)411
2355 y Fw(B)7 b(E)-38 2519 y Fp(")p FF(A)o(ttention)19
b(\340)e(l)o('or)o(dr)o(e)f(des)h(lettr)o(es)9 b(!)18
b(P)m(ar)f(exemple)o(,)1548 2466 y FB(\241)-32 b(\241)f(!)1548
2519 y Fw(D)t(C)24 b FB(\306)1753 2466 y(\241)-24 b(!)1753
2519 y Fw(E)8 b(F)h FF(,)18 b(mais)2080 2466 y FB(\241)-32
b(\241)f(!)2080 2519 y Fw(D)t(C)24 b FB(6\306)2285 2466
y(\241)-24 b(!)2285 2519 y Fw(F)10 b(E)24 b FF(\(il)18
b(y)e(a)h(un)h(probl\350me)f(de)g(sens)h(:)f(le)h(vecteur)3733
2466 y FB(\241)-33 b(\241)h(!)3733 2519 y Fw(D)t(C)26
b FF(\253)14 b(monte)-38 2631 y(vers)j(le)h(haut)f(et)h(la)f(droite)c
(\273)c(;)16 b(tandis)i(que)1211 2578 y FB(\241)-24 b(!)1211
2631 y Fw(F)10 b(E)24 b FF(\253)13 b(descend)18 b(vers)f(le)g(bas)g(et)
g(la)g(gauche)c(\273)35 b(\226)17 b(l)o('err)o(eur)g(se)g(d\351tecte)h
(aussi)g(bien)f(s\373r)g(en)h(calculant)-38 2731 y(les)g(coor)o
(donn\351es\).)-246 2807 y
SDict begin H.S end
 -246 2807 a -246 2807 a
SDict begin 12 H.A end
 -246
2807 a -246 2807 a
SDict begin [/View [/XYZ H.V]/Dest (exo.46) cvn /DEST pdfmark end
 -246 2807 a 0 TeXcolorgray 123 x FG(Ex)o(er)o(cice)c
(46)p 0 TeXcolorgray 41 w FF(En)22 b(physique)o(,)h(un)f(vecteur)g(r)o
(epr\351sente)g(une)h(for)o(ce)o(,)e(et)g(la)h(longueur)g(\(ou)g(nor)q
(me\))g(du)f(vecteur)h(corr)o(espond)f(\340)h(l)o('intensit\351)i(de)d
(la)-246 3048 y(for)o(ce)o(.)c(L)-10 b('\351galit\351)264
2957 y Fo(\260)264 3003 y(\260)264 3049 y(\260)306 2994
y FB(\241)-46 b(!)306 3048 y Fw(P)356 3060 y FD(2)392
2957 y Fo(\260)392 3003 y(\260)392 3049 y(\260)448 3048
y FB(\306)14 b FF(2)565 2957 y Fo(\260)565 3003 y(\260)565
3049 y(\260)608 2994 y FB(\241)-46 b(!)608 3048 y Fw(P)658
3060 y FD(1)694 2957 y Fo(\260)694 3003 y(\260)694 3049
y(\260)753 3048 y FF(signi\002e)18 b(que)g(la)f(masse)i(2)e(a)h(un)f
(poids)h(deux)g(fois)g(plus)g(impor)q(tant)h(que)f(celui)g(de)f(la)h
(masse)g(1.)p 0 TeXcolorgray 0 TeXcolorgray 1213 4556
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 177.54527 a add def
/d 0.0 a add neg def /h 165.026 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1213 4556 a 2125 4840 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 56.90549 T 5 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 67.71767 0.0 -109.8276 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 199.1692 0.0 34.1432   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ -85.35823
85.35823 -85.35823 142.26372   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ -28.45274
56.90549 -28.45274 170.71646   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
2125 4840 a
tx@Dict begin { -73.9773 128.03734 } PutCoor PutBegin  end
 2125 4840 a 31 x FB(\241)-46 b(!)2125 4925
y Fw(P)2175 4937 y FD(1)2125 4840 y
tx@Dict begin  PutEnd  end
 2125 4840 a 2125
4840 a
tx@Dict begin { -17.07181 128.03734 } PutCoor PutBegin  end
 2125 4840 a 31 x FB(\241)g(!)2125 4925 y Fw(P)2175
4937 y FD(2)2125 4840 y
tx@Dict begin  PutEnd  end
 2125 4840 a 2125 4840 a
tx@Dict begin { -98.44667 160.47345 } PutCoor PutBegin  end
 2125
4840 a 51 x FF(masse)18 b(1)2125 4840 y
tx@Dict begin  PutEnd  end
 2125 4840 a 2125
4840 a
tx@Dict begin { -45.52455 190.63329 } PutCoor PutBegin  end
 2125 4840 a 51 x FF(masse)g(2)2125 4840 y
tx@Dict begin  PutEnd  end
 2125
4840 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  [ -85.35823 142.26372
  false NArray  /DS 8.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  [ -28.45274 170.71646
  false NArray  /DS 11.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 2687 4556 a
currentpoint initclip moveto
 2687 4556 a 0 TeXcolorgray
1909 5895 a FF(23)p 0 TeXcolorgray eop end
%%Page: 24 24
TeXDict begin 24 23 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.24) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246
-246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (exo.47) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 121 x FG(Ex)o(er)o(cice)
14 b(47)p 0 TeXcolorgray 41 w FF(L)-10 b('image)19 b(du)e(tr)q(iangle)
23 b Fw(A)s(B)5 b(C)27 b FF(par)18 b(la)f(tr)o(anslation)i(de)e
(vecteur)2040 -162 y FB(\241)-57 b(!)2052 -125 y Fw(u)2123
-235 y Fo(\265)2184 -176 y FF(5)2157 -76 y FB(\241)p
FF(3)2252 -235 y Fo(\266)2304 -125 y FF(est)18 b(le)f(tr)q(iangle)h
Fw(D)6 b(E)i(F)l FF(.)p 0 TeXcolorgray 0 TeXcolorgray
1045 1976 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 218.09026 a add def
/d 0.0 a add neg def /h 232.601 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1045 1976 a 1498 661 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  [ 21.33955 64.01866
0.0 -85.35822 -42.67911 42.67911  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 1 0.8 0.8  setrgbcolor  0.1 .setopacityalpha  fill
 grestore gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  [ 128.03732 0.0 106.69777
-149.37688 64.01866 -21.33955  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0.8 1 0.8  setrgbcolor  0.1 .setopacityalpha  fill
 grestore gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0.0 -85.35822 -42.67911
42.67911   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 21.33955 64.01866 0.0
-85.35822   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -42.67911 42.67911 21.33955
64.01866   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
64.01866 -21.33955 -42.67911 42.67911   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
106.69777 -149.37688 0.0 -85.35822   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
128.03732 0.0 21.33955 64.01866   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 106.69777 -149.37688
64.01866 -21.33955   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 128.03732 0.0 106.69777
-149.37688   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 64.01866 -21.33955 128.03732
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1498 661 a
tx@Dict begin { 72.55435 53.34888 } PutCoor PutBegin  end
 1498
661 a 0.49803 0 1 TeXcolorrgb 84 x FB(\241)-57 b(!)1510
783 y Fw(u)1581 672 y Fo(\265)1642 731 y FF(5)1615 831
y FB(\241)p FF(3)1710 672 y Fo(\266)p 0 TeXcolorgray
1498 661 a
tx@Dict begin  PutEnd  end
 1498 661 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ -42.67911 42.67911   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
1498 661 a
tx@Dict begin { -40.9719 46.94695 } PutCoor PutBegin  end
 1498 661 a 0.30196 0.30196 1 TeXcolorrgb 6
w Fw(A)p 0 TeXcolorgray 1498 661 a
tx@Dict begin  PutEnd  end
 1498 661 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 0.0 -85.35822   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1498 661 a
tx@Dict begin { -11.95009 -81.09036 } PutCoor PutBegin  end
 1498 661 a 0.30196 0.30196 1
TeXcolorrgb Fw(B)p 0 TeXcolorgray 1498 661 a
tx@Dict begin  PutEnd  end
 1498 661
a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 21.33955 64.01866   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1498 661 a
tx@Dict begin { 23.04675 67.43306 } PutCoor PutBegin  end
 1498
661 a 0.30196 0.30196 1 TeXcolorrgb 1496 660 a Fw(C)p
0 TeXcolorgray 1498 661 a
tx@Dict begin  PutEnd  end
 1498 661 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 64.01866 -21.33955   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end


@endspecial 1498 661 a
tx@Dict begin { 65.72586 -17.0717 } PutCoor PutBegin  end
 1498 661 a 0.30196 0.30196 1
TeXcolorrgb Fw(D)p 0 TeXcolorgray 1498 661 a
tx@Dict begin  PutEnd  end
 1498 661
a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 106.69777 -149.37688   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 1498 661 a
tx@Dict begin { 110.53873 -145.96246 } PutCoor PutBegin  end
 1498
661 a 0.30196 0.30196 1 TeXcolorrgb Fw(E)p 0 TeXcolorgray
1498 661 a
tx@Dict begin  PutEnd  end
 1498 661 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 128.03732 0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1498 661 a
tx@Dict begin { 129.74452 4.26784 } PutCoor PutBegin  end
 1498 661 a 0.30196 0.30196 1 TeXcolorrgb Fw(F)p
0 TeXcolorgray 1498 661 a
tx@Dict begin  PutEnd  end
 1498 661 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -149.37688 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 163.46106 0.0 -54.6292 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 21.33955 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -42.67911 0.0 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 74.26155 0.0 -158.33945   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 21.33955 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 163.46106  0 -54.6292  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -54.6292
 163.46106  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-158.33945  def /maxTickline 74.26155  def /dT 1398509 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 21.33955
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.26155
0.0 -158.33945   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 163.46106
0.0 -54.6292 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 74.26155  0 -158.33945  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -158.33945
 74.26155  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-54.6292  def /maxTickline 163.46106  def /dT 1398509 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 21.33955  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.26155
0.0 -158.33945   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 163.46106
0.0 -54.6292 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1483 758 a FD(0)146
b(1)g(2)g(3)g(4)h(5)f(6)g(7)-1469 b FC(\241)p FD(1)-250
b FC(\241)p FD(2)1409 681 y(0)1368 858 y FC(\241)p FD(1)1368
1035 y FC(\241)p FD(2)1368 1212 y FC(\241)p FD(3)1368
1390 y FC(\241)p FD(4)1368 1567 y FC(\241)p FD(5)1368
1744 y FC(\241)p FD(6)1368 1921 y FC(\241)p FD(7)1409
504 y(1)1409 327 y(2)2855 1976 y
currentpoint initclip moveto
 2855 1976 a -246 2059
a
SDict begin H.S end
 -246 2059 a -246 2059 a
SDict begin 12 H.A end
 -246 2059 a -246 2059 a
SDict begin [/View [/XYZ H.V]/Dest (exo.48) cvn /DEST pdfmark end
 -246
2059 a 0 TeXcolorgray 116 x FG(Ex)o(er)o(cice)14 b(48)p
0 TeXcolorgray 41 w FF(U)m(n)27 b(vo)n(yageur)e(de)h(commer)o(ce)g(\()p
FB(\306)g FF(un)g(r)o(epr\351sentant\))h(fait)g(une)f(note)h(de)f(fr)o
(ais)g(pour)h(chaque)f(jour)h(de)e(tr)o(avail)i(o\371)f(il)h(utilise)g
(sa)-246 2275 y(voitur)o(e)o(.)18 b(Il)e(r)o(e\347oit)i(une)g(par)q(t)f
(\002xe)g(de)g(30)h Fz(N)p FF(,)f(et)h(une)g(indemnit\351)h(de)e(0,5)i
Fz(N)p FF(/km.)-246 2424 y FG(R)o(emarque)f(:)j FF(On)h(peut)g(penser)g
(que)g(l)o('indemnit\351)i(kilom\351tr)q(ique)f(ser)q(t)f(\340)f(r)o
(embourser)g(les)h(fr)o(ais)g(de)f(d\351placement)i(\(par)e(exemple)i
(si)f(le)g(r)o(epr\351-)-246 2524 y(sentant)d(utilise)g(sa)f(propr)o(e)
e(voitur)o(e\))9 b(;)18 b(et)f(que)h(la)g(par)q(t)f(\002xe)g(ser)q(t)g
(\340)g(payer)g(les)h(r)o(epas)o(.)-246 2572 y
SDict begin H.S end
 -246 2572
a -246 2572 a
SDict begin 12 H.A end
 -246 2572 a -246 2572 a
SDict begin [/View [/XYZ H.V]/Dest (Item.98) cvn /DEST pdfmark end
 -246 2572 a 0 TeXcolorgray
-141 2667 a FF(1.)p 0 TeXcolorgray 43 w(S)o('il)h(fait)e(120)i(km)f
(dans)f(la)h(jour)q(n\351e)o(,)f(le)h(montant)h(de)e(la)g(note)h(de)g
(fr)o(ais)g(est)g(de)1532 2850 y(30)10 b FB(\305)g FF(120)g
FB(\243)g FF(0,)e(5)19 b FB(\306)14 b FF(30)c FB(\305)g
FF(60)17 b FB(\306)d FF(90)k Fz(N)p FF(.)-246 2944 y
SDict begin H.S end

-246 2944 a -246 2944 a
SDict begin 12 H.A end
 -246 2944 a -246 2944 a
SDict begin [/View [/XYZ H.V]/Dest (Item.99) cvn /DEST pdfmark end
 -246
2944 a 0 TeXcolorgray -141 3047 a FF(2.)p 0 TeXcolorgray
43 w(On)f(note)j Fw(x)j FF(le)17 b(nombr)o(e)h(de)f(km)g(par)o(cour)q
(us)g(par)h(le)f(vo)n(yageur)g(de)g(commer)o(ce)o(,)h(et)25
b Fw(f)19 b FF(\()r Fw(x)5 b FF(\))17 b(le)h(montant)h(de)e(la)g(note)h
(de)g(fr)o(ais)o(.)f(On)h(a)f(alors)1543 3230 y Fw(f)i
FF(\()r Fw(x)5 b FF(\))14 b FB(\306)g FF(30)c FB(\305)i
Fw(x)j FB(\243)10 b FF(0,)e(5)18 b FB(\306)c FF(0,)8
b(5)r Fw(x)15 b FB(\305)10 b FF(30.)-246 3332 y
SDict begin H.S end
 -246
3332 a -246 3332 a
SDict begin 12 H.A end
 -246 3332 a -246 3332 a
SDict begin [/View [/XYZ H.V]/Dest (Item.100) cvn /DEST pdfmark end
 -246 3332
a 0 TeXcolorgray -141 3427 a FF(3.)p 0 TeXcolorgray 43
w(La)k(fonction)22 b Fw(f)34 b FF(est)14 b(af\002ne)o(,)g(puisque)22
b Fw(f)f FF(\()r Fw(x)5 b FF(\))14 b FB(\306)g FF(0,)8
b(5)r Fw(x)f FB(\305)r FF(30)14 b(\(c)n('est)g(bien)g(une)g(fonction)g
(de)g(la)g(for)q(me)22 b Fw(f)i FF(\()r Fw(x)5 b FF(\))14
b FB(\306)i Fw(a)6 b(x)h FB(\305)r Fw(b)q FF(,)14 b(avec)i
Fw(a)i FB(\306)c FF(0,)8 b(5)14 b(et)g Fw(b)20 b FB(\306)14
b FF(30\).)g(S)o(a)-38 3527 y(courbe)j(r)o(epr\351sentative)i(est)f
(donc)f(une)h(droite)o(,)f(que)h(l)o('on)g(tr)o(ace)f(\340)g(par)q(tir)
h(d)n('un)f(tableau)h(de)f(valeurs)h(avec)g(deux)f(valeurs)9
b(;)18 b(par)g(exemple)h(:)p 0 TeXcolorgray 0 TeXcolorgray
654 3646 666 4 v 654 3746 4 100 v 762 3716 a Fw(x)p 908
3746 V 180 w FF(0)p 1092 3746 V 124 w(120)p 1317 3746
V 654 3749 666 4 v 654 3849 4 100 v 715 3819 a Fw(f)g
FF(\()r Fw(x)5 b FF(\))p 908 3849 V 103 w(30)p 1092 3849
V 124 w(90)p 1317 3849 V 654 3852 666 4 v 608 4047 a
Fw(f)19 b FF(\(0\))14 b FB(\306)g FF(0,)8 b(5)i FB(\243)g
FF(0)g FB(\305)g FF(30)18 b FB(\306)c FF(30)527 4171
y Fw(f)19 b FF(\(120\))c FB(\306)f FF(0,)8 b(5)i FB(\243)g
FF(120)g FB(\305)g FF(30)19 b FB(\306)14 b FF(90)p 0
TeXcolorgray 2050 4218 9 576 v 0 TeXcolorgray 2095 3726
a(On)21 b(place)h(les)g(points)h(de)e(coor)o(donn\351es)g(\(0;)8
b(30\))23 b(et)f(\(120;)8 b(90\),)23 b(puis)2095 3826
y(on)18 b(tr)o(ace)g(la)g(droite)g(\226)g(en)g(r\351alit\351)h(un)f
(segment,)i(puisqu)n('on)g(va)d(de)h(0)2095 3925 y(\340)f(200)i(en)f
(abscisses)o(.)-38 4465 y FG(R)o(emarque)e(:)j FF(On)h(a)f(choisi)h
(les)g(valeurs)h(0)f(et)f(120,)i(mais)g(on)e(peut)i(pr)o(endr)o(e)e(n)
-6 b('impor)q(te)20 b(quelles)h(valeurs)g(\226)e(l)o('avantage)i(de)e
(0,)h(c)n('est)g(que)g(le)-38 4564 y(calcul)e(est)g(facile)9
b(;)18 b(et)f(l)o('avantage)i(de)e(120,)i(c)n('est)f(qu)n('on)g(a)f
(d\351j\340)g(fait)h(le)g(calcul)g(dans)f(la)h(question)h(1.)p
0 TeXcolorgray 1909 5895 a(24)p 0 TeXcolorgray eop end
%%Page: 25 25
TeXDict begin 25 24 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.25) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1331 1478
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 174.20155 a add def
/d 0.0 a add neg def /h 207.61046 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1331 1478 a 1482 1378 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 15 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 156.01645 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 14.22714
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 13 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 195.5174 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 14.22272
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 156.01645  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 156.01645  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 195.5174  def /dT 932100 abs 65536 div viceversa
{ neg } if def /DT 20. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 0.71114  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 0.71114  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 195.5174
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 156.01645
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 195.5174  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 195.5174  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 156.01645  def /dT 932390 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 1.42271  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 195.5174
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 156.01645
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1467 1475 a FD(0)71
b(20)56 b(40)g(60)g(80)41 b(100)25 b(120)g(140)g(160)g(180)1393
1397 y(0)1362 1279 y(10)1362 1161 y(20)1362 1042 y(30)1362
924 y(40)1362 806 y(50)1362 688 y(60)1362 570 y(70)1362
452 y(80)1362 334 y(90)1331 216 y(100)1331 98 y(110)1331
-21 y(120)1482 1378 y
tx@Dict begin { 92.44766 11.51305 } PutCoor PutBegin  end
 1482 1378 a 57 x FF(km)17 b(par)o(cour)q(us)1482
1378 y
tx@Dict begin  PutEnd  end
 1482 1378 a 1482 1378 a
tx@Dict begin { 4.1484 180.28 } PutCoor PutBegin  end
 1482 1378 a 57 x FF(montant)h(de)f(la)
1482 1534 y(note)h(de)f(fr)o(ais)1482 1378 y
tx@Dict begin  PutEnd  end
 1482 1378
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 142.22717 184.95285
0.0 42.68143   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 64.00223 106.70357 0.0
106.70357   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 64.00223 0.0 64.00223
106.70357   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 0.0 42.68143   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 85.3363 128.04428   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 2777 1478 a
currentpoint initclip moveto
 2777 1478 a -246
1522 a
SDict begin H.S end
 -246 1522 a -246 1522 a
SDict begin 12 H.A end
 -246 1522 a -246 1522
a
SDict begin [/View [/XYZ H.V]/Dest (Item.101) cvn /DEST pdfmark end
 -246 1522 a 0 TeXcolorgray -141 1636 a FF(4.)p 0 TeXcolorgray
43 w(Le)j(vo)n(yageur)e(de)h(commer)o(ce)g(a)g(une)h(note)g(de)f(fr)o
(ais)g(de)g(75)h Fz(N)p FF(.)f(P)n(our)g(d\351ter)q(miner)g(le)h(nombr)
o(e)f(de)g(km)g(par)o(cour)q(us)g(dans)g(la)g(jour)q(n\351e)o(,)h(il)f
(y)g(a)-38 1736 y(deux)e(m\351thodes)i(:)p 0 TeXcolorgray
7 1850 a(\225)p 0 TeXcolorgray 42 w FG(G)o(raphiquement)q(.)d
FF(On)i(voit)f(qu)n('il)i(a)e(par)o(cour)q(u)f(90)j(km)e
(\(pointill\351s)j(rouges\))p 0 0 1 TeXcolorrgb 2390
1850 a
SDict begin H.S end
 2390 1850 a -30 x FD(3)2425 1850 y
SDict begin 12 H.L end
 2425 1850 a
2425 1850 a
SDict begin [/Subtype /Link/Dest (Hfootnote.3) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2425 1850 a 0 TeXcolorgray FF(.)p 0 TeXcolorgray
7 1950 a(\225)p 0 TeXcolorgray 42 w FG(P)m(ar)d(le)h(calcul.)h
FF(On)h(r)o(etir)o(e)f(les)i(fr)o(ais)g(\002xes)f(:)g(90)11
b FB(\241)g FF(30)20 b FB(\306)d FF(60)k Fz(N)e FF(d)n('indemnit\351)j
(kilom\351tr)q(ique)o(.)g(P)o(uis)o(,)f(comme)g(chaque)g(km)g(compte)g
(pour)80 2049 y(0,)8 b(5)18 b Fz(N)p FF(,)f(on)h(divise)g(:)g(45)10
b FB(\245)g FF(0,)e(5)17 b FB(\306)d FF(45)c FB(\243)g
FF(2)16 b FB(\306)e FF(90)k(km)q(.)p 0 0 1 TeXcolorrgb
1536 2049 a
SDict begin H.S end
 1536 2049 a -30 x FD(4)1571 2049 y
SDict begin 12 H.L end
 1571 2049
a 1571 2049 a
SDict begin [/Subtype /Link/Dest (Hfootnote.4) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1571 2049 a 0 TeXcolorgray -246 2126 a
SDict begin H.S end

-246 2126 a -246 2126 a
SDict begin 12 H.A end
 -246 2126 a -246 2126 a
SDict begin [/View [/XYZ H.V]/Dest (exo.49) cvn /DEST pdfmark end
 -246
2126 a -246 2145 a
SDict begin H.S end
 -246 2145 a -246 2145 a
SDict begin 12 H.A end
 -246 2145
a -246 2145 a
SDict begin [/View [/XYZ H.V]/Dest (Item.102) cvn /DEST pdfmark end
 -246 2145 a 0 TeXcolorgray 103 x FG(Ex)o(er)o(cice)c(49)p
0 TeXcolorgray 0 TeXcolorgray 146 w FF(1.)p 0 TeXcolorgray
0 TeXcolorgray 88 w(\225)p 0 TeXcolorgray 42 w(Lorsqu)n('on)k
(t\351l\351charge)g(50)g(M)n(o)m(,)f(on)h(paye)f(3)g
Fz(N)p FF(.)p 0 TeXcolorgray 7 2348 a(\225)p 0 TeXcolorgray
42 w(Lorsqu)n('on)i(t\351l\351charge)f(150)h(M)n(o)m(,)e(les)i(100)g
(pr)o(emiers)f(co\373tent)h(3)f Fz(N)9 b FF(;)17 b(et)h(les)h(50)f
(suivants)h(co\373tent)g(50)10 b FB(\243)g FF(0,)e(04)18
b FB(\306)d FF(2)j Fz(N)p FF(.)f(On)h(paye)f(donc)g(au)80
2448 y(total)h(3)10 b FB(\305)g FF(2)15 b FB(\306)f FF(5)k
Fz(N)p FF(.)-246 2463 y
SDict begin H.S end
 -246 2463 a -246 2463 a
SDict begin 12 H.A end
 -246
2463 a -246 2463 a
SDict begin [/View [/XYZ H.V]/Dest (Item.103) cvn /DEST pdfmark end
 -246 2463 a 0 TeXcolorgray -141 2576
a FF(2.)p 0 TeXcolorgray 43 w(On)f(compl\350te)i(le)f(tableau)g(de)f
(valeurs)h(:)p 0 TeXcolorgray 0 TeXcolorgray 1241 2689
1626 4 v 1241 2788 4 100 v 1294 2758 a(N)n(ombr)o(e)e(de)i(M)n(o)p
1862 2788 V 102 w(0)p 2006 2788 V 104 w(50)p 2190 2788
V 104 w(100)p 2414 2788 V 104 w(150)p 2639 2788 V 105
w(200)p 2863 2788 V 1241 2792 1626 4 v 1241 2891 4 100
v 1294 2861 a(P)o(r)q(ix)f(\340)g(payer)p 1862 2891 V
218 w(3)p 2006 2891 V 124 w(3)p 2190 2891 V 164 w(3)p
2414 2891 V 185 w(5)p 2639 2891 V 184 w(7)p 2863 2891
V 1241 2894 1626 4 v -38 3018 a FG(R)o(emarque)d(:)j
FF(jusqu)n('\340)i(100)g(M)n(o)m(,)e(on)g(paye)g(3)h
Fz(N)p FF(.)f(Ensuite)o(,)i(chaque)f(nouvelle)h(tr)o(anche)f(de)f(50)h
(M)n(o)f(est)h(factur\351e)g(2)g Fz(N)p FF(.)-246 3052
y
SDict begin H.S end
 -246 3052 a -246 3052 a
SDict begin 12 H.A end
 -246 3052 a -246 3052 a
SDict begin [/View [/XYZ H.V]/Dest (Item.104) cvn /DEST pdfmark end
 -246
3052 a 0 TeXcolorgray -141 3147 a FF(3.)p 0 TeXcolorgray
43 w(On)g(constr)q(uit)h(la)f(courbe)g(qui)h(donne)f(le)h(pr)q(ix)f
(pay\351)g(en)h(fonction)g(du)f(nombr)o(e)g(de)g(M)n(o)g
(t\351l\351charg\351s)o(.)h(Elle)g(est)g(constante)g(sur)g(l)o('inter)q
(valle)-38 3248 y([)-13 3247 y(0;)8 b(100)175 3248 y(])211
3247 y(,)17 b(puis)i(af\002ne)e(sur)h(l)o('inter)q(valle)1140
3248 y([)1165 3247 y(100;)8 b(200)1433 3248 y(])1470
3247 y(.)17 b(Il)g(faut)h(donc)f(utiliser)i(une)f(r\350gle)f(pour)h
(effectuer)h(le)f(tr)o(ac\351)p 0 0 1 TeXcolorrgb 3282
3247 a
SDict begin H.S end
 3282 3247 a -30 x FD(5)3317 3247 y
SDict begin 12 H.L end
 3317 3247 a
3317 3247 a
SDict begin [/Subtype /Link/Dest (Hfootnote.5) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3317 3247 a 0 TeXcolorgray FF(.)p 0 TeXcolorgray
0 TeXcolorgray 1212 4805 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.76924 a add def
/d 0.0 a add neg def /h 177.37851 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1212 4805 a 1381 4660 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 9 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 182.46393 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 21.33955
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 10 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 159.95384 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 21.33865
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 182.46393  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 182.46393  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 159.95384  def /dT 1398450 abs 65536 div viceversa
{ neg } if def /DT 50. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 0.42677  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 0.42677  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 159.95384
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 182.46393
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 159.95384  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 159.95384  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 182.46393  def /dT 1398509 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 21.33955  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 159.95384
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 182.46393
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1366 4757 a FD(0)130 b(50)100 b(100)84 b(150)g(200)g(250)g(300)h(350)
1292 4680 y(0)1292 4503 y(1)1292 4325 y(2)1292 4148 y(3)1292
3971 y(4)1292 3794 y(5)1292 3617 y(6)1381 4660 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 42.6773 64.01866
0.0 64.01866   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 85.35461 149.37688
42.6773 64.01866   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 59.74823 98.16206 0.0
98.16206   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 59.74823 0.0 59.74823
98.16206   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 1381 4660 a
tx@Dict begin { 87.53294 11.3057 } PutCoor PutBegin  end
 1381 4660 a 57 x
FF(N)n(ombr)o(e)16 b(de)h(M)n(o)1381 4660 y
tx@Dict begin  PutEnd  end
 1381 4660
a 1381 4660 a
tx@Dict begin { 1.34561 146.62965 } PutCoor PutBegin  end
 1381 4660 a 54 x FF(P)o(r)q(ix)1381 4660
y
tx@Dict begin  PutEnd  end
 1381 4660 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 0.0 64.01866   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 21.33865 64.01866   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 42.6773 64.01866   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 64.01596 106.69777   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 85.35461 149.37688   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 2895 4805 a
currentpoint initclip moveto
 2895
4805 a -246 4849 a
SDict begin H.S end
 -246 4849 a -246 4849 a
SDict begin 12 H.A end
 -246 4849
a -246 4849 a
SDict begin [/View [/XYZ H.V]/Dest (Item.105) cvn /DEST pdfmark end
 -246 4849 a 0 TeXcolorgray -141 4963 a
FF(4.)p 0 TeXcolorgray 43 w(Il)g(y)f(a)i(deux)f(m\351thodes)i(:)p
0 TeXcolorgray 7 5077 a(\225)p 0 TeXcolorgray 42 w FG(G)o(raphiquement)
q(.)d FF(On)i(voit)f(qu)n('on)h(a)f(t\351l\351charg\351)h(140)h(M)n(o)e
(\(pointill\351s)i(rouges\).)p 0 TeXcolorgray 7 5177
a(\225)p 0 TeXcolorgray 42 w FG(P)m(ar)c(le)h(calcul.)g
FF(J'ai)h(pay\351)h(4,60)i Fz(N)p FF(,)d(donc)g(3)10
b FB(\305)g FF(1,)e(60)21 b Fz(N)p FF(.)c(J'ai)h(donc)f
(t\351l\351charg\351)h(1,)8 b(60)i FB(\245)g FF(0,)e(04)19
b FB(\306)c FF(40)j(M)n(o)g(au-del\340)g(du)f(100)3579
5153 y Fc(e)3606 5177 y FF(.)h(A)n(utr)o(ement)g(dit,)80
5277 y(j)o('ai)f(t\351l\351charg\351)h(140)h(M)n(o)m(.)p
0 TeXcolorgray -246 5348 1757 4 v -154 5425 a Fq(3)q(.)p
0 TeXcolorgray -76 5425 a
SDict begin H.S end
 -76 5425 a -76 5425 a
SDict begin H.R end
 -76 5425
a -76 5425 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.3) cvn /DEST pdfmark
end
 -76 5425 a 0 TeXcolorgray Fq(La)14 b(m\351thode)h(gr)o
(aphique)f(est)g(simple)o(,)g(mais)f(la)h(r\351ponse)g(pourr)o(ait)g
(\352tr)o(e)g(impr\351cise)o(.)-154 5504 y(4)q(.)p 0
TeXcolorgray -76 5504 a
SDict begin H.S end
 -76 5504 a -76 5504 a
SDict begin H.R end
 -76 5504
a -76 5504 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.4) cvn /DEST pdfmark
end
 -76 5504 a 0 TeXcolorgray Fq(On)f(peut)h(aussi)f
(r\351soudr)o(e)h(l)o('\351quation)g(0,)6 b(5)q Fn(x)12
b Fb(\305)c Fq(30)14 b Fb(\306)e Fq(75.)-154 5583 y(5)q(.)p
0 TeXcolorgray -76 5583 a
SDict begin H.S end
 -76 5583 a -76 5583 a
SDict begin H.R end
 -76 5583
a -76 5583 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.5) cvn /DEST pdfmark
end
 -76 5583 a 0 TeXcolorgray Fq(On)h(parle)h(de)g(fonction)g
(\253)d(af\002ne)k(par)e(mor)o(ceaux)e(\273.)p 0 TeXcolorgray
0 TeXcolorgray 1909 5895 a FF(25)p 0 TeXcolorgray eop
end
%%Page: 26 26
TeXDict begin 26 25 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.26) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246
-246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (exo.50) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 83 x FG(Ex)o(er)o(cice)14
b(50)p 0 TeXcolorgray 41 w FF(Les)22 b(gar)o(es)f(de)g(C)o(alais)h(et)g
(de)f(Boulogne-sur)o(-M)n(er)h(sont)g(distantes)g(de)g(30)g(km.)g(U)m
(n)g(tr)o(ain)f(par)q(t)h(\340)f(12)h(h)f(de)h(Boulogne-sur)o(-M)n(er)f
(en)-246 -63 y(dir)o(ection)g(de)g(C)o(alais)h(et)f(roule)g(\340)g(la)g
(vitesse)i(de)e(40)h(km/h.)g(U)m(n)f(tr)o(ain)h(par)q(t)e(de)h(C)o
(alais)h(\340)f(12)h(h)f(15)h(et)f(fait)h(route)f(en)g(sens)h(inverse)g
(\340)f(la)g(vitesse)i(de)-246 37 y(60)c(km/h.)-246 65
y
SDict begin H.S end
 -246 65 a -246 65 a
SDict begin 12 H.A end
 -246 65 a -246 65 a
SDict begin [/View [/XYZ H.V]/Dest (Item.106) cvn /DEST pdfmark end
 -246 65 a 0
TeXcolorgray -141 177 a FF(1.)p 0 TeXcolorgray 43 w(Le)h(tr)o(ain)g
(qui)h(par)q(t)e(\340)h(12)g(h)g(de)g(Boulogne-sur)o(-M)n(er)g(roule)g
(\340)f(la)h(vitesse)i(de)e(40)g(km/h,)h(donc)e(il)i(par)o(cour)q(t)e
(40)h(km)g(en)h(60)f(min.)h(P)n(our)e(savoir)-38 277
y(quand)e(il)h(arr)q(ive)f(\340)g(C)o(alais)o(,)i(on)e(compl\350te)i
(un)f(tableau)g(de)f(propor)q(tionnalit\351)i(:)p 0 TeXcolorgray
0 TeXcolorgray 1528 360 1051 4 v 1528 460 4 100 v 1605
430 a(temps)g(\(en)e(min\))p 2208 460 V 127 w(60)p 2392
460 V 134 w(?)p 2576 460 V 1528 463 1051 4 v 1528 563
4 100 v 1582 533 a(distance)g(\(en)h(km\))p 2208 563
V 103 w(40)p 2392 563 V 104 w(30)p 2576 563 V 1528 566
1051 4 v -38 700 a(Le)g(tr)o(ain)g(mettr)o(a)502 668
y FD(60)p FC(\243)p FD(30)p 502 681 165 5 v 554 729 a(40)691
700 y FB(\306)770 668 y FD(1)6 b(800)p 770 681 130 5
v 804 729 a(40)924 700 y FB(\306)14 b FF(45)k(min)g(pour)g(arr)q(iver)e
(\340)h(C)o(alais)o(,)i(donc)e(il)h(y)f(ser)o(a)h(\340)f(12)h(h)f(45.)
-38 861 y(P)n(our)h(le)i(tr)o(ain)f(qui)h(par)q(t)f(de)f(C)o(alais)o(,)
j(le)e(calcul)h(est)g(plus)g(facile)g(:)f(il)g(roule)g(\340)g(60)h
(km/h,)g(donc)f(par)o(cour)q(t)f(60)i(km)f(en)h(60)f(min)9
b(;)20 b(et)f(ainsi)h(30)g(km)-38 961 y(en)e(30)g(min.)g(C)o(omme)h(il)
f(par)q(t)f(\340)g(12)h(h)g(15,)g(il)g(arr)q(ive)f(\340)g(12)h(h)g(45)g
(lui)g(aussi.)-38 1122 y(On)f(peut)i(ainsi)f(r)o(epr\351senter)g(la)f
(mar)o(che)h(des)f(deux)g(tr)o(ains)i(:)p 0 TeXcolorgray
0 TeXcolorgray 769 2523 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 309.42352 a add def
/d 0.0 a add neg def /h 159.1932 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 769 2523 a 1389 2353 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 213.39554 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 21.33955
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 11 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 128.03732 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 21.33955
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 234.73509  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 234.73509  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 138.70709  def /dT 1398509 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 21.33955  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 21.33955  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 138.70709
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 234.73509
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 138.70709  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 138.70709  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 234.73509  def /dT 1398509 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 21.33955  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 138.70709
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 234.73509
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1389 2353 a
tx@Dict begin { -8.53569 -7.25536 } PutCoor PutBegin  end
 1389 2353 a 40 x Fa(12h)1389 2353 y
tx@Dict begin  PutEnd  end
 1389
2353 a 1389 2353 a
tx@Dict begin { 29.87524 -7.25536 } PutCoor PutBegin  end
 1389 2353 a 40 x Fa(12h10)1389 2353
y
tx@Dict begin  PutEnd  end
 1389 2353 a 1389 2353 a
tx@Dict begin { 72.55435 -7.25536 } PutCoor PutBegin  end
 1389 2353 a 40 x Fa(12h20)1389
2353 y
tx@Dict begin  PutEnd  end
 1389 2353 a 1389 2353 a
tx@Dict begin { 115.23346 -7.25536 } PutCoor PutBegin  end
 1389 2353 a 40 x Fa(12h30)1389
2353 y
tx@Dict begin  PutEnd  end
 1389 2353 a 1389 2353 a
tx@Dict begin { 157.91257 -7.25536 } PutCoor PutBegin  end
 1389 2353 a 40 x Fa(12h40)1389
2353 y
tx@Dict begin  PutEnd  end
 1389 2353 a 1389 2353 a
tx@Dict begin { 200.59167 -7.25536 } PutCoor PutBegin  end
 1389 2353 a 40 x Fa(12h50)1389
2353 y
tx@Dict begin  PutEnd  end
 1389 2353 a 1389 2353 a
tx@Dict begin { -6.40192 3.84096 } PutCoor PutBegin  end
 1389 2353 a 36 x Fa(0)1389
2353 y
tx@Dict begin  PutEnd  end
 1389 2353 a 1389 2353 a
tx@Dict begin { -12.80385 45.23975 } PutCoor PutBegin  end
 1389 2353 a 36 x Fa(10)1389
2353 y
tx@Dict begin  PutEnd  end
 1389 2353 a 1389 2353 a
tx@Dict begin { -12.80385 88.34573 } PutCoor PutBegin  end
 1389 2353 a 36 x Fa(20)1389
2353 y
tx@Dict begin  PutEnd  end
 1389 2353 a 1389 2353 a
tx@Dict begin { -44.81319 8.53569 } PutCoor PutBegin  end
 1389 2353 a 1418 2421
a Fa(Boulogne)p 1389 2357 289 4 v 1389 2461 4 107 v 1674
2461 V 1389 2463 289 4 v 1389 2353 a
tx@Dict begin  PutEnd  end
 1389 2353 a 1389
2353 a
tx@Dict begin { -44.81319 136.57301 } PutCoor PutBegin  end
 1389 2353 a 1418 2421 a Fa(C)o(alais)p 1389 2357
203 4 v 1389 2449 4 95 v 1588 2449 V 1389 2451 203 4
v 1389 2353 a
tx@Dict begin  PutEnd  end
 1389 2353 a 1389 2353 a
tx@Dict begin { -12.80385 131.87828 } PutCoor PutBegin  end
 1389 2353 a 36
x Fa(30)1389 2353 y
tx@Dict begin  PutEnd  end
 1389 2353 a 1389 2353 a
tx@Dict begin { 96.02798 -7.25536 } PutCoor PutBegin  end
 1389 2353
a 0 1 0 TeXcolorrgb 40 x Fa(12h27)p 0 TeXcolorgray 1389
2353 a
tx@Dict begin  PutEnd  end
 1389 2353 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 192.05598 128.03732 0.0
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 64.01866 128.03732 0.0
128.03732   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 192.05598 0.0 64.01866
128.03732   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 115.23346 0.0 115.23346
76.82251   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
3338 2523 a
currentpoint initclip moveto
 3338 2523 a -246 2564 a
SDict begin H.S end
 -246 2564 a -246
2564 a
SDict begin 12 H.A end
 -246 2564 a -246 2564 a
SDict begin [/View [/XYZ H.V]/Dest (Item.107) cvn /DEST pdfmark end
 -246 2564 a 0 TeXcolorgray
-140 2678 a FF(2.)p 0 TeXcolorgray 42 w(N)n(ous)25 b(allons)i(d\351ter)
q(miner)f(l)o('heur)o(e)h(de)e(croisement)h(des)g(tr)o(ains)g(par)g(le)
g(calcul.)g(Gr)o(aphiquement,)i(cela)e(corr)o(espond)f(\340)h(l)o
('abscisse)h(du)-38 2777 y(point)18 b(d)n('intersection)i(des)d
(courbes)o(.)-38 2938 y(\300)24 b(12h15,)k(le)e(tr)o(ain)f(qui)h(par)q
(t)f(de)g(Boulogne-sur)o(-M)n(er)g(a)g(par)o(cour)q(u)f(10)i(km)g
(\(facile)f(\340)g(v\351r)q(i\002er\),)g(il)h(est)f(donc)g(\340)g(20)h
(km)g(de)f(C)o(alais)o(.)g(C'est)-38 3038 y(l)o('heur)o(e)19
b(\340)e(laquelle)i(le)f(deuxi\350me)h(tr)o(ain)f(par)q(t.)g(C)o(omme)h
(l)o('un)f(roule)g(\340)f(40)i(km/h)f(et)g(l)o('autr)o(e)g(\340)f(60)i
(km/h,)f(tout)h(se)f(passe)g(comme)h(si)f(un)f(seul)-38
3137 y(tr)o(ain)h(devait)f(par)o(cour)q(ir)g(20)h(km)f(\340)h(la)f
(vitesse)i(de)e(40)10 b FB(\305)g FF(60)17 b FB(\306)d
FF(100)19 b(km/h.)f(On)f(compl\350te)j(un)d(tableau)h(de)f(propor)q
(tionnalit\351)i(:)p 0 TeXcolorgray 0 TeXcolorgray 1508
3221 1092 4 v 1508 3320 4 100 v 1585 3290 a(temps)f(\(en)g(min\))p
2188 3320 V 147 w(60)p 2412 3320 V 154 w(?)p 2596 3320
V 1508 3324 1092 4 v 1508 3423 4 100 v 1561 3393 a(distance)g(\(en)g
(km\))p 2188 3423 V 103 w(100)p 2412 3423 V 104 w(20)p
2596 3423 V 1508 3427 1092 4 v -28 3528 a FD(60)p FC(\243)p
FD(20)p -28 3541 165 5 v 8 3590 a(100)161 3561 y FB(\306)240
3528 y FD(1)6 b(200)p 240 3541 130 5 v 259 3590 a(100)394
3561 y FB(\306)14 b FF(12,)k(donc)f(il)h(faudr)o(ait)g(12)g(min)g(\340)
f(ce)h(tr)o(ain)f(pour)h(par)o(cour)q(ir)e(20)j(km.)f(Ainsi,)g(les)g
(deux)f(tr)o(ains)h(se)g(croiseront-ils)g(\340)1445 3738
y(12)h(h)e(15)h(min)11 b FB(\305)f FF(12)19 b(min)c FB(\306)f
FF(12)k(h)g(27)g(min)q(.)-246 3830 y
SDict begin H.S end
 -246 3830 a -246
3830 a
SDict begin 12 H.A end
 -246 3830 a -246 3830 a
SDict begin [/View [/XYZ H.V]/Dest (exo.51) cvn /DEST pdfmark end
 -246 3830 a 0 TeXcolorgray
104 x FG(Ex)o(er)o(cice)c(51)p 0 TeXcolorgray 41 w FF(J)n(e)k(me)i
(contenter)o(ai)g(du)e(gr)o(aphique)o(,)i(donc)e(je)h(ne)g(fer)o(ai)g
(pas)g(les)h(calculs)f(pour)g(avoir)g(les)g(heur)o(es)g(exactes)h(des)e
(deux)h(r)o(encontr)o(es)f(\226)-246 4034 y(elles)h(s)m('obtiennent)g
(avec)f(les)g(m\352mes)h(techniques)g(que)f(dans)f(l)o('exer)o(cice)i
(pr\351c\351dent.)p 0 TeXcolorgray 0 TeXcolorgray 829
5568 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 269.94522 a add def
/d 0.0 a add neg def /h 172.42363 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 829 5568 a 1077 5434 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 9 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 240.06998 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 21.33955
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 156.20569 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 21.33955
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 240.06998  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 240.06998  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 156.20569  def /dT 1398509 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 21.33955  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 21.33955  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 156.20569
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 240.06998
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 156.20569  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 156.20569  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 240.06998  def /dT 1398509 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 21.33955  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 156.20569
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 240.06998
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1077 5434 a
tx@Dict begin { -4.26784 -3.20079 } PutCoor PutBegin  end
 1077
5434 a 56 x FF(9h)1077 5434 y
tx@Dict begin  PutEnd  end
 1077 5434 a 1077 5434 a
tx@Dict begin { 56.76329 -3.20079 } PutCoor PutBegin  end

1077 5434 a 56 x FF(10h)1077 5434 y
tx@Dict begin  PutEnd  end
 1077 5434 a 1077
5434 a
tx@Dict begin { 122.06227 -3.20079 } PutCoor PutBegin  end
 1077 5434 a 56 x FF(11h)1077 5434 y
tx@Dict begin  PutEnd  end
 1077 5434
a 1077 5434 a
tx@Dict begin { 185.22716 -3.20079 } PutCoor PutBegin  end
 1077 5434 a 56 x FF(12h)1077 5434 y
tx@Dict begin  PutEnd  end
 1077
5434 a 1077 5434 a
tx@Dict begin { -8.53569 4.26784 } PutCoor PutBegin  end
 1077 5434 a 51 x FF(0)1077 5434 y
tx@Dict begin  PutEnd  end

1077 5434 a 1077 5434 a
tx@Dict begin { -12.80385 25.60739 } PutCoor PutBegin  end
 1077 5434 a 51 x FF(10)1077 5434
y
tx@Dict begin  PutEnd  end
 1077 5434 a 1077 5434 a
tx@Dict begin { -12.80385 46.94695 } PutCoor PutBegin  end
 1077 5434 a 51 x FF(20)1077
5434 y
tx@Dict begin  PutEnd  end
 1077 5434 a 1077 5434 a
tx@Dict begin { -12.80385 68.2865 } PutCoor PutBegin  end
 1077 5434 a 51 x FF(30)1077
5434 y
tx@Dict begin  PutEnd  end
 1077 5434 a 1077 5434 a
tx@Dict begin { -12.80385 89.62605 } PutCoor PutBegin  end
 1077 5434 a 51 x FF(40)1077
5434 y
tx@Dict begin  PutEnd  end
 1077 5434 a 1077 5434 a
tx@Dict begin { -12.80385 110.9656 } PutCoor PutBegin  end
 1077 5434 a 51 x FF(50)1077
5434 y
tx@Dict begin  PutEnd  end
 1077 5434 a 1077 5434 a
tx@Dict begin { -12.80385 132.30516 } PutCoor PutBegin  end
 1077 5434 a 51 x FF(60)1077
5434 y
tx@Dict begin  PutEnd  end
 1077 5434 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 96.02798 64.01866
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 138.70709 64.01866
96.02798 64.01866   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 234.73509 128.03732
138.70709 64.01866   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1077 5434 a
tx@Dict begin { 7.25536 35.42374 } PutCoor PutBegin  end
 1077 5434 a 0.30196 0.30196 1
TeXcolorrgb 56 x FF(C)n(ycliste)p 0 TeXcolorgray 1077
5434 a
tx@Dict begin  PutEnd  end
 1077 5434 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 42.67911 128.03732 0.0
128.03732   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 106.69777 0.0 42.67911
128.03732   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 128.03732 0.0 106.69777
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 192.05598 128.03732 128.03732
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 80.02332 0.0 80.02332
53.34888   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 1077 5434 a
tx@Dict begin { 72.12779 -3.20079 } PutCoor PutBegin  end
 1077
5434 a 0 1 0 TeXcolorrgb 56 x FF(10h15)p 0 TeXcolorgray
1077 5434 a
tx@Dict begin  PutEnd  end
 1077 5434 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.71643 0.0 170.71643
85.35822   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
1077 5434 a
tx@Dict begin { 157.91257 -3.20079 } PutCoor PutBegin  end
 1077 5434 a 0 1 0 TeXcolorrgb 56 x FF(11h40)p
0 TeXcolorgray 1077 5434 a
tx@Dict begin  PutEnd  end
 1077 5434 a 1077 5434 a
tx@Dict begin { 6.40192 139.98741 } PutCoor PutBegin  end
 1077
5434 a 1 0 0 TeXcolorrgb 56 x FF(A)n(utomobile)p 0 TeXcolorgray
1077 5434 a
tx@Dict begin  PutEnd  end
 1077 5434 a 1077 5434 a
tx@Dict begin { -27.74147 8.53569 } PutCoor PutBegin  end
 1077 5434 a 1106
5516 a FF(A)p 1077 5437 105 4 v 1077 5542 4 108 v 1179
5542 V 1077 5544 105 4 v 1077 5434 a
tx@Dict begin  PutEnd  end
 1077 5434 a 1077
5434 a
tx@Dict begin { -27.74147 136.57301 } PutCoor PutBegin  end
 1077 5434 a 1106 5516 a FF(B)p 1077 5437 106 4
v 1077 5542 4 108 v 1180 5542 V 1077 5544 106 4 v 1077
5434 a
tx@Dict begin  PutEnd  end
 1077 5434 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 1 0  setrgbcolor  [ 80.02332
53.34888   false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 1 0  setrgbcolor  [ 170.71643
85.35822   false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 3071 5568 a
currentpoint initclip moveto
 3071
5568 a 0 TeXcolorgray 1909 5895 a FF(26)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
