%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: CorrigesSeconde.dvi
%%CreationDate: Mon Sep  9 11:27:19 2024
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold Fourier-Math-Symbols wasy10
%%+ Fourier-Math-Letters-Italic LINE10 CMSY10 Utopia-Italic
%%+ Fourier-Math-Cal Fourier-Math-Extension
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o CorrigesSeconde.ps
%+ CorrigesSeconde.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2024.09.09:1327
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Fourier-Math-Extension
%!PS-AdobeFont-1.0: Fourier-Math-Extension 001.004
%%CreationDate: Fri Dec 30 13:47:17 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Extension) readonly def
/FamilyName (Fourier-Math-Extension) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Medium) readonly def
end readonly def
/FontName /Fourier-Math-Extension def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 122 /bracehtipdownleft put
dup 123 /bracehtipdownright put
dup 124 /bracehtipupleft put
dup 125 /bracehtipupright put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-32 -2960 6882 848} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F6FC13F6
FEDF4B792B4382E1B8DD4D6B66F7698F4BD76CD673F74E2FFCF34A3EACBD4F3C
C6A935F0007CEC07779EB225FD87A32485FCF1300A8B140DF1FB601966E239B5
C97A004A4205CCDACFFC747D59C0AB62F98C58566E92367FF923A747FDE768F2
BC84EA22988D2856786B73BD956D58D8E1DE05E3B73798BA7BAE21AED1D65A51
3E8B275C326E384F909CDD630CC3B3D3A664C6BB0A43AF3EF5B681E8178A68F4
18925BF7234218D39BD091D0B241B2FB96B24A302B7A2C3648C0BEBA299B1422
B2A246F4DFA5A9BA475E9963604E772769D365D898BAE237E423E657C64198D6
C50DC4E23676D32A80D9FCC26CB7EE5882A7CD7515BB142652043EFE62BF1296
C02D6A59757DAE8B7ABECD31FB3886ECFE4C018918AA771BEE2AD4BE22C921A4
50F44C875C97D243655B17F1C1C4E4C34EF324C3BBBBE230EC9D5EC568CA45C1
F0B2F8760CDD8F8CC7A19377F15ECE29BAC75C965984E9E5C246419CAF94119D
CD396DA99EBBDCD62D4493A16F9D040A24BA632716AA2CF3E8527A11E08CD983
08E109D5F610523FC1A976251F5BDB7C51EC9559890B4E838A6B7AD783AB3E61
36A0752C1C9586BED6F91B6B2C31BB5EF83E54C2E1A67785891B6161DDC05BAF
0C11DF8939F72ED4C1CFD293B9BBE5D7BEB0835695972221F1D1BD1D197E1A3E
BF18CEA3EE0C05151741C87469C417F1331BA729FF30D6CA8AD4B25572C230F9
2E250FF7F828D5FDC41884B337483286EC37AA4563EA5AD6F28E5227E8EC3AF1
6038BEA4475B0CD36D674A344E85B43BA3F22462B286886B2FD9B2FFFE1A996E
B0F752104862EFB24394FA6D39DCDA3FB70D93E95FE58AC0B21D109900667349
5B2D43FDF1E4EE5CE4F0CA7062C6BC568A897DFD9185BD17E8FB9AFB68659C86
242E30DE8D95EB6A9E9CB42398895F1F95D5F191D6FF2E3E78E08934514C342F
45D4DD4D84EA7F29299E3CAB95D642A2CD023A1848E1121734CA2C9DBDABE605
9D2BB65CDD36BBBF12F39BE5C983F24BB65ACA13B9F7B1FF17B69D0EE8CE3972
D043EB13A26A661880550CD1863241FDB71F0A2F4F6EF2D2215DE1981AECE8E0
DDD5304F305DD920F967CE84F73AAD25CC73881E6F1C69FC61A157C6835F3ECF
64E26987F07854D2238AF6756C8822FD079BE18F6B04E5B2A467B59AA351851D
AFA8EF069D87BF2203D65F6343E2D3CFF9F0AA98B274FD40D6292074FB780742
B1217C06DDCDE7D8692D2154E4CAB0B4EFBD5BBCCE2DB651521CCBCEF5A6E903
C534BD676F926F0AD77B9A07FFC788FDB3879116715CB6A8D5CCB697BBD8E659
8856886AB0F4E8AC358C7F7E12E57590A2C7412F6E614351D5BFCA03B8259C66
53A4608D868C959EFDEC99E3F72C8C670F41D5D9A9D0DC81B507B92AA39AFA8D
60940A1A4A6A005F0623501550D2E60F5B3C7472B170C1A7D16F9BF4796B975F
70E66DEC9D7C0C26D36CE0232D94BB7769657E92C9C75EDDEF79B8B858DDA203
612FF6723C9300DD6E55E8E3A8D1462FC528DFC23545AC68ED074BDF1A5EFFEA
732A5ED64186538B15352F08EC3D02071A6EE2115781802E02CB89496A9A0E6A
C92C1C6287707AAE31C42925F5B96141
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F607E0F7863C43D7F6A91917EBD66730DBD642DAB8769849
47384FFFB4994ECF216FFA8140397695EE5AD63F1156720A01BBFB15AA24FDB8
2F2A8F541C7FC860E03F5E4DE80BCF6891263C142159D5879CA0A1883A9B6C50
CBDA9CF0C97E761E354C39527F070E680B42E6732896B10E6A7600184B156ACF
57BD9A98F613FC166F47C3D1C4E5E02BAB648D74B078EE3F0D8148D981451BD3
918C71284E6154BEDF8D66BA1261A7459F64F133445F9BE19A2C48B1FE1D06B1
845AB18E2E5C17B77C48FBAE7AA98424BA0F90F689216F31EFABC25D4EC37767
C5A4BD9210AB9F0D3385717E8980C7F6C021061CC213ECEDD34548605F3FF29F
B92FEF1C849AFF8AD297F7A4259C35B7B9B679A509FB97F10F2BA3521085B1D5
104D43AFAED420272E0DB15AAF65567BAB2B030932584E4DE6150645266166F9
0B4254E51CEBB8AF1DF197332712C1CC25F4C90694E0A0062BC15C19C34ED8BE
EE6370E093DC61E10F0D21D131383155AA57EF3F1EC3BFE4945DCDAED151A00A
04E5D912729296F062120371843F314B657231B7CF6FC06B2A8B51B22B3D70DB
35304CBEBE59C2179D17F62B1EE25D68446270CB6EAECAEB45B3598BC094C41A
4D40F4706DB41E9274E5831F514E4CAC1BFFFB8EE79D8569D409F1D01FDD7B75
A18DB9B18325DFD559D8CABC65EC82F51AD87E4DBA547A683DFFE0652F3C4865
D9976699955A25C171EFF92D0D809443067F25110B5DBEF8F6D2103C6684E59E
EFFC5B79E844F77579B2C40B8F3B84928A6BDF989D2A564050C8E934363E291B
F1578CB5A8717162AAE4B14DB92CC9CF991FFF370B006B496FCB64AC49A3C48F
0C0424303A7A7951A233333A3BE94FA1259DBDBE4C114CA55F4FBCF553F70268
296E341B8D3B1DB27ABBAEB637F0D5127A02509E3232C1145ED3E5D1F0F33BDA
FB319C324214056FEAFA2691274EDA6302837A4528B62F334A3E257B19DC3CF4
1DF8AB287F29230804417B4C9C3DE04DB6BFC647E37352B5134F39960274324A
1E98BBA740CAD477ABAAB1E8935DBA230B5285BB6F66D4761A0633973109E5F8
4F913F01A6939634D73C59C95ED966B91961D9189194B93C9DA0185314F8AFB2
0A70CA505559295B76127E01C40437523B608EA7C54D9CFB9F4B4E5C5C4AF793
0FEC736561223912A079C015C8E07FCA0EA41A48B3396CB564A6516415F1BA1F
C2B4613E75A878A64E9138EAF4373C292F125A27CF4BBDDC9CE126B486BD7DE7
A7756EC735EA946AF2082C93488FA3691EC1DF024DB0D9F6B8116336568E0C1D
D41586E7ED03C64EDFD98D559A4E99DA2CCDE1D1644CE582EB7FB172D399C539
114B1A1AE1533EAAF375BE56AF47FF2004FBE920708EE6FEC3797077355B663C
B60AFE13EBAC6BD4F64F2CF979C366EF542835AEC3A6F946142BC45FD47220E7
0308362888BEE48CA8920E4BEDAA29A232570AB8AE4626720C4439AA74157D52
72A013E29D59A4525083C52DDB835B0AF08C6C1045EC9F220A78D7AA5F4E824B
182C47224B8DE850345F35D34A4D4376B9EA470066F36CE5411EB08FB405DEFB
AC33038D4883F8DD04F89767A8B873D886187EEF62A1F70DD35A2907997EB583
5B278056C2FB7B15A68AAAAEBCC5EF8DB0EE24F08CD09EFD77E43BD168039D04
C803B8EB96252661B6168AEBF1E795073E4F222D942E157E1A500DB41159F566
C1C9BE1756F6EF6AA780793BF893C52731C12B18FD7389D26C6EAE8E4E2250B7
4E69FF8C7C790D2E4001000C71E90DF4B27EDD5A942D04E4C2961ED93F0601B6
B9B33D252B1433691B46FD11A7CF9F9C2C5337146A06890ADEBBC097A9100D21
30FD81C706B74A950A606224285C49EB6EF863A817814D9EEB3FDE74798D1931
020E0EDDF48A5182F8275A2FD80EF4E697B76D97367E044B639F70190E2B9837
3A70851AE35601F41793B590FA4F9FB25CEB5A6AC05EA00FC6F26BBC4B9898D6
5C4B163F603F9D482950E90E8F00818EE88AE00EFB504340035FF1D2FDD8032C
0C3249870E1FB046CB95FEF4DB0F3C902824A96E4D6673E6E3A53CF413508FB9
3ECDF7D0684D922935B289425A10640C7DE47E8D42101386D82EEE045A248CF1
5160FF52111CF14963A55BFC7CC7441009C509362AD9789127D2DAED27894B87
313FA2E9F0470E913C4B8DD15BBB840D122400E49B98A15DC28AB612A659AB97
D4920201EF5A26FCD93450F7FED1324F99A299B600D1ABC225578CC452761605
618E885BB6EC900FE3F7CE9F6C50A4D4FA4020E056A1B9A8345E3D4B4D149D41
6739FFA7271DF32BFC0D72C9D0D9704B4F54A8DC1901B14F48C2A36AC14DFCF3
F392F2B1FCB71740EC41D88EDFA15160654CABA42F2E7D321E97EE570988E361
4062097920598F9AF62E78B271E24669D66645380CB26EA5BB9C1A96C778F2EE
19E84AD943782D7F9C5B8A739ACC86E5405D1AA208BDCF878E9295317C632BC1
C6FF5982413683A6BA5C351422543F4F6F96F95F2D2A5FC8B713F5BCBBE73936
2889DBB86384F628D631C559B956455F24A72E687809921566D0859472C9E1AB
0C933A990996685EC2C77E6497CA4083D7EA5E9B30B9FD8D078ABC63CBE758E7
C7C01581D27BF610CB83169AF2E3D1DE6A3F0777CED5E9EC06945B61065A3DD6
BFEFE2DE7EB61E5DAFD0A92DA95F3E7D8C0E3F1817185E95A7C439ACE0D37EAC
76FE6D51D79434626AE0B806578800DA9987B5374F2A0C1637F8E76D18849DF7
C9B225A9607B6851EF58CE9CE47C8D4F55DAB730EFCEA2525C7CE3BB04D894FF
D189FF27A231C7E0339A15E0149ECB0A07D9E50E9DE7FAD2EA34C9DC511758F2
372BBC229B6D844BCED57809EEDBEAA80D547F28BCBBE1FFF890291458D5E15F
255381EB0723A376FB8D621DE11C1324753991FDFCAAAA054E7346B32151A650
63991E59294F57191B5790E51851EF852517AF88BB20B7CA0A51FEE2A9B1D28D
0D3A037DB040BCEAAAE46C594454B470B3C24A525393FA10EA4B6F4B3FFB46A5
DF068AAA1E8E4017CE1C1B554BC721FB8DDA0243FFB33E19CD454468FB863B94
D4315318E2275F9FF533D0AA025D80C4625FFBFB6DB15CE215E653620C823175
A5AABE5A6016F386514DBC2B524FAE313EB2A9D880D6C242F3101F4494980C46
D6D20DA9619EC6AE4FBDF37362F8C1E3E9C572E276A34F51295DCCC6AA318B96
6294C2E9C465E93580DEF6702F9D2A2914C485F6E6363290AAC4776933E36F80
090582D53120A08505562835AF015BAC114D5935EF5C3548597DA9BCAF53C9CC
1F092F51EC50D71209F74566D0D89C84BEEA162A9ADB729CFB7534F8500D0A20
A2947B73D7D1720ED87A9A36ED149DAA8699B1D18CE28E73370AE9166F9C8B4F
369B5E0BB1C42C9A9D69AC71CB1A6916E10B5BCF752C047171660B969995B4E3
EE391F3601D1E82984B89CD7C7210B025CBC1DF3176E12C6D2E920AA7A5C636D
B85E249ACF1B71DA0E39FBE2DB3D9254363A324AED065383A284A9F2A0CD2B0E
229B74A3CF91D08CB1F2B597102ED9A1855C52E90D2691E186A948CD17F6277F
FD97E43E6B96BEA8C3C699FC847F077AB3AC7EB56BE27A947C9E366875396F0F
27B249EBF2F16B8B5699B56A5564DB4ADBCEF830979EBCCB7CDDB5BE6BABA56E
B494380E2C081B2EAFFBBC84D27BD1990907176F2DF6EFBA6D34660F5CBB1ECD
1249588C2A0EE0197FC5043E17190965E99113FC4510F990ECBF43D40421169C
3942678C23D4515918C2B3C35679968F05C3924C90A611CEE5E363837FB52F25
A5A5DF96C93B61A938F2B1DC1E635B8FC2A3963D0B1161937980087C603273F5
ACF0BF95ABDD8DFC2E2797C8088171A17F46DE01C73591990BE01EED20CFFE26
F87E3E2EEC203FA70B2DE33BF02EC98CA2C0C47F82021F1C216835F8FA2D2681
361988584F2A95149923691E2AD0CF4644AC8A218EDA86F3054689DCD2722682
2C008CE276839FF4A280ABE1C7F70466ADCA85FACE3E9A2762CDEA07441BAC71
4E876997F26C1556CA27B0E996F442C25324CC94A37ED7FE053CD1BC4E240933
8CC6EC2B5E42C0ADBE695F365807969D7751807889CCA901C3494D63F1829F1F
84828F41DBF602CEDB3DA7448B9CD0270FEEEA7EE27641BFC24061197C1352AA
9FBDB8A6F3EB4951554C5741BB1A506B03CA1FFEE7343DA0612176945501F32B
B3B1267AA808751387F4C435D72DEC825D99A63C68C48E471AB4CA590F42B479
B26D7E1BEC01EA99F5CCC31F0F2D2BC5A0B486F99C9DB0E7AE70AE565FF9CA7C
68C7A79BAEAAA917753FDA4BCFF831B298E84EA6F30E698328AB963EA6384E0F
625F0315B4ADC1953305B2764A8CF05240773E40E6D6FC80B693840EF15076E7
9C0DF2342B7275C4B4ABF7C5D7BD07899B755DAC23F0E5955E1A85D6123FD355
CE80CFC8A8488B4BEAD96CF2C11B51CE728D26DF6F81CD1BB7DDD2AC5E0C090F
324FA5E2D3B25AC1D8596000C2737DC5A99B9BC059392B7E3FD15D0E630B0928
C9D81372EF4EA5EF7A5512D6EC95088B0FB0C92732CA48939790081C2D754D25
27389A7D9CC90392A3513C72D3FF9889C7D54A22570A504018E1D50B22121906
360BA24603A6B4114E9819F846DD8E55D716DCA189240EDC18A069CE93C62552
3524D79B63DD82D1DEBA0860E09994BE8D81410F813119C3FD043CC1F26F6847
7430EE5DD861A9A20EAEE7447F3993820910630FC92B2EC0665507E1D03D9328
B13280BFCCB908540A07D23B82AA4EDFE8DD9072E1EBE46AEC8868FD3FD20D24
0627CDAD14B916E6E80DDAC1D6F37CB8B2A366440A74F03B3BD18A2671708D61
C22C9917F00E7676E8A489C3155C56F6B2BB1A69F8245811D0CC79DCC5F095DD
BD1FA5C55F8025FA4EE6E04C286D85B6CDF0C1CDDD5995A6E61E5CF7BC00A7E4
25D78E2AA6DE2DBE90C79FE24F1A87BE84E00470DA94DA02F9F26195F56B969C
8038FDCA1E4E0E7AE926BF24A6D1EEFB51B707855979B75649C8FE6E31A1D8B8
91DB65EACFBAE143C7090E8505E00CD971AE3E3A104B0B4913D7636AAA7CAD33
93FFEB5742A408FA77157CF551AAC93460A49093556A622F938C17FCC2A7EF78
2DD071B9BBA94B90D3FB68BA5D5F40FAC45F546BFD0B214773D46FF3909D5455
76206926592E09D3D113319D95D79BE9915606206B7F96A937254A27DBD990D2
139CB662989E0879458A23AA23EEFED42EF90D2EE8C08C8A4F7892DB2A522C3E
F1EEEB2DB80D4D07876F4FB60949001CCE76577C5E793EDA32801D0E9AF9C3E0
89B07B4D9705821F1025509967512AC84C42ED260629F78291E2CFE384940584
310E7E3D4CC13F3E6E4EDD8804F451A888DDD31676E31CEE80C0D895735BBDD2
758559EBDD5EF0BD32E57294867052D0E3BF960485EAB5746590C0B9696A6D68
12C6BB0AEA2B98E5E8AD40D6C7292A0FA7D8B19A87F8D31AC4AC17BA4FE83ABB
CB3D67E4C5425A10DF3F01713655F54E47BD24C1843394EB34B77E5C4DB6D1EF
BD736B633CB80D0D2789E99573EDED931F293CF8F0EDFC4ABF84C408834EA5E1
F771E96567C1C97343314A58021F3695BB17486D50FD4208A143FBDEC10E1364
8482777388218476E84A327F480863041BDE28D75CB834F24C780DB2BD058A8F
276718D058A8719BE77587EDD385B18DC2C879989696E4444F24D898B7F38655
D294B0716DE6BC5E103426762342127AD51392402B3726821F4684CD70084AED
6938A8892B3A84A8D126A68FC8DA8D25CA5115B123EC81CFBED6EE09DA87EC24
5ACA4323981338327E1FE2E974FEA850B569007A840FE3C87B92F8CBA53DB7BB
612A20E833C4964E71F9D9A46CE2A860554861E073A8043A5DEB7535EB04FDC8
F5EB2231F0C4E85D7972139BA946C7B722FEC5701CB35B0AD2A21749E612C58D
B0AEF2400A7FAFA6321B697731BDEBFFA59B2CDCA9ECBAA7BFFEBA30C9F69F91
C11AE3C262A20152EF97183816C2925E555E77E72F3057855BBEF5F222FE92CE
575EC3FAE1FEB947C50CDAAEDD0DD902F45CFBFE6D95FD6E174BFDE732B68F53
9D607B30F8A2FF9922B662A16D920502D0BC7EFBE7140E02C5A8CC2995B4B29D
8B0DC6D0A1B332211482E41D9E8C6A1F04ECBF687C5A7DA681C23966AB838678
251241B46BDE25372FAA789B7BF1F9C5C0754336186EEA1CA1B99C05813BA3B6
5B8EA01C20D5B1319ADF6A0D1E7496F53B6ABCBC6B2B6D522889627824DF1983
E07927FB272C4659D33F7AEA7B5C525587610F41824C215706FE2267732715D2
B2EECAA01EA5C1ED0C5A1B5B3D506754AA2F735419DAD096ED5CFC77567B1408
D4DA1C5681A4711E576FFC2B4F6DAFDCA3D8E8DCBFD8A0ED9A3D1798A1D9F212
BD18993C155075622499F26C0B98CBE9C4F143E2ECC087BD360B3B622322C457
EC668FA7478659BD48F1C9C415EFD77F78A37FAC420C7949E3480CFBA851DE7F
11CE8CACBFAB95B617ED93853617A672D2BCA16F5E769F84EED16A3FD6E80288
B8BE3A339BF3A53589506CD1270C0B0CAB3DAA1D2A0F9D03197D753D8C57048E
D47325A2136551DE2AA71034532D192FDB342D3AAD49BD2A0BC72062B3FFC8CD
8C51E6E4B16440D951090105823AF46CF4415C5B72EDE10E69335B1565C77F14
4A456D687B027B12724A38A8EB334EA10E683431C0AB62C1827F7C5F36F1019F
6F7C428731EC882F55258C57D49A16531C0CB5BCB44556B4A69AAED7FDE78F3A
467E61725FCB8452DC041414220C6D7171F5EA766B6EE568964C974F08DB4D47
C236DB9422D16F9AEA07C2B3E11CEE0FBECE6E9E6E523B51F478F35CA40C36D3
0F90ECEA17F062BFEC49094445EADAF14590626BBB110612CAC388A0C3AC087F
83B5D3D20148283EAD2E622DDA627133EC6CC656D1B984F97CAF357A32CDCE07
AEC932F59D55ED480C3D893C54D9BF8F83F59D1920772BCDC438FD2A188965D8
6C2760B7B210BC4E6CD586320141BA36D0EA3EE577C64D9ACBD51A828AFF6D51
FB2891C65124DB8E8ED50AD1275DC6DCF012C32A51DE692830CEEBDAB4476F2E
8D10F428501DE2740A4A3D0225B4FC179A1FFD558D28F78E93FBB48896AB482B
687E017902E1C313AC9516E1738E03D9B5DE9210EACBB06368818B350FBCB62B
46EB851DBA2D895D9D351BF5739DB033EA9EEF33B359558E0103D69F9550ADCC
1E0EEBCD032B73F914B2DB1B58C15CC4396CD58D5BDA3E3E034E3EA9BF74622E
DDB576F9953931FE5F99169C998AA7D3C0FD6A97023C2D12B0AD2BA05DA9B30B
601094F0D8518D8CDF03B4FF65FEBB696D31693C749C98AA87D1F1FA46FB6283
7ED33555B85C698871401C20981CB3B5B4A6276494D129BE14E9DB8C6AE4D8FC
CD3DF37C92D2FA4C251265A704A4CD57016BD78E48AC77581A4162F40286D69D
FA0F0E85EB1A893BE49621932FD9E48A9D9D3F43C34070B215B64E17A8AACB01
1497C6FFFFBD3D43D4B2603702789D4FAEE07225C7FF28FDCD7D0A67435DB54A
416F73D7EF63401FAC0D47898528B3E4D3DC0566EC6CBFD079DD36658ECD4FCD
E79DF373CCEBDEB44F50194CF39CA600BCF1A896D6075C469D19CB1810471E3F
AB7C11AA95794060A90455241F4E1981246F2E2E8DD3B236925B6390CEED6973
A09FE790F9E1CE2C2BB611BCA607E6F438C80911FFC4C0933624EE674C1D6068
6B6CD24CD9FF571BBD07312251258B4A7C037F839A5C103FBAF7625CE9763888
727738096CCE6A97276FD9C2FF08FF7240CE0811225A2DE683E0110687F6F135
EFD3FD1CAA873BBBFBD1E71EDBDD3FFE5D6B25457433467CCFBC86F7F3283510
F99AF9AB861FA3BF0B81F3CEF395DC2A70940CF0CB9473830AB45205464B68A1
20325C6E3F8562F4BA18F1955FDF9DC8FB5CD07F2D966705D80FBF09FBD998C1
B91B6D14481298D56FD95212A1A94463116B3E18B2F0175FF3C3B1EA011E458E
9EF9445087E6B99D9B3F1CECDBE1ACE00C34D0D53112825B14C2FE7DA517B210
CD9A8C22FADBA84E0ACCF7AF7FAEC6E45004E1D19CA8E12B32153B16599AD89A
4D800C211662015A4C22EE6AF7C006F2E69CAB5FE87A5C5EB1C0BC46839A43CC
4A9E082E09037CB3826C1D5370DCC8A33721F57FA319D17C560CD0AED7D37E5D
49039ED6349C78F31ABB4A561EFBC1E04E290E9EBF4777FC5866A02F1B69BCEC
8FD9EE30A854FB59E5766F23FE00320EE8090DB76347C1B6E47F440400C2A3C2
CA7B9883A7A6B2086FBC438AB1E67EED99D7A5F00EF0105F4DFFDAD843E97359
46708FF24CDD40A77AD99554077D0F08F5CAA368449D11BCC73491C804E47DBB
EE2B1B02B01BBB4F94ADD106AF5A2B4339D53D8F0601530E7E4A0E105D60D722
8F1F3C16723F533ED76DA9ABC92C2CC6E8E839E6026972FE4891F3933A1C5450
7BBAB460BF3E3733610842E798F33C15206B7F96A9B08CEFA6031EA6FF9A151D
132C05E0FC7ACD6F47579018204FE8BDB0ECBF0560FBE2C2CB38128AD4338AC9
408BFE7CF02D7D8BEDF6D6B614783EF9ECC112B888AFCDFF671CBD45A9A0856B
A922B8D217F16F373031F06E4B06C68954E4A48FD12C2F3A2B636A95BB19EA5D
83EB3302EF6DF54ED07F5F983E6AF678E9B462A16D92822FE42651CF4A920CAE
A3502C7CE2C1BDB1EC2805E1C56025C180AAB704493BB480432902689DC25714
CB363939424B9A9C872130D930BB3A9F4619D9F15CB974FA11F55D3551384B8E
746F815C94CF25C991CC5FC7B2CCCAD8D55BF7E7D85570C2B9C6E0E131DC3F0A
39A5C3BD4C013764942F6B3843BFE9AE6EC85EB3675C762E584C5B0401576A99
593C949ABDE74AF5CE81D0DD61DA6FB7AEE2564091126BCE711737BC9F727DF1
135EED9ACD6B6667628FBE8552881BBB5A1139F7942EE49406E7115EFAA73A37
175C4396738E4EE92CAD228428623CDC184541619BD06286EA7B815C457E3C3B
446313D3974D3A5125CC8749B07E2FD1AE3305334F4DB24217E48A99A17FE90A
B421B8BD4FDEB5B9DE9AC0FC2813F28C3D427A74D7BEBA74BED51AC90C9603CD
2140F3A5F70CEC4A4069634D31E481EEF94CB841BFE81FFFFF44D7B7B01EDD51
BDE9E8549710C2D98C4345A04D2DC9F3EB180AC11099E2000500763DFD0C07D5
F27F25A4E08A629F0D44F25A29858FBFBE4AE3E4357CD913676E9AEFB67706C7
C333CFD609E67693175ED9E04126B4BA8DE823303B30DC0533B77E1B443301FD
B2E898D707C7EC7B87A23A9578F8D62C40F32C788ED78E6F7B93BD35E7FB3131
A6DFFDC12A342172D9740E6219C9F574A67FF6B3F60B618854D9E1AA0AB8A998
3761F3CDFD0302B7DC4AE5D0321CD9F75EA21E708B5E11CEEF6CB0B4105F595A
7B25039857B52372B6B002E8C37685093F9F7591BEA79317E5840046C28114BB
EB9A7166188DDB17CA7B902309CAEEBBE4A470C66866252E7998DA7A74A4B078
2F95620C29673C723B5A2C6288A62A706C9A7DE3990ADF42A3A2D68D58E0B104
7BD1AEF9CC9E7EA8A741D9A0585529B6DC2452F5E520E754AF3864FF19F13D3D
622E637C0FA909AAD790BF83355A23557D8DD1E541D723E0C7C8E5E7273A7502
47BB25006F7440CAB36919BC24E57FA47143B916384F61DB0CD03A464C6FBD41
4C5F0F8A7E61A5147A5C6111E09E40213B00CF7D80D4E79A0214187CF78E246A
FA80E53E6AB8C5709771F2BC8AE632FBC4CB356B5B756AF64CCDF942B78EA14D
2E4803A47DEE92F791A05390E807453F49A9744C5CCEC2E2D4799955E61A2A82
F5B4E2E0C11B9CAB3F4E19EEF43770F97F1090538D82841EF99ADA5BD9C9DE7D
3BC47BEC590CCA8AE908C103E27ED47DFBD40A3D188308988D21EFC3824FC072
B203F4C7B939F46ACCC279596FE73DB22C0737C6C1745A02B510A5BA6B4B71DE
91FA08276DA950B60255E416D37D56C8B9205005E749D954A55A7159390F2066
AA14CEAA0B18BE4B5DA0E61A15467E3E049164F2637C9D6A51E4B94E5B6B1D39
FB0CFD1A1379FC07C1DE0A061B389EF8E5F4E14E1B38ACE98C666A4D49404693
AD4C9CCF3774642FB1C668B7583BDA4027B74EE1E392607DFE7DA062AC5E3ABF
6AF0B8A11839D45F9E8857280111FAC80608EEE83C630D01C326D8C10F0E1F06
7F9FDA59A4FA9027AE6D0335637014607FF78C6F639F50B114120F60E2252303
5FD491ACDCAADB85DBABB402CA2D0378B05E6A27F6FA007720A780603A986D68
3510CEA1CDBB4DB240B67A3D65B3CBC5378894E437794BBC8C059BDE19A18DC4
1EFDF7F22D1DA8CE5EE189E28FCF0DA23C8AF681A86EAD554C005E595555F1FA
62CF9AC0CA2C850D0DB6A3EBA3B5F61535056B0648874E74E4FB33D256907AD3
3DA433495C5C0107D20D48C206517A436ED4810CE6742FDA60C065D75C3BEEF7
0FDAA49F4EEA72C152418426BF02BDFBCBA4C249061FBBE3F6A1EC06BC9DCE96
796E91B690DAA9FBD4010ADE95C973EF29261A7F613248F0CFB151CF7487355F
62F997A4FF1AD2CA42DF95799986ED68CDCB0B5FF094FA0283FFF9C1F6C7CD3F
B39F9011D20A743B26D48C81E31E1C7E509441DFEC2431E42579E1C7B4104855
29C82EC8F0838598503BF352E2B952184EF0FDDD8F2063EAF5921CFB1CE3B57E
FD8FA88DAAA1AAD56BC3D0EBE6BC286EAB5271AD5240FFACEC6A8D0F11C1045B
9949029EAF8C0DDDF638A1E032EDF7525637FDC88F2839FC8F241C2F8A1D9D81
38D73E0A0B512508C11299D62F972CAF80EDC9542672971DA0BB2958EA777A52
848FF6156B914FC6D518593E10C686E096C25374067F1FD5B9B2C9F3610D093A
380A377FB91CED170EEB5152795871A74F57FB4D524F2FA8FF6F04FEA46C7D71
611040E1736743ED600709D9A4FCD0EB243F926513AC01E26103DFA89DCC6EE6
8F395A1E979062310BE774997E96EBDB2B70E64D445AD62EA3F2BFDF7C552A11
7A96F6E8F1B1C1F6AA459E0FA3E856ED8ADDCCE82BAB52C6845A18C62621067D
18195B613AED6D1A553A0F0C92469C031C28836E6D292385CABD82803E057286
FC215793842956A201C7E71AB6A4DEED343F1BD91519C333540AC41D8A6728E4
03BA76D398C4CBAE7799F3DF9CB768695AC1C905FB5BA91D6938BD8434FB02CD
54713917805B28FB9134609830AEB39EA37525A7F254A5AC0E7DD1ED580E2631
1769153BD85DEB50C6D92FE968BEC1DC9B1A0E5CE9F5AAB654D7DC26CA0AEBD5
521E2995832B99C360CF341750DBAA4E7CF28EA3E85DFF439BE322410936F4F3
C5DE9101A22BCB97BAC126C5DF8E6AA3AFE56ACFA3204B347F4035BDC9D9D091
C2776291C3C52EAA810C38095F7B4AA911E081D3B0B0BBD810A054350CC7DB81
2AA8D94831944E7EDABFD4E308599E709F66817854908CCF7590D5E4D9E2AA0F
906F371474DB8E89EDB70D927B84BD249B9E520CEEF7DAA36AE89E1EB57B28F6
1A2AEF37E4C4B2ED99EB20DC8FF5377ADADAB8AF8BDD859EB7E5C7D33F166860
4B9DE61F078E54B0A96FE7F91DADCAA77D3C6A6B24008F97E817E4ED32B3840F
0F5BDC15A067DB6B6AA25AC885C2330813819572E44C6A04CBD1F8F460E985F2
3BF805C7B17076D22073756CCDAEAC93505DB1DE1FDA800FE0A2ECA39C569A57
3A79CCD041CE4C9C67E548B05FEEFF8434A437E8206426CA47AEE0E78D9D591D
E58D536D5F8841A1987EDCE9AF833CECB599DD244402F19F0420E4DE7B96DC03
AC2B02ACFF4B8E8C1BC653C272A856B612AE37853B273DB1415DE5054FB8CF98
ABBF1FA44FA6A5E57B58CD567F3812178517976AEC2AE11F3123C443FD00DC5B
1BBB1505C7FA6F8A1EDF6ECC18F1A9825D0930729ED3C7D1E1C20B2C55EB8288
CCBA7915C50E1A729B27053E0F6D96D1F0F7DF04DF478A2CA43BCB74CFD92693
005261F8E696A4E3697A61CF27688B82EC8EBA39C4676D9AC0C1500DE37FBE4F
DB7BE906A2A93BD183B82F950E209E011CADEB56436CC960BDBA9EA1A6B085F7
5849AF4F70FA3FF39D22FA49FFAE48D26AA6C6D4A1BE5D05E1F82E96D72FC324
D410BF60478E29A020E74EC70DE18294E04093C851E9C614DCC88F3AA2208D8E
E833AF872A25F8D4674201A443B2EDC8206FB54636006FBFE0912041F6EE049B
C3790EBBAD178E9E4700D147F33C0A683652DAB14D19C7C06A7A0D25E6942CC1
A4DD1FAD1EBE349A3AAA4396935DCFEF8C58644C91B9CD878C31343DD6C6791D
AD117B02060A1B06BEE5B3AFBDD4AE2829EF79DE48CFAF542BB4803F4E1C976C
22DAD2881AE8E1303DF503D5EDA3E56FCBD59E758F15C5C32364A433C8EDD1CC
31014776B3EFA85D75F71FEB158CFBFCE54F3742ED2219B7295D9F1F8A58F837
D846B73A7A73D5FE5382E07A0330A2B7EB6FC05AAB1C653006BF67E0E24F4C18
6B6AD698D2DCFFA2968A3ECBAF72C8E694BE5644292A74D0E4BFBAA0CAC1ADA5
64A7BE51E060492A70D057BEB177E9D66AD987B141E6D626F36293DB7AAA4E55
21D783FFBA5149770317D928E5CD2EA12A7543A84DBBC24B699822B1D828F2C8
56AB05D74BB36EC3CF1A8E69AC3CE3CC1B47D41161862AB3BE497187126A84CC
237062C6D674DF126856114754EC95963D94C143075A9F8287DF061FBC5619F9
D1225004A615BF10EC7881470E6B7F009ED79E4DFD0E89A6A0C6D98AF1676929
F2B314BDE6F9C8EBAF919567B7A1FF4C34ADB130C63DCAB9172BA3AAFC6FA5FF
97B51848560BE3E6370ED49BE0CBB185BC68ADD14A73F2EA41CF7430B0981C7A
B6F1020CF3C881672129A7FAE6AEE9D8B945D1BAB918C265435A53F37EB867EE
8A40E64EF7C85179D67A74D2412945F079BC5A88479D3846F4963D261DED6583
3D91D80B3A2E74B9B5C4A1C038E4A432255AB2975A5DF6F304E32CBC2B71AEA4
6D352111076CE800A8E570F4B12404758861A2037E14E0117EBD8BC773C27435
DF44FA025E0AB1303241D12D948114EEAB1977F4E38F857D5BB672BAA841BA50
1BDDAB03599322F484748140B75CF243EEB42A544B6D3E494B4217E73055742D
632D2555CA0E7ECFDE67E5528B3E841737D9AC216F102D7BDF64D8623B1DB3F5
B9016812D4676F3F6E56525E2CEE9627D6776A05245E647707F97A5687C2A417
B22464D8E273D8D36B244BDED45A1134C7AABC36DA6EF5A42E2424432C5D9067
36A7E481C7338618B83A1E9841C4B6A46498483EDFC1B9393000CEB19548D0DC
C864D93B437901DFDDA522FC2A10A9C2B6D2FEC74E652477DE9EBE2F3C3E149C
3016588C67B1CC365C5F4771A8D01179869F077E7CF4CBFA2D29F22246C43CA2
86DFF861151FBFE6B0A718CBACF7DCDAD8442D374312C94A39F03A558246471C
CEBAC98EEC63E43DF940D47D352652A3C7895511BDF41597A82637C14F9882BA
47E113F18E862617D171583B0045250EB67394AC02075D8F637CD4F1D95F17DF
DE687F254F9C352C99B998FB5C39C1C2E4D278925273BDF2C94A2BBE12AFEAC5
51AF09E62211B97074DA4CE59294CB3361B5F0CFF087692E1CA20A5A1F19EC6C
599E235CA29003842013D4BB0FB0192D5486FCFA89A1E0D8A4377EBB49CD90FD
3BB24DBF013CBD29BC9E54972132E57CF29511A8F0053659BECAC5D67AF48146
43E32584829E057DE39B6CA4AFF179D05E34B09B960BE859804696B14F0D147D
B54FA560729F9EA2646D15A79FCBF301435F5A4DDA1A1A2774E6837A859D387D
8CF0C0297DEF40619F5D9EED36E4FCDB90B0C3891A934D8F8969EB7A248317B8
9FDBDF1589F52FF8DAC7994B4AA61838FB275097BE3E17C45E80AD74D37F3EDB
1C6D604D2F065C93CB4CD1BAF55FFA46FD8C73ED11A6B0F96F9A2CECCAA389C6
B8337F797AA2C18439DB222716E8C9F9526133FEFA09E8BD1926F3857A576D75
2BE61C070E2A5FA399E423A15E320D7E495C5BAD96CC34AEB53FFE6A603B10ED
79651388A01F035CB51CF1BFE1A70CF51367E0D03188862F33B2D36756939D9F
36D7B113CE21A6312D755B87772EA173DD4E10A6D157EA3ADA4E8533AE56E656
75B94CE8FD647AF7A9261EA15EEEC9329F12B7A6E167826C7C9852FC0F5FF383
23F98010EF5C4FF0FB35704573C9683792689724B632441E79AE15081F76E9EF
216EBE1E9B397A3F26BEA9126FC79D40B10987945125B3C95B1DAC9FF182D689
81BADA22D99004BB24AE6E3B639DDE0013AC5E8C97D28D8684B5B17D691A27AA
F25B778C1E0070808F79A109FC6BF02F925F36FA8C2BD2DA2AAE01FEC82EBCD6
5ABB38CDC9F37CC41C29F5E7B8C51935AA53B9DB1B413E28848F456DB5B27092
511EE38EEE43545028BDFF52F07F4CB1448FACF3039813A08CBEC4F87A65789E
67A31A6D8A2E734151ECE16A7F4597620E14705D6C7902D927FD951F8E3AD90C
B4C38ECF47279A3D35141F110332BCFEC77D4156D0A6AC65F410B894644372AD
D95E4C3B5F683D8E963EDBD87F39DD3646A20182A201E9B004C435AF2968D2EF
DEC1BFB0AACDBBB74E9E3FC73D01129C32ED4DA6A13D6476D5D9974CE2D6F2F5
B816CCF65D768EBD8991C05370C1C7687C7B0DE7673C9DF1C5EF321F79F2A62A
C109BF2C8E882085E8AF3EAD641DAF003B16D26C6E85DFFB2895DC8339B876FA
70194AF88C0F53E4382D27EDBCD89381C3DEE0092B0982E353DA1F252663E410
4D688EC70A1F7A7C0F7F44AC2923F22655C4B228BC574B3A67384D60317391F8
C9410F42A2F65ED9B6399527C2BD5DF8E0C14104469FD14B94E0372289F0AE64
41426E6659B12FCBE465542CC78C40AE0CF102EE89DA8A77591CC148E6457832
833CECDF48A32FD800D27BD9C36646C71718A7CA7963B02974841E6D066A0A1B
8ADA19C71ECC0A3C39BFA3B1CB944DD5F407C1EE999C1EACFF8D2D22119119A4
1C9F1B40A2CF825308DC3BEC8BEA2DA4893B78DC38CA2831FE01E2C48553C62E
6AB98E5C94FCDC800FEC65702CADCEE296839679E00449A3B2BE603C011B5AD6
1317278A4302337B0ED803FE2296889B897AD5C2719F93216817890AC9A7A081
8953A9EC0806E87A819E76D3F74CD189666AD6E2E8808A839FAB386C5ED149D2
2BDD58A848E90ADB56593C570BE67BA964E4C7B6FB5433BF59711873251029C9
1882C5FEE5546F2DC88F25D2C9926F495E90CEAF40DFE29124559B7CD956DF57
14F5BA6A6B2F2763A5A2771E2074DC95D9BFE6F718283B25C27B050D6D6B6D8A
4BF93FC472C9875C74F1815C6562A66F83D1995277D84041E7B426D3B289B122
D470392BA8F3B03E15E44100EBA6E585D613369061195AD5E86E87EBF0EFB478
6784CE175B60178A99034C76AE568EC30D6197CF4C500B90409E3A7896B1402C
5A2C6589A5EADE237AE71C3014E50ED8590767F2356AFB951EA7B081C329FB8F
2356CBD6EDFFA8FE059644AC6A4EA4F22CF1CC83E61D29FF387AE028A2909E92
ACD5B5E22E0C7D133E2FB4114A89E2078231D15A7614FB45D29ED6564FF77114
1F3979AF54EF4E4E8D299798B6167B5008AD15D050ED1555EB446979DCB9B0BF
11E32096749160131E5FE4F84E5161A5D55856E4586069038D497ABC60D630B8
89AE4BE3E3E02551FDDD586F13085921C96B880746E63CBB3B3F61AD30064885
BEB8B4BC3ADA1A2ADAF537E59BAF8D24311A4CE86B81940C7A4272845B3EDAD3
B236EBA53B10CB82EBE64D127665B79014BAE5E08766229EEAA6B6B691833165
50352B570B9D8C1CD4E910701B1A95562D39B25B41D2A67AD427C25872BC4D99
464CB66F1FD34BF95B564DDD897F579115D146D7214731955D746DF881050BC2
92816DB5765FA0D78B0D59D5927217516F87AFECF3E50C483351BE46A1F3FA67
E720601E546AAE04109A29458EE3D77542E60F3EFBDB3811CE9290DB40373F22
B6F5ED6A9807DE200BF0DB8EC48E04BF540DE70B8A28534F3CF9E391BA2BC99E
D804E6A5450C795E12B06DEBE0EEADB7087DA296A4D6136FEB06EA52A07490D5
9E256A87B08A4F38316D2255084C78288BD181BAB12DB4EAEE9E94719256B0B3
214C10463827A8E494F9042308471A100CC7608F787FD8F105EE6F888D199CDE
08E57BD54052354C9E556A6DA9832B9ED0133D74C311232A3C7D3E073BD81D2B
57547209E8026F91B47441BC27F16D59ED0FC3C937A7FFEB3A32BB9B8344D632
A32063F171F33F967C6ECE17EA9E9B6AC7101A090049FE493E2D4E6CB377D38A
98D515A4793BBD7DFFB62DBA39ECBF237ECB1EBCE10FB7A572AD5D8517BF363F
78AF7709AB6BB90DD9F3879C5EAA00A8B7C03C86B4496C8A6F4A9A8E639C59A2
4980DA9B70D1E6B8E069E786A27D0D3E4170FB6F808EE509D6DF3FCA519AECFE
578CBFA5896A7DC5AD7D7932D9CF30F8C053F90ADA69380ACCF11664AF99A820
53AB131177E4EA30AC63EAF4DC71D4E5124EA18653F6B120A421C9B85083D0F7
E025ED013EAA5125B4F08FDE768D45EC4A39A2E1354538349D392123EFBF7AD7
13EA7E9137CE80E58B8171D66B66C2B1D2E4CC93FB9F705EE12B21304A54ECB3
BE58046008232B083448ECC131A3A6EFE1CBA5D595136965F3F5D779274CD240
C5553E88F1E93322A53D98505690FAB8CACE49AA851EDA4AE9CBE4CEB296885A
AF51026DE30928BFFEB0D7F2651537FA889905117D318DBBAF2E21616E7E7F2E
4D640C67219E174AD3C275A8498B5E8B4E95E0684F952F59DB1BAECA7703E94F
19D01AF951D408D60442998D4D42112E913E4FDFA5607D16890AE67E236A5157
FE3A6DCDBE17C67070A40D19967EEDDA5299C5DAA733AA7400E6D248DECFD00C
7AECCF81588A29656C583F2537C3569D2CBB99B39350316D9B262D60D9C4E916
92F3A162A34A7434F1BE18B5F97663067C3D21138CDBC46D081297E31CE52BDC
C81A42879C2BBEC7FC3425457DB6F38E138199A2C70FF5372FB482067D92A0A1
075D785D32F16D34B9DA33590C0B3E4816E59D21FC4CB91EF26171422420A0F4
BB991C4839DA19FFC57B2F8382C94EF2AFE347CC884ADF2E5A2BA35A8C8F9CFD
524E7A2A10F2E5F9507E672834087D3BEF5EAA48F28890AD758EF9BA59D96678
9EF2F25C3C1DC22EAE277D460304699E1F9DCC9460A7C001846FF80F8A095340
5BBA7400611337E25740A7C7316E836DF4162DB010809F068F7988A943E29E85
61BC3C7F5250E1D2F984F1FC07F132D80EC31C51378183915F243090E8BF36B5
CBEF25B51553DF936706C7E3AC60E12B20E833C48DADE92CD68A691CF7355EC6
DEC2F25B5D1721F1D058670BC9E4C6B905C94E256A71B3ABCA966E8058A5C5F2
9811D574A1F12CEFFC4F16FD86A705C63B084BBD364FC168BDBC1963DB8C37AC
C7EB44F0B527EBD2BDECB9C81B57E57C51F8E87FD105404BA93D977A6DC721C7
886C48DBA21A6CEB09F4F90AE96EEDE5686B00A1A827FCE228F49A8A19338798
F59DB0093AF06798D050B08881AAD3CED973B818981263F5D2F282AD0550414B
2FA828433DC691EB0EA11CFBBC1B6292A6A89F34A33DA867F358B173FCCF490E
BE9EBD525A11B244F2C1731A40D774C816FFD5599485EBAAE6B1539EEBD036D1
03EF2D5F73F55D3DE57E75320FBB8EB3B18E0F8CA4F420E4443B9A1D1C04AD5C
2918B9DEC7DBC1E2224778091E856984AB482ED2A4D91F5BF8FE2C79A32B0E1F
6877BBDAA65BD0B26861634375AFCBC568E97476C1943B01FF1A7D48C5F75310
64DDC02A7F85187365B0C42548EDA567DC85E5FF3BE408893CE3AA203B39A33F
E54F583E12C5D8CB63F65E2EC3E827D4C4D4612B2736229ADEBE49ED3D5451C7
BBD86DCD3A84D1F9A184831D6F71157FFA26447FDA1DB6B709E0CB5CA6AA272D
BA4EBE32BF7CBB5C407D21ADCC6F8CEDC39D62D1F093CF83879D1E28E4A53C8E
31ABA7C5DB57612625FC55B48B3865429D8A2B7F0391E23E5D6BF2D343500AC1
0EA0F39BCDA0E11D7DE383E9D94A728EE8A17326757D231D6D5A6628833856DA
28305ECF01041FA4FE21EB7E0B2759AE1651F20DE2E0E7104739283BD53E7ACE
0EB5821E773B16AD090AF3CF21D5A60AD3DE29FA6BC4E25516C7FAE7A46A9AC5
64A257A65388240A4443A293F0A9C20EF54005BC5C45678A1BB18AE4DB166FD1
802CEC9B5FC542031D3A290C4A98F83788F0BA79A8AA31C6DC5B5F77654954E0
0AFC6154B79AA12D840481D27FA3D11281B8F951D5539F487CF0F4B771C7CD17
FCB718BBA361E6CDE9DB462297A8B51D6FC5C6161A924211D6065A78DCF27314
7292F95E2736B2BB75E00C13670CD3ED2C2382C3C36B0D2CB4173241B84E7060
25D06670B731A9657863D2C34D36BFE887036F9D761E7788D1EF464FA987F18B
23BB164D8AB2F6D25EC89FC58E67200F1699CDC57FDD4D0944B3682C20A38C85
F1015A5BD7F1ACA60B71B5EC0290B1A487D818EA4E8D22B572ECD18FA1E61662
2FE7AA1B84F7AB64AF4EE245750C6EF221C89A3F4D065CF2B71BA0E0C2DC4872
F3E969429F6DB86D31A8C856C808101B34FE2A39E1CCD866CD1231AD088E7195
6AC5CC6DCD6624203886853AFFD4907A07ABAC42448A7AEF6023386B041484D3
A268674AA421AD0CC2EB36EE7DCE3DDB124F26628864A637FA09D58243AAD4A8
5798B2DE7F51E66E9DA95316A871C2886D4FC95166C5829555B899A32951DA7F
74D20BC52E0E550D2485B52A716F8B03A19EF6F5517A29D670DBB2CB4CADA521
450D5F7A3D76A0C7CCB3A0F4B844BD6D0388A99B88E54A7649E0E0DD0009632E
06B1B837B0A40ACEA42CBE93FE4AFB0E35D2760B9B9EF9029C285FBE99A375F4
2B23D2958A26D1C2FC6767219174252BA51EBBCFB93F8C8D437C2C1AF9ECB3D0
48887250C5B86F578ABF9DE422D23F19F5AB4D37731E836A3B48D4314FC9F583
189627B4A3DCE7AF2CF980AC75247F4D74CE52E2269E006C9DA331185FF7EA00
B9AC07B9A50C248E79FA7D8F11FB531C1E4D22EE1B4D3DB824AE071583D65BE7
1C7BA97B38FD41B41BB9AADB73CA8CD779F6EAFB2AAAD5C112AA9D9E6FEE7B0C
368CC60F45B7EF1FF18C6F14B2EB3C89174D55E4A92E4C71443F3E73B4536CE3
B5C885A847A2C7C066D97D1B4C5389688031106B7990EA760ED6DA00923F545E
6F93FE575024E7DA58B0A1DB059BFB396B9CF840E4E97795874C6B9AC7F51A44
270FB8A40E71B9551A721761E93276D41CE01B34533F5AF47B05377F58361979
33118F0F92E45F43A4FE036C1D58D6F9EE9F10CBF58C4570B1C3EFCAC44C3577
5D1CF2E66A74319DD1E7AD71A9728079C9160095E0198EFFB9416A1F8AEF3D0A
69853D9F58837F30AB73900DA3550C3E3893EB73161B046D02FBF11708AED080
B991E18CA5033BEE3AE8B4A7C6DB9BECFC08C79D88568E6B812668EFBCE21B0E
C98AF108E36E5579042A2B14A166F569777D29CC65FBA84C0B6D66C636A0BE3B
376CE58D8A2A0BA83FBE69E7B94B76C7594694D8FEC7960E62137638956F4008
D8397336F918F8C4AC5CBA529F4B03407A3EAE233324444AF11CB6158EAEF1F6
1F3917B1A2563204994B96A82115A3C8EAD1458EB3E66A406B4E815775AE6EA7
920754E35A0324F9612A62BA2762843E7E1FF7D70306299910F1346B64D40576
63F4F3493C424E4B673CBBF8A40F296601CB07406334CE62648E0C5311E5C506
E3B78C442D1FCE06F5DD65AB6A16BBEDD83C0FB225138503F37653EC7F829720
5FE2EF5327796703C79EEEEF76419F5E17B787A516EE0CAAD77EBB01C8B9475E
5C5EDFBF10035993BED6943A31733CFA4D971E9F129EFA94BECFABB6D42E65DA
8DBFEF1276FE2E57B02291D8E767A2626D0CED7A717DF3DE867C9AE848B31122
E8845CDD2BBB644A9C71EF00F3358631111EC40195C24150AB87545DF93071D1
55829F3BA5CD8729A8FA642018DA5390F5A9231C495292A6F5018B7BD1A28FB9
C26AF49B1626B783E38F2B924567B0A357ED82240A280A96BBCA5046BE21DFBF
59A9FA61B8EA89C4534B002F829B82BF4FABF45D38E0B78CF4D5853893031553
BBA3EEA0AB8597FE7AE23B4B888AD46DD9FDA48A68A38525145DC7BD0B74BC22
EBF3F69E3AEA3B1BF107C57FEEC5FD89596FA7AF994C28C0E508C9B72E0A343D
75DDD0AA5FD1A287FD7F74C449D7B9F2219291C8A4DDBBC0AB9F036401E1D9A9
15802F504AEE47D175A002371FF1F6DD8A055A9B26C22E72E1B74F77900DCD6B
178F1EC8BDED7BDEC1C026765F83204DE22450347AE5696C34284E58D718F092
C0E516DAC71695749628A253286AD782AA66A9A8EACCC97E559BE32187C33EEF
A7272CE5EA9F4700B8E0B4D375134D6BAF84013F22CC9A64F8363EFCF91B8AEF
CE9767ECEB3F7AB40D9403CEF1DF86324D87D31F124C4D4410192319D185BF17
913B86CF5D491738266EEC56B14025E99F56964471494AAE483FCCD069413D38
088705B6C09284E1D43AF8ACCCB4137BD696946B646D039C5BFC04F372C7C263
E8E157E2C9986CC2CD44A21BC57D16AEDFE6FE7F2AAA0313655E9BA3B49F21A9
0ED8E3B1B9A25CFBE7570F3CFB42A29814F55612DC40489057E2C68A122A606D
FC23C08603996565EF7345CF7E3E52FED95983558848597B276ED036BA3FAF32
253EB61F93C8BDB6E37605474E0A900002AAA4DDB62B68BC41E9F5B6E8FC3073
192CCD55EFD5C58297DA25AF671F88A1AD18EDD736E21D8B1ACD1269D1127AB9
F92122DE9B9FC800B30483A9E9EC270401FB7625E835F263D410111296CEFE09
E18AEF486C8A604053C78D1F83B3CB448600B0662191F67AC9ED741A27AA1B3D
07DDFB82FD3098953489B3C809C3A1995A60D9169288B19AF66E08BFC3C0638C
2B3D59627CE54354C47C0ABA067A18B995AB71D2CD67AF83FC760DB60CBA6CAC
EAB02F5B086BDBB7BECCDDE448B956C8CEAF9FD895D47973FCE6BBE9ECA01E06
E3A6BD4F03F2A87ADCC126CBF5F43033A7560C55CAF15E557515B9DC10D9C39E
288075821AF7FB45037B451EE055C9DFA03106C419D796B7889ED184AF56D5D2
47B613D05EC1AE9BBD8DF29639140EFAFF68159FB9D00D08AC31545BF4E8EB34
DB2C0BDE8B99CE8565EE1959F22086D11DE7091596529A357848A5FAE1B0D1EA
BF192FD54BFC8480F428EC9A2669A5BDB8235E370A7197D60039739BB40AE4B6
1198D0CE267E18CB13AFD24FC324531D8CBCBD4B1F978932C5E295899964E4F0
F2C4144F403B894041A742E8CACD912ED2F2CAC80175F0BD7461D5B36AFAE7D4
85385561F7D25DFE1EB862629DFAD89BAC5D74286136C59092655AED3B25EE5D
76997662EB6F12EA1B10388343378AB359C7AC8DA07C56772304D068BFEF3FB8
728EE0A96C0AC0D73CA99632058046FA0AEC806537D6F4EE283EA0CAECC58E81
8176BA8413A06D335CD1167112700AC3CEAE0B62DC2C9A1D95B8A9409C785FBA
AE95C3022AFB7039BC97D53EE6B71AB8C3874D69AB8E67F6E3F4D26328C33D66
490A6D6E22673115C3949CB56BB84B4E0EC5ADAA2C95B340D25DBFD3EE597135
0451D60EAE54C60F69320749796DA116D37CDB3BB5B8096D237EA19E1F3EBE7B
2608611892F43EE47963257F637ED2ABB021AB33B32DDA11E1118E7A8D81842D
111C518626CE39160A49E595C8D9C6FE91847DBECF8519C9551BD82B4D50285D
C4F475BB103CA2DF749FA1D9F2125773250AC494B644DB21894468A97A537EA0
B8E2037C0D27A9E1C6BCDB07E4FC26B9E615754DB17FE94C856B015E6E575E61
50E66B7FB1B35D25C2AC0732B12CBBF0B4B76CF55821197EC4752775B6F84E1B
2AE5A8108253CA7F3ACC00B228B1300005BBF5D537A0517C70814929BC826713
B321EF5F92772483BB48171D41466DFB7C2377565C7BF62C3A1544919FC8A55F
CC9A844B3D5578AEE5E418C2CF5A17114318DC81AB9A3699BD85F293A0E379B9
043C4EAF699A297A1BBB486E2B174B7FFFD059E46A495C3EA69C08B2A2814614
86F64A685F952538817F00B65C643676B9157BCBAC7EEC52456C3F51B0658D2F
4CCBE25A656179D82FCEC6E120E2D347BC91D149CBA41650C0EAEDF34E7ED5D0
517C67D32ADF144F2C13484291E0B36360EF74926D1922E8A20EC92D76D156D5
4048A1F279E2C3ACFE8F4D97EB5576D5817DF31EBED560873DEE6FD43A9525C9
D6369E64FEA42D266DBD68800CDDCCCB3F8FC092AD1A326469AF86BC7342F522
E7D3AD36D0B4F76D7F8A0A001C10FA9861766364B7E93581467E9D9C2AB8B066
76E2CB3DE2D4618DE8113E30A9C51CD5C302C5043AA2616C5A7116E81F361EB4
9355E6913013E4B727EC0B75B2AB9E5C646378A9451A6C2BF0CCB52079027515
43050F98A7766E592251FD2CD3FA39C6F9F87ED9E6F292553D11D84C1DAF09ED
F581A7E4A485B57F02DA777B16F67B8929C596B6904C17C4D5E76DD300127D5A
856F85AA40BE39DDDDEA41E5ACA98F13D1CE1DC133B15C6A4C1FDB51B9332946
5F8B58F80FFF5F2928229ACFF6746F756ED72D03E6FDDC1B7D40D74657453CD0
017F5D5ED5C94A17C2C5C8BF417D151112DCE9E0D409D77A5FF4FBB76C8FAE50
DA16200AFF846ED8861C8E2732265614CE7AFB43E0BB6E7C284067FDF16D85B1
D333BDBD27AF1738389F8EA4710B326C8E73D819C74790E8DD013EA535717243
54660F0B6DC0CBAB33BC7938B5013FB607E13569DE4CF1B466264492AD035944
C4D762A697D6A901B3DDAF482C072268A16F183712246BE87CC12AAA989993BD
EE7106E3CE82F6CEF210B8F766CE3B659D1B1ED4C9909A5D5C28000C7C907D2A
77695BBD219280AAF3EE7F39EE9C01840DC76D90C8E8DDA58DF9C17E5F0D64DF
BB8CC5BE749887BF6BF4332CEFC3A68A5120FDF7F8C48299B84A5BF9C1FCFDEE
87AA1E56E3D9090FC472BB2794E225B6E128D16C88113D64DDAEC77EBE466734
9A4B8AA29600D22F96117968558085421263D8DACAFDD54A27C5F9CC38216E2A
533AEA9FFEB7E27849824082A4AEE152B9F952CBEA09B88F4F272F7EAA1F7E1A
567AD6892773652012086CCE687D8AC120524122186AAEDBB89422438116FE73
E2A9D05BE03B7CB7CF11C3FC7258C3E29F5F54B114F4452CF920F9B8092F6A6E
43647F1F572C7241F2C303DA63FDFB2512A6E80C3C75B4D6CE3636D6051A1874
1FB8126890F4499D1149657868824A947C90C524065463F53A0E213A0D8A7ECB
B769745679D94DACF5EBDAA547CB543DA98AD4C94BF42C3D57BA8801D85764BD
CC6EA9346152CCC0E1294726D51B47C20C3BE4E7A45A4893ECF5E5CDC8A54218
86A80111A041985507983D15CBAC900C898C187A1622EE6377F4F8EEDD6D51BA
208A89F47648FE3E6300AEF37C609368D9FD42593E91090957EAE749ED9E9FD5
6DFF86918A21179CEAE9BDEEBF0533E83C0D4CE0F1FC6B18461ED063122E916A
91CA3F44A337AFC790F9F588A4BF5D49B2609523DAD79B2CE6F3C876DBB96C9C
23EAF0B44528D530A705895A2C9D3EB84C3288DB697FD337DAF25DE13C0D21AD
814157E8DA347E3E2EC8A41BCD161856D83FAF6294B984F8B00FD33C6D1BED9E
6946137DDFEC200C8DEC66CCEA510782BC83EE4F8BC5C6A94F3DDBF4CB259122
A868ABC895EA7B08DED2291B557B8DE30CDA7DD281F96351E55EAA6F15743724
C936E6DFF8332C10141AAD2E2035C0E63DDEED22933DB9E2FFE75C5984C2D6E0
59FB83E7B0B4233F41C1BFDE89BA913F0FF62BFD3AD12B058900EB243F8CE61B
CC2DACE333DD3548B96560F958D8A6A05B1FCD82FBD8011619E8F019C85D08BB
F1736548A5FD6C7A8E3BD5E1A7B6D388D77A17069F14914B7105F757EB5856
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
51E19B88B09B6E2EF395887CE66DE9F4DAD788554CA9860D4450843A3A99A450
1FBC143AF860335273A94E4960625B7F804FEEEEFD49975A9D257F6F1B1674F9
86C6A4D5957D856EF3BCD1EC5799E12F4A64FB3A48BD39E1555F059C0C5E88C1
66361E9194511B8E0AAA0718A31AE012073B21680FF93E48E0EC1669970C454E
7E5D796A23BE1943531AC5C12CD1C5CA1FEE46039799BAB1D6B99AD2569B43E9
F2743DB4167E9D2581295BECA7EE17A90E601FF5B7FDDFFDECBB1E882AE82292
F6F46FAD4C8C1E1272EECD29ED810B0A7214FAF236D4E749563B3AD1A5C09010
BF60478E29A022446205121176E2E0A3A7504E4A745A6BCBE22DA1E36F966E58
11ADAB0817E30355417DE7352BF4EFDE2411CCB1F57928C67AFBFA64E0EFF383
57C8EE45C93A494C40709E55EDCFAFBB672882A031A270BD9E46EDF5D762E049
E6D9BC986A7D7A83DE016901A45C0E13EEB46CDFB5424CADA9CB6DC92F990B17
BB383C6DCEA8EF8D69FEF91E21A654779148D42747E98EBA3C78134FACBCE4B9
A493AF229268DE3071DD10B188D697A6CC355BE2AFB4F3E713B1FB9D975E5597
3D08F7C936125DDF795F8CA81A98F8AE230AA8AED8C2040DE5F9ABF2868EC52E
DE61B67B4A0FB2AFAD3A5C3B4BF27BA891C938B5A37FA3B081B2485C50A9830D
9F9BA8A98439583F9FCDC51005A534C052C9E51AF57A7B2F10AA5BC2885F08CC
0CBCC5720C4266B025DF0C804A6913C95B13957C8098BE1CB7DA81FA9C149F6A
812016384F6546C62F0C4609E63EEB17C167E1570443FCD3BDC6D40FF41F60BE
57B6F2A10673088A9B15F981EE2189F18AB76E5FA1B840F337BE8B11F7055F9B
7AC5B4EDBBC352C1A8E92FED0EFAC5D1B502B12AC9CE61763D55E0C6CE051364
A66858D80FD2EBBBC9B41DE3925EE698186DC184D5F63C4253C6996266DB049E
D1F1E50F775702ECF0BFF36F82DA3B54203C69D43F2D0A0AB902740041BB1228
B4C23DE92435113B832E1E8817670F418126A2E3CECABA10B3C1211575854AA0
157967D8820E682566E644A9E4D1D6AE2E72B79F72E7DB8C9A46BD97D2B32246
F16C08B7EF5FDF6B0418863494799AB93D78CD0DEBA5668144FC336EC713CC82
CF8F0F4E4DE5C023C137C50E8E883C555A0B90A67F273B3122BEEA272FC93476
1664EC2A05BA788D18B0976D372977AF4C08D9435AD87BBD53C1206AE144FDA6
F2B9984D59F8BABBF1DEB89E5D58DA1334235B4498676C985A7C9F298184C53F
C3CDDC65220F659062753A889B74485F2AEE0B5FEC748348E362AECD434E892B
9CADF4D5EF841840FC6A6F0B69FBC10F2F4BD0EB460468C6D06CC6A120C63668
B6C9C577866D63ED41E6FF549C179C0A8A7BBFF19D42E3F222155B581B75122C
66EC7E09CCC7D14E34FAD5F5B21FE2D0D677F19A8C689D9AA23BECB1AE1DF131
B7BA764E6E1C6218C453A9DD0F4A2B9E1C74ED5394086F4CF542ED54E36A6AB6
3AB1FDF9C2B365BA08F02640C1F607C614359CBCD1D1B0AAE61E2E0D0646A3CB
3C14CD74242AB78719F8D959557B5C4F86F1DB7BE15D70E4A43CB7FBB647BD74
F4F3C501C3D569F9BFF91D9D898C2C3323553275442D0D1797B70A5293AEB70F
4589002ABF294F9C352C1E4F78F0C3E0B66A2603F55308B18A52C94B18A5861D
BBAE90B021791A5346DFB060B030D919C7F7B1BFE2E98D8717D02A15FF377492
1A1950585EC59F89120C83DB4FFDD73F1821CE092C57D70F764E2C321FD8598C
2B2A3C9E36431B3C816A295E0AD9F9DB470AF6F48E5B99F60488DD6AAF310135
7C4C7F94A5784518676923B3D690E3C7F5508F3AFA442ECD0F28946ADFF00D55
F22AA6A4383CF53914B713820CA11705F4517B22E4FAFEB7AF69FB88D7A56D82
E64AEAD390567258F8E53D6DA7BE60769C96DC633C9A507A4016A408DA866D88
F57A044E3EA30602805F0C82244EDD6D1DFF2174A3FA62B6009A9C06DD30A469
61DD282E5E507447692C988A6429015AA49E8C2BC0B0D1BD0F94149EE3545DBC
72F1B639964ACB6D5A7E01AB17FD548C5F08327EBAA026FA7A544A0A93A5B730
CF1C1FA2FDDE88E3A16A2A438887744095E05E47EC9E7E9AFCA904B34C33EB31
3E70DEC8C2B2F30E5D2307B7EF8B7DCBDF521BFD0A3584F0C16BA0EF9A2CFDDC
29409ADE013FE008DF3216F750365FB5084992009A28B699A2C564F080D8F7DB
662D441AF1A2496A025EF93BBBADB149B0E8FD7FAE2AEA5EF98EC4503D3F55A3
05C8A21A0EE94C3455DDB65A77BAF74C510DA89C01C3415AC78566DBB3E26E1A
4AB41953605C79ADBA039601F6AFCD6D76B3F1B2F92F0D1816C6254BF543C192
9141E094BEB24A8492B51AB884232E9D121ADB66C6A31218C5D80910564978D1
7EEB2C723E2C63913DE4A43CE1B23EC26ECED765F73F693575FE5C3360A0CDC6
25D2CC000290BBF54D37F9040E216DF93857BD2080A9DE16CA01166F975A39E6
EF891E4D22B39F4CCB76E926BF241EFD3CE3C6743BDC76D2063013AC1C8DAB63
F28735A4E96445BAAE35B2F261740DFCF0AB6730E3F33C3567BCFB11C3644A3A
2A34D886AB65E58157718C6C635A0204BF0685127D91C3AD5603E1C45CFC8823
72B814458C3610C276498CAEE49C9CDEC5C6CA510D1697AC2DE0528548562C13
5E0706254F75162D0438F882B656C4A9F4086A7135C53D896CBF7F8203F0C857
FD1F94EFED513652D1E914800A668DFC3F3B0966B4B8FB2B09B7FF9FD048387D
DF0B4C0C5CB3807EC89466DEE887EBFCE73991648E4D079A3BA8A9911ADF8CC3
C6318ADF7809DCB92F3B9DB2E308508AB010DB0715331A0E63B9974F77633E31
61FA6E64600D48329329A5A78D2174CBBF716EC5034C676072B0FC05B94A2DA2
981FA72292473759440CB93D175E88ADD1EDD25761582CEF61B8AD259D2DDF43
0B4219DDCE0C47625F6AFD4335810674DC2BA2EF7AA609AFC1CDB1C9D3A7A865
6C0C553DFF75F3A0361C7666BA337A505BC9DC0B32CBF3400DB1C8C3CF741664
C6A478978C3518303FA135D7AE5E37DAECF82A1D7750F3F53F9E7C89A31A4EBF
24FF7D7875B2D0D811D4D2847844BE10B8466A8D29199F4F9E35DA908E452806
5DF0F31F8B29C44632E2D63C350442D0B481EC493BB77D08150E2332C5682FC5
F4572E7CDE672342B98C8B64BF6E59CA5268A102E7404CA1358116258593B23D
EC93BBD6F49FAF912DAC612FCE2279591314013EA9945300168C5622A46FE7C3
F562499A4022C1D3BEB45C22238CB8B1B8C0563AA6CD917C5ED76A531AF23229
63B73A83A2F86BC191CF26686378A9B1FE313B0560C3FC06369E709275571F6B
7615835D53AC484C54D2BECA0125852CA7D28DAC9A22E2ED453D6CA88C522901
C381C606C277D26C34EDB9F2E30D6791EC4E8D2CD21E921C49DA434118077B90
8463125E0A6B7629E291F008D43125DC89D151D76CE56ADED3AAE0AC34B3B35F
5A9146632DD760BC202A23323D0B916DDB427EA2E241E2EDB160309A86FF740C
129A3487076457065A424DEF92008CE0AC08ADC3137FAA0B7567E0272F3B32A7
604E6D6F00AD40A44AC4DBAFB05714C26BCCC73F02EA512777B198EB86053AD3
FCA56FDEA833B3B34732ED273E2C703A602B82326D821BEFA38DFED77C63AFE8
48D4532E7F720BEDE2E0064BE22A5B9141F11F8B768B2F0851A9FB0B655648C0
FBC114419F11E8AE9629CF1ECBFEA960FF97CF29595BD5A8A00B5081061B6F3B
BD0B71E88A2B049A4F868BF0E582CDA9E28EDD82EF32EAC2CF58EC01BD53372F
2176DB89D61218B7A41F0008B53C8C835D5F08A5373C30B5E0A17CB457EAF0BD
4CFBF08142EE7FD24E03637B4599D227970F7CEECDB183E06D2DE8EEAD380A6D
C17B111E493EADFE65FA94033B8ACCF9BE8B9F9E1AFDCEC14D826CCC0078643A
78E6567E352D7DBD51B0990458B6CB8B9B2252610E36B304030ADA3FC6DE822A
BE5DD852F26108DEA8E477C71A2F7CAA5F5311F9660990181483AC130AF26315
D5D70AC07AF778A53161CB16138891B7DC82926481E021CB53EC0003BEDCDF05
258A62F650E529BBBE2942320C8F5436660D5056FFD6F363722F676BEF8AD226
ED88CB894B268A8C63765AFF22F9AFD86471DFC56DA3E9F10D7C5B1920E5B08F
65C6853A2030F8EE5E1CDE0C930753C9AC13F612CEE14631C14812B2A33E45BC
27D7651A5E8B0C46E6F1375BA2709D16368E072E2169AAF3691E63FFF6B999DB
F06C9CB1C8BA5ED1A3B5B8A045C21E270FC43E32061F14F4A9EE6D9E5786B43C
7DDF3233222F1F99A47358A65448214F72757A5E242E9C2F38F1FC2002618F86
F83B630089B48DE644DBA2C44D6369FBBA1C29F89D1892AD55D8179E90200626
22ECAA97CA287AA1DDDFB643C579A7EF3D177FAA08B4DCFF52EEF5F7D160805E
539CA53CDC814982B1A40531DA6C89E780F2612E09AAA88B1F6A104C8770D3E6
1EEEDA3DFF2E9C916A4F8AC6A45ED0B692FE7C9CEEEB73AAB8FFB6331FD47809
6952F9792A42338D892CBC69994A576F569A2731E01F3B1AD58B48EFD185C663
3C258D7E205A60E76E02097A804B9C06208C496543E0BF2F9D3143EEF5DF8D3C
515EB4A1084BE171D0047E439A0E82C25ED7FF4EDAE728A40F1A19000F19A598
7FA54B40D36ACA7F93536D5BA86AC14CA6B10229694A84795BBACD3B66F9F7D6
2C6D57D0287D62D19199B92E6E63B9DC58C4086C32AE3564B1A7B40E5DCA8670
240CACCABFBB4F49E17CD79AAA10A7D19BDC3AFD69B176E7FB87221BF013A5C6
A0253535C8A6DD1F07E9D91134BF226B28CA16CB7739FFFAE347AFE8874AA71E
4880911332B2F612402AB6548A0EF59C67227F5F783714FB05DF12E5C0DDCA28
0FC2BAD982FAA8B62F0E5DDFBAB4EC9BA2B1A69E97CA30668A1809EFAFAD0869
003D56BD645BE23DC114E665E9D8D06B215DCCD6DB9A8B863EE9CAE8A9DE3EB8
7AE86DF86053C13D34B4A0D06BD00BF27D4CA3552645B83D67BA660D49172E09
8A7F206DBC6D7F94725DE14558805DA7395222C1E9BB748ACB576140CEC96FC7
D6D26B321402D72D75FDCBE402C7FA4AEE72B231B88E71B9D3CC8D8924BAEFB4
4B8C610616DBD12B0345E5D3AD7E32A072FB59BCE7811460D186E010C7CF7AD7
4AB715EF5AF7BF31F66AE66EFD5B832D6BDAB9937E5FDB673C9A58C91E9E8B9A
7018BDE462B791CD3F83B840B2D5E5AB161B8A209749CA1CB121EA39631C932B
BBCC2F9BD581D96BB25825CB12C68A2F08E447E0C557FAEA03843BB4FDBF3EF3
0888662810D43EC71195255D81E64BE6623CC1A5D8901CF4E34BFF5275FE9BFE
037903C98440DE5CEC19BA7AE277DA2418F08755BD426FD9D567ABBE75484079
E8F1389C73AB452018BAE8DE316D9271847F1DF444E44FCBB58A92C7D46E318C
74B161A800FDF83BCBF3648B5F333E202E28B2610216E224B0E460502BCE3BFD
0D6BF0E2D85D38C5429EFF08414EE091119B7738A4163435FD071C1E0DB93C2C
095688B66DF033A21C6CD3941F834570C10BF892C57001EA90FE52102447E98E
BA3C78134FACBCE4B9A493AF229268DE30644C5800FCD0A97C2CE2BCD21686F8
797624292BCCC25E153A4F500E92F0D10F566B4FCA7625C148E51AB67E579DDE
79D7BFD186D88AB84FDC636EE6CEACF5589DC1D06BB3BA3BDCB696EFE8F214DB
1ABF8B7CEAEE480CFBA851DE7F11CE8CACBFAB95B617ED938536125E01173C16
AEC84A3320B7ADCAED8D5EC2F0D4D91551D197F5DD5A8F36653841CD4B9C2DE7
EB1F6853EA8B7285FEC66BCE759F8302444D9A84577E90EE8ED452A50B7DD324
A581288CA7BBB598A4AA4E2F32EFCF8CFFC534487848E83FD4D72FDB0DD55434
CC91C9E914CFF0D296E3461EAE4BF8657AD3FE2A8B8B9F05B07E6B88518FB84A
F75B80C768699ABFECFD7093AC86D1C2958033AE0FBB7520FE621E07BFB7954A
2B5A607DD639A614A19A33F4F1879465ACE48AB66C94A28272D9581E2C7A859B
82A42883A8F7B17599C1265B1F6077303667DCCE0B208FA935E0D87F4959A84B
0162ED173A390003DE472E51A17BD76D04978EF48B5A92C7DBC0859512C31467
450F0FA2402F8A7548AB978B9D5F85A5955CE0BDA86D6C601DF93CFF3D70DBD1
CF774817077B1C973C89C949FAEAB6F48D530BB1ADF8ECD6C50C8B4D043A08D7
C97D03D7E5AF7951EF01455B9D04D057466A763E9D0192700ACAD8E5739018C7
33C0C55660346234C0ADE6583ED36DB126F3F4D986A9F32141059A4DEFC8E67F
6FF7CDCD485AD066D733D6A522572B30379DD812122F415205D7B59E02C1DB78
0BA105952BDFE788A6FCB3A10AF9852614175FC9F0343DD2C80D2B087C0D01C7
1854A8FAACC18567D2DD09F67334FD75F6A53AA50DBA9315884369E0F86B2DE6
10BF2E941558BD0F6554D3B2B88609E8821DE36BD62C161CFBF95B8DE8FB0246
8E3F2B7FA8438BA264298E2841D9E3C3C95C4708BFB7697284F9D6BEB2F92DC4
EAFC2F7D6D45D590A53A74C1813C234B6A9B739929A22A6CCA7E93636A7CF882
2CB94B4255DC032A18FE57DE5237FB22C8424FF3CC5990A998A4A4AAF0D47EFF
AF39202BD31EDAA1125EF9C3ED577C6CFEF0AB6730E3F33C3567BCFB11C3644A
3A2A34D2EDCBF20292EAC13AE4F1EF661692D1ABA356F58CAE8301D9A1DBC05A
79077389A26E7EC508826A5894907837C81FB91BB31F774F8CB1F07D66411593
D10A7026B9D3F2BDFD75AB06CBFE577AB4AFA639A6DA91E82329CCDBFD8E22C8
8E85F681352772F61C590A82719ACCB304E5D80A40B0D4A30A382DDFCAB9CE75
DE391695F193D01DBAB7CE2B2A34C7E007BC208850A7823FF3D58F87AADF18BA
BB4A5747585C55198A667892E88F4B16E566FE3DC7B186F527B18892D19E1B10
F0AC634856C8B63AF5FF651B72D3E58501284F589BCC5DC7B86DB9BB1636D08F
90A965C7420541ECD617BF021EEC6159418E01D390E2DC1104CB39B428F46FBE
2DDA70F22FF8E674AB46A38EF4A80F6CE267095F219443FBC7C43912A76AC1FB
E852B7ABF80D8F8693448A4D6450650A9B688FC658392703DEA5D79632DA3940
3898621699E7945E639F04264B08ED57AA197E520BF5D1BD611CA3E3E899BE9F
6CF9538F6DEB585AEBA7D43A08FC2C7175A10FF7344F4CA3406264DD6F16F6FA
29859AB7ED0ED2D2B3F591AB4C9D9BDD58FA4663DE565844A0524E23EF2751AB
181BCB8341375705F4254EB7ACB8678338C806BFB0938F51EEBBA6A681B827B1
5172B2F8D6EC55E3208DC4B3211FAA5227E06D4AC40F9C5911FB837AFE9E5EA6
60CA6CD43A2628E3C1E2DD8DF7507903AF43FEF1EF3C1DE6C11079E7CAE8ADBD
A8B11589543196FB8FA22C28C373D3448E0BDC5117D44F0609D27EA8C1CDE6BD
699856E44452FDD7236E4CE19E504CA4D48826FAD4AB7CFEDCEDA4D8276A0D77
17D07A1879F88AA4114FB265E238F5DC6055F98698FB7C19B6B5B4662AF22AC7
6D37C82CEE2D826DE5034F166667F4DAB0F243EE83F2C7F6796D49E18FAF63EF
F3CB1D250EA7F9737764ED640D89CBFB8EC2079FE9F74D61D939425066EB55CB
B2F20DB918C5EA3F5A5F22FECFC5F9582E3BDEF4ECAADED2FDB2979105D528F4
691126CBA8DCB4B18E6285EB81D7B872898C8981898EB5E1AE77B2AEA80E12FF
027C3FAA93D0B0EE58BE36772153B097CC1F48E4D9175BCC5ADB7E2B61481F78
F3658F42D355F4F1B43EC5EA4D9C3E7425065D6CBBF55011AD5710653DD8D6B9
811E7D3BD784988C26AAE4B2B7A6A708F9B3CA31F868BA1359645D7599B211A5
EE53295494C0B8178E86C12B2E5D39CB192F7E2F604D2967CB7BFF3083A64C21
781DDE6E0B910F0CAFBA0D0C9C1A43A61513AE8C6B661AF43E2A684EB2AD4A67
8D49B123B791D620061170505F0F0CE29AD1F7AB4622A1F72C14A051D98823AC
43768A6A32D8509F3E3EEF889DA59EF6EC68DCAC374CC5BD107758A8250622C7
52AB0318E1855A3BF9605C976202FDD67275C7C04AEAD0D76B01BDA71BBA7E79
A893F17AB9A8B581E6E62E2259D3D475234E4ABD28D431B5B9C93A2D1B4EEC7C
7A282CCB5F9060144E8129B1ADE08C34A8B29EDBE0504ED0385213489EA21075
916DA849100D44D2B72B8570241D14948AC8E0BF48797888A8181356425B1A13
99FF96F2E16F001C52DBD9A2329878C0CDE58CB95764A4DE2D7515B5B63868E2
808F620F8898D339CB057D0CBB2C5A1C9676608677F7899436F5FC381131B7C4
FBBA8C76364CF34C32888653E7170BC597E32EC6FD7D8752027C0947EC102748
8BDF0D81E0B7E2A2834D9FDF9E7E7D7CC0AEF52C6839FEC3D358A9A796FEA882
5724BA127CA20F8DD56CB812A33AF840CB6A5F4A943EDA5FF9E6D970F3267F93
92DDB84786A60A12B07676515015CECCA18146C955DF1D96F5D2CC4C205571C2
8E279BD167FCB36205C7711B4939EBC383183991F3F1DEB3AB0CEC0E6C42A726
1FABD320AE1E53D72AC738963B60BDF1033C3A9324B5BC879E727F971A047166
7AF5923329E440A48E2077FDDCF0DB306D11B33EDD58007A333E41E6D0D4F2F9
3797E81D2271D4F2BC995ABBAD279F9323688991AAF6BEBA197EEF97EE11768E
E7AF8E11BA4798F3D5BD5FA826AF79B55B377EA5B398F990B4D015150E8F5177
E12FFA5C49E89B9A46B04073554BD0771E9CBC073FD16A89DA4B2B3003793696
9F9A0743F17CCE8405DA733CA680E63E3DFF1D1740516AEC9620AD47B679838C
D6D4D861F29EBD3A2AF3D607619CB08AD5F2F8521C291176F4FE9FE9F18AC8DD
D315850235A4C88D0D78143D98A0CD03600F7DD15FE57CE5C2AB1CDCBF047ABF
40B7023B3DC347849A071928E042CE0DA5B796BB0CCD2B2D4D2D1D4E8C6567AD
D8716A6269EB96B81116F407C1917AAD293127F2D7A60EB48AD2302934BB885E
FE24570F3AB4DBBDEAA5094D1CC7F8CE153E4988346543C8117AFE359A208A02
9F338115F4D25110FE7EA3E6B82FF17F1698E04D25A0A7FA898ACBC801691C27
77CEF5A341CF1CEF0A0A389B84AC7EA97A0D476A220AEE692AE9DA3C7E35D675
D56175ABF8B8BE2B3D13B9ADE43D8D0B8D1E0D12A2D69C9B7D74607FBB3C5D95
0A57BAB8C4EAEC254ACB81E123CC693FB52BDC4DE56B813974E7B79F6C918E26
3A0DC0F31718E73244679340FD09930A2275C53402A9BC40214B149BA228D528
22F35371F2A487DBEA8DE430465F5D8172C13601B47F93215C6FD19050DA58F5
E67F6C4FDB1E08B708E9E73D9E9F5B68D68B27DA2449F435FCDD1E5AE2E6E382
E387E17F299DFF59BE697AFB8B78B9C7085DCF16879769641176680ACB091F03
1C8766A1AD8E5A76FBFCE0CBAB057A0F2C1AC23B19EF152D2AEBC84ED5C22642
11DAEBD1AFB7A7ED99DF6EEC5D5D19EE15ED576CC0A56CAA7BCF8BD9D7BB3138
378BD290D01159520DC45679E152B47A8CDE6C3EF48F668981CA24F26C38333D
A8B21C4951DCE1E8FBB37BF7E0754F6C9A4F501AF32D6217E047201303060EA6
EEA5B735E200142A9692810CEAEEF1C6ABEDC02676970CA89DE41EB9F482ECA5
8C80394FCC4DE95628C16E671D3E1E5076444BA39D0B3CED82FF45076165335C
2E2D4594A13B2D30D14982CA05E9633656219C55EC4EA46E70EA5ACE58B45399
4B96A8F46425303554BA06AE21DCC84EB946AB4514E59981F1D29587F68AFC45
96DA63859AC97006C5D244C40F9C5911FB837AFE9E5EA660CA6CD43A2629964D
24CD1AD95A288E4E780F8614F536328FEDB5C550948AFFC6189C2AA91660B2AE
39C59370DA9C9AEBBEE8E1F5F1CDB80A1DABCAE0D60E01C6FC986D8773275A6B
B5ADEA1F69B78A4D6D18BE02EFAB9D2A0AB18FFD28D38054B6D48C2697DB7F8B
58A3ED61FDB5693C0CE11EB482404CE68A2DABC60998CF4C0AD1309E79C036C4
C7F0956A59095B38575EBBA554E25FDCC638508C65BC273668725BCD203EBA3B
15A5BD8253AFF94264013859445F7EDDBBFAA7D6150344B43EEC91B5F30E5D23
D3DB7CAC92D6A9CDBA9E3EB92E1059F2D2EA0E7CA342EDBF0C9016E844A6DC01
584BB06A252FCF5F1D5082DA030115A0FC71D709B40271F222C244FD70D13C79
F1F7BEA5AA26F026286EA6DCFB8A75C851E0F2093422DF694E03041DD1C93225
3AB32236597549F938AA87D634B742B0526C1D5959490FD9016F0D581E1B7884
9D80CCB52FDE7CBF958EF7FEA5F54287BF863FCB54E842CB8C40FAB4647ED531
1EC85D7B10AD65D5E5BC2189FE7F588F20002F6F1BE503BD56F2901D184454B2
70F61DE04C9E99DD6F0ED4F0DA256928A19FC811A2B1D8484D4B114D1AED6688
6BF167AE1F8F869D7AF5D67F361A73429B4D94091545F006C8AFC81DAC953496
1EB75B5C3DEDD7A51EE9731B9D78AB441DE6A2B8A327766668CD44215B0D164F
62C0F79D55A1B821F447C556872DCF8B604E0DF603FFCD796162A791CC0259E7
56D88C55D1DA17EC061F488F7FB07A5E62C4076B9095B97314FBD4140FAEFD89
4A0AFD6801B1994321BD2B267CDD32121DB2F3E12445530FFAC7846E4F1AF416
A29191433D80D9348751330DA51CB0E034C09115A77BDA645594552128D07AF9
3D58D5CCA18672278E6A722FBA42E5DF3D048631D903C5CABE14E3850F73A8B2
F73B15AA06EF3D0061368BBDCAA8F570600173C21033664B04880A6B9245D3FD
4CEECFFD3B0EE07D82AF32F677A60743734E7C6B6710BCF518C0821B25C9A208
62F59BA071EC6DC8D7E09270164153D4CEF2005BC07CB78C50316C61B6CCCD39
F92BCB7344BEC7D2805DB43C775EDF0C90EEBEEB414D729DA6B737368CA08340
FBC9EB3847E3F0BAF11C449525F8DF0A06AE7022A33641A533B251C71FE1D4FA
44CF59CEE0627E05B115C3107C454170B6DBCD9A1DAE5E329BA471C6BE51A9C9
4DAE211CF964849BD96C2F6F6A8D5473336EEC461C818A21BB7A2850B9D7AFF5
832E72AFBD6B4EA4764C0CAE799CF60EF34489EEE8B72593C2A9D620113A18D1
2A674BCC38AA86F3818C8736F7354F0240AD2B6D0FC0DAE3884DD8E43E48CB71
7C430D07CD4475810C2C358A9E10E11014942A28746B9E66E25C7E2E642E6FDC
810CB54204E3D3984CA613554CA0A0FC2BC1A3349C0C30C13D92E2DCBD8EE7AE
855F307481359D639B070C50CAB47B1FC9056B3B0C19D908FC9A358429D3F4E7
26C18E0E1330D39DB92D17AF70B41DFE4960746A73D98D7A005395EA5C2F290D
7485B21D2B0E1A70F9469BCFF1BC25D6896B109FB18947E91B4AB64CB2CA6961
36B6AD2D6876C2DE996327C0498BCC17589A703CFA58AA1737EE09E29C637597
F65A585471FD2528F9D51EDEB3149605623BB8F29B163A3E951935FDC1B21884
8E9E29C9AD18FEFC1C3505D4C8AC4C76553C62224E9E43CFABD4AC2A782AAAB9
D1407E2D2E39A8D5497121887FC42AAE6664FA5F1D248FE25E46E0DADBF63D27
EE53760C1290DD74A9546DF39E82A6AF8553E18D5C5D184DBD1B038DA3FA3199
3D20C046089AAA37B2FD4D5C303319DC024244637BB003D7FE7A447A9A1B32D9
31660D3B5BEC461753D1FF78F7DA716D0E3F0DAE2255F500636A836B104B31AB
B367CF5A28EE9F162226CF0DE7272C599A9DB622B9FBD75B447A7A5CC0AFCD00
FA962431AF467E8CCB3B2F0D208AD9A035CF5835C7BE2199EB5BA3DB6915E259
F163666565884A9BF3F5DBD977435FD6D31F5F0307C15F0A0C27DAD5EB256192
18DB39EEDF455F73631D4FB3FD8B02432C49A744FA969D73EB30E92DA98AD734
32D288B36E361ADE5CAD54D4130D0F2843B58FFBE2222676945F658A99488F8B
5106B218597890839C361A15BD3E7D142127F18C3C338DE05A05B42F8C2A6AD1
F1891AA5E586AC40D38C6DEE45AFA9815469268EFFE09D463E07DC33B9CE6A99
EC86986AF7A9EBCA1AA6ABDBF34D4ABDDC3B6C609F897DD6637313DA67506EE4
4FEC8293D192DB648EC2C049715891DF3A26E61D92A4FF0469965869C8E01986
7DE4F6EF1BC584A860EF50555B6467AB89629D0147BF2388046B5D681E375A1F
29345918D885CF79BC4240746C69EC11024F792216B7FB0579134494EA2A4288
798D99F42658D73641497D71A63269B90D3B1C98412574EEA29932F3D86FF33A
ACB2018F1D6D1F3C07E2C494F9E29A0E3F71EFF25277682A19F85F6D54A4041A
9D4B1504F4C5477EBBE62D175E6EA7C3AF2E0D3F863DD412400CC30FD2C80668
59A3F958ABB7EDCDEAB77FA8E98CD1ACFF4A02A958D793EA9A6344CDC6FE0699
082A987362523CC31C616B8C35D9B71E1E9942DE3309BB56231253D9212E4FB6
60FF918C95ACF8B35F3A52CC544B6E773ED0AFADE11046A6A6ADFC3E6FC24E14
56FE9AFB3C4AFC48F1A84E04666EB59AA5082F43FC04ED38EA5A6F0F01DDA508
86374E47A30E401CDF33C1A4EF5B45FACC293C7497CDA70BBDC4D07AA4CF38C4
C02D49168D50FFD7AC0737D42C19F790D04D9AB4D66DB72235107587072430E0
FE745C61C843B90EED9BC07FF7FA3324D118372DFFA40F45BE69C10599360985
706AEF129D2FC8D489A225ECC2B848BF37915424D5428F121788AEF7BB92C410
30D3E2BB8DF4F6577E42ADBF478635CA88A64550FC1F4B684B5B024737F2208B
9BC6CD7544F3FC687D7F46140774FE901B13814496BB39531D7C74638001F4CC
A942AFCA9A8F3C20A4EFAE8A085C006F0693BA81AD0612A02D1F9E76AB837DB7
8C4C7E51F726C9C01F0AC51A817A282AC48EDFAB119CF8E18401A39941B80680
2CC843CE71DBB11B1CB9AE2312B25803F6FEC967ED85DB201A7BD46DF10B3809
49DBCEB467483AD23AB856E10BC79A2E940F91077F5FCC7B67DEA290FD66A2F2
A3948B47E01F8754818C13EA0BBC389706BC6453E4A06FAAF3517A4BF06CF9D7
6AA907668F9F503740FD82FA14A34722DC36425ED25AC613D28EEB5A694004AE
5FDF5A40F8D10228211DACD12ED1D1EBC56BE32710DB2F2416AC461288F3CE62
977C9B82DBD32DD127D10F13B9BE299B4FD7BE069928185B23890446560B9200
0370F67AC5A1BE5D8EDE197047E071CFD67B25
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters-Italic
%!PS-AdobeFont-1.0: Fourier-Math-Letters-Italic 001.004
%%CreationDate: Sat Oct 30 16:49:00 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters-Italic) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 96 /lscript put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -249 825 751} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D440EF
6A6F1325CEC03C3A3F20FBB1DD06C21761D70838D1E83592E85E284B4270E83F
629BC6D3971271C950F0BBBEADF671311AF5411D45ED8085300D8E64F313462F
D04E2C3161217FEF562725FC5DC27438784EC45E8F533487F0B4622BD496D97F
F162ECFD0A3F379AD617BE859FAD42B9260E56747BEDB156FE844C8F7CB9A067
E940C5658DE86647C65CBC0C2C08D79C09F07B00890641C302576D48FCAF0EAE
D328445325AAAFFD80EB6CB76F52E22BF04678BA9FACA7B18B2CD01D95FEDAFC
DDB9720701A17522D74D4DFAF4F00E2534412DA11B60161DC23E13B16B54F7AA
8730C5C0AE9AC9EB6903540CCECAF0312A0E4E4D61402D7A7B1775D9591A2EB5
F284D11E9DE117B588FE6BFCC3C2965579F10F096E83A53FF334587BD24B0D3E
5783469281D7C7514BF9448059616084FBC5B2B797D96E7C7511784C9E290A48
088817AEE321C6C7E1D103680C8B1876C552361F3F6C2AE4090C120A08BAD8E3
5942031F8A3E739BD16DFDD228F01C1A01233D1B633BB37C6F1CCAB278FE8F8D
F6EF0C61C428EDBA1DDC254EF1F6109EEBB032CBC33DE7E1BEF1F4FF672C2D12
F48EE105D9B48C8FBC0C8567FDE51492E87EAB9362A1F3E3670416B0BC64480D
C4BE1681D05E3DD8B659CC8643CBADC4D1D4CF4190F7DE32271EB1DF06C7BEF6
013ECBB9CEC865C2FC9620587044E26D17216D2F99571097694DE10F548890AB
ADEA3D9EC11501D1F492837CF931D1CF1A7EC8388DA83793B661D8057DD36586
43EA5A9CF4C7437416A31C5CDA9FE54518A2EBEF1508E16AB5B944840D233F12
9DC0F470BFFCEA640B6CFBFF6FA5585C8E369D3B09C6A08A8ECA9D2481245BB4
CBD54FF3DCE252AA7F9820491384089BE8305D95BF3D75687FCBE284E3D9AAB3
77DDC466A669A15614813CCF13D5DACCEFC0044612E8DA68D16BD1CD44FAC85B
77D4EC8E51FAB737E69A5BF653B8E6BFDCFE4783C4DF6C06F669EED412848DB1
C2BFD00F84455918F6F7B0125E9AD62A8D51C0DB9E7286A8A2312B11DE4D3837
1E5D5E2FBDDB3EE8368C068CA768739C7B57E06AA6F782FD61F4CD0197B54D1F
72CC1A4B453BD8AD2A79E22212442BE535E01859C46C6A00E00209115AE10C86
D4134C8C541EE0C702938B25160E5A62B76BA761C38714A62CA5BA035C5B8BBD
EAA179648C41D4F6477AC75D7275831735AB24C6944A71D97332B5C2775851E9
6006A6604ED6429695CF8D4986849D9B31036E93C48FB693ECC593299A09D377
AC9DCC0396B2F1FA8ABD3B94B89311E353E7BF370F2CC662E1B6B61D8AEF337B
E4D6FBD832273999367D05A85FE31B5F2C0387456A37B80A3000B907D78BF114
6556892940F1A66A7FA4B442A843A915E7D3D27B2DD42D72D01CFE2A664E0632
E56F8C1D694079CB51AB44F3DF083D15E6BE7076BB0BE11B36F8E4D8E14950D5
A13146B2FE9CA799E8F5D938B6A1A2D12857FE53146A346ED4829FDA3718A154
35BECB6C91A2A41F9C4C4CA66E9CD469993C5BC48C2ABD45F298
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /circlecopyrt put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D47BE08ED6CE96278050BA67680A3B973613647
A93FAEC756FC253B3693FA2D6491B276EF45751EFB306961788E7C15297A5822
AFC5A2DABD0DBBFF0BE135267EA6B9D1B4E4760ED14895FFE1F8C3F564830001
EFA901B8442BD2D98561BAB9A0FD939E0F856E4D2EB04A9A4496704109B8A84C
EA06AB0999427B3B1BE776004AE906D0F22159C051D88CF573A0255D99B56781
CF326CD11919AA40B096769CD6D0ADF3ACEC7957621084ACF21AF1F265416628
86B67FCBDE9370D4F5C6F5CC67EBB0A2727E074090DBCA459AFA1A4778AED4C9
AE5400775223E684BFCB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LINE10
%!PS-AdobeFont-1.0: LINE10 003.002
%%Title: LINE10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name LINE10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/LINE10 known{/LINE10 findfont dup/UniqueID known{dup
/UniqueID get 5011940 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /LINE10 def
/FontBBox {-150 -150 1020 1020 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name LINE10.) readonly def
/FullName (LINE10) readonly def
/FamilyName (LaTeX) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /a3 put
dup 26 /a26 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE366EF37D4823F376DD9F7E4CBB15
DA8E93E91E84D36BA5A5B06F3A46B45692ED11C8FC76C0B0B3157F699878E2ED
D89511CBE105EB42FD76309DA91EEEE85F1AED9920648285111A1690C4AE2638
C0601A7DBC8D2D41CA8C4F9DC7A6AA5C51015D8BA926831892381DCA7E61E230
5BB3BD5632D276B929D97D4836F9703461BED94450CDD2660430A0D13F49EB47
72EB0371E38B92F488FD6E19C944811D4AA52CCC359210320B484568E5060BC5
4D2FDAC73C49BA0168EC70388AF54EB24A30387A41246830C10472DC40AA0BA7
BFD5FA9A7730D9FDB4B639665275683C8E3CD7E719FF53B6DE1F5835C06D1671
1185AE2114E4BF5C0836BBD5391FB7AC5793DB4D3C5535ECB70119CFDF567D0C
A390B1D9A992250D535CE1C36B028E3E9CFEF1DC5E0626C58FB0F25E04DC1FFC
DB6A1C67E40E6435D2994BE814C695B48D64DE30E3F9A38D4547B49FF66829A4
9AA4FB9432DD10B6AFA88BBC184BE95E34A17076782DCDFED010CC19715BA5D4
5D525F33A6065EC6C6811F7D8AC94F27E4E2EBCBBDC3AF1AED1016C343825BA1
1DF58B80CA212DAA2F4EA1889F989C99972A5FA25617CABA3B52190EAA98C27C
15717FD85CDC8CAD43292A21B341CC2A04EF383D978142D16B4A97EBF22ED674
0B45CF5B2C3F151029B75CFB6FD2C53AB88066DD793B85CB7A7A13694C0B865D
BB3315043A4986FB138775B7354F4AB89AFD27D52E0864D384397ECD9A850511
E96A85AAC591975E185230AD05DD19D2C6883B2AEE9107448928AC6959BB66AB
7F8F7C4BE5E6E4F88D3BA98B117C9F0F58BA8D4A7B88413ACF98B0ED4A5FF6C2
5F96EDEC0AC75AAA7C2F27FA3DDDD0B3BA0683D98F99A282C799183C0952DAF5
A900E23342D083E8454E64F9984EB44FE0929E8C1605B8B26C37A219ED8A04A9
D7D6FDF3546CB443BB11B2E4A1015E59E8AEA265CC70DEADB42D8361F4F54979
19ED22A9E83B7C851A296D1B5F44AC57AB4EC29FFF3C75A20CB3C1B57EDFB4B2
1AB1FC26A6D947D45EE8221185749042F2896A43FF932AD70B16BC2AD7982D51
C390D752102D4A6D49F0205253618EAA62D3616BC1FB3B7C5F3EE8F00D3EED1F
A096AED8381876AD3B6904E0AF7AB1D15ADF3AE26D38FD979F820B4607A4458A
FE32A61551AC882694E29AD2156E5D008591A02C59FC1DD6BD2F52F0FD868E8A
FCD679FD204A95D090CDFF8E001AF450A299FA07BF4467AFAE826B37C2316293
F8D8E0BF5B14AB8932EA96D3D035B1123FE19EBD2711B77CDAA862C57A7E0CA8
C7532156DF4CF17DCFD8DCB6453CA5640AE67D6ACA55DCDFC20968F5BD6E9834
6986F62A4FFAB198F972617518E16E6CE8CE907E56FD1D71FF7793D87A6089A4
213C25BB85A0910953C670140ABD20F6566B5C815D73448B6B433BFF70D80845
7036BA209B9973D6660A704EB2233993609DD78920C91BD3640DB07E6D9B414F
AA90CD4B43399835EE481F03405B9C4DCA0064371CD2D91DAC5E684F8F1BAAAE
A5DCAD93E2F465EF49D688581EB27993157E1BA939F8EE0FFE4990
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.001
%%Title: wasy10
%Version: 001.001
%%CreationDate: Wed Jan 15 15:09:25 2020
%%Creator: Michael Sharpe
%Copyright: Glyph unchanged from version 2.0 were copied from the
%Copyright: wasy-ps fonts, copyright (c) 1998 by Taco Hoekwater.
%Copyright: Glyphs that are new or changed are copyright (c) 2019--2020
%Copyright: by Michael Sharpe using mftrace as the starting point.
% Generated by FontForge 20190801 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /wasy10 def
/FontBBox {-23 -1667 1720 752 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Glyph unchanged from version 2.0 were copied from the wasy-ps fonts, copyright \050c\051 1998 by Taco Hoekwater. \012Glyphs that are new or changed are copyright \050c\051 2019--2020 by Michael Sharpe using mftrace as the starting point. ) readonly def
% Glyph unchanged from version 2.0 were copied from the wasy-ps fonts, copyright (c) 1998 by Taco Hoekwater.
% Glyphs that are new or changed are copyright (c) 2019--2020 by Michael Sharpe using mftrace as the starting point.
/FullName (wasy10) readonly def
/FamilyName (wasy) readonly def
/Weight (Regular) readonly def
/FSType 0 def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /Euro put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE30585F628C5960F4BA7A0E78D80B
EA23A0384400281199F7528220D2F21D031A35321A044226094B6ED6DB52413E
0BC02D4EAA6BB6C3D02F5D5E4983DFAE1209911A8DDC998656E07B4EEAEF13DE
50FAB8A7D9346FDBBBF1EAF791BE7E3B4BBA8D381C5C32DCB4436D5834A17B60
26188D4C558BC1ED012EA8DED9DF22A29EAE8673C46D0CFF7F5EB4080882EF91
2FF746A93A7B15CFC25341DED2CC7041F5D2FFCE348F17C86124EDBD259F3D7A
A299B032DF19B1C8C6EF386EE2B3655A09E37996670E1878051E7B77C73B0250
EFA23B7014FD87F1D8F38F07EC2ACAF188606F724E436A3D5B001AF774C0BBB2
3B48D49C1D59D3FB5768719967A1086B0C955D8E90D69C2C18593A7EF0CE7A9B
A82AFC9604DDF32B61B5220CEA41E570BF9F9BF018876411E06807D45AEBD705
125665794E0C88DFCBBC57A43A8F7747B4A09C3941DCC35D91F9E238DEE5F56F
4D6E6032FC16C459482F4E32286E48F60DA55F2B5B1B86F3C934052B798067D0
254ECF5D61EDF99B3A6D86DB44265F4545D81B7A002D62C32A22D311876DC636
1CDE6DEFB5164BC751EAFF248E4D6CAB3FCA084FF2565070A0129CAA66035751
8A94EC45A9827D8398C0CAA83B3D4B032C75896D666161D5FB3F6C8F13B692A8
ED5B89F4654956A01FCF6295D4EFF3C7269DD46C0D06362CF44C087C14B0F984
A6CC760D2E439EFC1EFCE34DAAE9C0B017F709E18F64E7762F92A2723CD0728E
11ADE47D1A7AD0B9B75624B220C906D34D1FDB479E312B51DA3721CEF9576B50
F00CE281CC5AC9CA854C150636E2A4BBF26C0CB72843B7E8978C6923B20DF073
7D15F9069ED5C3CE92F4C2AB437BCEAC02473A6E023091F026B8AF8FDE54045D
BA32607DAB9EBE64BB05DDA506E90BDC38D7A94015DBF365B3F727D14E612395
6675298F00239CAB003959FE119E726D4B10B063CE62B1E648DDE9E995ADE22B
AED269BC6481FAC38C9D66CBFB5FA8CC6840F18F49FCA60F6E8D93CD2FE35A98
CB61C80B2F424A61789815DA278578DE6755411E3159852E8A76A43932A489B5
A8C48972C22CBE66C9DAA6EC7F3C70760DC4384C7D5E552E41C9969113FE9B41
4C792F58801331862721CC920D6060DB63D12BBDDDE58C2B1CFC0D1CFCB7EADF
9D0AB31059712DFECD2A616D70DD0EE5E53514B474FFAA0B184BB85B618303E7
DA826C2B7D1CBAFD1645C06F9A00BC1FF1222F94937A87EE04C4684B0A121DA3
E26BD7272D71E93BF96376F11C750E53E6AE7E9915809A21512969ED830C6395
1395B0E6790CE19FF4896550A040821442A2EA1CD3AC4DC9A0B90419882F45C0
598E040B77E600BEC9FF9AC627A92638BDC359317492BA4BAB8B1F2CC6A5AFBF
E81F9CE51A6BA62D5CE57EFC9607693B47AFE3EA791B97EF8B73C7C234FCDFC9
70357D3E9B4D8D8F475BC7448C1B25929B019FDED75169DE66513CCC23D034A2
7EBF6E2D44E394667EF8D57924D4D1F874B89EDA39976CAB94B3D58EA6551D10
3F4DF6E795D36E5C468ACD33C7B78CDCAD0B29ED5145EF4D2CCC59706188D10C
712973EABECD7A3FF3EAA14767ACB0551E39C831ED5452E0088D4F1A826548B9
726B84209947D4BB01DCA1E29FD478879E7F845E833C3AD2E29A83260A53F64C
BD36FC42E14A07FAFEC1B14C54A53A5E2D852263D358E675B62F9E30FDDD384A
56440941B4C437D4418A7898667D111FD994ED002E2E9C6DD47FE9D3C7F1D6A8
E5040A87A39A0509FFE4884E63CA3C0434F07185D8026E5B93B8A50AF015C796
033F05AEC49175ADDD337E2C1E9CFE41838999960D874AE74B8EA0FA61DA9497
58AFFB7A98DBB36FF2693F4EA3B83C6331BE4677D1F5D8150F9A66002C4E37E8
4DD52CEDD41ED9B724D09B3E562CD93B50414D87AD378B7D0523536041FE0EC3
3A5C2343D7DD645BF1A70B6AF3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Cal
%!PS-AdobeFont-1.0: Fourier-Math-Cal 001.004
%%CreationDate: Sat Oct 30 17:08:49 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Cal) readonly def
/FamilyName (Fourier-Math-Cal) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Cal def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {17 -274 1252 724} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F78AE14C
71FFD7441F153F65EC489AED623132F7F0AA967C97A2E6C705F58130577D30FE
722A0CE1882455CFC9882D1055821847FF648509DA92A3EE12F984224F7F1904
F3395261ABA61816ECEF5BAB29D1AB8C21A8F46620894FC69C70DAB3226A0DD9
9CE0FBDF78469648F29A99C677B9FDDC8B90082BB7C984DC5C42930D1315FD26
EA08F21054360D1981E79A6EEEF345CC1B9D85A6983CB5E833C9F3CA972A2C88
B6220FBB013192E7B2F79DC214DD0964F4DA52469E9500ED2ADABDB0D259FDAA
648EE5A0339A6EFFDFBFEB97BAC430C00291576483521C8D406E8FA4DC48C7D9
6830DF6FBF39E9153229816D94F6BDDABA2B4759E1FB3DEB54C47D66E283E45F
3BC1B675DA1D8DDC10F24EAB54445658EDD0AC1ECEA12CBA6DA205698F18056D
DB1CCC0A8D93AA9EACBE2B5093275823AB48AD9B7B1A217505522EB1C2F09074
1D7EC269452BD0896C0B1F30769BD683103F7FB568F80576476B511F5ED74F46
E2F35F191BAEAE8C91D87401A8C28DCF476FF0CB9661DE7B93284BC8E2429CEC
A964C815F35C33B2B6E795088998E0EF2CD048D1D54FEC5014B1AD8A46618748
6D1446CEACDF027D1B238173F8FB6C828F10C8FFAEA574888C851EEDF4629C38
4D71F7D93FD74FE5402D7D788D76E28ECE97DCEA9FEDC5985599B679C052E445
3E16B23D20A619B501A088D5A6578CD0F56CCED1F2039876D4FC648DB69CE3CE
9EA0C3B37F27CFD4AB23D96B5BA02308081972E9E62A93B2DC9A37AC4A63E626
F1488017A209F97B3217B85127A8AAB35BD704F9614733E2C55D3004A753ACF4
CBFC509E71BEB3AA1179EC2955F527022F86711D2DDE84B112D18F375E1BAF0F
1DCFFB6A138B1CA05072340D5703F28DCD60FD4F3AF2EE0061AE9AAA0E39384A
E806173146EC48A331E5E3A8F900D7F580E976A3672054A8A2DCF66E132A720B
37F5C9D5DB8401B8BF5879DC472CC0113E27D529AC7265E93F51DCF7A4203C25
CFC3E853E2FEAD9EFFF3BBB849BAB875FF430A8555B7BC6501DA81B1BFA806A3
53E3217EA4E3C6B388B9306AC2B7BD973BFF3E39CC5C4F39303C2B0728CAFFE3
C5B6A3B6132EA83ECEEA7A270247B42BFDC3D46FD72DEC1FA73437080EDCEC04
DF35DC49777BD36938E591D8D8AC90126D06F7B7C2BFE4F6BEA7A13CBF5701F0
925CE2A7432B33308F262A06BF14B6EE20C4144397EBC24D878C2EF41505801E
80D44192B4267A538C9DB82EA1B401676F6268CCABE71D9C2D8DB59C2E58537E
08E7B1F5247E315B20FA3F32E2A69EF068A4BD88A45683BD7521ADB3C2A78601
8FC0DB09F98D6613341AD917AD3962D12E22023F95076A56361CA1906134904B
ADC9F026771AFC9FED26DCC1CEBD7FBC25302DDC78D686E67667BA824113CDCF
19BC7F03E768D109FFC55CAACCD1F6B8BD9AD518D6E86B1AE06921A28F0AFB9A
BB6AA7C8592651382C6609A2DABB7A2A5F7444D81AA66A8791531D1957AAE4DC
4B45E30F64D1644FB80C34FFD3C34EFD6787031F21DC0316207988216849AF2D
9C4CA389DA5CF542069E56C1DE390DD4DD286019B7C773C62F78793D932A97AB
ABD57A76F0F1E3C4ED9B7C90A553204425722A4F611BD1F455BEFA49A7216F8F
ACB3B98090F887F64661081B57610CE55FF07453FC1E48C6A9F0C842D3D7D28C
BC88AFE0FF3407525BE23BDC9E46B28EE347A06396A9481D8DCA2390972B883A
EDDD9001F47830A7B1255496B7D323DE105436DDC980CD75404FA33A678C3D98
302E764EAB7E5F6D5A46EDFBB77EED0B833688C9230D9D5A9093C035173CC4AC
1027F7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:50:41 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 163 /multiply put
dup 165 /divide put
dup 197 /plus put
dup 198 /equal put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F909707C0AA8E88898CF
1946FEBADD822804C3319B8F8FC6EB7CE96C596A8883E67BE54CB8FBE9AE9AD8
6165178CC031B3D1DD0097E80122D38E061601D78E106AC6FCD4E63C37A46924
E6D0C55C32045198397AF3B6747F4526427F8D5CE67A2FE296BCD263C5270898
62BB6871E51A44019D917A6E9E2ADD7C22D919B253946AD5B40875196296ADF7
B3EA4C9E940DCEE809650E9CEE1C226C215D5825E4A9FACCCC354D6996DBA8CC
7EFDD3FEDC1E84E2C9D9BAED3C98AE4AE25F5A21A5904AC7D0DFFBBAF61B24CF
781C6711806A527304A1C42F191B06BAD8D668BB517A7D6DB9D7D1AADE6013A1
42F9F77BED68BDE5FF1A56EB410C9CA573A58D2FD33291F604A1BCE4EB3FEB1E
44893636C3BC948482B71D35FE5C0FE7C09340078662EB07AD4756D6E4DC7610
CED2638D50B90DBFFE72D7D59766DF751455F3746F8DC7FC34943E8227EB3125
E0C5B001AA2A9F6448096E7CE48418F2345A6931CA901807109A388A9F76AEC7
0AF9405B22A3AABF925AB6878EC6EB477C6A6926A9ABB9706DD2ED589A3A34A7
E196FB969061434DF37B107E8E03D27B3C562601D302FC8E19EFD79885B3E216
6A06A8A89CFE7F900BB88AF77FF383399AECF4C812824AACBF8850E96C110DE8
93A38DEE5BE26239
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CE18407902FB88F631
211565C71652273016BF4C18DFF5C743B943338D442F565DFD196AC27327B183
14D5538860737A5DB4843C64ABDC3BD49E68B195128828C51F1913FF91F62FBA
C772DA4DE386DB5A11549F6616E7FCB421EA0C92CA95CCD6881B87CB00A1CE8C
185EDAEBFC8230B40849C226DD0945788D629725B2D8E2FCC3C2AA988A19EDF8
61A810A30D5E955120D1DC439452087809EBF90CD0A898E021176A17492BEBF8
6CEE0F3B5CF7D0350614D6374437B98ED18F4406403BD9CB1131871041085662
FC5B8637D04DC7898E0A07358DABE69F2695DDD4640171613751BE9589962C8A
DF9CA070FF3ED036D5858CFC3D7E5E8322E2F1C8DE42D0C406A82C58695C7023
AEB48CDF738452160AA971A184762307884506FC6FFAE3BF71A5FD3006447E34
45C57558D185419AD0AE840DAAD5B85A2222D7EABC13B761833D1484A7F45ACA
84764A0FF31B821B667BFBA23FDD5D7E3C266CFFB3093942A06A4BD479325132
12CEB26127CDFF92E82A77AE7874BA287ED653FBB59A8ACD6A658343F3FD1C97
768AA1D6434E049006FD672209A68B15240E7E4F6A352AE9657DD4531FB4F940
0D289C13916399CE2D719F640DC16581D0355291BD78559AD617852FB83EB064
A1350154C6FDE525DDA12B4084AA4F2BFF4C5F5EE0F40D261948827241F0044C
4BB9DB1748007DF7309A412885B8C5555EED1C3A6F27FBFA72E80897A927D188
47C6B35C477ACF1CC9BD04C4512B1EFC70126BF5B5FB0D4143818BABF7B0E297
ACFAEC267AB15CF3E4EDD509A45170D58EBDC2A98611E95A3839C3EA348CA838
B3A1CA5AA2D18DA69F95049910BF54017FDE0B8736AC99F15017B2ABA6ED0156
26227FAD9C47B0218392F27E1EC9E805681182F9107571977120EC53549A80C8
0381C7005CF2E66A4EE9E73F9BA8C8459393D844E04A0D026205FD26C7D9F6BE
F75FD4FACE6AB896F8A6F0F131C588712A2E1DB7DBBD5826714F15187F8EBF75
7A498448B64148ABC2C68A8E119404433E9E75ED639B05BA781E0A454518CEC7
399BA7607892F94C31BCA4944782B822ABCAC412960C8DF8459F1AFCF2836BF0
15C1F9C793A95A46C4E635426515EF0693646CB9726C53C470A7329477D58B71
2A5BE446EE0C6777AF6CB2A420896C780018E25F5CD152DAFA905C6F98A41231
0BD7D3851B3DA54CC2AB53D6C2A619436287A8DA5FB879E795CF08F22EEE883B
DDC975B8A1D8AC152BC0FE8B26E35BD90393E79917731138A393A1E665ED68ED
A818B81260A3AC4D30EC4F6B8B00479063EDF3422AE12ACF74C3678D6BEE433F
F850FA8EB3ECF9BB2B18D727B4FB3C730FC3D251C31AF853AA3AF3CA21ED4C8E
79078AF81467A75E140AC1C7CA421B81843646B877AF1512D518A5FBB16ADF7A
BA61FC719680018F369F473669F6EB450C303F2518E05CFDF6EBE5ADF45857F3
2391E900B6C14DBD5769EE774B6CAE5930FD5F638B2B71DF17D2E7357992143F
57C77E51E1E4C92CB55A2828CDDD3AD6FC34DEFA73BCA79011F3473C792566E6
44A9E1C59F5B70BD1E8B7AD72AF935B124914F2C339BBBEA5C7BE5C3E0170389
A7F7895650A59D322D9D9658918F8C650DCEED3C3DC4BEFF4667FF9C8A8D560E
1645A2C9FC9E8D136267386D6AED0645754A1D5A3BF822E40E0DC7C268E27B3E
FCB9B97ABB4432AFFCBF37F6A2DE9363FC7DC75BDC91EDC4010ACBCB6F9C5C70
D7B1F73E41AE2CADC00767B180F4AA0999D70524B1A059AA16DBED49577F6789
C3CA5445D5B4F437140F9DA77BDA7A8779A9C3AC9CF388507EB1C5912643F7BA
79E5A7E3BF98BE1CB7DA81FA9C149F6A812016384F65428F6C7FC5DE60602686
1AD5B6F00BC34D2A0E4E8F083C961F2A8A6A6F5886A43625F40446181DAD8C89
58440DFDF7BF885FCBA160DD5E6661BDF8AB0A15399D22FD55A01287AC96E605
EE8604E044677A51F95240809216E74E0E180557748DBD70A5CF9218D360189E
43C9A07450F9C7257D051414541D9B2CE33A99E63EB8AB88785DA350DCCF2228
3A003B19B6C7398EDDB75FBE3D950F5695FAC8A36B34BBA45BB17C47AA093BAB
6490815C418AC75D3DA2E5BA9CE76759E1ED9A8DF543E067CEB48BDFE382A315
B8154AD3267F874D890DCF1B14617CBEE762A04B55247A7240C3FE08A28CA963
85A8F87EF82CC9A1AF0B50ECEC9A6197C411E3E788DE77111EEF0794CD5CBE48
C3E01C206DA45C4A7C841271AA9C8DC4940A7282FDA507C3421D42455F034199
5C38E768123B744A9BE19D79D53D8206E8311C4337234763CC9FC65218ADAB37
C2C9D65CF49EE9659C586A00DF4F6A10F0B2118915B8EFF7714DC13E963598B1
82F1FD2042FCB6FD24B3BB9D8CF3F938AD3B4DD406F83536C50678B9214DDC13
87C45AEF271B2A97063193592F2041D6540CF6FD4DCA68502510F8EA68936B1D
829EA0331051D0767E8E1826719F94239698529A4F261AD82C47DF3454CB1193
C35805453F84CC6C0C0151D97D921D860DEA566A9BB4585865A00F835168BF1D
DF7D546A31E82EE9514BF5617F74DD21E068D5569F4E0C77D1DD2C4155898A4E
D81EEFC78E055F06F1E7DE01E3D5CDC86F00F71A26E7169C246BA032B327CD2D
820F5F974E4749A8721E72DC54880B95EA17918E915D6C30DEB1309E9FE73843
BEBD4F787A6ECD2F9553C7593DE76A88A5AE375E3A2E16B1B19F848987CD768C
D3418D71D10A49BBE538547CA46BD1522FC46F9050A0D9B5BC3E26BF8563FF81
AEDB596000C2C6E28328C263339FA5F221FF4D5355B203EB357DF3C02C15E5BB
C541001F20131D96CD82C3E3BCA81595DF751FF99B8E8FA2C1225FF0F86650ED
33B30F5081CC4B5746D7E8377968133628D5B9295340BE2A120162EE8B3F7CFE
EEB699048FB19CBEDA4980F86F7CC1F8CC9EC1E1A3AD4684109D6411DD58C4A5
D4703A4D7D411C52FA6620765B31665D840B85E803ECABF047450C5F1CC9CC1F
1CECAD13B23F47C3E9476FB0F676DE57D6326F9CEE7DB005D835B04DF19A62E2
3446F66F88FA8F24F9FF1A9FD7104F8612B0D8DB88F2BCD7A435A780403A0BA4
1DD693AA607A9CF032A8B096A3A59DF01463DCCC9019329D30AD5A2B83CF7E2C
5E4DDC3520EC7B4BFBEF1E1A860AF00072C465538EE06E89AFBA30184C69E3BA
836D7EC7337791DA2C0108A62B3F2A4769654FE5088773668ABDB27598E5EA63
1012EBF778828441AC98E80F6F2BF0458D2839378FE4C3763C63BE2656873684
20C94D13D415C1560EC1A23C20BF3365E3777908625E1AA31B3CFA112EAD87E0
45AC58400E647968BDA608B659705098D458288A6BC32E6768A70681E5783F91
AF3EE82DDC0BC62EF7800E6676FA464BEBCE7AAD6ABCD95E3880C1D4A60A08D3
64341E0163E93778DFFB58F6CB95856B01E87207181EFFC96C2B244BC71E85F6
64355B3D1870DE87305714CBE2709848C5FCEE650AEE83A4475CEAFEDAE0D2F2
BEC194132D54A5A908B5C0AB14FB9BBB31664C8271D51E04C03ED3A5C17C7089
4233B5A7EE2572C1581B35C5659572F9FCE01DB7EA5BCA52B690F4D68FDDED69
723FCCB083F2445E822AAF698BBC6010940E1415953CEEA1FD614572BAD54FF1
ED7C65C9910E9888DD865350C762C83A6DA63D5E7AC3BA11E896CAAB0289ECA4
668DFA20E20774048A5AD1F663FB2E28EF82570719608CDD10DEAA79E788ACA9
B0683F0E49279551B1E4B709982D6B98C3B11B3054F3C9BFC9D2EA0542C7A624
7F7719F13E81916BEEC1668C8E7FBB4DBD82A18D496878066CEE28B579D9636B
6281387BC7DE840487F71A36D62C69046DB2D5F0D2EBB74D20B8064FB7EB44F9
5EF16323FAA55A8396EFEC28298FA6325C44D3E1C48CBADB1212E162BEB008B5
2B2D1B165234D9A91AE158BA172BE3385362C273D4A01A3FCEEEFE39188DD939
F05DA6175ACAD1AB7F466601C44B673DB0C02BF8F95AB9B462F79771F5DDB909
BB5533474AEABB0773F9B0A1F30CAC5A3D6F1B6C38D00C4149B1867002E14174
9B470B5293FBF4CC1A24ABE7E22365D1F8E9D0322B08C61070B45488F0E70617
6C8B83F96AE24D32E9C76E6B5908778F0097DEE9BD49A662D2882F3093FEB549
6F9D7C590021AA644B791884A555CA0C88EDA1CA4AD405275CE8F0D3BF4A2154
6E77C5A897E66E6B639C37E8E4A9C453279987D7069D8345E3062B6712C53894
4F5C5266CBE3728B6CC76E60C6A25584F9845D7927EA7617CF92274001003C18
27E6A18BC898F26C8AF48B45BAAFEFBFE4CF36EE9CDBC3C2F74649D329237064
387ACCD3F7355899D90D470BFCB0D05A5AD027261EAF606715EE32FFDC872EA2
E948C422714F070388531C6939909D5294C2F0F8B647BD74F4F3C501C3D569F9
BFF91D9D898C28FC99F0DD770942EB83A2927423DDF2D543CBEB81BE2D2D7176
C92D4F87EF56EACA79E21799DC7718C71EAE97BBD3BEDD819667816FAFDD244C
0E7A0CE5642D01552AEAD25E9504799EB9F13AD2C645D8959C5D696D420BCC3E
410319705A33842506EC5E35EB78B9B080CE86125DE58954344F62115963D128
7DB8D742D6AC7FEBD801EBC2166A088B8F232020290A1A7982F4BECC308717C6
AE26B1DF061FFD64E737AF47A894EB4F4C53BAA0FE28119768A161F8C244EAFB
CB63B91DFB34A8F1EB374EB3E0B546698B6A20E5DDE591CB24F266CA40FAFABF
D5A8DF4E92C4CD36511B89FA400DB657832E036DB8B5C54357CD7CAC1B9E573D
B473C0606C8FD9736545BFBC19227674339C79F35469A9DDF5A29AA96B5C8F5C
F3CD6A06B7A32A8770859B94B170F45B40F4C169DB039C2E65C3E1CF5269824C
1EBF4A6854492C4F36A0621D6F36CB1B93A8AEAC570E47C61AB9BF45F894BD46
6FA0E7B290025C06FFD94BFF471B4C5DD85C0BC7E0F7819110E6FEDED3D4FC76
2880B58DF90BFD3C1E27BC4580135B616405C655CFD1D12CB2839DDEA056A827
23C56F76E3568310D8D9A6BD66517542BE476A844B59A4EF5EA889862E07570D
513B01A2E26D2E368753BB7A09A262E516E3D1A202580A265ACF628DA7BF6988
73BB51A83E52F135DE010A9DCD978BAF325E00CE5D5C1A0AE5704C50873969EF
A04D3E27F7F4377C5F6D23FC0E90F03464F1E5AAA05720A6E1EE26E4F97F0E7C
D2B15183F581A46EBE4A677874AE5B3C3D81DD390F68436DC9F84B81FC646BA9
09EF92C832D3DF3B478C61515665DF2BEF1FB6302D4DED3950F55A7B3815F76B
DB75E9FAC4C8572A5A86D80DFCEDC861B7402EF8345AAA0EA77CCF43C301B4F6
5232EE13422247B4A991C45634B44538E8367A8ADF9C33989C7E3E2FD6BA28E7
C99EADC27273EC391D3FAAD1208CBBC246E1F683EE4C2E93C34CDBA6BB2FB795
776948AD3B534908FC091FFAAB1A65B10806DB07E74352F60FE3D7C3CD2FE26B
E20AC5F9A9A99551478E8861B68F1295356E02CC507E81F8AF7B046D11F67D93
17BA301F7D3CF3AF2307B191C571E5CC7EB30C4AA58E05200D034FC3A6252B39
AA9D967CA98D2A8E389D91E225AF3230D72F4DC185610905562E92665A49B88F
D9BC456C1010865BE434333D97C0E5F91561FFBFEA757ED8D9E8D30561EE8D84
B77C8EBFC881A40601EAFE3B94681F945E117287ADB4C7CF0424F685FB94C0A4
0ACAA36B54A2EB3A3D18D29863C75567C313D297E221EB7B3A4A9F9F19726245
666A2E0C195326DAB92E0D77094567C88BE2A43309F70102C8091E3E57EEC221
1D5D4038EC562FB8C372423B426EFCA88E4E5E92899FC367C22587FC1489B259
0EF307E3E82440A0294A0AE63BB879970E71C51C6E4B796D7EBF1683941D73F8
79D2C8AA4AF19F226BF3E078103BDAD52CF9CC77529E79EA447B94DB5C80DB39
4CBBC16C8D8BF16B05D2D31C016B7C469D938A8F6859DBAF6E4B22BA7034A5CA
1814EA7DFF476840F07EF108C01F544F446C778F76B4B84EC4C71E91EAAC3F66
9435FE8FF71288D3F4A06EF67FFF02FF592AFF7AA54AD78F113CA9D463355BF7
7FF6700DB4C83FCA0947C42378E0B934A71EBD0B7C6F4B3E72DD4B8CE14AB04A
B9A370A81D118ADB0A3272070103BD0C28AC5A885463B6CB9D5F1771C25DD405
CAAA6D6A29FB1CE5EC69F978F449CB712F9FEE30F30DF34012DE2D6CB5FD306F
42A29A7CBBD7AE5F7D32DEED9B4896D19430E3FFF70DA27FBB45357ED439DDC2
F5298AA3113D17671E15780706F72F3CC6B7B18B68AD88804CADC932BBBE93F7
61A0AA4B92CF90EF2AC87D34B6404751ACE37A02D56D492215D2F2204DF72CCD
4FD69BD0386D4FCE4088E1F0B8CD4C878EFC95656ABECF227A650181E23BC813
B7DFCFE1544DBB78C141535DB14A0D5004585BA211DE2A56E4B15956AA2D5B79
0AFDDD209B70104DD63E97C5500112CFD20104D4A69C2E37BC569396194C37EC
B1C66948B215A9B4D9AB149FD3DA4D2FC79A2A440C82B3BB00CBC0F8C8B4CA45
06F122CD157327FC41DF9988E8E129BEACC5DCE371CE3DE0BF7854BF482C41A3
8F0A67AAE04D408557841AB681AEAA9A6706B1230A3F2FDEB014420EF2C082A9
270BF7C049F57718FB4FDC94CACE332A2BBE1F80C6115216D8AA3510ECC51125
C2CF812CE6C953A9185381872F693579FC078449AE8C8AE9FE5AFDF853E1023F
74C359FC4813460C4E798BEE055D9EF4C45B087BF13CA419BC2D333913BC1D6A
6F35605929D6D790A3722F71E964DFE2575C673E66E24FB68003BA14073E15C5
E1B3C64C0DF157E4A94423119C9352CB5EB8F2E3B0A877B1055CBFC4E8EA63AA
3986D050623DFA49D329062C9BDB0FB976E5CDFFAC34E226E38CFED3B46A0F57
223555F73923CEBD63655220E261DF2CC78DC0B71FD9CF4DB2D1E1A0E9700365
6CFE9320EFB033A077B05AC1D8948FAEB4AFA2DE7B75D744B31B5281192A35F3
0F2573D127CF0BABCD339C4CFB0E1828B12A9F987C8EC41C300F2C6D3EC6754D
E03EB7F7AF1F8DDF98E09197320152D28D92C61A9D4A3938736CF32569B56CB4
972712340DF7488706C8991119D91F1D60BCE919C25BED17769582D9D1A63919
375B67153BA19E77E1BC0FE7E3FE9BB56C46CA36C01CEC90CFAA907DAB21624A
1D5F2F211FD9172B6A9CB6FE38C4BBE4E100ABA156F8D58BEDF8287053666C0F
7C7E28D9AF37057DA0F2769A12033ADFEB502CC3288FC5C3F780001323A2D9B7
A24144860A67A3AA5C639DABA19292539307F7A4AA5C3138CD657FAB5ABBBDC5
2DCBDBF22B7B8918FAC6E77F6A08045E168648A8833E0B74D89DBC02D8CAB8D5
1ADCC65660ACA211DC8147C0A7A69FFD3DD3FFF69BF0E7C697768FB12E62982C
FE7365C3B60C83A0646A4031ECC3F64F0FF19267D6842E352E6333BF2694D9E7
1EC4088836F9AAFE4CD039BB43204BBE146F94AA1EEAFD82A9516D75B91096A5
6BD7462144DC2802C0F0544CE29F39299B9AA3BDBC5FEA3041DEB442289E1EAB
7D31C12CF7F1947D99C0D7B7FABA2A92F8CBD5BB995A76B5A3537D1046CC32B4
88E3C1EF071BE238E7478311F079707A1A9DF6281F58DD7BBCE5274F718632BA
C75A8A6AD1533FD04C4B99653EC038B03D92674B74BD5FEB95775DE075ACDA01
B5AA75C279E5EE45D0EBB74EEB0C77411083C2EED45D1FCDD8437F7E2A1243CB
87520F564E8FF997575206BCB650C6ECB7C09587B00B65D71A4A5E6C8CFF2E97
E2E074AA94EF07E0D7FEBB97BB806B729EE39ADBA4BBB0F047C5D8AC03837D3E
59DBDD14BA1E7D0BA2D393782B9F6500CD2F6F747EC0DE9D83A08F874D9E1B16
5315DCF3FD645CA54C678196F3F012E6685C40645B473D6BC803C4C6EC273B5B
8A84C5D272C4FB57296FE7DB38A44C491529D31F414D618E3C1CE86BE022CABA
4ABF9C9A6E54E78364B1FB4C6BEE2A7A341CC784C115BDFC1E021EF3E564567D
C339315878DE086247A26425AD080195D4F04BE5309885F924C60B5854008B0D
5B8F93B6C6929BA7851BBB3C3C240739CF57D2FFD3EF96073070A155C03DDD69
4FCA3B171E6A993B1F3A8B8280899AC38E4873F69C6D1A29705AC413A867F8DF
1B9E0DB1369349F751A66079764CC25ACB501F89B937EEE43AC6235DA661F817
EA365A879543EF0158CA1C55D420F53CB668C4A833E05724FFF691CCEDCA007D
1732FA9CCAF83B7D31E3AD1E4763037655DEC47AB6B8BC19E03DF0377A01289E
3068D4357C09261E785F5E60EB75C0CE527100E0762B7B75A92B7E6D6CC2EC27
4268AA82EA7F3C938D605AAC06AED855D2356713E60519379BC281DC6332B023
32F0DD3627771E180E38D919C28A9E6CACB70C5FA5BA17CAD0C7CE3DADBE885E
484B64A8890D1E287E005298D154F8067711C1B55CA73C055F8B2A65BCB3BAD6
6B86F75FE172D9B1B912AD93832085DC6DFEEFD47F43548A4A29707F50BA71D0
C7D194337CD4405841F0868EEA52E4F9C7D60C3374BEA00E20AAD0147814BF27
FAF12A603AA2DCE90D83C048DCC04133C40CC61F13427E0DA7F980556F37C1FD
4FC1AA6E27403033E2AE73E6ECE778CE28F8BFDA175BB952555B642D686CB0C2
7C5B20A9A4C763F75A31503C0A39AE6326D3460036FEC0709D6C38E47A3874D4
E60DB98E9B51FE570814194E9447DF0548FD97FBAC5920BE7A0C27B18700507F
4F6BB623914A6596BF02237EF2F4E01311B8C28E917935F900B87805FD696B40
6DDB06808BA486D922A68615B1B71CDE7C79FC32F1E78D0AF2F3CCAED7EE026F
19B1B061AADD8E3E85F785478F9A3A409EE05E734B09BDCBB7797FDB18A701A9
DDE6BC5A0A79FD93C690BBAD035D50D1B73208460AAB1B19D1B388BCDE15BF00
36AD2454456C6920FB12CBF6C40E3FBF925BF53DB2C28B6774273C951F40B41B
F660C7E152CD07EC5B29EF824AC50F57FE1252EA2B368FCD53E8BEA9E400534E
21DD69AA906AE0DFD506DC465AB60DE4A7BD941083C2A18FDB8999A8D5FC08CE
AA8F988D672F4E6FF68923F5C29D2907B59F800A7E8FAD795BCB83023D233726
113ACEAE5A69A742C6F5871B50ED6054923188624DD19D1AFE2AC15AA35915E7
80528707C6813ABAAB8E2D307449C3AA3D40CDE8BC053D8C5D910B2AA5380DC1
27C1A6CCE7AC5DF5C4D23E8DEBD28AFCC4BF6961DACFFA3AB4BE9DCDF443FF09
61F0A258E34D412DF23AB6AF7FC4E0FE9A3BD7781B4461023C9B978671AC30CE
01CDB83CF662A413F2418FA6F805F12292068127F36DD18D1ABF3DF9044EAC8E
745CC5DF448732AE66EAA4258C0045C6FA90C9D8E8A4430775E4E5C647318B6B
D2991CBD01E68380144DD5D9228098D4D33200987764C5B7017A8DC6EC1AD70D
9CEC4FA3E0C0DFB17C31C470C363DA28F3203898E78F891D9850E3EC120210CA
13AE92C520FFA141A01DEFD54B921A0CF7D2AC62176945A9454B6CA60475320B
4A2FB4C310348DD73C1D3E0CA9DBDCB7828C16E2B1315061E08106069C6862A0
0FA6FD7030D89C1E0C7BE9A32A85F323A6636FC07B24E5D528070A0E6E45B5A1
8478E532AD6CEE8141FD7FB5007C049B3577002E8F1BEEEF87FF25A448FBE446
04BF2F8211576162EAD0D4D06D60DA52B9EF2546E4D80B5CD18915848B868611
FE63C810416DDA84B9A77A4D4AA5B30D71E2D065D6661A51A610F5B169A39CDD
2282450FF5D501BDF6EDA373396F4BEF9381851FC2ADAF4484979D1A6B40BA35
0C9D1497290B71446DB39698A53F6F7EE652220C5CE0AE698A3A5896745540A6
F59551E030F44776078D9877C5D9CA00A9B38BA61637DF5AA0FF6B523300A074
D50720B781A0700DC6CF164B797A8A1652FFD87D6F032F15A90D119C43CD7FE0
68D35C37A1339AAE3647BD82A18D496878066CEE28B579D9636B62813B8D761F
A1444DBD646E7062DB0A99173E6AE916B06D9AD26988DC97B40D833343743003
EB357DF3C02C1E21CFDF4C0C4FFBAA32CAC88D3BCA3F7B1DB6FF17B171F35909
27C3819E9ADC609D7C53957DE5773065682161D07EF94F59498B6F9E20E2D62D
0E47D74A7093BE5FA7CB5B08A95FF382778CB022FA0CD8B0AD7A4B59B724BD66
5657446533356ABA56D5637DA0A2361CA16F2E2F8B1163F7B7414BECE14D4104
669F13199B68FCBAADEDBB7F2BC20DE93D1072811C929ECAD4A6053A994FBC4D
CA701131C88D8F355B2BDFB8D4A19BBF611DBE0A37CEE6CC1D7E3BF93AA84D22
0D2EF9AD549FCD17FB3103E5259588F5EE57E80132A54D8D3E4585BC6306E52E
324E00E190581DDD1537ED25BF2A05BF8FCF3B97EE414683BB714EC451AB5F1F
0D28970021C739A2ACC5396B69BC8FB250AD0C02D2CA33597699F034FB969909
73D67A517CC0317D3312073C7EA122C7CDDF1610B2DBCFB388A7514E5EAC294E
182359C7920974F6F726BAA615F697ED01408055A82C51F69B2FA38AC5A86332
480783D5F71089C3F94B6EF8D946AAE4616638F4154F18B2716FE0AEF640C8BD
E022D707763A3CEFDA1360E320B49CAD1A5E9DD795A125F608E033B3C91758D9
B29E2711104DDD7FDB3F55E1C5EFBDF9A160C90B12E10F8D7B4F5B6C40CA90EB
DB90B1167333AAB82D3FE9CE7D68F67C72B0855DF9E73D86729847DF88082996
9404A6C557F0CF351DAF847626399CAA10C3AE38C42A96FC81AF6B019897D013
133A0BD66F6403C6A88671D74CAA6887AD9FDB31B4D4445DF80BC11B82BBA2AA
FBF01989F49B4CF61D4B6429956229130061A6581A49E336750929957850013F
B3F1B04766693591F60B0F3194DA6F85C9F20A2865829200AE1EFFF0BF941EC1
DA0453B51B636BEEE4A4A6A811A996090AAE9F679736855FBCBDE727ED6A8E4E
5C373769E6B9DB3E90561FAB2B2CA2F31C489E8AA679228A6DF4268E1AFDD0CD
A44DF3E926AE8AE9009F2E86BEF2964E02D8275E5F02E785BB36D8943C418BD9
2D7BC6B1F840B33AE6DD422B47B2C4E516843D4134B920DAEA5EA0D18DF926B4
17D77EB45DA5AF20BE0C02B78E9D37E4268D2ABD63B0D5A0A774EECE0CA6CE80
DA576E003F2B8FE56408389FD1D26913CE55BA9EECF757E3B5F1DCF0DDD45CE9
78AE145953100566039DF96E7F288458EF4409C5EFD5A1FCAD3641300E205448
3D446E8A1F4DD1510066DDDC6986CCB5449D14BAB9F71497FB392C60E40979EE
95B20F5554DEE350E23253920D11187D512DAD1E9B2A5F11EA84B4D975920C2E
C7B381695BB10DC043CE7B7014FC941CA9BC01483D8DE50BA88E5F1C5CA9A026
6CE0B149A2054E18A02ABA38F565560DBF90604A7A931409B50C53358A2CD7AD
380EC84A3F8143BCB07FBCF001513F88F16FAAFCCA28D665B6A619D54C9DE3E4
D13FAA3755A3E61A0F236658909ABCA80B293DA1DE9CD3808E90DAEAF2FE7F2A
A52B991F71E9C85075ECC63A795ED34036C7420541ECD617BE51757DB8883B70
85CD302B68E245942029B2255A4CC9C78A1B48EB84088D6FF07AF80902D51901
2FAAAB5E2837D1CBC12AD7B5C36A0BA03EAFAA06379C12C788A05FDEFABF3130
B46FCE9FA468B6D6DE4915DCDB8D5473B9E2D37414FC047249D37DCAE1CBD841
BA85E5E5158389E8F6DC195E944C615C0C04055B108CAB1D4492ECFB3F485EBB
50EF5B884141370488019A7CF67CFE6ED0336363E1B56C6BE63E29302491E0D4
96EB2753621BC3D03B0C109C2D27D291FA4F8FE71440102BFA4FC35F3E4266B7
D327036C55C06788274FBA7E3AB8392A02EFACD33817D7886050E7E05462A9B2
C86496101CFADE614137AF0367A063CE6B3339D635426DF9295CC349484222A9
FCD5027A5F84AE6EECD8C453FBB59A8A2B5FB9653BD3AAF60F5EFA11A7A51A6F
2347A6031D0C21299E38A90BA451103E26F8366D494EA0E58EB48F2EA618E11E
1A53846346846ED6FAA557C3B591C78BD2347B0E0DF737BA0071DA81C2F5C8B7
47F604748F3F7BA6685A1AEBB758B806D2B5784E84947CC7F1071F7A77D60A3B
C14E81C6E33774CFD9FEB9AC306C7571C84429955E779F2E909497E6C7696AAF
BB7724BAC74DAF2C23BFA06CB95EB5FFF9CCFD6764BD7546C9C68F7A71C70A97
84447B36387061C302EB5CBF156AEC688F02A736698A884F7506956732601B76
5FF70EE334272D0C07C89BB0BC85A6017FEC8EA3479CE729913F71CEA58802D0
CC5BB2D00663FD26C460F9A3D147A2D7C0D61800DD59871A304CC45F21CC9BB2
520122789BF6650183F47E4041A458BAE7A92BBC06DA85E7CCA8EA2BBD00FDA9
AC18A33CD2AF9A55D8A184C401AEC31AE98C5EAF9A660127A881FB610ECD0E93
122FF265734EC635E3B138B2EBB2E6F7CD413CDADE70CB522BDC9D92DFE959CF
33FB737024836D53411AE2AA68D6F9FD56602F61167829D725834AED92288C45
315DBE3D9CB3B30AF9647AB9B9BB8AD7FDB6C54181395D681A0598BB421575A2
E84A51D90B4F999221FBA120974568037214C75F00998A3799300092991AA7C2
5136D96DE058FAA82A29D45B54F4934978045CBB832286115060D33CE3DA71E6
CB7EC1DF03F5344FF46CC5A7AD708CE64577DBD3AF55CB4A54DF4ED9A5A954B5
CCA7A6631E79A4864FE4D94D82D1B36A1F46140F33FB0CC01215981C9C4B6301
54961A065F86BE7CC6E2F079E2B89DD4DBECD227D14F42C7958A3F7534AC3E92
1946E47C42E5BA0C077D0ED82A2976F271B559740F6EAC71C3E7AD7810E94217
480B97BD905ED9028B4B913F075951EEA6A5A384EF0A6B73CD190D57645397C0
243789FE2FD81C38F18BC1759263A749260EB114611E88064E74B56B1637ED60
86F7B5EB613C5D17AF33A85DD21BDCE585BA2A295DD196E6D1CADBC4429C69ED
96566A9750C770EC6F42C1CA7C89EE4454B6503864BF9F92EBCD39F72CCEE812
5A67CCC5A4C1097586E6500BBDB4BE4F17DDFCA76D1FF2E3E9B4D18BFB66C238
26DF9D8CDAE0888AFEB67499D3702464ADB62E8EF8EA32EA717922C7A23114C9
A52A3CACC81D21B690FC8D91D3858D02F30C7082E95C9B5FD057F979072E10E0
C0983E4FC9230D94A3C5AA2AA1FC4F9A03BD8A07241574718F3403F6AE7148E9
F2D55C23107508F2C41F73ED516BBF3411F09AC41D9EDBA4E97D7C3965A7ECF2
509F6AC4412A7C98D94F2AFDB7C58F6D899217AFF0E4E0FE7288974C85B2C228
53329748D7C08CD36F9CE345CEDEA8D20A5ABF54AE57C537CCA735C638E4F39C
320251B2A4F43DFC6580091774D62B637547C37EFB66BD9439BBAA242EFB3CDF
A0679D30D0A4D679AF4519A4B7595458F8F91D253038DDC2B537CEF6FD8ABE87
73D075C678923C1DD17DE97AE5F330D67400BA03A7D2805476059C56CFAB24DB
3412C32BD5AFF4C71C173C8E136C76F9B2CED0908DD95D06B749C3B16FDC0C81
529064BBFFE0D1286925D91F98F63AE9001EC99797C055B3338ECFAD4CAFE174
37917912DF22F8A056B48535A234FFE2FF7992E08CA5697E2B99ED55CA09B748
5D7A1FBC2C0901DBAD6E7563FFA4A3A5241167C89CD9F45821E94DA3FFD43085
BE8E7D98F47817D3C39C3AB45ED6AFAA3000B694B93AFDB645B691871CC26136
E323E7F77AF927F629059EB0D0281BC346649777062324C14D80B7890C5C2263
7E6925F85200778EB6A4CF1505FED6590C5A140F14065F917E7B4E8E56FBDED3
E663AA091EA68B34A8993305AFE4671D8CF4874DE4596BD59B082E618E020AD2
668D2276205346BC2DE22A55C48744ABFC4A10344669F23B7DFE2D6FDA1A96F3
B8348FC8799B0819075971982532EB5904175EF6C06DA4D92F9D21B80E528ADB
8E03A4102CF9E3EFE6A9066165A4DFB3FB835B5A318183BDE3D7CF0409DD8D01
D400A21B5BBC6EF268228D8F2ACF3B4C50F6C5CA520F1D7D8DC2CAF5A7FC42C6
62B30C315DCAE51D051F8E1787E53C5AEE521510DE57371D488537742F322D53
CF6BE02CED2BE0ECA2BDD2EC67BD8DFF7BF7D3FEED93DEB11C4BD5461B55C529
D11A199A2A4144694232C9CD01F29E9B35E8D02DE1267587488B10DC51725688
58C1750028F09FC9C89FC62DCDB142328FABC0764392F637A09129F131585E5D
DAE0C3BB84F8021AC1B75C4E8B2B78ACD22E11A64210C0D27CCCE11E6C0D441A
EE657DEFA44582FBC134288CF64C9ACEA9B24FC3A7A178F710388A50E5C4D37B
14E040AB23B4800AC733D773C3E4E1EB317FB49E3311D1F36E3B6CC738D68418
6DC694B475DFD40655D108AAC14ED5F864E733530E795CE5AC8CF0A548F5E22D
2544895465F2A0EBBD49F4F9C820AB042D24728F5E054251A6BAE126EC59B277
67F265D6CBAF5C2E539FAE978D61A4E8008654C907FEB945B0306724BB6EDC72
E82C99267C40CEEB723C79CB6B2C589844BAC51E80EE5F2CA52FAE55E31F298C
F9D4687D4D67088907A8F91B820B755EE51B866FCDA23AAE0A0B7A09553A4B2E
9978FBAF8D24469C41135711F7CA15D00CC7CD6F3F4DB0FAEA7CF3BDDD081C31
A66667A9AA20FFD3E7FDE1DCC7530124EA1F09196E9A6AD9F5CA9EBA51932B89
A3A750AB0DF7AA601ED1B083CB49EB58979805A808231C79E61ED51A4291857E
D303B94EA65D1F633F15B0F261C8D42B51ABF01D3BE31305C7FFAE6691AE55B1
BA682E5DBC04FEBC5680595D5A2336FBFE1BEBFDAB405AFC43510261B1500349
B67C7DD74C224308832DB0163F8C34DAE6F260BA4E699A3D8727D84E12A5E1D5
D5D404202CB913701D8E81A4FCD1A53F1FC76DEA20D6510458890587BEC1DA57
0F20FDBF971C32874BC8F8184FAB177F4BB42CABB89D6B7EE6D3E9BE9942CEDF
7DF32206C885EDE4D77FFB9934531DFC9BED73EA70DFF041636DFAD083EFE130
640B44DC59F8BC00A11C5CE2FD1869AFA3D9E8A700D073A2DD39112390D06DFC
42F28E0119B1E541354C59C4D4E0FD9F550645D40E08F80E78F3DDE57428526A
5957AED85ADDCDC93B40DE46B0B67308A4D110CA687F599578F44AA9748348F7
63B289541551B2DD10FC912E2CB685BFB149460C6D105005BD15D1F6586D1D61
3A57585E17577688B3745F8A7ED2E1145643EC26B6F03534EF6A19217025FC71
77A68FDCAA8E212FB151C4FC9743FD47D8B5E3DDD809CF9F48F0282054476391
45710E415940247F0D216678A55F8241FE18943998E26A5A2506DCE25A32F50D
803D78D75BAC99191EBA2028DD77714BF11CA214648E1E925FB8AA2FCB3EDC82
4E40226306682C3A4E2B889710F7A61F39555CC1E8411F0713A95518C9F47101
04C90937BB319C6172C6D9566CCFA2167E5EE49E300F733C7AA3D205513C393E
5748746138B7F8F6664D3C7616010430320061B34215EDBA301DAB02F7BA9DEA
E0C7696323C736A898C69492C7A4B41E6234E4A3B349D47A8459F20946BB79FA
42C12451158F75FC29DE9018B330C012D38F74EECE5FEED6BF1467F1CFDFB132
53235BDA9EF49BAE4ACDC2CF961F306BD4A07CA47B6AC500C4EE55205ABA8B49
B8C1EBAB4C9EDEA30C6F9B78DAF14BFD854A2EA2F3E7E463F273B096D05744BB
89A41029C908C6490D271B63CD9DB36B8C9C22DD9BBFB40063C2C3EA4D9C3E6C
8D4D5D44FEF75661C70F5BBFF71702681C01958C9F42B2C0FD11BE5F7832E9B2
26CA50897661A6FE4C07D1C2F5480719391F2D0352E10CE3177F9215B4F6BB0D
FDAE5580241C03E79C63CF7B814DD7FACBEB35BDDDAC7CA1A821BA3F00D125A2
3ACB17C12533EC8E9FA8443B47E53BEF9DC8E7C21187170EBFDDFCC6E6641822
5FDFBDD79D9105626D47E1E3EC08CBEF805F3B8CCA29BFFC26CFC66E7E467B14
45B11FFB0E0068D68ED292E9F306BF36E278938356D66F76D4709802FC5FD4EF
CEB9EEFD94F4836C63AFB0246F126244AF9DE90F34CFD180B949E6B901FF99CB
46BCBF553AF8E38AF3ADFA25BE59EA88812DB614BD8955B1FCC3C087D5D58064
EF9CE44C4968D2DD92FE86A880599BD830DD7454DB066AD39313E5DEE1740F8A
695483E851AD56B1E558B2250FDC40FB06C1A59B7D527897A4F1C29E0ABB46C6
F053D99109A6445C6CCA6B2097CBD907570114527F62D48CDA9772A3482FAAD3
EE3A92DA5C0BA3B9F1B5947AB65BA0DD199FA2EB9A81B0FD6CC0C588ED573C18
A7910E4F00683C0F3AACBB27F65924274EA2920542F4ED852B153D50E51AC1FE
0A8BD0C45C0731EDD40EE1B887C0D6497DBBB788E65C1EE79C2D77D8FD15BC35
980442380BD28502031DB5B1EDBC7A3C2387E20F6341361716BFE8D43D93D586
07A3817D9A3F6777A5D4F7C1ABA74D56C27A19AADABF122434A032CDE9BEB53D
1624D13E4623B8FE4046EC3001E115381018C25531540FDC6F6B8B368313102B
D21EAD2B1F28D36025E08AA47A1A60D866E2CB15513659A0A17F860AC1B0F691
05A80B3A11A34C590D408C318D525DC92CBF9B26D34317CCB68F1E14DEC7C9F0
52ADB8EC7AE61A9945AAC04E9D61EC1CAA94A5C051698D89022991722B81552D
3DDA8B5822388E7E257B083B934921241D9DE64B39DF46C8339E9B74357E5F9D
59EFF12AC743CA38E3819C7B6AD498C24511492EE799F5B1E3191F3F7649E825
50FDC9A85EBC0FB341697171A9FD000AFF9575B786D532934DE69E3E7C2EA99D
66A5966EFEF027AB7FB65AA23A7244692126008B76AC20F9188A21386E3661D4
0EEEF8D37B59E5838AB474D6B24F177F2A8D1823739A5D77AAE0453145AEA2B3
9BB38DC2106CC7BEC7D24B760E5DA0062F52781756CF419904F8FFB420264DA7
C5E84169B5AE73F8F4A0FF1C9157F4116DCFB0F976E599361841591A3FCC83F7
42C713BEF1DF46CF7B5AF7459185E3E48BB9F62D7631B54BC6DD1542E44F03D1
06198566DF8A5FD3DD4551BB467C551BA51BBFBC6665B7A3B3EC4641BA81E908
A41D426AD47D42A4EF58A065A80A8A1D4AEC197E483FDE5C5FECD55E33F5F375
B00B39E79E3077E85A474C5F8E12D7FABB674ACBE96558155E8E2FB691F2D2E6
3B99176136181FCC9D9B2EF9731116866D3DF76CB64D1939B7FDF05F0E5305C4
F49A3A6D45AE012714A8EE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (CorrigesSeconde.dvi)
@start /Fa 130[34 34 34 34 122[{}4 76.3801 /Fourier-Math-Extension
rf /Fb 22[31 115[37 21 27 24 36 37 35 38 56 17 1[17 18
37 32 19 31 1[30 1[32 20[35 26[32 2[16 1[16 4[17 39[{
 TeXBase1Encoding ReEncodeFont }24 61.1042 /Utopia-Regular
rf /Fc 151[35 27[33 2[20 5[38 37 36 65[{ TeXBase1Encoding ReEncodeFont }
6 58.049 /Utopia-Italic rf /Fd 159[33 96[{}1 58.049
/Fourier-Math-Letters-Italic rf /Fe 242[83 13[{}1 83.022
/CMSY10 rf /Ff 205[36 36 49[{ TeXBase1Encoding ReEncodeFont }2
68.7422 /Utopia-Regular rf /Fg 229[83 22[21 3[{}2 83.022
/LINE10 rf /Fh 151[46 5[43 18[58 2[43 2[26 59 3[58 50
48 48 65[{ TeXBase1Encoding ReEncodeFont }10 76.3802
/Utopia-Italic rf /Fi 159[44 96[{}1 76.3802 /Fourier-Math-Letters-Italic
rf /Fj 177[58 78[{}1 83.022 /wasy10 rf /Fk 190[66 65[{}1
76.3802 /Fourier-Math-Cal rf /Fl 57[55 55 31[55 1[55
163[{}4 76.3802 /Fourier-Math-Symbols rf /Fm 92[42 163[{}1
58.049 /Fourier-Math-Symbols rf /Fn 23[30 109[28 5[20
1[23 1[35 33 36 8[30 3[30 30[37 37 9[31 31 31 31 31 31
31 31 3[15 44[{ TeXBase1Encoding ReEncodeFont }20 58.049
/Utopia-Regular rf /Fo 4[46 6[44 9[39 39 39 7[40 36[34
15[34 14[67 5[38 31 8[78 17[37 39 37 1[38 46 26 33 30
45 46 44 47 70 21 40 21 22 46 40 24 39 46 38 46 40 3[25
1[25 6[47 41 2[46 58 60 1[43 1[27 27 1[56 44 46 60 52
49 49 1[30 3[20 20 1[40 40 40 40 40 40 40 40 40 35 20
30 20 2[27 27 21 35[47 47 2[{ TeXBase1Encoding ReEncodeFont }75
76.3802 /Utopia-Regular rf /Fp 22[40 112[40 2[48 28 34
34 46 47 45 1[72 24 2[24 1[41 1[40 46 38 1[42 14[52 12[48
10[21 1[43 43 43 43 43 43 43 43 49[{ TeXBase1Encoding ReEncodeFont }28
76.3802 /Utopia-Bold rf /Fq 22[57 57 114[69 41 49 48
1[68 64 1[104 34 2[35 1[59 1[57 67 54 67 60 12[69 1[75
32[62 49[{ TeXBase1Encoding ReEncodeFont }20 109.987
/Utopia-Bold rf /Fr 22[47 112[45 4[40 36 2[53 5[27 1[48
1[47 55 45 31[63 67[{ TeXBase1Encoding ReEncodeFont }11
91.6562 /Utopia-Regular rf /Fs 22[68 82[66 32[80 45 58
1[78 1[76 82 122 3[38 80 2[68 79 65 1[69 13[71 5[125
77[{ TeXBase1Encoding ReEncodeFont }17 131.985 /Utopia-Regular
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -254 -561 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-246 -246 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246
-246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246 -246
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Rappels de calcul et de g\351om\351trie)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -246 -246 a -246 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -246
-246 a -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246
a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 0 TeXcolorgray
1162 166 a Fs(M)n(ath\351matiques)30 b(\226)f(S)n(econde)1496
577 y Fr(C)o(orr)q(ig\351s)18 b(des)j(exer)n(cices)-246
937 y
SDict begin H.S end
 -246 937 a -246 937 a
SDict begin 18 H.A end
 -246 937 a -246 937 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -246
937 a Fq(T)-10 b(able)22 b(des)h(mati\350r)n(es)p 0 0 1
TeXcolorrgb -246 1120 a
SDict begin H.S end
 -246 1120 a Fp(1)67 b(Rappels)14
b(de)i(calcul)e(et)i(de)g(g\351om\351tr)q(ie)1045 1120
y
SDict begin 12 H.L end
 1045 1120 a 1045 1120 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1045 1120 a 0 TeXcolorgray
3058 w Fp(2)p 0 TeXcolorgray 1930 5895 a Fo(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -246 -246 a 83 x Fq(1)105 b(R)o(appels)23 b(de)f(calcul)i(et)f
(de)f(g\351om\351tr)q(ie)-246 -52 y
SDict begin H.S end
 -246 -52 a -246 -52
a
SDict begin 12 H.A end
 -246 -52 a -246 -52 a
SDict begin [/View [/XYZ H.V]/Dest (exo.1) cvn /DEST pdfmark end
 -246 -52 a 0 TeXcolorgray 73
x Fp(Ex)o(er)o(cice)14 b(1)p 0 TeXcolorgray 42 w Fo(Dans)i(chaque)i
(question,)i(on)d(obtient)h(la)g(r\351ponse)g(\340)f(l)o('aide)h(d)n
('un)g(tableau)g(de)f(propor)q(tionnalit\351.)-246 64
y
SDict begin H.S end
 -246 64 a -246 64 a
SDict begin 12 H.A end
 -246 64 a -246 64 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -246 64 a 0
TeXcolorgray -141 160 a Fo(1.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1435 212 1239 4 v 1435 311 4 100 v 1488
282 a(N)n(ombr)o(e)f(de)h(personnes)p 2302 311 V 145
w(4)p 2526 311 V 144 w(6)p 2670 311 V 1435 315 1239 4
v 1435 414 4 100 v 1653 384 a(F)l(ar)q(ine)h(\(en)f(g\))p
2302 414 V 268 w(250)p 2526 414 V 114 w(?)p 2670 414
V 1435 418 1239 4 v 1435 517 4 100 v 1660 487 a(Lait)h(\(en)f(mL\))p
2302 517 V 276 w(500)p 2526 517 V 114 w(?)p 2670 517
V 1435 521 1239 4 v 1435 620 4 100 v 1779 590 a(\214ufs)p
2302 620 V 435 w(4)p 2526 620 V 144 w(6)p 2670 620 V
1435 624 1239 4 v -38 743 a(P)n(our)g(6)g(personnes)o(,)j(il)e(faut)822
710 y Fn(250)p Fm(\243)p Fn(6)p 822 723 165 5 v 889 772
a(4)1011 743 y Fl(\306)1090 710 y Fn(1)6 b(500)p 1090
723 130 5 v 1139 772 a(4)1243 743 y Fl(\306)15 b Fo(375)j(g)f(de)g(far)
q(ine)o(,)1860 710 y Fn(500)p Fm(\243)p Fn(6)p 1860 723
165 5 v 1927 772 a(4)2049 743 y Fl(\306)2128 710 y Fn(3)6
b(000)p 2128 723 130 5 v 2177 772 a(4)2281 743 y Fl(\306)14
b Fo(750)19 b(mL)f(de)f(lait)h(et,)g(bien)g(s\373r)-5
b(,)18 b(6)g(\234ufs)o(.)-246 785 y
SDict begin H.S end
 -246 785 a -246 785
a
SDict begin 12 H.A end
 -246 785 a -246 785 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -246 785 a 0 TeXcolorgray -141
869 a Fo(2.)p 0 TeXcolorgray 43 w(Les)g(6)g(yaour)q(ts)f(p\350sent)i(6)
10 b Fl(\243)g Fo(125)16 b Fl(\306)e Fo(750)19 b(g.)p
0 TeXcolorgray 0 TeXcolorgray 1541 952 1027 4 v 1541
1052 4 100 v 1594 1022 a(masse)f(\(en)g(g\))p 2074 1052
V 102 w(1000)p 2339 1052 V 105 w(750)p 2563 1052 V 1541
1055 1027 4 v 1541 1155 4 100 v 1625 1125 a(pr)q(ix)f(\(en)h
Fj(N)p Fo(\))p 2074 1155 V 194 w(2)p 2339 1155 V 214
w(?)p 2563 1155 V 1541 1158 1027 4 v -38 1291 a(J)n(e)f(payer)o(ai)325
1258 y Fn(750)p Fm(\243)p Fn(2)p 325 1271 165 5 v 343
1319 a(1)6 b(000)514 1291 y Fl(\306)593 1258 y Fn(1)g(500)p
593 1271 130 5 v 593 1319 a(1)g(000)747 1291 y Fl(\306)14
b Fo(1,)8 b(5)18 b Fj(N)p Fo(.)-246 1333 y
SDict begin H.S end
 -246 1333
a -246 1333 a
SDict begin 12 H.A end
 -246 1333 a -246 1333 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -246 1333 a 0 TeXcolorgray
-141 1417 a Fo(3.)p 0 TeXcolorgray 43 w(G\351n\351r)o(alement,)i(dans)d
(ce)h(type)f(de)g(question,)j(il)d(vaut)h(mieux)h(conver)q(tir)e(en)h
(minutes)p 0 0 1 TeXcolorrgb 2575 1417 a
SDict begin H.S end
 2575 1417 a
-30 x Fn(1)2612 1417 y
SDict begin 12 H.L end
 2612 1417 a 2612 1417 a
SDict begin [/Subtype /Link/Dest (Hfootnote.1) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2612 1417
a 0 TeXcolorgray Fo(.)p 0 TeXcolorgray 0 TeXcolorgray
1528 1500 1051 4 v 1528 1599 4 100 v 1605 1570 a(temps)h(\(en)e(min\))p
2208 1599 V 127 w(60)p 2392 1599 V 134 w(?)p 2576 1599
V 1528 1603 1051 4 v 1528 1702 4 100 v 1582 1673 a(distance)g(\(en)h
(km\))p 2208 1702 V 103 w(20)p 2392 1702 V 104 w(45)p
2576 1702 V 1528 1706 1051 4 v -38 1850 a(On)f(mettr)o(a)342
1817 y Fn(60)p Fm(\243)p Fn(45)p 342 1830 165 5 v 394
1879 a(20)531 1850 y Fl(\306)599 1829 y Fg(\032)611 1817
y Fn(20)o Fm(\243)p Fn(3)p Fm(\243)p Fn(45)p 611 1830
238 5 v 688 1897 a Fg(\032)699 1885 y Fn(20)872 1850
y Fl(\306)d Fo(135)19 b(min,)g(soit)f(2)f(h)h(15)g(min)g(\(puisque)h
(135)d Fl(\306)e Fo(120)c Fl(\305)g Fo(15\).)-246 1901
y
SDict begin H.S end
 -246 1901 a -246 1901 a
SDict begin 12 H.A end
 -246 1901 a -246 1901 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -246
1901 a 0 TeXcolorgray -141 1976 a Fo(4.)p 0 TeXcolorgray
43 w(L)-10 b('\351nonc\351)19 b(donne)e(les)i(infor)q(mations)f(r)o
(ecens\351es)h(dans)e(le)h(tableau)g(ci-dessous)g(et)g(demande)f(de)h
(compl\351ter)g(la)g(case)3554 1973 y Ff(1)3530 1976
y Fe(\015)p Fo(.)p 0 TeXcolorgray 0 TeXcolorgray 1629
2057 850 4 v 1629 2157 4 100 v 1696 2127 a(F)o(lor)q(ins)p
2002 2157 V 118 w(7)p 2146 2157 V 113 w(?)p 2289 2157
V 2366 2124 a Ff(1)2342 2127 y Fe(\015)p 2475 2157 V
1629 2160 850 4 v 1629 2260 4 100 v 1685 2230 a Fo(Pistoles)p
2002 2260 V 106 w(6)p 2146 2260 V 1 0 0 TeXcolorrgb 104
w(4)p 0 TeXcolorgray 2289 2260 V 0 TeXcolorgray 2366
2227 a Ff(2)p 0 TeXcolorgray 2342 2230 a Fe(\015)p 2475
2260 V 1629 2263 850 4 v 1629 2363 4 100 v 1682 2333
a Fo(Deniers)p 2002 2363 V 113 w(?)p 2146 2363 V 1 0 0
TeXcolorrgb 104 w(5)p 0 TeXcolorgray 2289 2363 V 1 0 0
TeXcolorrgb 104 w(30)p 0 TeXcolorgray 2475 2363 V 1629
2366 850 4 v -38 2484 a(On)f(compl\350te)i(d)n('abor)o(d)d(la)i(case)
981 2481 y Ff(2)958 2484 y Fe(\015)f Fo(:)h(en)f(\351change)h(de)f(30)i
(deniers)o(,)f(on)f(a)h(4)10 b Fl(\243)g Fo(30)g Fl(\245)g
Fo(5)16 b Fl(\306)e Fo(24)19 b(pistoles)g(:)p 0 TeXcolorgray
0 TeXcolorgray 1629 2567 V 1629 2667 4 100 v 1696 2637
a(F)o(lor)q(ins)p 2002 2667 V 1 0 0 TeXcolorrgb 118 w(7)p
0 TeXcolorgray 2146 2667 V 113 w(?)p 2289 2667 V 0 TeXcolorgray
2366 2634 a Ff(1)p 0 TeXcolorgray 2342 2637 a Fe(\015)p
2475 2667 V 1629 2670 850 4 v 1629 2770 4 100 v 1685
2740 a Fo(Pistoles)p 2002 2770 V 1 0 0 TeXcolorrgb 106
w(6)p 0 TeXcolorgray 2146 2770 V 104 w(4)p 2289 2770
V 1 0 0 TeXcolorrgb 104 w(24)p 0 TeXcolorgray 2475 2770
V 1629 2773 850 4 v 1629 2873 4 100 v 1682 2843 a(Deniers)p
2002 2873 V 113 w(?)p 2146 2873 V 104 w(5)p 2289 2873
V 104 w(30)p 2475 2873 V 1629 2876 850 4 v -38 3031 a(On)e(peut)i
(alors)e(compl\351ter)i(la)e(case)1086 3028 y Ff(1)1063
3031 y Fe(\015)g Fo(:)h(en)f(\351change)h(de)f(30)h(deniers)o(,)h(on)e
(a)2280 2998 y Fn(7)p Fm(\243)p Fn(24)p 2280 3011 135
5 v 2332 3059 a(6)2439 3031 y Fl(\306)2518 2998 y Fn(7)p
Fm(\243)p Fn(4)p Fm(\243)2669 3020 y Fg(\003)2664 2998
y Fn(6)p 2518 3011 176 5 v 2595 3099 a Fg(\003)2590 3077
y Fn(6)2718 3031 y Fl(\306)d Fo(28)k(\003or)q(ins)o(.)-246
3143 y
SDict begin H.S end
 -246 3143 a -246 3143 a
SDict begin 12 H.A end
 -246 3143 a -246 3143
a
SDict begin [/View [/XYZ H.V]/Dest (exo.2) cvn /DEST pdfmark end
 -246 3143 a -246 3161 a
SDict begin H.S end
 -246 3161 a -246 3161 a
SDict begin 12 H.A end
 -246
3161 a -246 3161 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -246 3161 a 0 TeXcolorgray 78 x Fp(Ex)o(er)o(cice)c
(2)p 0 TeXcolorgray 0 TeXcolorgray 147 w Fo(1.)p 0 TeXcolorgray
42 w(On)j(compl\350te)i(deux)f(tableaux)g(de)f(propor)q(tionnalit\351)i
(\(on)e(tr)o(availle)i(en)e(min)h(et)g(en)g(km\))f(:)p
0 TeXcolorgray 0 TeXcolorgray 452 3354 1072 4 v 452 3453
4 100 v 528 3423 a(temps)i(\(en)e(min\))p 1131 3453 V
127 w(60)p 1315 3453 V 144 w(?)p 1519 3453 V 452 3457
1072 4 v 452 3556 4 100 v 505 3526 a(distance)h(\(en)f(km\))p
1131 3556 V 123 w(3)p 1315 3556 V 124 w(0,5)p 1519 3556
V 452 3560 1072 4 v 0 TeXcolorgray 0 TeXcolorgray 2615
3354 1011 4 v 2615 3453 4 100 v 2692 3423 a(temps)i(\(en)e(min\))p
3295 3453 V 127 w(60)p 3479 3453 V 114 w(?)p 3622 3453
V 2615 3457 1011 4 v 2615 3556 4 100 v 2668 3526 a(distance)h(\(en)g
(km\))p 3295 3556 V 103 w(15)p 3479 3556 V 104 w(5)p
3622 3556 V 2615 3560 1011 4 v -38 3726 a(S)n(t\351phane)h(nage)497
3689 y Fn(60)p Fm(\243)p Fn(0,5)p 497 3706 181 5 v 571
3754 a(3)701 3726 y Fl(\306)780 3693 y Fn(30)p 780 3706
62 5 v 796 3754 a(3)866 3726 y Fl(\306)14 b Fo(10)k(min,)h(puis)f(il)g
(cour)q(t)1649 3693 y Fn(60)p Fm(\243)p Fn(5)p 1649 3706
135 5 v 1685 3754 a(15)1807 3726 y Fl(\306)1886 3693
y Fn(300)p 1886 3706 93 5 v 1902 3754 a(15)2003 3726
y Fl(\306)c Fo(20)k(min.)-246 3768 y
SDict begin H.S end
 -246 3768 a -246
3768 a
SDict begin 12 H.A end
 -246 3768 a -246 3768 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -246 3768 a 0 TeXcolorgray
-141 3852 a Fo(2.)p 0 TeXcolorgray 43 w(S)n(t\351phane)h(a)e(par)o
(cour)q(u)g(un)h(total)g(de)f(5)10 b Fl(\305)g Fo(0,)e(5)16
b Fl(\306)e Fo(5,)8 b(5)19 b(km,)f(en)g(10)10 b Fl(\305)g
Fo(20)16 b Fl(\306)e Fo(30)19 b(min.)p 0 TeXcolorgray
0 TeXcolorgray 1518 3933 1072 4 v 1518 4033 4 100 v 1595
4003 a(temps)g(\(en)e(min\))p 2198 4033 V 137 w(30)p
2402 4033 V 114 w(60)p 2586 4033 V 1518 4036 1072 4 v
1518 4136 4 100 v 1571 4106 a(distance)h(\(en)g(km\))p
2198 4136 V 103 w(5,5)p 2402 4136 V 134 w(?)p 2586 4136
V 1518 4139 1072 4 v -38 4287 a(La)f(vitesse)j(mo)n(yenne)d(de)g(S)n
(t\351phane)j(sur)d(l)o('ensemble)j(de)d(son)h(par)o(cours)f(est)h
(donc)2502 4250 y Fn(60)p Fm(\243)p Fn(5,5)p 2502 4267
181 5 v 2562 4315 a(30)2707 4287 y Fl(\306)2775 4262
y Fg(\032)2786 4250 y Fn(30)o Fm(\243)p Fn(2)p Fm(\243)p
Fn(5,5)p 2786 4267 253 5 v 2871 4334 a Fg(\032)2881 4322
y Fn(30)3063 4287 y Fl(\306)c Fo(11)k(km/h.)-246 4389
y
SDict begin H.S end
 -246 4389 a -246 4389 a
SDict begin 12 H.A end
 -246 4389 a -246 4389 a
SDict begin [/View [/XYZ H.V]/Dest (exo.3) cvn /DEST pdfmark end
 -246
4389 a 0 TeXcolorgray 92 x Fp(Ex)o(er)o(cice)c(3)p 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1225 5519
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 174.69983 a add def
/d 0.0 a add neg def /h 114.9489 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1225 5519 a 837 5746 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 113.81097 113.81097 199.1692
113.81097 199.1692 56.90549 56.90549 56.90549  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 199.1692 68.2864 187.78827
68.2864 187.78827 56.90549 199.1692 56.90549  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 187.78827 113.81097 187.78827
102.43004 199.1692 102.43004 199.1692 113.81097  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 56.90549 56.90549 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 113.81097 199.1692 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 113.81097 199.1692 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 113.81097 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 113.81097 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 56.90549 113.81097 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0.49803 0 1  setrgbcolor  [ 113.81097
56.90549 101.7393 56.90549 101.7393 68.97714 113.81097 68.97714  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 1.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.26372
113.81097 142.26372 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.26372
56.90549 142.26372 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 837 5746 a
tx@Dict begin { 148.52335 91.04869 } PutCoor PutBegin  end
 837 5746 a 51 x Fo(2)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 154.78299 125.1919 } PutCoor PutBegin  end
 837 5746 a 51 x Fo(3)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 154.78299 51.21501 } PutCoor PutBegin  end
 837 5746 a 51 x Fo(3)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 80.80568 51.21501 } PutCoor PutBegin  end
 837 5746 a 51 x Fo(2)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 51.21501 62.02676 } PutCoor PutBegin  end
 837 5746 a 6 w Fh(A)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 201.44547 60.31967 } PutCoor PutBegin  end
 837 5746 a Fh(B)837 5746
y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 201.44547 117.22516 } PutCoor PutBegin  end
 837 5746 a 835 5745 a Fh(C)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 116.08723 117.22516 } PutCoor PutBegin  end
 837 5746 a Fh(D)837 5746
y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 108.1205 45.52455 } PutCoor PutBegin  end
 837 5746 a 2 w Fh(H)837 5746
y
tx@Dict begin  PutEnd  end
 837 5746 a 2675 5519 a
currentpoint initclip moveto
 2675 5519 a 0 TeXcolorgray -246
5569 1757 4 v -154 5646 a Fb(1)q(.)p 0 TeXcolorgray -76
5646 a
SDict begin H.S end
 -76 5646 a -76 5646 a
SDict begin H.R end
 -76 5646 a -76 5646 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.1) cvn /DEST pdfmark
end
 -76
5646 a 0 TeXcolorgray Fb(Les)g(calculs)g(ne)g(sont)f(pas)h(toujours)g
(plus)f(faciles)i(en)f(minutes)f(qu)n('en)i(heur)o(es)o(,)f(mais)g(c)n
('est)g(g\351n\351r)o(alement)h(le)g(cas)o(.)p 0 TeXcolorgray
0 TeXcolorgray 1930 5895 a Fo(2)p 0 TeXcolorgray eop
end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -163 a Fo(Le)18 b(tr)o(ap\350ze)g(est)g(constitu\351)h(:)p
0 TeXcolorgray -76 -63 a(\225)p 0 TeXcolorgray 42 w(d)n('un)f(r)o
(ectangle)f Fh(B)9 b(H)f(D)t(C)h Fo(,)19 b(d)n('air)o(e)e
Fi(`)10 b Fl(\243)g Fh(L)18 b Fl(\306)c Fo(3)c Fl(\243)g
Fo(2)16 b Fl(\306)e Fo(6)k(;)p 0 TeXcolorgray -76 37
a(\225)p 0 TeXcolorgray 42 w(d)n('un)g(tr)q(iangle)23
b Fh(A)5 b(H)j(D)d Fo(,)18 b(d)n('air)o(e)905 4 y Fc(B)6
b Fm(\243)p Fc(h)p 905 17 123 5 v 951 65 a Fn(2)1052
37 y Fl(\306)1131 4 y Fn(2)p Fm(\243)p Fn(2)p 1131 17
104 5 v 1167 65 a(2)1258 37 y Fl(\306)14 b Fo(2.)-246
136 y(Donc)j(l)o('air)o(e)h(du)f(tr)o(ap\350ze)h(est)g(6)10
b Fl(\305)g Fo(2)15 b Fl(\306)f Fo(8.)-246 286 y Fp(R)o(emarque)g(:)k
Fo(On)f(peut)h(aussi)h(utiliser)f(la)g(for)q(mule)g(\(hors-progr)o
(amme\))g(:)1301 509 y Fk(A)1367 521 y Fn(tr)o(ap\350ze)1580
509 y Fl(\306)1659 453 y Fo(\()p Fh(B)g Fl(\305)10 b
Fh(b)t Fo(\))g Fl(\243)g Fh(h)p 1659 490 358 5 v 1817
566 a Fo(2)2040 509 y Fl(\306)2120 453 y Fo(\(5)g Fl(\305)g
Fo(3\))g Fl(\243)g Fo(2)p 2120 490 326 5 v 2262 566 a(2)2469
509 y Fl(\306)k Fo(8.)-246 649 y
SDict begin H.S end
 -246 649 a -246 649
a
SDict begin 12 H.A end
 -246 649 a -246 649 a
SDict begin [/View [/XYZ H.V]/Dest (exo.4) cvn /DEST pdfmark end
 -246 649 a 0 TeXcolorgray 101
x Fp(Ex)o(er)o(cice)g(4)p 0 TeXcolorgray 42 w Fo(Le)j(losange)h(est)g
(\253)c(la)j(moiti\351)d(\273)36 b(d)n('un)18 b(r)o(ectangle)f(de)g
(c\364t\351s)h Fi(`)f Fo(et)h Fh(L)s Fo(,)g(donc)f(son)h(air)o(e)f(est)
2730 717 y Fd(`)p Fm(\243)p Fc(L)p 2730 730 111 5 v 2769
779 a Fn(2)2850 750 y Fo(.)p 0 TeXcolorgray 0 TeXcolorgray
1331 1635 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 149.09253 a add def
/d 0.0 a add neg def /h 92.18704 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1331 1635 a 473 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 142.26372 28.45274 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 113.81097 85.35823 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 142.26372 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 113.81097 85.35823 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 113.81097 28.45274 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 85.35823 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 28.45274 142.26372 28.45274
85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 142.26372 85.35823 28.45274
85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 142.26372 142.26372 28.45274
142.26372   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 142.26372 85.35823 142.26372
142.26372   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial
1331 2108 a
tx@Dict begin { 18.4941 119.50143 } PutCoor PutBegin  end
 1331 2108 a 1 0 0 TeXcolorrgb 57 x Fi(`)p
0 TeXcolorgray 1331 2108 a
tx@Dict begin  PutEnd  end
 1331 2108 a 1331 2108 a
tx@Dict begin { 78.24504 81.37486 } PutCoor PutBegin  end
 1331
2108 a 1 0 0 TeXcolorrgb 53 x Fh(L)p 0 TeXcolorgray 1331
2108 a
tx@Dict begin  PutEnd  end
 1331 2108 a 2569 1635 a
currentpoint initclip moveto
 2569 1635 a -246 1718
a
SDict begin H.S end
 -246 1718 a -246 1718 a
SDict begin 12 H.A end
 -246 1718 a -246 1718 a
SDict begin [/View [/XYZ H.V]/Dest (exo.5) cvn /DEST pdfmark end
 -246
1718 a 0 TeXcolorgray 117 x Fp(Ex)o(er)o(cice)d(5)p 0
TeXcolorgray 42 w(Rappels)g(:)p 0 TeXcolorgray -76 1934
a Fo(\225)p 0 TeXcolorgray 42 w(une)19 b(hauteur)g(est)g(une)g(droite)f
(qui)h(passe)g(par)g(un)f(sommet)i(et)f(qui)g(est)g(perpendiculair)o(e)
h(au)e(c\364t\351)h(oppos\351)g(\(les)g(hauteurs)h(sont)f(tr)o
(ac\351es)-3 2034 y(en)e(pointill\351s)j(bleus\))9 b(;)p
0 TeXcolorgray -76 2134 a(\225)p 0 TeXcolorgray 42 w(le)16
b(fait)g(que)h(les)f(hauteurs)h(soient)g(\253)12 b(concour)o(antes)g
(\273)33 b(signi\002e)16 b(qu)n('elles)i(passent)f(toutes)g(les)f
(trois)g(par)g(un)g(m\352me)h(point)g(\226)e(qu)n('on)i(appelle)-3
2233 y(\253)d(or)q(thocentr)o(e)j(du)g(tr)q(iangle)d(\273)34
b(\(nomm\351)16 b Fh(O)22 b Fo(sur)17 b(la)h(\002gur)o(e)e
(ci-dessous\).)p 0 TeXcolorgray 0 TeXcolorgray 1152 3491
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 192.3404 a add def
/d 0.0 a add neg def /h 138.28035 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1152 3491 a 1015 3619 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ 59.32503
93.77257 70.23923 88.61395 65.08061 77.70018 54.16684 82.85837  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ 112.67305
112.67305 121.20853 104.13713 112.67305 95.60123 104.13713 104.13713
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  [ 82.90004
28.63725 82.85924 40.70891 94.93047 40.74973 94.97127 28.67805  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 2.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 196.32375 29.02191 28.45274 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 82.51277 142.83289 196.32375 29.02191
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 28.45274 82.51277 142.83289
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 82.90004 28.63725 82.51277
142.83289   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 112.67305 112.67305 28.45274
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 59.32503 93.77257 196.32375
29.02191   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 0 1  setrgbcolor  [ 82.71683
82.71683   false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1015 3619 a
tx@Dict begin { 87.06532 68.85558 } PutCoor PutBegin  end
 1015 3619 a 0 0 1 TeXcolorrgb 1013 3618 a
Fh(O)p 0 TeXcolorgray 1015 3619 a
tx@Dict begin  PutEnd  end
 1015 3619 a 2748 3491
a
currentpoint initclip moveto
 2748 3491 a -246 3574 a
SDict begin H.S end
 -246 3574 a -246 3574 a
SDict begin 12 H.A end
 -246
3574 a -246 3574 a
SDict begin [/View [/XYZ H.V]/Dest (exo.6) cvn /DEST pdfmark end
 -246 3574 a 0 TeXcolorgray 117 x Fp(Ex)o(er)o(cice)e
(6)p 0 TeXcolorgray 42 w Fo(On)j(note)j Fh(H)25 b Fo(le)18
b(pied)g(de)f(la)h(hauteur)g(issue)h(de)k Fh(A)d Fo(dans)d(le)h(tr)q
(iangle)23 b Fh(A)s(B)5 b(C)k Fo(.)p 0 TeXcolorgray 0
TeXcolorgray 1241 4802 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 170.71645 a add def
/d 0.0 a add neg def /h 120.63936 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1241 4802 a 1246 4878 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  [ 56.90549 28.45274
56.90549 40.5244 68.97714 40.5244 68.97714 28.45274  /Lineto /lineto
load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 1 0.9 0.9  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 28.45274 56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 28.45274 56.90549 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 28.45274 28.45274 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.90549 28.45274 56.90549
113.81097   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 113.81097 85.35823 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1246 4878 a
tx@Dict begin { 59.18175 114.94888 } PutCoor PutBegin  end
 1246
4878 a 6 w Fh(A)1246 4878 y
tx@Dict begin  PutEnd  end
 1246 4878 a 1246 4878 a
tx@Dict begin { 142.26372 17.07181 } PutCoor PutBegin  end
 1246
4878 a Fh(B)1246 4878 y
tx@Dict begin  PutEnd  end
 1246 4878 a 1246 4878 a
tx@Dict begin { 19.91682 17.07181 } PutCoor PutBegin  end
 1246
4878 a 1244 4877 a Fh(C)1246 4878 y
tx@Dict begin  PutEnd  end
 1246 4878 a 1246
4878 a
tx@Dict begin { 55.76756 17.07181 } PutCoor PutBegin  end
 1246 4878 a 2 w Fh(H)1246 4878 y
tx@Dict begin  PutEnd  end
 1246 4878 a 1246
4878 a
tx@Dict begin { 86.49614 17.07181 } PutCoor PutBegin  end
 1246 4878 a 2 w Fh(I)1246 4878 y
tx@Dict begin  PutEnd  end
 1246 4878 a 2659
4802 a
currentpoint initclip moveto
 2659 4802 a -246 4986 a Fo([)-214 4985 y Fh(A)c(H)-94
4986 y Fo(])-52 4985 y(est)18 b(une)g(hauteur)h(dans)e(les)h(tr)q
(iangles)g Fh(B)9 b(I)15 b(A)22 b Fo(et)16 b Fh(C)11
b(I)k(A)s Fo(,)j(donc)882 5202 y Fk(A)948 5214 y Fc(B)8
b(I)j(A)1082 5202 y Fl(\306)p 1 0 0 TeXcolorrgb 1161
5146 a Fh(B)e(I)p 0 TeXcolorgray 21 w Fl(\243)16 b Fh(A)5
b(H)p 1161 5183 297 5 v 1288 5259 a Fo(2)2412 5202 y
Fk(A)2476 5214 y Fc(C)k(I)i(A)2611 5202 y Fl(\306)p 1 0 0
TeXcolorrgb 2688 5146 a Fh(C)g(I)p 0 TeXcolorgray 21
w Fl(\243)16 b Fh(A)5 b(H)p 2690 5183 V 2819 5259 a Fo(2)2997
5202 y(.)-246 5374 y(Or)p 1 0 0 TeXcolorrgb 17 w Fh(B)k(I)p
0 TeXcolorgray 26 w Fl(\306)p 1 0 0 TeXcolorrgb 12 w
Fh(C)i(I)p 0 TeXcolorgray 28 w Fo(puisque)21 b Fh(I)28
b Fo(et)17 b(le)h(milieu)h(de)1003 5375 y([)1029 5374
y Fh(B)5 b(C)1141 5375 y Fo(])1175 5374 y(,)17 b(donc)g
Fh(B)9 b(I)15 b(A)23 b Fo(et)15 b Fh(C)c(I)k(A)22 b Fo(ont)17
b(la)h(m\352me)h(air)o(e)o(.)p 0 TeXcolorgray 1930 5895
a(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (exo.7) cvn /DEST pdfmark end
 -246 -246 a -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246
a
SDict begin 12 H.A end
 -246 -246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray
83 x Fp(Ex)o(er)o(cice)14 b(7)p 0 TeXcolorgray 0 TeXcolorgray
147 w Fo(1.)p 0 TeXcolorgray 42 w(La)k(n\351gation)g(de)p
0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb 1521
-17 a(T)-8 b(ous)p 1521 1 164 5 v 0 TeXcolorgray 18 w(les)18
b(hommes)p 0 0 1 TeXcolorrgb 20 w(sont)g(mor)q(tels)p
2134 1 434 5 v 0 TeXcolorgray 1 w(.)p 0 0 1 TeXcolorrgb
0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray -38 128
a(est)p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb
1542 273 a(Il)f(existe)p 1542 291 263 5 v 0 TeXcolorgray
19 w(un)h(homme)p 1 0 0 TeXcolorrgb 18 w(immor)q(tel)p
2220 291 325 5 v 0 TeXcolorgray 2 w(.)p 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray -246
341 a
SDict begin H.S end
 -246 341 a -246 341 a
SDict begin 12 H.A end
 -246 341 a -246 341 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -246
341 a 0 TeXcolorgray -141 429 a Fo(2.)p 0 TeXcolorgray
43 w(La)f(n\351gation)i(de)p 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 1333 575 a(Il)d(existe)p 1333 593 263
5 v 0 TeXcolorgray 19 w(un)i(desser)q(t)p 0 0 1 TeXcolorrgb
17 w(sans)g(sucr)o(e)p 1987 593 356 5 v 0 TeXcolorgray
17 w(\340)g(la)f(cantine)o(.)p 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 0 TeXcolorgray -38 720 a(est)p 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 1349 865
a(T)-8 b(ous)p 1349 883 164 5 v 0 TeXcolorgray 19 w(les)18
b(desser)q(ts)p 1 0 0 TeXcolorrgb 18 w(sont)g(sucr\351s)p
1939 883 388 5 v 0 TeXcolorgray 18 w(\340)f(la)g(cantine)o(.)p
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray -38 1052 a Fp(R)o(emarque)f(:)k Fo(Dans)g(les)h(deux)f
(exemples)i(que)f(nous)g(venons)g(de)f(tr)o(aiter)-5
b(,)21 b(pour)f(\351cr)q(ir)o(e)f(la)i(n\351gation)f(d)n('une)h(phr)o
(ase)o(,)g(il)g(suf\002t)f(de)g(r)o(empla-)-38 1152 y(cer)i(les)h(\253)
15 b(tous)h(\273)45 b(par)22 b(\253)15 b(il)23 b(existe)17
b(\273)22 b(,)g(et)h(r\351ciproquement)9 b(;)24 b(et)f(d)n('inverser)g
(les)g(conclusions)h(\(exemple)g(:)f(immor)q(tel/mor)q(tel\).)h(C'est)g
(une)-38 1252 y(technique)19 b(qui)f(fonctionne)h(toujours)o(.)-246
1282 y
SDict begin H.S end
 -246 1282 a -246 1282 a
SDict begin 12 H.A end
 -246 1282 a -246 1282
a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -246 1282 a 0 TeXcolorgray -141 1374 a Fo(3.)p 0 TeXcolorgray
43 w(La)e(n\351gation)i(de)p 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 1078 1519 a(Il)e(existe)p 1078 1537
263 5 v 0 TeXcolorgray 19 w(un)g(pays)h(dans)f(lequel)p
0 0 1 TeXcolorrgb 19 w(tous)p 2057 1537 150 5 v 0 TeXcolorgray
18 w(les)h(hommes)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
20 w(savent)g(lir)o(e)p 2657 1537 353 5 v 0 TeXcolorgray(.)p
0 0 1 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 0 1
TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
-38 1664 a(est)p 0 TeXcolorgray 0 TeXcolorgray 1061 1810
a(Dans)p 1 0 0 TeXcolorrgb 17 w(tous)p 1258 1828 150
5 v 0 TeXcolorgray 18 w(les)g(pays)o(,)p 1 0 0 TeXcolorrgb
18 w(il)g(existe)p 1731 1828 259 5 v 0 TeXcolorgray 18
w(un)g(homme)h(qui)p 1 0 0 TeXcolorrgb 18 w(ne)e(sait)h(pas)g(lir)o(e)p
2536 1844 491 5 v 0 TeXcolorgray(.)p 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray -246 1894 a
SDict begin H.S end
 -246 1894 a -246
1894 a
SDict begin 12 H.A end
 -246 1894 a -246 1894 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -246 1894 a 0 TeXcolorgray
-141 1966 a Fo(4.)p 0 TeXcolorgray 43 w(Le)g(contr)o(air)o(e)f(de)h
(\253)c(\352tr)o(e)j(all\351)h(en)g(Angleterr)o(e)f(ou)h(en)g(Espagne)c
(\273)35 b(est)18 b(\253)c(n)-6 b('\352tr)o(e)18 b(all\351)g(ni)g(en)g
(Angleterr)o(e)o(,)f(ni)h(en)f(Espagne)d(\273,)19 b(donc)e(la)h
(n\351gation)-38 2066 y(de)p 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 830 2211 a(T)-8 b(ous)p 830 2229 164
5 v 0 TeXcolorgray 19 w(les)18 b(\351l\350ves)h(de)e(la)h(classe)p
0 0 1 TeXcolorrgb 18 w(sont)g(d\351j\340)f(all\351s)i(en)e(Angleterr)o
(e)g(ou)h(en)f(Espagne)p 1753 2247 1505 5 v 0 TeXcolorgray
19 w(.)p 0 0 1 TeXcolorrgb 0 TeXcolorgray 0 0 1 TeXcolorrgb
0 TeXcolorgray -38 2356 a(est)p 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 713 2501 a(Il)g(existe)p 713 2519 263
5 v 0 TeXcolorgray 18 w(un)h(\351l\350ve)h(de)e(la)g(classe)h(qui)p
1 0 0 TeXcolorrgb 18 w(n)-6 b('est)19 b(jamais)f(all\351)g(en)g
(Angleterr)o(e)o(,)f(ni)g(en)h(Espagne)p 1831 2538 1543
5 v 0 TeXcolorgray 1 w(.)p 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray -246 2587 a
SDict begin H.S end
 -246 2587
a -246 2587 a
SDict begin 12 H.A end
 -246 2587 a -246 2587 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -246 2587 a 0 TeXcolorgray
-141 2658 a Fo(5.)p 0 TeXcolorgray 43 w(C)o(omme)h(dans)e(l)o('exemple)
j(pr\351c\351dent,)f(le)e(contr)o(air)o(e)h(de)f(\253)d(ni...)k(ni...)c
(\273)35 b(est)18 b(\253)c(ou)g(\273.)j(Donc)g(la)g(n\351gation)h(de)p
0 TeXcolorgray 0 TeXcolorgray 1290 2803 a(Chlo\351)p
0 0 1 TeXcolorrgb 19 w(n)-6 b('aime)18 b(ni)g(les)g(fr)o(aises)o(,)h
(ni)f(les)g(fr)o(amboises)p 1511 2831 1287 5 v 0 TeXcolorgray
1 w(.)p 0 0 1 TeXcolorrgb 0 TeXcolorgray -38 2948 a(est)p
0 TeXcolorgray 0 TeXcolorgray 1364 3093 a(Chlo\351)p
1 0 0 TeXcolorrgb 18 w(aime)g(les)h(fr)o(aises)f(ou)g(les)g(fr)o
(amboises)p 1584 3111 1139 5 v 0 TeXcolorgray 1 w(.)p
1 0 0 TeXcolorrgb 0 TeXcolorgray -246 3211 a
SDict begin H.S end
 -246 3211
a -246 3211 a
SDict begin 12 H.A end
 -246 3211 a -246 3211 a
SDict begin [/View [/XYZ H.V]/Dest (exo.8) cvn /DEST pdfmark end
 -246 3211 a -246
3227 a
SDict begin H.S end
 -246 3227 a -246 3227 a
SDict begin 12 H.A end
 -246 3227 a -246 3227
a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -246 3227 a -246 3227 a
SDict begin H.S end
 -246 3227 a -246 3227 a
SDict begin 12 H.A end
 -246
3227 a -246 3227 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -246 3227 a 0 TeXcolorgray 89 x Fp(Ex)o(er)o(cice)c
(8)p 0 TeXcolorgray 0 TeXcolorgray 147 w Fo(1.)p 0 TeXcolorgray
0 TeXcolorgray 90 w(\(a\))p 0 TeXcolorgray 41 w(On)j(identi\002e)h(A)f
(et)g(B)h(dans)f(l)o('implication)j(:)p 0 TeXcolorgray
0 TeXcolorgray 1185 3461 a(S)o(i)e(un)f(nombr)o(e)h(se)f(ter)q(mine)i
(par)e(5)1265 3512 y Fa(|)p 1299 3512 411 10 v 411 w({z)p
1778 3512 V 411 w(})1726 3591 y Fn(A)2223 3461 y Fo(,)h(alors)f(il)h
(est)g(multiple)i(de)d(5)2446 3512 y Fa(|)p 2480 3512
247 10 v 247 w({z)p 2795 3512 V 247 w(})2743 3591 y Fn(B)3085
3461 y Fo(.)145 3709 y(C)o(ette)h(implication)i(est)e(vr)o(aie)g
(\(cours)f(du)g(pr)q(imair)o(e\).)-246 3738 y
SDict begin H.S end
 -246 3738
a -246 3738 a
SDict begin 12 H.A end
 -246 3738 a -246 3738 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -246 3738 a 0 TeXcolorgray
4 3831 a Fo(\(b\))p 0 TeXcolorgray 0 TeXcolorgray 86
w(\225)p 0 TeXcolorgray 41 w(L)-10 b('implication)21
b(contr)o(apos\351e)d(est)p 0 TeXcolorgray 0 TeXcolorgray
1024 3931 a(S)o(i)g(un)f(nombr)o(e)h(n)-6 b('est)18 b(pas)g(multiple)i
(de)d(5)1104 3982 y Fa(|)p 1138 3982 518 10 v 518 w({z)p
1724 3982 V 518 w(})1612 4061 y Fn(non)c(B)2275 3931
y Fo(,)18 b(alors)f(il)h(ne)g(se)f(ter)q(mine)i(pas)f(par)f(5)2498
3982 y Fa(|)p 2532 3982 360 10 v 360 w({z)p 2960 3982
V 360 w(})2849 4061 y Fn(non)d(A)3363 3931 y Fo(.)262
4134 y(C)o(ette)20 b(contr)o(apos\351e)g(est)g(vr)o(aie)o(,)f(puisque)i
(l)o('implication)g(or)q(iginale)e(l)o('est)h(\(cf)f(l)o('\351nonc\351)
h(:)f(quand)g(une)g(implication)i(est)e(vr)o(aie)o(,)g(sa)262
4234 y(contr)o(apos\351e)g(l)o('est)g(aussi\).)p 0 TeXcolorgray
190 4376 a(\225)p 0 TeXcolorgray 41 w(L)-10 b('implication)21
b(r\351ciproque)c(est)p 0 TeXcolorgray 0 TeXcolorgray
1244 4476 a(S)o(i)h(un)f(nombr)o(e)g(est)h(multiple)i(de)d(5)1324
4527 y Fa(|)p 1358 4527 418 10 v 418 w({z)p 1844 4527
V 418 w(})1791 4605 y Fn(B)2296 4476 y Fo(,)g(alors)h(il)g(se)f(ter)q
(mine)i(par)e(5)2519 4527 y Fa(|)p 2553 4527 240 10 v
240 w({z)p 2861 4527 V 240 w(})2809 4605 y Fn(A)3144
4476 y Fo(.)262 4678 y(Elle)i(est)f(fausse)o(,)h(comme)f(le)g(montr)o
(e)g(le)f(contr)o(e-exemple)j(suivant)e(:)f(10)i(est)f(multiple)i(de)d
(5,)h(mais)g(il)g(ne)f(se)h(ter)q(mine)g(pas)g(par)f(5.)-246
4707 y
SDict begin H.S end
 -246 4707 a -246 4707 a
SDict begin 12 H.A end
 -246 4707 a -246 4707
a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -246 4707 a 0 TeXcolorgray -141 4801 a Fo(2.)p 0 TeXcolorgray
43 w(L)-10 b('implication)p 0 TeXcolorgray 0 TeXcolorgray
1074 4946 a(S)o(i)17 b(un)h(nombr)o(e)f(se)h(ter)q(mine)g(par)f(0)1153
4997 y Fa(|)p 1187 4997 411 10 v 411 w({z)p 1666 4997
V 411 w(})1614 5076 y Fn(A)2112 4946 y Fo(,)g(alors)h(il)f(est)h
(multiple)i(de)d(10)2335 4997 y Fa(|)p 2369 4997 267
10 v 267 w({z)p 2704 4997 V 267 w(})2651 5076 y Fn(B)3014
4946 y Fo(.)-38 5191 y(et)h(sa)f(r\351ciproque)p 0 TeXcolorgray
0 TeXcolorgray 1074 5336 a(S)o(i)g(un)h(nombr)o(e)f(est)h(multiple)i
(de)d(10)1153 5388 y Fa(|)p 1187 5388 438 10 v 438 w({z)p
1693 5388 V 438 w(})1641 5466 y Fn(B)2166 5336 y Fo(,)g(alors)h(il)g
(se)f(ter)q(mine)i(par)e(0)2389 5388 y Fa(|)p 2423 5388
240 10 v 240 w({z)p 2731 5388 V 240 w(})2679 5466 y Fn(A)3014
5336 y Fo(.)-38 5585 y(sont)h(vr)o(aies)g(toutes)h(les)f(deux.)p
0 TeXcolorgray 1930 5895 a(4)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
