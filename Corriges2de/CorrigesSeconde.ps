%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: CorrigesSeconde.dvi
%%CreationDate: Fri Sep  6 15:01:14 2024
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold Fourier-Math-Symbols wasy10
%%+ Fourier-Math-Letters-Italic LINE10 CMSY10 Utopia-Italic
%%+ Fourier-Math-Cal
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o CorrigesSeconde.ps
%+ CorrigesSeconde.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2024.09.06:1701
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F607E0F7863C43D7F6A91917EBD66730DBD642DAB8769849
47384FFFB4994ECF216FFA8140397695EE5AD63F1156720A01BBFB15AA24FDB8
2F2A8F541C7FC860E03F5E4DE80BCF6891263C142159D5879CA0A1883A9B6C50
CBDA9CF0C97E761E354C39527F070E680B42E6732896B10E6A7600184B156ACF
57BD9A98F613FC166F47C3D1C4E5E02BAB648D74B078EE3F0D8148D981451BD3
918C71284E6154BEDF8D66BA1261A7459F64F133445F9BE19A2C48B1FE1D06B1
845AB18E2E5C17B77C48FBAE7AA98424BA0F90F689216F31EFABC25D4EC37767
C5A4BD9210AB9F0D3385717E8980C7F6C021061CC213ECEDD34548605F3FF29F
B92FEF1C849AFF8AD297F7A4259C35B7B9B679A509FB97F10F2BA3521085B1D5
104D43AFAED420272E0DB15AAF65567BAB2B030932584E4DE6150645266166F9
0B4254E51CEBB8AF1DF197332712C1CC25F4C90694E0A0062BC15C19C34ED8BE
EE6370E093DC61E10F0D21D131383155AA57EF3F1EC3BFE4945DCDAED151A00A
04E5D912729296F062120371843F314FACD101161FD1EAE0771138882D4CCFE9
D57E598BE6B8B85F3A3191BCE2421FEA66621A56170E0A5B4E700EC903FAB7C0
465D8BEA5711A149958ED7D6DAB75E6BBF8BBFBD24D3A17B3DBBBD6AFC1B4F68
DEACE6AF429CFBA86FFC6EE853DE286F4A63A50BF44E0D83DFD072EED82EA16A
55F663EC79B0FCE968E24DDB8CBE85533BE7D472D153FBD4BD1282D308CFB2DA
E3B6D325784424FDD176F81879B6D72EBC0DDDFE605C4B3D4E065D89DF647494
8B64A1EA4A4D3F871FA692116172DA03589D4D806304D5EB7CB8E23B928A21F1
EF10EA282F8027779DB751E9583F896FB8118F8AE0E11915A9ADF17DA3757ECA
A0AD7FD946EE771AFAC1155DB0ACDAE4BF2CE56DBD115CB6E00E0A15B7D1235C
3A32A905BA63E0B198DD4BBC9017AD08584C65DACC8E862A69EE1312C9CA770F
D607EA22B940EBD77C399B58DFA3A53D70C5768C0AB33F1E3997C41AD90F1476
432530691C6E29DA8E765064C16441200853F74BD8231AA9F608A6760203A5AB
AB6F4AB95C444C26A6D89D1A6D1EE15DAB424262007201AAA918C2CEB9CA492A
90B1AAE543C2D1FA9614925DBB3FD03B682743CE6E05EB19A51EFF3A47D747EF
793EC89DA0C5A1051BE31C3427B360FBBFF575B42B0985C0651944573D6CB83D
9A7D4CC01C56DA93232A493ACCBC51A035DF7C92FD9667D6210B8B42998558F3
46100F6A66D2D26A1108EFD9610FD9B2B4CAD0703E7F512CD94B4DF11F59716E
2BAF099ECE3DC1BB6182EDDEA22166426D41DC3870EDA0CC3ED5470C544DABFF
D1BB4C0C57D65A26878C6270A817DA31A5F47D36BC635B4791DBE6C397B88494
5C777F83B36923BF75D04D5521B55DBDBFB6A704A0C274EB456CA3DFA6FF02A3
3474A1C4D90C3F5CC3AE9D3BACF73444EF979A4B4B4C84574E962E88C08BB683
19E572046DAA1EFCCDAC1CA8845A3ED807AEF4784FDEAB9433E04BE482A8B208
5CA26E50EA9D49AA64F2425C2F627DF2586739F8FC387EE32386CCFD2D718595
958A47E71332AF97920F5320E9EFB4A67A42D25984C2322B14E40577A1156EA8
15E150DE070B8712C34ACFA1780A4E3357CD0AFA773ED04601CF3023013BE174
08BE3F1D8C36ED37BBC077BA85A91DD6902315A5563F37CCCA0D723125FDA6A4
5DA96CC30555FC7E81F228DDD583BA2C52EE0385F3046586D1DE7A30B7D5ABD9
4F0A0DDD37D9C6D844EA8513A5DFAAB01512BA348C9B5280EAFE1FCB031A9531
C4F38A51FEC2425C597DF595922BD78084B4DC8F23BC23643E84C9321ABB4192
E0853AEB5B44C8689D5B67D8AD5FFFA545747214E2BEDFE7B9A441625B445620
561AF63938F9072E0BF021003E20FAEF0E702B2A407CD95683FBD95151274633
D39C10590C070A8D53793D7C826D46682110D397233EA65134F078FEFA64020E
8D397E0C07A8E510332FD10EF7D3F8408AE0C208F2B176CDA50CB88372EFC0DF
459B5FB6D6BAA8F539BB1CE5102EEE883BDDC975BBC5EFA73999EFD8BDB35722
0FB3C0804352BB9DAE41E3BBF7F5E25C82EC606803E3C5F6FDA37369505DE2F7
F255BC12D8F208502AA575EB8C83B41AC09B0CAD18E0EB09FFF006E1D55847AA
E7AAB80A0A61E86DC92049FA8D446F1E2B7F3B9C082FEDFD7189F7DC56AEDBB6
DC836B45090A13FA53E9B9258AE6BF6F1DFD4B315E4118D7294DEEAE7B86B090
9206B6F5D1DA7280E02916050425429D0EDABBFB489A5D5A14B04E85923C42FF
CCA4915890CDCBB35BF1E08A95BC564DDDA89D392B0317BF21FB3E3C7085E6CB
4359BD6062BAD7E3401DAFBDB9876E2E20DAD8C26EB90720CD8BA1DFDFC053A8
32847FBC973E69EF351CB06995410DFDD6C8681DE1D12A6948206F3D017022B7
A33F96A0EF46C2A1C53833E0EDB289BEEAED7404831B0009FA9D5FC1674D3469
CD3D2B540966EE621B77F5441CDF4D4F4503305C1691C6B7E14F60F214CF3986
8CBAD6F85E759409068CE06693E83544BBDFD7499CDF8D37A7DFA68062D6F378
B2F480B3FA5DE3268925E478FD8F6684B926CEE7FA7CA391C5D773B92BC010E2
072E909A070D3419710D6A728FB57D4CED7510FA627C4F1B6F98E43BBA30F2F1
56E6C14376C827664C5AE0F186F00B23D3B9A4A4FBB1903EC3F8EDA69544DDE6
4059736469FF43C02FADB55E37D1DB32FF7B05FFF1468DC9AEA6D55980A3A809
66E4BDE0411294FDA12E86C15D0BAD9441371FE5ADEF037E147D5D3DA748FBC2
8CD0D1FCBAE4751B60489023B7F0F51E06B8AF3468B9B6CFABFB2B1C6222A832
F3901556E63BD63929BCBA0D2CDC7297F3E8DB2AF78D77D02D39EC1165C5D957
2A20BB7CF4B79077E60BBF8EF47E09F7D3D2DED749E87B25305D1452523D4F49
673D77E6FF68412B3F5345BC0ABACDB3CF49934CD9D3183D88CFD7CC64098E52
6F1F5E2EDDEC888B66D46524EF15561E29E10338EBA92FE07BECDB7A00C60685
CE4F350C70D14EA9DF9CAE554B402EAE901092858A5CE2209E03CCCD6876EB2F
17DC5288913EA239AF98569A24417AEAEBBA2823EE48FC3D74C3EDFF9352E250
2F5EFBDD5DB6CEB2C4F88EBA355311D1C27E019A58B88CAF8B3257428A4858C2
CE0AA821E9F865A3CFFDEEC0F660C8BE3B279260D88880398805FE76AD2FDF4F
81E729BAA39BFA09C2F18F21EF5EA02DDDAAAC77866A1701589D901041C1AF79
BE48A2F5D9D63813A9A67F00F2385A12A86FD4A59398F830B88E3F6C702C1B40
5B496D04D4E6728CCF8C37A13144C9BC33105A4B75DA316DA8B2CC1C0778BB45
9E4C13C070A19CB1975BB90C5304BA973E69EF8DA88A9E65D2742E2F392CBA9E
50753100168A6009407145D7148F7233BD99132536D55E2A09132FADD45D8582
AE345ACFA569DF0709204A05882DF37AF987D5370B60DA2F353A8EDB7A5806F5
B807A27FF99F1990C9D9D966F963D330D412A44D35C2533D84D02EA2FA826A80
6C0D4A3F0C3CE8A594696220B1F655C20088B8DB12641AFC81D58DA932B254A9
57350A9E6BC3BCCAFA1AA748721482503D5D4BE3A447819EF8AF37BBD6C22E53
7A2B53E044C7840492F8D56E2EC1CF0B14471CCD1E40617DA8ED1557A191210B
E25E36E69EDDB672E5CF64D75482E70985D276AE0CFDA8245CC0A8959C2DDC8B
6D636E17D93855AE4EE25E13045BBFF33B8157DFDD35E55EED4B74FC349AED15
94818FBF50254D67E33C7E37B2DB7CD6728B2DA44E0655734B673E53DF7D0634
6EC0D1C99669839DA87E5861EF7555A6B9B169FC8481CC9FDD0034601A02B7FA
0D38FCA2E5B2986E24E142F3A0446CD3C3AEF6E2C83BA09CDFA6EBDEC9436208
F85466C53D917F259C061E98225608D19BCD9CA5DF2F8CDBDF20063543E80DBD
4A4795277C09117C1DB5FCB995022595271E47586BBE742DCDC69737352AF582
A0C4DC8728F8C84723B2255BE5E98ACF79F069B7326466D0774DE97D94FC4533
94CA18C1A105CE53D3DB4CA58059A9379B61672D070A7FF5391A9BA8034EDF79
DB1A95BE009909230AC6224CFC85FAAF1E2977977BD098E6D7A860237B15683E
204DFA5BA0D7C1106937256F1B89B3B678EDEFD6B7F8165A64055C22677DCCA2
E0D735FAE9A31648AA56435A4BFC6500FECB67287325C571BA387100AB822AB2
4BB0E05A4F981E33CA2D4100D2DD2CC613AC405187207AD7AB1F03C22DA4FCCF
DEBEC583F4BB1C0AD845A662119332DEB307102ED2043571529B87C771853ADF
BECB484E59B5BF520B35E8CE3C6C3D3F04CD42BEFC716078AF2252858B318134
C81CC048826C7412E47B00C8B08206693ECCCE5A89C6EC9EA543279B8FD1B911
FD89C1FF6B34CFC207BA88EAF0D461785EC9E9F81F0080A6A493180E0EE41260
D7C2AC9DCFC1B7449390607C57AE0A2057094DE35738486ABB2985E23E6FBFCB
496A756436E98DA39EDD48E3A592FF389346BEC4AD2053E5711C82A8C9FB7C71
0BE337F83D7DF5EA4F3B909D37F337A0AC175ED2DFA9A91C8A3B0DC136D58632
0141BA36D375BB942319BDBB026C5C8FBF8ADCDC18A9E14590A0EDDC904D23DD
D6C9B9128B0FE0D627410841CC99B5AE934EC5AB4F149D581AC2E477F3CC1EE5
22D6D3A67F359558542A92D1A7A4312F687016748432FAECCC47131335C212B3
0B9BF23C4C6B1B47CE12AB58F7F52BA1200DEB0CEBABBEC8F6ABDCB407CB5692
EF95D9E03CD2DC870E1AA50C1FF2993642230A7DBF18E1A4C7BBFEBE58A004C7
1C69E821015303BAF3DEAC116E6131153C7A6493C216DCA8D4B49FDBA197617F
04C985285306D4C04ED9C35616C36C10453FB99B0F3343006CC96A8EB5794983
8A348B691B1DA2691D2FD404BF90E2E028F14B6855C978AB160D2A9575FDC24A
2207E59AB7A529DA18688833B5F108928DEC87675B021FE9E58468ACA69BDB7F
F37F0397B2020D3E880220549405DEBCC5AB0E397BF2AF5D2E6418ED3F909057
88CE96BC6BA8BF0A93D6B1A3FD6B173332ED3ED63FBFDC3C219D4D5B7DB3C81A
6ECBF37D45E85363DF1E379452218800262B6150C444B055ECFEB763746FC0A2
B413C31FC8D802F487286771A26DFFFA91D2E9AB6B3EE7802BC120A50FFB571B
EA70453AE60BEA64C8DFF71339D2924B4AA0F6045175BC00CAE56E17242D0FC0
2A19B4D27AEA56ED5E2E7ED6D1E5BDAD28D36FCAADD3CA5E7FC82E20F56FDF0E
62094F7BE87C9539654639A6BEF1CE5811D3EA9D2AFD986D35F2F9C287D9718C
E98FC71CAD8DE24C6CB937BD6EEA05AD5FEE80D704283C9F0A171D9A406FB576
C6F502D148724B256199C196731EF7E6C7AA7E8D1F72EAFFA255A16DCC3289D0
453701393F00B1C34C060F15EC0053CEC7BFED0B12D4145F5C6810497B27E9D7
5B3FF85AB8335BE3402E69531BCE0D5004DFB2F93B3ADFF008BD50F3A7257778
18CD73650C2A4BC089561CB598AC585AFC791DF18D435619DAC79C6E1228B072
0C8332C0AB1116A1D6ED27DF905F4B95117C063DA2B21F5E97F57D5097A0915A
D56CDE8F6D4CFF58E687D14DE2329CCBDE10F2857A7ABB35255BC347949606CA
394C284187BF471FE3136A12005E371900BAD0D9568319130C83699103C02B59
1D94084A690E7B8B2CA8CE8659607A1DB044C92E7CCA6DD5CAA30A41D65FF646
450EB7DB57AB360835226123BFCE345AC30C3A7EB52EA2DC82F917E05939C2A6
F9F66EEB786FE0D57F3FDD89733004CFE1A4269E5E436C79CD2F54FA8DF41E8F
864AC5FCE2419E22848160567C4832ECC28196D528A128B059BD4635854E9600
C4044F520C25532C443B163F4A2E1EF5332C61623FA11270E1C08CA4D930B63B
A2E9EA6ADA2C41B5D25AC0ECBAB299C756D044C2A8E33A6CDBC99701486E682B
636A90902278B505BBA69415BF74543D00A6C8263841C32AAFF63CE2A1757FFF
446236561EA185C51F258C26AF2C0F1D1CEBE01D7F81D6219B3A9D82BE7F169E
313277F105A5B1854941164D66ADFFC21A737012A4FD4B57B5BA47D328EF400B
E378765816492E09599F99954773001D0E9D0D05DF4C76D96008A6B5304B7826
5B27C7882DA2F49827CCF0C17071143F5174D2B4A879454CF0E9C7F62398D988
BDA66704671E563EF8EC0120FCD57DBAD6C2DC672BCB211639B11F8FA91E04E7
9B17B14B3D6961D460C9B8FD83A99CED325326D153170CC28A340FD5DCBB933C
5557F9DAB68DB8EF1FF010183BF25E1F42FFDA16E67D915592A91D4AB3F7A7A2
7B8DDC6BAA38B4380512EBAD4F21562DC1A3A0FA6BC4DA19D41E2FAF4E6B514A
E2153E76199EE96F7805DF2BA89CCDCFB0A0972F89A4F601F280B0F6BE08C400
AD76EF9D067195153711D1B68E3E2DBABB50DECA8BF882B1FFC571F81A2FA2AC
15CA29080934E69FE065B36B265A63F45B5CA9BEDE9B4149FBC489A4C7015BB9
C4109E89E7CFD5F5C47BA0C27A85B292047831CEF2054E84BD3442D35413674A
A6FA7A488DDEDA95D29FBB8F8071D07B6074E4BC1F616F6CFEB07C1C7C45D809
33038F1BE45754FA57CAB556A5A2391DAAB3933DF9BEF1443CD00542C1039ED2
627059627B99969D99B7852C0770A8B4BF80641C1F340A1BF768D9EBE6710311
150931AED37B71F352CCEF1ADE80D928424F3B1371BA1FA319D8CF831273356F
2DF81AF662FC750BBD19F3DDC54F3D9A8ABD7295F451CBCF623DB3A3215452F6
D1A1689A196C4E2C8E6EDBD3D529782B8F3C9620CC6631A3694B03D9959B4260
C56AF62016DCD0607AFD4EED93FDB020040175C45F0E76FD5DF7F6268B0FB5B8
86111E7B9E5DF9D6FADB5722F2BB04D894FF6967548E00ABC7471590989ED6E7
E4BED36ECD3B2D68A2AAD8941F853CB8B89B768BA139D2B390756918652EB37C
B7022D10F1B8A03CE05909AC0A2ECBDB83AFC2590AA662A4DC224D329F462BF5
BE09459452FBC998A8BFF455E9C78C7DCAB3F64FCEB86DB9BB1636D08F90A965
C7420541ECD617BF00B60885285CC01B43C52F5C88CA00CA1DAD558C1F23D3B6
F92C0A88EA6D4E9F458D42673E4239363B844B8FC76DA49DDAE6B8B59F0B7C2A
DDBF35D7F8B78C9677A2528C241D90C0EC9CE33D273A61C7915C1C56BFD8B13B
7C66C8943FD693759A50F1FF478BD1524A94692D245BD6CE29D9C6C1799DA3B6
B4FC392121A2A709CBAFDC5691280B88464142F6BD6C8150FB4F57C7CB5E280B
AB805D1B06C33D0499178A934B64BED5FF55BDC24B157156641328C59689A76A
E5FF8BDFC4706F9034AE2CA622E0E16C9665A133AFD690AEB355314E4E0A863F
790FE3B5BA127C8E65B349B69EED368CFA2F39E2BF7BADF84056D65B123B00ED
3E8CC9DE6B2DDB2668A6715609CE0CE9DE9AA69A9EE448637663B50F2558AEFA
D9352264A2FB0774B1AE62CDA5B9A6DD73D4840BDB1FCB3ECCBD8BA28C1101AB
2CF253C3927F8E746333279694C1935E13CDABA5B06887624E96FB145AEB5CE2
04C5C822E69F93D387853429DF60A810C1A3F0416B6A56105562641963063EED
8B744E8E9AA9F4A77D6FD2A63AD18D99AEC70CF0534C6F7802187C22DC9FA397
480DE5495DA6F5DF55AA560DE11999BB7031C18CA9D3D043CF6019167D102001
F46EE61FC0DFC63ED09471048528A2D877D8E11F4CC7B525B7930A9C69CE4775
68332D75D2BC2657EBDB5BBF686C2658E90924C422377F66476AB491CF08EB5B
12229200E1F189F9A1C41C9D07C03E57506606366AF6E53C61030E9698C0B93B
7D2E511A96F0B44D466103BD9CD0ADF9ABE8E3F24D7C1E1BDE42023C16779B99
EC2E3C3198DB128E0E7B942CEA4445AB338C526C4D08AAD868A8956BFB9FB3E7
DA8EBF491EC59424CCE50FB5A3E58D0BE5243825E72E92190655CCE0725CA41E
19B96392B4E8D167E1EB337A6BC715E7C0EE46F3B4DD24329CBF44BA93A6F71B
A370327BD3CEC646FA76896B637D487FFA1EED74FCA6C608E9CF131C3DECA9CF
D52F880F5225416909CD837EC0B57FE73D4497937C9212175C129D03097A35B8
C1FA2BDF08C41FBDC0E2A514CD30EB58E26705575B5130189570144970EBC5B2
5A67E40720136356E63533FD24CEFE365DE0754F8ED8DD9F50F532780500A559
CF96F98406CB72DAD6A7DAFA8E65CDE1802A3EB8BBAAA8DFB9F80DDBE7DC2242
88D10E926F9D821140316B0476DFE6947AE8290217A66AE0EBE6A932A5AF1730
3A64CCBC27B0D7AC278FB9B8E12EECD0A4653695E5136479A65905FD328E0212
94FBF2E9405866C684DE8146F041BEB639737967BD732E00D3AB49FF81AD0F69
8234387F8DC266398A33351A04B02EF7F95F4223503E187CD98E536570DC81A8
2C58459187265026A6DF4A13BD58AD8852DC5D5B5797EDAC51A0CE2C75CEE708
E8CFE793E7D0503B4FAF4242FFA55138C16A7AF63462AF1CCD33DB8025905CD9
730DBA605F0EADEA071C15E883AA6855F84FF779C7AEB9887300B43F9E77204B
0D33FDEEBDCC255B8725770D965F956BFA28B2C77B1FF985A53805D9B831C592
E04F87CA0037FBF7719DC6A65CB0B025CC9E12C44829214E5CBFA02660195FB5
5B9F5CF0989C141971276A224C16D59D19AB7DFF590CF52C5A2B1010F848E1FD
E8190F95787A7F8A3C1D8F7F3FA313237FB618F7BF23A0C2DB6042E66C594784
DBA4A7C5A4A4BB7B41919E846384818A44D7CD0470F350D9D6792E703A65492F
9D0FA0FAA798FE45FB7A0BD478D72E58CABC279194A4FCC106D20DE2D3D7EB32
855F29F98634E4329024B77548F1E513647DA6F710691225CBE26522F7242082
F65438E97F8D9297C5CE3C2C84F370244B3CF63FA7818752B84519737D82A4B8
3AE2A9541A49DB6B3DF793179A3FA0853A4BB5B71428F282E4C0190386CA899B
F0CD805F1EC379D553953C9FEB3B2563BA9DA31ECDD19DFBB518C9DA727AC07B
6B61AF35D6210B3BAF8BFF264A3C930CA80AA5733D4A8E05A5BEF99E92D3ED3B
938087A89A51E8BF10DE1F1D17CAFDE77199B48405E1677A4F8D852477BB1D6D
F5A50A620D35F90B790D883B0C896B05D2E05DE8F78898E721F4B3CDE0F7C789
330FC504F90005F7F93B3F2597C0ECE5AC45AA94148173CC1E0308CA362F096A
34B5C2435C1F4F42F0FA003D876636016407FB9F1C02637F30B60B5469BD4459
2A9FCBFFF2324C5156A2982479802B460A487C2A43B041A6653ACA6185FEEF6C
72FEA300D2D47A478EAC363D0D75733F84F13CDA0B6539D091A3466527B59B0C
FDAE2C9D0CDE1D91BA212EAC695C5D0132D83CEABF5A691BE6A7FF3A45CC131E
559A8ED3D22E2E00B5448904AADD3127433255B6F33842F755D578879DD21E46
00F0EA6F97F0101BE2730147F4F37A06717082BE36A151F4A1C81C18ADA58CF5
9D0EF295B71C90A5ED305FC3BD7067B0B91A6C9A7B0771EF747F5212A6DC95B6
CFEDE034A9613471C3597B29A57C3517F58965CA46EF7229881BD4C7DE97F8DA
404F43A119F328AB5E1CC4FFC41034FF9DDD7C0C7B045980B6451E53C608EEC3
D8458362F00E36C570C19D490EAA79C947115BBF9F6AD74AB3BA059EBB021487
BE0C053E14BCD7D9F72150DE2084FEE6C7AC053B5544EB76199525C8D642D169
A450FC54F267ADCACD5ADC1D3AABBC606C87752932DB023293B157288AF34FCA
B923DA555A24F5E48CF6C356B032899EAE18AB9970CF4226B87E5D51D713CC64
B42AA51FCBBAA02E25C8D8F7BE18638FEEB440DAC8EA6C88F5BF25B5C289A0B8
165CD15E4DBEFFEC801DE2CF2A47ACBD7622A6446B463F7C7EBE4EFE757D5F31
009981D996437C978A251E58E5238D15FEB2D2D618075C2ACEEA321AD74DAD6C
17BF5A45F4AA1C626E08382915261C06B6E901E9EAFBE90AF87DEF91C332533D
7826CC707AF9C9E0F868D1797526551E50DE503527F0A8CF384157E5F0F4F259
DBE4FD023C00E7D1A08DF963EAF75FB365B9CBDA7A4C1AC5385968E5FADE84A0
D925F3992C65719C22C0B5019B893374B7A33F96A0EF46C7A96F94842BEE9674
936FB0B1B5F236D716F75A2C6562294ED2E0B0063B5358EA52D5A2FAA636A127
5C9868753E74A70C68B4F0C33889E4A8DEEC1BA211962C672E3A4AA422732071
90F47C7FBEC72B9ACEFF2305E6545BD38F5D151A706B09FEBC95E755B0C17568
6F43EA1B9C9CA23BA885D1C37ABD56EDF5FA016AEB19E0E7AF3DD20E3FE67E43
91315A51F9EB90D081F2F8907AFD01B4632100F94382ED911AD8EBF39B0A37DB
72FBF4B7B286D3B4BD88AC153F53F8C1F5919BFC5A1F83958CECBDF718B04905
C85A916D1A530670325C274255D2BFDE2792DEAA2BBA8D31AC4532B7D88CAF46
3F774947AAE7AAB8B2113F18BDEEE8D0D57B09EF8C6FD15E4004166720D8EFF9
C41FA2B2E47EAF9B93F93D3835B57A49E3159A953F4E08CE853996CC2D0EA5EE
0C9B8CD7F5CBB3B9C91143C5BD4BC43D358874EDFC2FC08892BBBE90263EFB9C
4CF013CC9725B8EF3F3F2686956AAEA83206037F698465BC1B1EF54A4AC0AFAA
241DBD42E7CE57D768E4969518DBEFB80A86BE3650BAF6E7BF37E9147C7E871D
39982CE8975FAF42C11793D8CDFC19C97820F028D347732800C10C6DFF0850FA
D58D4FF37A28F77FFCCA2F2F4EED77BA4069E76E096B829B1E74B02B67C9EFE3
A2A1ACA0475A6558BF12B12536D782434B6F983609750C89860433C54277A35C
9AA6FB543B0C5090705ED79A3B8A47F1271F244E0830320A6AD14E6EDFFB3EBF
B9130DFA9CA265EE48948E397F8CE2D282240C6929388FD7F8F95FC796B081E9
C62A656E5A5A07563596ECF985EEFAE0522F6D8FFC6486EDB233A43373430B87
7AAC803213ADEAF899B491DC12B375E171D9C3A3D8A3B135FE70509400EDC6B8
9809E8A2386FC957EF456551500CD207EBDB667094D495E0AFDD80C4AF5DF80B
96EB437AC9CC7E787A5605B9B3F95D33902A7B16A5DC1F20D7AA330061916608
A930E6B542DEE276298FB6AB6CD388D30D8ADDEB5D2F6C9BC56A92213384906B
773D779AD224132E1A326A7FD9250A6281A999A1B97687787E059B35F9741988
E9FFA3B942DE04125016C41ABBCFF53375EB70BD290A575B19AA341B69BF6879
3EA9D926AC7211AE5CD915D57409D6CE93E48C15D1FE6E22950F883BF5A63A1C
89FD0E5AACA94ED79C4462598DF20719D814322BAAB8F506662143AC7F15312F
234D4D021079FCCDF6D979D7BFD186D88AB84FDC636EE6CEAF014840C04FF5D0
1E84E6979503FCC924BAE0694C76AF7679641D7AF31066A1FC9BA3F9B3FDD659
F33D9D246AE8CBCA8CDEFF0EC3B8914A823D40FE2D2405523101F08EDAABFA6E
B67C95F44FF638CB19B746111F3415AD4B797C0CE920DC61C9376F43897CDF0A
D720E069107A6F485F8145CCBE8856DD17EDBC17089FB28B7C58DAF46AAFD692
68CF61217406A27C75CF8CAAC0E133DACC669F60C647A9FD2A1E172B686E9049
7D0BD0FD1CE47B396669FB3962B97BAB0C2A6878E4BD25C632CAFFE7E092A478
F8EA206AA366555CC7BD597158034E8D287592A4F88A8133DF881A02F0910446
81ABA54C4621C2FEB6538BBF247A298A7A8D9326C51C2A7417D01BC7521DC57D
F81365EB49E84449489AE4071076B33A3253C999FA27CF34D805D409A74DCEE3
125CC2F22EB648B69BB5CB7D3E55C022FC861EDCE7F3BDB0E64000C5C3E2A4D9
30B1744EA9BFA19F604AFF1C1C7F06D7DE3CB31406D87BFFDF8A7930616581F1
B5CD0A58C021C0910763D6059EBBEECB78DF690ED1C692E8C114A5789AF4FF49
7D54824C14B88D8E7965CD3A866C95D4A684BC9804319F1E307BE652A6FFAE65
C30AD0EB8D85BA4259F50A4837A08D7D8DC5A26B3EBCD3EFB386FC26FE724CB8
8AF4CBE12CD26E227A075A554F9FA9EA8614DDDB927F5B3BF9B315C9F6813968
6D99FD19E2DEC85EB2BE4392E3F257A365C647C66B49536D976CFE9DABC1E813
7CFD8E5A0DDCD3097820DD4CB5976DC2A0A717F915EC20DEC8E14A14BD682DEF
CD0D804FD85397DA39ABD1978FEF3BD85B6C2CEB11B996F62DDBE519B333B507
A14C98924D537A4B2E556EE13B596012C2618C6FB61C68169223A64B5350CBE3
19E5EF06990857E912EE340840EBC0A4FAE72F7554F027BB8027E2633113CAE0
294A2B0B3C95183EFE24DB1645B8A1874F76157E49D628AF8BF489564BDD5B0E
DA22614238C66E7612F7A12333833D0377DE8A74B00B656FEBD5CAEED6AAFFE8
EE9FF0ABCE9728722C04F19A395C0E072B5AE58AFD416E0C5DBDE3B61B2A5527
8FEE2F75D7271902B06A5089C76E76279DE040B6998AD15A051C413245BACE39
045952648FF30F0AB894366335693E75D094206BA63083C1D5DA810B4C8A537A
EA568DF57672C4AF73288DF083C3C1B1833D9C42351787CA37D69717CA1E8E95
DBF079AD9A0FD994D2DEDEBC0D0847C53F2D2F5FDD381DB27ABB16449961F30B
066343E45D28AA870DAFD5066D22E662CB73E82E06EFFED9F2798B38A2964D61
B4D1B85B20B17D2F59706B0B5E7DE0737546A5AF8000D828F0BBCCAF443635A9
11C9F4D2BC61243885564027305968971F438C81252B100020FD2D8D13A63CC2
A6D36645E6A7CB26D4A418E4B89B4B6A3297CEF3994F01C4AA8F65B9BF4BFFF9
E0D4D6AEE8068A2C657D812C6BB68D2B2A0D1ADF5D6A1FA99B31A393F4DB1EF7
6BFD9A468F70D37E52ECE943561654A31711C237FC0619B8D264AEAF229AD12B
3361705F67F61ED084A676E87AE3D0175BC93CBA6BA511ACB6F957B5BD261845
BDAE4E0C1B514DF1BFECB8F7FFA32DD27D295D9C24033145043EBD3CCF93B8F1
B4BCBD26A7A29C973ECF6BDBB598A957BD9A0759BF11747A9418A39F7A7026B1
20C34321981D66DB4D1DECF363D856CB172E7CCF986BF72386F3557489236880
AFE67F8099BC1DE77028743BDD06AC9A21E9288DDC2508D581B98073943F2BDE
839618723C149DF11BFE38A7AF80ED72780F904D2650EAB75B90EF07D091916E
E121437228ACE5E0C71511BF1F1D938C461ACEFD97BFA09A780CE75C19C7A05D
A4B9C46ED49EE0DA318AFB2A0CF983795259118D43A76D5826569D03ED2D89F0
681D83C1C0E26A7A29D8229C97A6F5325882BCECFE99AB1281AA06A564E7C6CB
26593E0D799DC1FC51A3BEB80620545C4567BFE0FAE284F6C4FAC023EB401571
D506413A1FDEC6D297ABFC767C7A3ABFD4A024887D912643F7BA79E5A2E0083E
4C1033310242E823E22A4E00EF85C03F169D177273B86A810CA6847D80F169E8
7CF8FCE4F123550A2C94C3AF2F894336E13CDCF83504F29E15C418E45E831B5F
D1EBACFAA700BD917DE56E7B352E86EEAB5133502597787DD6D3E82382278433
69B780808FDF8DF56A87E898F885D24CBF5B609A4EE86A122039392E35E65AC8
E602128614C05CCDCD23E9182636E621530773D86F023CC4FB8DFE1BD2D02B8C
DC0798935D11C2D99FEB7B413039830A90EF19CD745C0D63398C83E1DE18E8B1
5DC7EAE62416D0D3A21CF66206AE2DECD68E76A5BA94F054E5638AFCC6540A55
D47414F8DC3889AB1AE471287800A18F60C0C70D0AB5AE3ABF4D1033E7AABAFF
EE5B6E24ABB9A396627CBE31F506844AD0C67225C995601EEE9EDBE9205C3C0D
0CDA5356198A65695C055457930F7E63A8DBC79D195F137EF79873F1651F829E
212D6DD2A0635F302775E6A968991AB2FF73E43BD2220EB0E092365563D8D437
DB3EFE5BD5E802D527CF28960D31B39E90AC8B28A9D71A9886A4CFFFB4C1F501
AE63979542ED052C6068ABB108C476FA89E5A2B1DCD0868B1F6B93B8E9D6FFC0
EC614661E28961CF177FA2DD80A3FEB9B5DCBCB014B871EDC60220AA8E83A916
295C4C74C46B2BF3D72C4A9663F8B13834B0D790AB4AECEED109FE1EB1C3AC0D
8574CBA389B41F179B81903BEE3BAA4D81D4EB3D173DB814D899CA5CE57E906C
8CDA3FC9CE3AB197E76A7F3084E079E8B717B2B57B2F0E3CC323A0F6DC5032FA
C4F396564E6A0CCB433AACD36E0C36290EB21D064B61FCDF8AD4B4EAD39A505C
58785E2F7AF727BEC65C3F5C6B15589CB7D972E52D0399FB284544417DE968F0
A9C5683946A89B71EFE1460B99F81EDB7E5AD0D60EF6F479D491E9926FB73FEF
BCAEBA1F431D48A066F843ABEF91C5795CF92E9F2A33B48F3DC079E5A79275FE
D04442C8F4D95A3CD668AE18D6BC28C7D65DEDC7382EB5F53045230DAFFD2795
A6EE00F9AAB01665E1161FB7FD553FB3EF1E9F65BCD81F0D5BC460047665F638
66928B61D8AAC34CEE6A4556E87D165B757BCA8755F810439B3C8BDE184A07A5
95F3272ED064DBAB72D2642E1AD1885110111439EABD8DAD3DBDE381328EFE74
E50D5D135939FE8DD42F8E1D218C6718CE2242FAC89BDE44E65488AD8B0F2BE5
F91474F6F0B6E13D1D45490478B30B698AC0CD1C80DC44B9BC29D7BB5EEAA5A8
3F955A635FC49DD0DA19FF471F0CF8B1BFBDAC75D391DC32DB68997FF635294B
7E69CFC8E5F04D3B0BC7568711225E240F50F165969B9959B83A53ED8086D8D7
33A4D590FAADF4F58174D9ECE40ECD23CB57786CB67E54A7BB57E37AC1E8B522
9309601E2BB18A7ECD5FC172381ADDFC594DBA910DC9F1E782A3ACC5F17F68A8
88E34EF4E7C1FA44D09DA84D6A05761C9A6111BC3FCE3FF954533DDB12C1ECE6
E470D3693F99C6C81C9D2A40739BDFBC876CE6E15900D77C6889A437BAA39738
728808F26454407F93D8DD33B052000A22F8092B817376ECA76AA96CF0926A9F
A19C72410F7A3E735B1B0F15071D57B2E3A0FCA279C265DA887EA695ACB02230
8B0F95B50CAD0A796EDB9FA67E79FAA8BDFF48C860B53B8D01F5641F0D9B9997
55738E7BCF45A95126B3FF6EDAE3CC383153864B396A1191049A98BA46824079
9CFA230D609870343E4B19E047E2E9CC99F487D9C3245117544B86F8AE780E4C
3366EED0AE649493422F73C8E953BCD34A9F7CDB2308AE64AA6B0DF1C8088044
294ED25E7DB1D56E36A8271B674EEEC9916EAD7EA8910CCAA4444FB789CB9DDA
5B61CA140448ABBF5850AC8681711F65C24FD11ED23A07CAAFA3A4CF2220D897
31C928F7612D00E6C587317F0AFFAC6E93EFE96EB89B1D85DC2A1723F7E4DA1D
C8EBBB94C96BC2011F0D2F261B0BAFDE060B3F1208F3D6590946D6887ADE6FD0
4921EC2F9A4EF35D5DD49EA7B2EE56E4EF30081A139D29B540558D4D293DADF1
1758455729CEE63D485482B50E5B8983E13836CD581AA4482881A99FBE0D29F4
5E9A8CCCF0CA051617C37278E195B1ECB68E92EC7C5FEC5D35FAB5D28BC1D21A
755909A6ADFE9B87922A169EE59FBE526522EE3DCECBFE794B17DFB6C16D6BDD
F0B383E0D4B8DE717DF98667DCF9A2CC8A89AD393A9D6D721327B28AB06884EF
05838CC381A5661EB91BC195B0B577F380B79EE560BC2DC1025CD14AAA2AFC70
A6F3A79B0598FDDF599FC9D5F312E882BA0482D72C9F703E8476AE8D48C84C36
24DEA7DCB19155D0BC8727CA583B7AF7ADBB9D8A1B8092F8B85569786EB93791
51A4AE4B14450B9BB2528A85EE054D0FE9639566E168AE8B88FDEF963B1B0A48
F28211C382AEF23EB75E1365F4BCCB721A39C457108ED2C9125DA8C865979289
FA20E954CE609A36C455110CD0F513F3D07DD0F240A4B796BB663CEF5B691F22
A7C8A6D46302618F13138433E1C80423262D15C976FCFB4C46129C0A8A145440
93AB4A89174701674074CFDA3A18B9D00EB822DB5D37182B9A5FC85DE155DAA7
A65BA05521663F931B7AA8EC2617714F3A656DC7AB1D08847CDD7224DB259992
9341D0318547641E489AB8934B431CF213DD191701B539969ECDCE85054BC2B7
11CFEC17F9791346F89124203CD303ACAD4101FD99C7993A0FE3064C4A7804B4
D1BA3D2A0D13DE28C8CF5F6A153D1A59B0AC8BB4F5FA6DAD0F18108E0C62A946
3A59BBD3E0B564B1252C3DB3A03653AA324C23B37CE3BDD53B86D0768789AC34
24115C25C5C15F6E4534AA63F510EEAFCB10940302117BFDAA85D22120281A55
E135F9145F7AB190E2148B431ABB7261311D7735F54F73F2F19BC18CCF04ED93
9ADCC16F6CA3E9757A07CE257C21503B808E6B73F4C72616187B05AA54BD8F5F
795112827C8BA99DAF4D862DCEE980581BA66287AC4DF43CA6161D609DB8D494
16ADF232C5FE8FB3498485E4236820E40026FBADD358E90F3319E7392CC4F724
6E939E63686A55A73FBFD7D0B6DB6B0730F7284DEC46B876BDDFB736EB90DFF6
1A404FF4AECF4EC816800CEB56247A47F868C38D6B145D5CF7AFEE372C605B6E
7F104A91C09C590D9CC46A774B4B36F5915209CBAC1D5E2108FEF39A70D22272
B6C57541695FC1018D154949275FD9F3BBD2E1FE0B4D8424B13D227E636D4D5D
3A71BCEC2DF7FF834D08267AEFA34166165432549879602F4BF9FC4209733337
00B626D7119EC303F5FA3BF1998EFE5E9910BCD06CDD1D3BD5E4501BE58DAAC5
04FD3EA86DCEBAE23C161AC741F81BF9ECDC99DCCFFE164F44220FC82B0B9A62
0220A131342A7CA2C4938EA9E2CF293F277E9638DD4F00EF0F2B915EE5227DB9
E5FFAF71BEDD02CB71D32412EBC10738713EACB1ACA34FB9536CD3696E5601C0
1FD1938CBAF0DEEF93A1C4213DDFC01EB4BD0848F245D9292D50FD7F97E8291E
64713CD53FAC15B16EC38095AD71998E1416D2F39949AF5217099DEAFD2BEB3A
6C2CF30D6978963B4DEB148266A9B8BB6146323AB659F0D7AA735DB6A4F721C7
CABD8ACC833259B7E21FBF40789CBB1E68B4FE4573074DC601731B8408DCAEEE
CDDB450CDDBFE50B2BBE4DABF975D0DA85EEB84D8E8D1B599675ADA2D1F10525
DAFB03A090BD1403AA13126E33D5E0FDAA886C447D92EA241E74A2B327FEC501
565B0D2C99D92F2A96B433A977A31D63CBB628CD747C2109227EE86979834E0E
806EAF611C4FAD4B299112E19F7FAF239183238D4176C5F1CAB668AD8134258D
ED097EA75032F0BD5FA0F7810A2469A7ADD27BC16F93EA051930FA38B6B698A9
5F50AFE8BDCBDF072FF52FAD0EEC0961238DFF25C3F7ABA37E816FFC71D17460
9E5A1EEF0FCD726A5BD5B653A0432606BEBF534C5EF3228CF5E830D749944CBB
FBB3F9E710E8CCDA21C1E12B617857B2B5AB762D4BD58AEBD6A569C1B4075938
CBA4F0C455C52E184B96A58658FA6BE1F1E64CE50CFB31A8D8D79C25D86C3B99
43D04B9227784AE330A8F5F5F7C6ABEE2E5343413AD5A908BF6C05494E4AE9D8
66C6480E0F76B388C97FF703E21498E4A0D9348FD0BC8D3FC6655AD854791576
11C1566E1B56D843C40190BF576A4AC4752267836CD9DDCB9AB3504FBC542ED1
06B0F6939FD98549C0D93B0DFD65636027AFA3EE084D491294446FCE1ECA5369
E94928C74247033CCD24044F4468156EBEA5BC0981A1D2ACE507CB06B29F35F8
1D514155326689E1583D4F3E4D6A5F6AAA6399551189707B0AE5E8DFC517DE52
25C982BC632B0BC806DADE6C9869463560D8309C861B6AC92D99D8D315B0A420
DDB36E58C6F3788D7E27A51EB978EBD3001A29A946976ED9D57D8BA14B6AD5B3
D9FCF7FB987B61F44570180CD270E144C50E8D6FCA0B89C5700E205D59556A6E
219FBFA9BED84EE5720C44BFA4FA78EE6E610CE2253D8D114D11FE1414AF0E07
2FD98071281CB363F575D256DFBF801E1768C2CC3279CB154657D4E7506C2BE0
901542DC5E3F0ADCF2B0A6E28ACC1F6B0350E832B0072A55ED47BDFC991253BF
17C0D2F67E3F6BE9EEB96FAF4E90A900AADF31A791E488E20607E813A67DD1CB
6B517BF18F0E7F6C3E43B6EF33C26027EAF52F4C7F96C19C676AC450D084AC18
8D22997892968569D1149D56E826D4EB4D25D1BE43F9F108810561C9318CB616
266E0F3D5022CDA901AB32232ACA3A55CAD5B31F8A5DA5D12458282DDEB8AC1D
3B5813BDE3030CB6EB98463F3C6406AA5086F82DE900FFA6AE3A7A4AF23BD6C3
FDC30375099F2D20DFE1C377A001751E55A06B9FA0F921DE5D1CD70771E147F5
ABEFAFBFC7437A98D5264509544D9A4E2DFC59FB429BC62A41FECB2627AD2A5E
82B97BB310DB4AFC30A9874C5E863DF420020B77AFCD11D6C804EC577B28F51E
EF219E4AC4B5EF516987BA5332AFA56014E65079BE1AECB6B1F0B571C7B2990B
2053DCCBA25912F7B8C983EC167A2E9CDD5A13418C8F7E12945C9BAE13F5B4D5
58687E2149833C7B920899503A2B39030F5CC11CEDC6510B918F29E04A95EE9C
BEE745717582CAF6093E76D05ACBE749B41792109EA65ECB294D2DADD2BECAC9
2FFE858F1DD1814A31B642CD8532F6B9385E55AA2728B91BEF70CBAF8B5B73DA
05401288C9DAD527A072B8D4BAFE74DFC0F7957E6D88DA9F7B7F51C21CF2E110
532657F438D514948278B0C5E6DFF1D21D9B21C174C825B6623C73409F3B3259
2DA958FE9833597055354386642E29FC8F927A03ABBC08B16DAB0ABDA88FBD2D
89E10D99289F202188DF7EC3649A0F52066539A73DC87FB498BA8BECA56A582B
D770FC9F4A1FF0F6509622ABC45860610B46DAA143450EA55452E2AF1FA74627
597DCF48EF482E3A9E594BFD49756CC603D9BC70D40974A0CB846AEB3DCE19A9
671B07D22B5E8F3ED19152F958931324D43E06138EF6129B1C9DD0420E4ACA23
30377F98906B7EE29EEC3640E24DF8B25245E2555C64D79B60219EC9DEEB77A2
755C0C04121A1EFD8917B94F980E9750433504D42179B812E39B51260D4F1193
2B9745A321628BF516DA4966B690A40EA0249178FE8463DFFA260FFDD04571D6
6405BD034D7CD379DAB4E35E6064222814A41CFD06F5C89E582EF5D8AD1F8084
44D0C35544936AE0EC96D41149D4E0F4C46079568AD7C7751DBABD4DEC204DFD
BF196DFCFBC4CBF295B9F0A037110DF75B36958E0E25F136AD3F2BFFF338F03A
56388DE71DCB6D52C95499BB0FC7618358E72FC30FBAAD4288562EA2C5A38FF4
6E0B7E689D4459DAE711B2D18C7CA76DE37714869E3A03FA09D588498506135C
0C30D893307118DC51B73A6EA7944E92B92D9D74F4066845E7DF8EDC36A3555C
C998D369E429AB4E7A5B74629929878BFDFE474E202D1140B715D9DFA15FD4DC
11849BDC7D865306908A1208B258B5DC6A318FB60CF23D5FAD3588F201240C2F
7E969DCD77FD70BFED22D3AE1829F69BD8EAB3EFA750B6FD54F54719D071CA33
C5EFCA0AA9D14468518AD3F348C287458FE650423AD3CCB7064C4220485B4F5A
0BD0D3BDABF4D0E0959C6874CB804766AD625D511C085EDC6003FBBFA0F35358
7AC10EBD24A22D3BACA660471E9D3092945844188B4FC0E43BFEEF766A71A63E
4545B8164BC003D131EADB4A5B477FCEB3086E14ED7A868777E723275EEC95E7
C9AFA40EE4FD80CD3EE59DA73188308AD34E5E01D0FADB49914C831815BF6BAA
D73BD88093E77D6926C39DE5EE88A4109B4F88739963694741605F8DA6F688F4
0EB22FBF1234E66EAAB35A821643D3DC6B43FCD5EE8A01D911A0D7E011F532D4
E2DBF506CD426EB70360D90EBCAAEC2392B5457F52718CCE2CBABD889A349881
B270F4F2A79F077D83D06E20799A7E95F80CE94A1756312F38F73AC268DF2A1D
08928DDA6850D7C276790EAB9DE423B7EB237A886237B3DF24639C9A1B4C8E04
4A0B48A1D5C865D0B3A3C7BE0ABBF4C29168AA53EC9F7FA4B33805EFAEEE3159
F0B556F5965B061EA8DB0EBA12E329535C50F3E88EF031B3AB62E006C9577D35
11908DF08E1D336335E99DA7964BB7472C916490EFF6E61A7B289246EBCD4C59
1F9FD7931372778D81D45BD4C67CE50CFABCF8C18A1772A80B649B20B493FB6E
3C6DA280191B7181220AFA525A86829B5ACBE7783EAFED8E034E02F448B9232F
10D1DF96B6FD3ADEEC4CFF7954A7C2FBCC12D9C0B12E9EEC284B99C3329875AC
78480286E3D6A169395D34C47AA16736738A9975A7D0DC33F79600A545E2D926
39772C621BE09DF8379C06764423E90347CAC3A5BE1CC6EA3CBA2AAB3BEEC65B
0D126AB204FE977B383AACF6041006BAC59B80E15AAB0B904D6D86C9B9BD4056
57527CFEA91A0F2A9935D87B79968B1FC892C6385D7459B0B102F56829C57D9D
65A26EEBCBE07298734D6D9DE3D0DFC2AB270C26C20AA858EAB4F347E08967B0
22583EB4D0E011A3E3BA5B69B5014062D984419D28F29CC7E83DE5CDC757A4BF
4D680554E6F2777BD138ECCC1CB40035010D7C2FDDA8C4D64D7479FCC74AB9DF
5A35159B68C7F7823BABB19BCC36FFA1E456FC579F94A45256510A5A8BFD27FC
5148B654CE122CDAD57D7E73D03EE9B4F10BE38C21868165DB75EDBF2306F9E5
C464BED24846B86CAA926FD96B20E1247808FB3C145A285B4C7FF14B6E14009F
741ECF4450ABC27929C64A523E25651899D23586DC12872E24CE862EAB1F010A
B7478A5140018B9F996B1142AAF0CAECD9F0575F06507EBE3CABBC7666611647
D4BEDE24058A99E24E7FC3BBF0601DB1136B4F2AC03CCD5C0601634F2DCE9F17
89C1EDC12C8F722547B1286506F7CFE97D22E18CA4E1C6128C4FC94208268726
F8DA34BF901ED1C8914DF544FD1D3D7EC6724E2B90E947B05A775A54AC5A4FBD
04C2EB84A12006822547FC48DCBED94AD0F5CFE69A4031D91AEB96CE539EF780
E9DD1C59C731FD1A28AC4D0EBEC7312FD01EFEFF9BAF0CDFC524035F381E4185
EDFBF091A5773D094D9AD5D9A508E157EE3A48879B1A036CBBE2C9F4F2DA913D
3B069CF33018AA8739F4898AAA3E37579B4E561BB898DE40C31DE6E175870D82
0C29CFE97206A93B0AF72F3B8FD200742006466370A3BF9B68DE3A411160883E
30930711BEC9F5240EE9095AB3711F1214A749D415E86D5095F2827D1A3E870D
5CF88C07127846C251FFCC74E38DA82678EEA21E29BFAFF3744533136A4618F9
D994119E2EFC0DBBE08B71C4D2CCE310AB61BB159DB3D117250F70F005DC7A3A
E125FF263BBC6C0D64D5F1805621BD3095387CAD0CF8395D72299460857D60C4
67B5E3B8D269C74B431263424E444BDE29C8313DFB86431C1BE5914B43B4E4AA
A11D3AE920CC497647C55456520F7A0522993AB0530689904E1E699BBC425F53
AB4213AFF413559FF589BC7BED04D1ECB279F9657B9C9C21416E878855D825A0
5DF213683C61E4771CAFEE49508F1E2128B5243D2C20EAF23F605DA28C77791B
71FDFBABBF1E17BCAFB738909022F6FAC711BDE56694948983F8910F5592D839
3565FFDF8940E846692ECD9F1C6175C24E365CD2934380AC6A89430360585A18
A081CF9439E185E0A95619743F348F30A82BD38D6034D99CD59EE1016F5700D6
8E9E001F8CFA3D4CF3C0E59ED937992779D4D59E648A21E751600B20BA08EAFE
8D142598D0A46BC00D67139F0817212649407AA5E7B028510F85F02F49085013
6ECA9C151CA1E1101725591475629C7469457B5E7A2E99033445B12844039B8A
5E20CB71B17F6D49301EAB6EEB08F4960D07F60EAFAFF19E95C9C5CA9104E628
7CA675E0F1768168545F9F0501BD3144408F99EC7DDDC063EC4033C2EF11E71D
71CAD180ABE8B342A2C2A5F487E5732C32F1D6D424E87C13BC90AA6CDFC86DB5
D3FD2EBBD8C9A17B705F3C3E6302AD4170CD3328C1C5739A27C70487A3BC87DD
27EF12E077B39D6425E518FE2C8AFBF76EC70132461551908D651D2931C0B94A
AC1E1E3A89DA7A1E9DC92754B9BFEBDA6E51A380E621DBDA9E29F90AE0EA6241
AF3623AD34DBA5A9157E5474A8114599BC639F68AC938E638AEF25E93BDEF239
7A2B05C8E6590EB5973DDE277832725BEEE798E27C05DA63B0EC2AD91FC4148F
2A0BDBCE41695D8FBD23B95172B56F811125D98644ADAED78008EA6411759D9E
1039A416F210112428D4C5B2A32112C7A33D417C8BD4A2DAA867086727840167
DA0FCCF3583D3AA8CB16360DA96DD2D08DFAC0C43E44ADDCD2606D3AC819DC28
7255069DB6C4D2A5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
51E19B88B09B6E2EF395887CE66DE9F4DAD788554CA9860D4450843A3A99A450
1FBC143AF860335273A94E4960625B7F804FEEEEFD49975A9D257F6F1B1674F9
86C6A4D5957D856EF3BCD1EC5799E12F4A64FB3A48BD39E1555F059C0C5E88C1
66361E9194511B8E0AAA0718A31AE012073B21680FF93E48E0EC1669970C454E
7E5D796A23BE1943531AC5C12CD1C5CA1FEE46039799BAB1D6B99AD2569B43E9
F2743DB4167E9D2581295BECA7EE17A90E601FF5B7FDDFFDECBB1E882AE82292
F6F46FAD4C8C1E1272EECD29ED810B0A7214FAF236D4E749563B3AD1A5C09010
BF60478E29A022446205121176E2E0A3A7504E4A745A6BCBE22DA1E36F966E58
11ADAB0817E30355417DE7352BF4EFDE2411CCB1F57928C67AFBFA64E0EFF383
57C8EE45C93A494C40709E55EDCFAFBB672882A031A270BD9E46EDF5D762E049
E6D9BC986A7D7A83DE016901A45C0E13EEB46CDFB5424CADA9CB6DC92F990B17
BB383C6DCEA8EF8D69FEF91E21A654779148D42747E98EBA3C78134FACBCE4B9
A493AF229268DE3071DD10B188D697A6CC355BE2AFB4F3E713B1FB9D975E5597
3D08F7C936125DDF795F8CA81A98F8AE230AA8AED8C2040DE5F9ABF2868EC52E
DE61B67B4A0FB2AFAD3A5C3B4BF27BA891C938B5A37FA3B081B2485C50A9830D
9F9BA8A98439583F9FCDC51005A534C052C9E51AF57A7B2F10AA5BC2885F08CC
0CBCC5720C4266B025DF0C804A6913C95B13957C8098BE1CB7DA81FA9C149F6A
812016384F6546C62F0C4609E63EEB17C167E1570443FCD3BDC6D40FF41F60BE
57B6F2A10673088A9B15F981EE2189F18AB76E5FA1B840F337BE8B11F7055F9B
7AC5B4EDBBC352C1A8E92FED0EFAC5D1B502B12AC9CE61763D55E0C6CE051364
A66858D80FD2EBBBC9B41DE3925EE698186DC184D5F63C4253C6996266DB049E
D1F1E50F775702ECF0BFF36F82DA3B54203C69D43F2D0A0AB902740041BB1228
B4C23DE92435113B832E1E8817670F418126A2E3CECABA10B3C1211575854AA0
157967D8820E682566E644A9E4D1D6AE2E72B79F72E7DB8C9A46BD97D2B32246
F16C08B7EF5FDF6B0418863494799AB93D78CD0DEBA5668144FC336EC713CC82
CF8F0F4E4DE5C023C137C50E8E883C555A0B90A67F273B3122BEEA272FC93476
1664EC2A05BA788D18B0976D372977AF4C08D9435AD87BBD53C1206AE144FDA6
F2B9984D59F8BABBF1DEB89E5D58DA1334235B4498676C985A7C9F298184C53F
C3CDDC65220F659062753A889B74485F2AEE0B5FEC748348E362AECD434E892B
9CADF4D5EF841840FC6A6F0B69FBC10F2F4BD0EB460468C6D06CC6A120C63668
B6C9C577866D63ED41E6FF549C179C0A8A7BBFF19D42E3F222155B581B75122C
66EC7E09CCC7D14E34FAD5F5B21FE2D0D677F19A8C689D9AA23BECB1AE1DF131
B7BA764E6E1C6218C453A9DD0F4A2B9E1C74ED5394086F4CF542ED54E36A6AB6
3AB1FDF9C2B365BA08F02640C1F607C614359CBCD1D1B0AAE61E2E0D0646A3CB
3C14CD74242AB78719F8D959557B5C4F86F1DB7BE15D70E4A43CB7FBB647BD74
F4F3C501C3D569F9BFF91D9D898C2C3323553275442D0D1797B70A5293AEB70F
4589002ABF294F9C352C1E4F78F0C3E0B66A2603F55308B18A52C94B18A5861D
BBAE90B021791A5346DFB060B030D919C7F7B1BFE2E98D8717D02A15FF377492
1A1950585EC59F89120C83DB4FFDD73F1821CE092C57D70F764E2C321FD8598C
2B2A3C9E36431B3C816A295E0AD9F9DB470AF6F48E5B99F60488DD6AAF310135
7C4C7F94A5784518676923B3D690E3C7F5508F3AFA442ECD0F28946ADFF00D55
F22AA6A4383CF53914B713820CA11705F4517B22E4FAFEB7AF69FB88D7A56D82
E64AEAD390567258F8E53D6DA7BE60769C96DC633C9A507A4016A408DA866D88
F57A044E3EA30602805F0C82244EDD6D1DFF2174A3FA62B6009A9C06DD30A469
61DD282E5E507447692C988A6429015AA49E8C2BC0B0D1BD0F94149EE3545DBC
72F1B639964ACB6D5A7E01AB17FD548C5F08327EBAA026FA7A544A0A93A5B730
CF1C1FA2FDDE88E3A16A2A438887744095E05E47EC9E7E9AFCA904B34C33EB31
3E70DEC8C2B2F30E5D2307B7EF8B7DCBDF521BFD0A3584F0C16BA0EF9A2CFDDC
29409ADE013FE008DF3216F750365FB5084992009A28B699A2C564F080D8F7DB
662D441AF1A2496A025EF93BBBADB149B0E8FD7FAE2AEA5EF98EC4503D3F55A3
05C8A21A0EE94C3455DDB65A77BAF74C510DA89C01C3415AC78566DBB3E26E1A
4AB41953605C79ADBA039601F6AFCD6D76B3F1B2F92F0D1816C6254BF543C192
9141E094BEB24A8492B51AB884232E9D121ADB66C6A31218C5D80910564978D1
7EEB2C723E2C63913DE4A43CE1B23EC26ECED765F73F693575FE5C3360A0CDC6
25D2CC000290BBF54D37F9040E216DF93857BD2080A9DE16CA01166F975A39E6
EF891E4D22B39F4CCB76E926BF241EFD3CE3C6743BDC76D2063013AC1C8DAB63
F28735A4E96445BAAE35B2F261740DFCF0AB6730E3F33C3567BCFB11C3644A3A
2A34D886AB65E58157718C6C635A0204BF0685127D91C3AD5603E1C45CFC8823
72B814458C3610C276498CAEE49C9CDEC5C6CA510D1697AC2DE0528548562C13
5E0706254F75162D0438F882B656C4A9F4086A7135C53D896CBF7F8203F0C857
FD1F94EFED513652D1E914800A668DFC3F3B0966B4B8FB2B09B7FF9FD048387D
DF0B4C0C5CB3807EC89466DEE887EBFCE73991648E4D079A3BA8A9911ADF8CC3
C6318ADF7809DCB92F3B9DB2E308508AB010DB0715331A0E63B9974F77633E31
61FA6E64600D48329329A5A78D2174CBBF716EC5034C676072B0FC05B94A2DA2
981FA72292473759440CB93D175E88ADD1EDD25761582CEF61B8AD259D2DDF43
0B4219DDCE0C47625F6AFD4335810674DC2BA2EF7AA609AFC1CDB1C9D3A7A865
6C0C553DFF75F3A0361C7666BA337A505BC9DC0B32CBF3400DB1C8C3CF741664
C6A478978C3518303FA135D7AE5E37DAECF82A1D7750F3F53F9E7C89A31A4EBF
24FF7D7875B2D0D811D4D2847844BE10B8466A8D29199F4F9E35DA908E452806
5DF0F31F8B29C44632E2D63C350442D0B481EC493BB77D08150E2332C5682FC5
F4572E7CDE672342B98C8B64BF6E59CA5268A102E7404CA1358116258593B23D
EC93BBD6F49FAF912DAC612FCE2279591314013EA9945300168C5622A46FE7C3
F562499A4022C1D3BEB45C22238CB8B1B8C0563AA6CD917C5ED76A531AF23229
63B73A83A2F86BC191CF26686378A9B1FE313B0560C3FC06369E709275571F6B
7615835D53AC484C54D2BECA0125852CA7D28DAC9A22E2ED453D6CA88C522901
C381C606C277D26C34EDB9F2E30D6791EC4E8D2CD21E921C49DA434118077B90
8463125E0A6B7629E291F008D43125DC89D151D76CE56ADED3AAE0AC34B3B35F
5A9146632DD760BC202A23323D0B916DDB427EA2E241E2EDB160309A86FF740C
129A3487076457065A424DEF92008CE0AC08ADC3137FAA0B7567E0272F3B32A7
604E6D6F00AD40A44AC4DBAFB05714C26BCCC73F02EA512777B198EB86053AD3
FCA56FDEA833B3B34732ED273E2C703A602B82326D821BEFA38DFED77C63AFE8
48D4532E7F720BEDE2E0064BE22A5B9141F11F8B768B2F0851A9FB0B655648C0
FBC114419F11E8AE9629CF1ECBFEA960FF97CF29595BD5A8A00B5081061B6F3B
BD0B71E88A2B049A4F868BF0E582CDA9E28EDD82EF32EAC2CF58EC01BD53372F
2176DB89D61218B7A41F0008B53C8C835D5F08A5373C30B5E0A17CB457EAF0BD
4CFBF08142EE7FD24E03637B4599D227970F7CEECDB183E06D2DE8EEAD380A6D
C17B111E493EADFE65FA94033B8ACCF9BE8B9F9E1AFDCEC14D826CCC0078643A
78E6567E352D7DBD51B0990458B6CB8B9B2252610E36B304030ADA3FC6DE822A
BE5DD852F26108DEA8E477C71A2F7CAA5F5311F9660990181483AC130AF26315
D5D70AC07AF778A53161CB16138891B7DC82926481E021CB53EC0003BEDCDF05
258A62F650E529BBBE2942320C8F5436660D5056FFD6F363722F676BEF8AD226
ED88CB894B268A8C63765AFF22F9AFD86471DFC56DA3E9F10D7C5B1920E5B08F
65C6853A2030F8EE5E1CDE0C930753C9AC13F612CEE14631C14812B2A33E45BC
27D7651A5E8B0C46E6F1375BA2709D16368E072E2169AAF3691E63FFF6B999DB
F06C9CB1C8BA5ED1A3B5B8A045C21E270FC43E32061F14F4A9EE6D9E5786B43C
7DDF3233222F1F99A47358A65448214F72757A5E242E9C2F38F1FC2002618F86
F83B630089B48DE644DBA2C44D6369FBBA1C29F89D1892AD55D8179E90200626
22ECAA97CA287AA1DDDFB643C579A7EF3D177FAA08B4DCFF52EEF5F7D160805E
539CA53CDC814982B1A40531DA6C89E780F2612E09AAA88B1F6A104C8770D3E6
1EEEDA3DFF2E9C916A4F8AC6A45ED0B692FE7C9CEEEB73AAB8FFB6331FD47809
6952F9792A42338D892CBC69994A576F569A2731E01F3B1AD58B48EFD185C663
3C258D7E205A60E76E02097A804B9C06208C496543E0BF2F9D3143EEF5DF8D3C
515EB4A1084BE171D0047E439A0E82C25ED7FF4EDAE728A40F1A19000F19A598
7FA54B40D36ACA7F93536D5BA86AC14CA6B10229694A84795BBACD3B66F9F7D6
2C6D57D0287D62D19199B92E6E63B9DC58C4086C32AE3564B1A7B40E5DCA8670
240CACCABFBB4F49E17CD79AAA10A7D19BDC3AFD69B176E7FB87221BF013A5C6
A0253535C8A6DD1F07E9D91134BF226B28CA16CB7739FFFAE347AFE8874AA71E
4880911332B2F612402AB6548A0EF59C67227F5F783714FB05DF12E5C0DDCA28
0FC2BAD982FAA8B62F0E5DDFBAB4EC9BA2B1A69E97CA30668A1809EFAFAD0869
003D56BD645BE23DC114E665E9D8D06B215DCCD6DB9A8B863EE9CAE8A9DE3EB8
7AE86DF86053C13D34B4A0D06BD00BF27D4CA3552645B83D67BA660D49172E09
8A7F206DBC6D7F94725DE14558805DA7395222C1E9BB748ACB576140CEC96FC7
D6D26B321402D72D75FDCBE402C7FA4AEE72B231B88E71B9D3CC8D8924BAEFB4
4B8C610616DBD12B0345E5D3AD7E32A072FB59BCE7811460D186E010C7CF7AD7
4AB715EF5AF7BF31F66AE66EFD5B832D6BDAB9937E5FDB673C9A58C91E9E8B9A
7018BDE462B791CD3F83B840B2D5E5AB161B8A209749CA1CB121EA39631C932B
BBCC2F9BD581D96BB25825CB12C68A2F08E447E0C557FAEA03843BB4FDBF3EF3
0888662810D43EC71195255D81E64BE6623CC1A5D8901CF4E34BFF5275FE9BFE
037903C98440DE5CEC19BA7AE277DA2418F08755BD426FD9D567ABBE75484079
E8F1389C73AB452018BAE8DE316D9271847F1DF444E44FCBB58A92C7D46E318C
74B161A800FDF83BCBF3648B5F333E202E28B2610216E224B0E460502BCE3BFD
0D6BF0E2D85D38C5429EFF08414EE091119B7738A4163435FD071C1E0DB93C2C
095688B66DF033A21C6CD3941F834570C10BF892C57001EA90FE52102447E98E
BA3C78134FACBCE4B9A493AF229268DE30644C5800FCD0A97C2CE2BCD21686F8
797624292BCCC25E153A4F500E92F0D10F566B4FCA7625C148E51AB67E579DDE
79D7BFD186D88AB84FDC636EE6CEACF5589DC1D06BB3BA3BDCB696EFE8F214DB
1ABF8B7CEAEE480CFBA851DE7F11CE8CACBFAB95B617ED938536125E01173C16
AEC84A3320B7ADCAED8D5EC2F0D4D91551D197F5DD5A8F36653841CD4B9C2DE7
EB1F6853EA8B7285FEC66BCE759F8302444D9A84577E90EE8ED452A50B7DD324
A581288CA7BBB598A4AA4E2F32EFCF8CFFC534487848E83FD4D72FDB0DD55434
CC91C9E914CFF0D296E3461EAE4BF8657AD3FE2A8B8B9F05B07E6B88518FB84A
F75B80C768699ABFECFD7093AC86D1C2958033AE0FBB7520FE621E07BFB7954A
2B5A607DD639A614A19A33F4F1879465ACE48AB66C94A28272D9581E2C7A859B
82A42883A8F7B17599C1265B1F6077303667DCCE0B208FA935E0D87F4959A84B
0162ED173A390003DE472E51A17BD76D04978EF48B5A92C7DBC0859512C31467
450F0FA2402F8A7548AB978B9D5F85A5955CE0BDA86D6C601DF93CFF3D70DBD1
CF774817077B1C973C89C949FAEAB6F48D530BB1ADF8ECD6C50C8B4D043A08D7
C97D03D7E5AF7951EF01455B9D04D057466A763E9D0192700ACAD8E5739018C7
33C0C55660346234C0ADE6583ED36DB126F3F4D986A9F32141059A4DEFC8E67F
6FF7CDCD485AD066D733D6A522572B30379DD812122F415205D7B59E02C1DB78
0BA105952BDFE788A6FCB3A10AF9852614175FC9F0343DD2C80D2B087C0D01C7
1854A8FAACC18567D2DD09F67334FD75F6A53AA50DBA9315884369E0F86B2DE6
10BF2E941558BD0F6554D3B2B88609E8821DE36BD62C161CFBF95B8DE8FB0246
8E3F2B7FA8438BA264298E2841D9E3C3C95C4708BFB7697284F9D6BEB2F92DC4
EAFC2F7D6D45D590A53A74C1813C234B6A9B739929A22A6CCA7E93636A7CF882
2CB94B4255DC032A18FE57DE5237FB22C8424FF3CC5990A998A4A4AAF0D47EFF
AF39202BD31EDAA1125EF9C3ED577C6CFEF0AB6730E3F33C3567BCFB11C3644A
3A2A34D2EDCBF20292EAC13AE4F1EF661692D1ABA356F58CAE8301D9A1DBC05A
79077389A26E7EC508826A5894907837C81FB91BB31F774F8CB1F07D66411593
D10A7026B9D3F2BDFD75AB06CBFE577AB4AFA639A6DA91E82329CCDBFD8E22C8
8E85F681352772F61C590A82719ACCB304E5D80A40B0D4A30A382DDFCAB9CE75
DE391695F193D01DBAB7CE2B2A34C7E007BC208850A7823FF3D58F87AADF18BA
BB4A5747585C55198A667892E88F4B16E566FE3DC7B186F527B18892D19E1B10
F0AC634856C8B63AF5FF651B72D3E58501284F589BCC5DC7B86DB9BB1636D08F
90A965C7420541ECD617BF021EEC6159418E01D390E2DC1104CB39B428F46FBE
2DDA70F22FF8E674AB46A38EF4A80F6CE267095F219443FBC7C43912A76AC1FB
E852B7ABF80D8F8693448A4D6450650A9B688FC658392703DEA5D79632DA3940
3898621699E7945E639F04264B08ED57AA197E520BF5D1BD611CA3E3E899BE9F
6CF9538F6DEB585AEBA7D43A08FC2C7175A10FF7344F4CA3406264DD6F16F6FA
29859AB7ED0ED2D2B3F591AB4C9D9BDD58FA4663DE565844A0524E23EE69224F
2361AA6CB3E78428157A461A5C2557B38FD9CA75A8B798AE5ADF419EAF045EA6
86214CCE2BC4F09CD5EFB43EEA506E0B4A0495CB2CF6F6445A868938581B65EC
EB2C64030E4841133FE50034D860509902D7209B6153EA88A797295DF6E0CB7D
0693D1501992AD0636739BF74AE092DE56F6559396A797F0815D7E55297CCE7D
714BEAE2713D01032D9E0E26B67B1BB3EABC054CC15B855097509D9FC74F9B03
7E7A69DE4ADA57D5BA69D0185EADC31B479D9917E1C855374FCCA837B4704FBA
1E221F40177B4E700546D29159553B02C886FD5EF3363D81924F9BCA947ED76E
6F97212371684619E71AF5CD30280593CCB41A92B8B4A296C359D6A3764CABE2
82BCF2334BC06848F7FBF5DF9535B8950D60EBB0AD7427991D14C9895464ADCF
636155A0EFE5C0F31F92595FE55FC307D1F7291A999507AB2AB680A809A956D3
2C201C14C93CC3D1C716C9A7C97AFDE2CD3F5A953BD9E92A0310DD612A2A083A
C2D6CFFDB300B59BF0D7FD2289759D88CA1553E6C0E666A516F74E726240B630
95E6949E690DC70B01F9382666F35FCF21D71C39B1C817F36B28853B7DF07108
963232AA79AB3D26672DD8BC90F52E5C9423FE8E33FB53B8081A84612828DED3
4F8906C685BC86FEADD58BA85D4FB61B3D132E3C0261954E0536464EBF5928C3
250CE7AA78066437CB4D6AFA3147B40B8B42D04F2A4240DA33CBD3E07FA1D55B
EBA543C0DB3D539A8134C4E8F496AE4F530A6DFB4CA38F3ECBE107F02AE44C3A
37CF0E52AE242EFCE7ADE7A349DD191D9C2D4AC9B54C9D41D249A02A2E0B7220
67EF6C057D7C25F5345D90E5059DC0BD55AC360ED0F4E0602EFE42BB4D717C65
A73CB99E633C908C71CC82125743CE36626AAEBB9074F16A152C867DB50783C0
B7F2B17B077EAAC299CDEF0A259C56BCC95C3FD7CF64D8F62B88C6B0C64D6905
568D9B213BD7DE8757BD40D52FD5C1E77099FE3D1ED2A460FEF3F95C0DCB4C59
BBAE08003F416EFE2CD6233753CAFD5CF431CD4C5AA46388C53332359B84E1AB
5484BFD37113E0258AB61BF200BDC87BBA43370AAC5D7567D564D4A60ED52EF8
8CBACA20DF47D2DA96A1F3B50C3DF13D924B3D3CF5001D373F368AA907301581
8616E2A4795E97A537F0138E6969E75BF02263B601CD60AFC2EDB3667682F641
96EFCA2D26256FE49E95A2B56A54FEDAA09CC251C8782521314697AD41CDF037
03786A760C1998BB54FE2F3F45C30570A8B73277ECA9E19BF47243D609E4F328
3B001FE5C899A7C552D88DA41FB1DAB7F6915291A6D35CF856DCB8A17DD9A952
55E12F63481CCEFBF414904BB943CBEEB59EEE87EBEC852E6D4B219D0192700A
CAD8E57390104E8F762EBA18B6B12B517C1E5683C90D9DEE76C226518F0F8E27
42E4279465A6CBD40C9E6EB178DE3B1ECB4FCF60AC795AAFD831E404570EFA28
478ECA8014A2FABABE00143091905914B27B7DC70DE1120706F2C6009F7E9E29
659CB534CACBE0F028D6C8E12339818CAD1B602EF3938CBBD6C93ABE2B1E8C94
D1878D367381186E8A564C379A28005E707F2942419B71AF194158A9AF3F1C9C
F2BC841E180E1FDC05FCEBD85C8F0AAB8811523FA2B05BAD4000C60FC53EA71D
91999CE6AEF7E915A4F27B1DB0DFA42ED760715F3F4987DA2681AE19E306C1B4
959436DB925484E3FA45347E8A840FE39FBA144FE774F671514C10C0FA80720E
1FC38FC266771033B4659E3E6891719787C9FD8AF6DBBC63E66F00E98BA4A125
B070D124180F833C92D2152B2E7F2F16233A66D680822A672A094A9CC3FBE36C
101B9EFAAE8AAF21156519ABFE8E10CEF81FF57E44D27493E6B60D8F011204FC
EA9F50B0A236FE935AC7ED5F8E715B713EC359F7BCF8CF7D5CFD4749A357A315
649C6F4081563B1FA9C9272A63AAFFD5B023C047A3BD7F65D06BE9AC81EF05B9
D6F6C456D17FEEB5A6BAB41A163ACF2F277347686189F0699EBCABDF0F1771AE
EC2F8945783A3EB91D2FCEBCE91F215BDF4252C36FBDE37BFBA6D0734DAEF6E0
C72A907E2AAAE550987CF0B95CC27DE7BB1362E8CF37A125BB946A19E5C7BCA7
076ADEA53026EA2073428015DD9487242739F5DE94ECF52AC5BCFD3DC7E39ED5
DF5D6994408AD1128A3EC5067CE87DA7F290E8438626FB6D70BFFA48734DBF00
56226A18326745E2671BB52F23D804C49181CB4C87720A71851BB16A9440AD00
F688BFE943C25C02E26BF71A25D5D129CB01DFC6E4AE7289C0FD5D7B795A178C
488F6EE6020B76AF50EFF4082C73A631A3994F0B6B829B1E74B02B67C9EFE3A2
A1ACA0475A655966C22AF588B32A87A4DC3C39404B5E3381B62D0FCF8B8F475D
8A4D563E6DF0D2F3424075077D035218E10C1CAD30F4692990A4C56372B533BC
E965E92EE51C51D530FF9F42A78EBF621F0AD796EB4EAF03DB39FDB12520811D
99DF5E46094612BDF60919167D1F1EDD1D48439F81541BDB81145BD76F8CBCB0
4D7A0925639D65AD7D1E08DDA1C52CCC851A59590D85102BEBE9A12B9E0EA603
0C5280EFC2E9BF2B469EC8CF73CD59E828384EE987DEDDF0727E311D760A1F97
3E0C93D02DDBEDF764B47D1779E898D8676A58FC574F21B75F5239E01593049C
4CE25DA8CE1B27492514C940DDE716237E7C922D821760F41D71D64B897EA30C
4B979BD43AF6EFFE38F4E8F2D07EB9A8202C14BF06B103204DF64A8D20C93509
7E55EE6F76D0FB02E3D0E3C1A31B94DE56792BDC36B4722F6C9DF69269A78056
FBBFAB2B184AB004658C169ACB7B7FC90EFCEA62D9FCAEBEEA515642DB184486
8308F3906BEED6CDC9F059CFD809D37FDCE2D6533C704F12B068C2DB20815BAD
694E48DAE2E616D6C05D92AD5470D9B7CFFFB4D9C3647EAE17060A9DA3A3CE4A
3F375E7C561657B974EC72666B11E32332F4D2AFC5C6FB8B9C8AA1743D5E6777
B6619B5116A103108BC32B54A527889BB8835A7F7015BB40A38F4691C76BA6E3
E0E1D05FD25FFC43BE180FC54F852A7C28FF734F187561F22E47BD832A444E89
93B9C482B23B13C502F2C09AD7A658A8385E6D5FF70F0BF583971FD9DC1902B1
2D103A1F8AC882556778B0918C235DA7CB99A59D9DEF5A31EA0B87390695832E
186C5FA4182438446C423939C123829609AF4D8FB245A328A7DB6B2DEBB70356
38114AFFB344911D7EFF98C044CB32F89EB8A4D31F1852571EB6F58AD6C9276B
2AF21CF805FEAA7129523B7D709A3C4407E25456A121F320D051C3DEDA9B4EC9
65F20D7B5A1BBB62C7CDD6DE5B3203C9BCF8FF1997C6524C216AD333F2CFDE62
5286B9FAAFADCD8955CE0DE58C7479B427A80FF746FA3AE7DDF8E15B6AD1AB10
289ABA45283186A992C2F00DF496288F74B0F8CC6425C29770E018C7C2F6C5FD
265BDE4F8891516CF6D01574B4FB90578EC532FC5A6B4DD29DE4513AD05F6FCA
AE4BCE32995ECDC83C89E0902B20EB74E31D05873260E81AD43FA75D5402171A
B6009ED1F1E50A85C1E6205777906D2220332B31AB4D94EF0FDAD8B7498C00DE
1C41B3187F017A7803C8AF43175154CDA558F505002596CA9C38641769ECDF51
E33B3A0286BFE57FB33BFFBBE1AF1E95D49575CB2C72E8B2A4673790C29EA221
E2BB3ED6E58636EDA64548B409866B5BC695401E0AD631D2E0DA63388BA11D46
D4049FDF61DB5F15EC185BD129837E6E77322FC27357CC25BECA87237CA6CB8E
4A1E0484B4BFC20FD02D897313706F9106B757651436D1F3B5AA4B350DB9216E
742682B615BE3AF79285ABDFD06B452EB63F109D6EC37FF0E19577DC48D91F3F
3C91C1AC68C06E4C4B829EFEBEFC36FAA3B8FADF09A9379E3924A5FCE5FF15CF
A1E496B5B927F693F362CB47CB9B8C8F40A307A6E9FE5CF2F989A6D7AD7CB52F
C8FAA96231FCC395CBD1238DB5AC3E4D781DE2F7482604F556EE556CE3E54102
4DA3128991794AD35177DF3F66505F1D0DCFA0EDA01D2ACFC5659CBFFB9DBACD
469FC37BC6054922CD76FB0A296F593060E9FD230281E2EE99A2002BAF9CBAE1
E6CE4B03172402FB1475D388051DD8740C61CA5B79EF5203F3FFC1C5E472D599
8FCA8249E771B5E28525269F0EB5392FD8FED30B499BB89D4B8C33A99D3F8604
E4E8BD3C0D0EA5F7795ACB2B9E64CBE329398E0B4B8FBF9E75BE43E74D15ACF0
2A2C9C6111BA14423E2873872620A1558D32C987F53EFBD3FF9A6DEBECDD734B
9B349A93C6D285E194F0CB38B862D2FE0BE43E8993A84E396C0E7A1C60519138
68209EF5F6236C7830D0A7D260F500CD26676F5E35C4FDB26F59EFB9AABD846A
8D10C648E765F89F6D5B4D150645D866C24285366B224B0D4AD9FE14A674967C
29D2F705B78E48E8029F27CA7A1AD5091B8F4C08BDE8A2361D2CDB4BDF53CB3A
D3AED1363217EA8A37EE27AEA5C76DB6D54E8F020F8673BC788F450F4385FF12
57BCD72FFBFEC8E519865FA3048980979630DACCFBCF90EFFD658CB7115CB041
533979E48DEF716F970D734ACB730D064A3536A2CE26BBD57DF66D7F7BA7A899
21003E1A270243BDB67274E4825D9B45098BFBC477E2F19159FB2546ADCD6F2E
896287ACF183AF6C3D13699727E4FEBBDD14135E59128E259A76357A5E7BEE73
639B18296BCC858703D5A7D4A84A7552D0F5A7FAEF1B50BD2DC3D9BE4ACE18D3
A8AE2933086EACB19C57CAF32B67C7B967EB65D6858FDA8DBC5A55B8AAD63F54
052A02A3005BE0A60C8234507310DA2008AEF9AE2437256CE86708139712A8CF
2C99BDA28A18870C917DFCAB37BFBC7FF77BAD6B045FB1B7A88009CE51649DAA
F2241EBECE9254EC8C9AA73C2A48CC8D3C8BDEC4CAE8A202AD5C8E955FB31F01
8F7AAEF89A2F21771A9F7B49EBA6976564506EA2A9300DC6B0BC076CD89A0421
473CC43659D6D8A88FB33D986127AF7646092449BB9012F25A28DF8A90D7BEE5
DC3FD657E0B2E1FA3CCEA41A3C0332C0E6FC55CCC48B8DBAFE72CDD5521AAB5F
8B52C479352109A4E855C841817CEC003BF6A41ABBC6CD9AD9625412BCCA7358
0B9875BD70B584E9B4010261E2132F60C3B3030E2080E3802D5AE27083F443B0
A1600BEAF77CF302FA1DF7727198263B08F6F921FDBB37DD27E8907DD7213B1E
C2967C020C554DF4C32821FBE5DF93AA57FCD704B03038AC01558CB87616EA1A
197628AB9045B18BC069212447221557433632AE7A25F4C2F79CAD19983186E3
D5697CA97E22BF56887EABDCE3B3A17010271360DFFB6F8255B8A79870CE6B6B
431EF415BF4FB642E68E4371264323606B9F3445FA7D7D6BA0ED90B2F5113ECD
7E5802B3F12DFE4C7658B695CE2FB8C495AD30C386164BD08EB17D0EF5866A55
9577E9EDD14AF6BA84F3E4B14ECED598A454606D594963E990714D292C7A5A25
C8ABC64DB39F26395C5C23F761969E93CF3F69DB1ED517E8C75D56BE3DA03BF2
45BB56F8E16E041F9CCB63AB70377DAFC3CA52F7FDCF4D28FB8F2DDA2B8A24FC
C9DC22049BECA458AA49912CF5941904D535C2A758CC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters-Italic
%!PS-AdobeFont-1.0: Fourier-Math-Letters-Italic 001.004
%%CreationDate: Sat Oct 30 16:49:00 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters-Italic) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 96 /lscript put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -249 825 751} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D440EF
6A6F1325CEC03C3A3F20FBB1DD06C21761D70838D1E83592E85E284B4270E83F
629BC6D3971271C950F0BBBEADF671311AF5411D45ED8085300D8E64F313462F
D04E2C3161217FEF562725FC5DC27438784EC45E8F533487F0B4622BD496D97F
F162ECFD0A3F379AD617BE859FAD42B9260E56747BEDB156FE844C8F7CB9A067
E940C5658DE86647C65CBC0C2C08D79C09F07B00890641C302576D48FCAF0EAE
D328445325AAAFFD80EB6CB76F52E22BF04678BA9FACA7B18B2CD01D95FEDAFC
DDB9720701A17522D74D4DFAF4F00E2534412DA11B60161DC23E13B16B54F7AA
8730C5C0AE9AC9EB6903540CCECAF0312A0E4E4D61402D7A7B1775D9591A2EB5
F284D11E9DE117B588FE6BFCC3C2965579F10F096E83A53FF334587BD24B0D3E
5783469281D7C7514BF9448059616084FBC5B2B797D96E7C7511784C9E290A48
088817AEE321C6C7E1D103680C8B1876C552361F3F6C2AE4090C120A08BAD8E3
5942031F8A3E739BD16DFDD228F01C1A01233D1B633BB37C6F1CCAB278FE8F8D
F6EF0C61C428EDBA1DDC254EF1F6109EEBB032CBC33DE7E1BEF1F4FF672C2D12
F48EE105D9B48C8FBC0C8567FDE51492E87EAB9362A1F3E3670416B0BC64480D
C4BE1681D05E3DD8B659CC8643CBADC4D1D4CF4190F7DE32271EB1DF06C7BEF6
013ECBB9CEC865C2FC9620587044E26D17216D2F99571097694DE10F548890AB
ADEA3D9EC11501D1F492837CF931D1CF1A7EC8388DA83793B661D8057DD36586
43EA5A9CF4C7437416A31C5CDA9FE54518A2EBEF1508E16AB5B944840D233F12
9DC0F470BFFCEA640B6CFBFF6FA5585C8E369D3B09C6A08A8ECA9D2481245BB4
CBD54FF3DCE252AA7F9820491384089BE8305D95BF3D75687FCBE284E3D9AAB3
77DDC466A669A15614813CCF13D5DACCEFC0044612E8DA68D16BD1CD44FAC85B
77D4EC8E51FAB737E69A5BF653B8E6BFDCFE4783C4DF6C06F669EED412848DB1
C2BFD00F84455918F6F7B0125E9AD62A8D51C0DB9E7286A8A2312B11DE4D3837
1E5D5E2FBDDB3EE8368C068CA768739C7B57E06AA6F782FD61F4CD0197B54D1F
72CC1A4B453BD8AD2A79E22212442BE535E01859C46C6A00E00209115AE10C86
D4134C8C541EE0C702938B25160E5A62B76BA761C38714A62CA5BA035C5B8BBD
EAA179648C41D4F6477AC75D7275831735AB24C6944A71D97332B5C2775851E9
6006A6604ED6429695CF8D4986849D9B31036E93C48FB693ECC593299A09D377
AC9DCC0396B2F1FA8ABD3B94B89311E353E7BF370F2CC662E1B6B61D8AEF337B
E4D6FBD832273999367D05A85FE31B5F2C0387456A37B80A3000B907D78BF114
6556892940F1A66A7FA4B442A843A915E7D3D27B2DD42D72D01CFE2A664E0632
E56F8C1D694079CB51AB44F3DF083D15E6BE7076BB0BE11B36F8E4D8E14950D5
A13146B2FE9CA799E8F5D938B6A1A2D12857FE53146A346ED4829FDA3718A154
35BECB6C91A2A41F9C4C4CA66E9CD469993C5BC48C2ABD45F298
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /circlecopyrt put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D47BE08ED6CE96278050BA67680A3B973613647
A93FAEC756FC253B3693FA2D6491B276EF45751EFB306961788E7C15297A5822
AFC5A2DABD0DBBFF0BE135267EA6B9D1B4E4760ED14895FFE1F8C3F564830001
EFA901B8442BD2D98561BAB9A0FD939E0F856E4D2EB04A9A4496704109B8A84C
EA06AB0999427B3B1BE776004AE906D0F22159C051D88CF573A0255D99B56781
CF326CD11919AA40B096769CD6D0ADF3ACEC7957621084ACF21AF1F265416628
86B67FCBDE9370D4F5C6F5CC67EBB0A2727E074090DBCA459AFA1A4778AED4C9
AE5400775223E684BFCB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LINE10
%!PS-AdobeFont-1.0: LINE10 003.002
%%Title: LINE10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name LINE10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/LINE10 known{/LINE10 findfont dup/UniqueID known{dup
/UniqueID get 5011940 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /LINE10 def
/FontBBox {-150 -150 1020 1020 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name LINE10.) readonly def
/FullName (LINE10) readonly def
/FamilyName (LaTeX) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /a3 put
dup 26 /a26 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE366EF37D4823F376DD9F7E4CBB15
DA8E93E91E84D36BA5A5B06F3A46B45692ED11C8FC76C0B0B3157F699878E2ED
D89511CBE105EB42FD76309DA91EEEE85F1AED9920648285111A1690C4AE2638
C0601A7DBC8D2D41CA8C4F9DC7A6AA5C51015D8BA926831892381DCA7E61E230
5BB3BD5632D276B929D97D4836F9703461BED94450CDD2660430A0D13F49EB47
72EB0371E38B92F488FD6E19C944811D4AA52CCC359210320B484568E5060BC5
4D2FDAC73C49BA0168EC70388AF54EB24A30387A41246830C10472DC40AA0BA7
BFD5FA9A7730D9FDB4B639665275683C8E3CD7E719FF53B6DE1F5835C06D1671
1185AE2114E4BF5C0836BBD5391FB7AC5793DB4D3C5535ECB70119CFDF567D0C
A390B1D9A992250D535CE1C36B028E3E9CFEF1DC5E0626C58FB0F25E04DC1FFC
DB6A1C67E40E6435D2994BE814C695B48D64DE30E3F9A38D4547B49FF66829A4
9AA4FB9432DD10B6AFA88BBC184BE95E34A17076782DCDFED010CC19715BA5D4
5D525F33A6065EC6C6811F7D8AC94F27E4E2EBCBBDC3AF1AED1016C343825BA1
1DF58B80CA212DAA2F4EA1889F989C99972A5FA25617CABA3B52190EAA98C27C
15717FD85CDC8CAD43292A21B341CC2A04EF383D978142D16B4A97EBF22ED674
0B45CF5B2C3F151029B75CFB6FD2C53AB88066DD793B85CB7A7A13694C0B865D
BB3315043A4986FB138775B7354F4AB89AFD27D52E0864D384397ECD9A850511
E96A85AAC591975E185230AD05DD19D2C6883B2AEE9107448928AC6959BB66AB
7F8F7C4BE5E6E4F88D3BA98B117C9F0F58BA8D4A7B88413ACF98B0ED4A5FF6C2
5F96EDEC0AC75AAA7C2F27FA3DDDD0B3BA0683D98F99A282C799183C0952DAF5
A900E23342D083E8454E64F9984EB44FE0929E8C1605B8B26C37A219ED8A04A9
D7D6FDF3546CB443BB11B2E4A1015E59E8AEA265CC70DEADB42D8361F4F54979
19ED22A9E83B7C851A296D1B5F44AC57AB4EC29FFF3C75A20CB3C1B57EDFB4B2
1AB1FC26A6D947D45EE8221185749042F2896A43FF932AD70B16BC2AD7982D51
C390D752102D4A6D49F0205253618EAA62D3616BC1FB3B7C5F3EE8F00D3EED1F
A096AED8381876AD3B6904E0AF7AB1D15ADF3AE26D38FD979F820B4607A4458A
FE32A61551AC882694E29AD2156E5D008591A02C59FC1DD6BD2F52F0FD868E8A
FCD679FD204A95D090CDFF8E001AF450A299FA07BF4467AFAE826B37C2316293
F8D8E0BF5B14AB8932EA96D3D035B1123FE19EBD2711B77CDAA862C57A7E0CA8
C7532156DF4CF17DCFD8DCB6453CA5640AE67D6ACA55DCDFC20968F5BD6E9834
6986F62A4FFAB198F972617518E16E6CE8CE907E56FD1D71FF7793D87A6089A4
213C25BB85A0910953C670140ABD20F6566B5C815D73448B6B433BFF70D80845
7036BA209B9973D6660A704EB2233993609DD78920C91BD3640DB07E6D9B414F
AA90CD4B43399835EE481F03405B9C4DCA0064371CD2D91DAC5E684F8F1BAAAE
A5DCAD93E2F465EF49D688581EB27993157E1BA939F8EE0FFE4990
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.001
%%Title: wasy10
%Version: 001.001
%%CreationDate: Wed Jan 15 15:09:25 2020
%%Creator: Michael Sharpe
%Copyright: Glyph unchanged from version 2.0 were copied from the
%Copyright: wasy-ps fonts, copyright (c) 1998 by Taco Hoekwater.
%Copyright: Glyphs that are new or changed are copyright (c) 2019--2020
%Copyright: by Michael Sharpe using mftrace as the starting point.
% Generated by FontForge 20190801 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /wasy10 def
/FontBBox {-23 -1667 1720 752 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Glyph unchanged from version 2.0 were copied from the wasy-ps fonts, copyright \050c\051 1998 by Taco Hoekwater. \012Glyphs that are new or changed are copyright \050c\051 2019--2020 by Michael Sharpe using mftrace as the starting point. ) readonly def
% Glyph unchanged from version 2.0 were copied from the wasy-ps fonts, copyright (c) 1998 by Taco Hoekwater.
% Glyphs that are new or changed are copyright (c) 2019--2020 by Michael Sharpe using mftrace as the starting point.
/FullName (wasy10) readonly def
/FamilyName (wasy) readonly def
/Weight (Regular) readonly def
/FSType 0 def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /Euro put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE30585F628C5960F4BA7A0E78D80B
EA23A0384400281199F7528220D2F21D031A35321A044226094B6ED6DB52413E
0BC02D4EAA6BB6C3D02F5D5E4983DFAE1209911A8DDC998656E07B4EEAEF13DE
50FAB8A7D9346FDBBBF1EAF791BE7E3B4BBA8D381C5C32DCB4436D5834A17B60
26188D4C558BC1ED012EA8DED9DF22A29EAE8673C46D0CFF7F5EB4080882EF91
2FF746A93A7B15CFC25341DED2CC7041F5D2FFCE348F17C86124EDBD259F3D7A
A299B032DF19B1C8C6EF386EE2B3655A09E37996670E1878051E7B77C73B0250
EFA23B7014FD87F1D8F38F07EC2ACAF188606F724E436A3D5B001AF774C0BBB2
3B48D49C1D59D3FB5768719967A1086B0C955D8E90D69C2C18593A7EF0CE7A9B
A82AFC9604DDF32B61B5220CEA41E570BF9F9BF018876411E06807D45AEBD705
125665794E0C88DFCBBC57A43A8F7747B4A09C3941DCC35D91F9E238DEE5F56F
4D6E6032FC16C459482F4E32286E48F60DA55F2B5B1B86F3C934052B798067D0
254ECF5D61EDF99B3A6D86DB44265F4545D81B7A002D62C32A22D311876DC636
1CDE6DEFB5164BC751EAFF248E4D6CAB3FCA084FF2565070A0129CAA66035751
8A94EC45A9827D8398C0CAA83B3D4B032C75896D666161D5FB3F6C8F13B692A8
ED5B89F4654956A01FCF6295D4EFF3C7269DD46C0D06362CF44C087C14B0F984
A6CC760D2E439EFC1EFCE34DAAE9C0B017F709E18F64E7762F92A2723CD0728E
11ADE47D1A7AD0B9B75624B220C906D34D1FDB479E312B51DA3721CEF9576B50
F00CE281CC5AC9CA854C150636E2A4BBF26C0CB72843B7E8978C6923B20DF073
7D15F9069ED5C3CE92F4C2AB437BCEAC02473A6E023091F026B8AF8FDE54045D
BA32607DAB9EBE64BB05DDA506E90BDC38D7A94015DBF365B3F727D14E612395
6675298F00239CAB003959FE119E726D4B10B063CE62B1E648DDE9E995ADE22B
AED269BC6481FAC38C9D66CBFB5FA8CC6840F18F49FCA60F6E8D93CD2FE35A98
CB61C80B2F424A61789815DA278578DE6755411E3159852E8A76A43932A489B5
A8C48972C22CBE66C9DAA6EC7F3C70760DC4384C7D5E552E41C9969113FE9B41
4C792F58801331862721CC920D6060DB63D12BBDDDE58C2B1CFC0D1CFCB7EADF
9D0AB31059712DFECD2A616D70DD0EE5E53514B474FFAA0B184BB85B618303E7
DA826C2B7D1CBAFD1645C06F9A00BC1FF1222F94937A87EE04C4684B0A121DA3
E26BD7272D71E93BF96376F11C750E53E6AE7E9915809A21512969ED830C6395
1395B0E6790CE19FF4896550A040821442A2EA1CD3AC4DC9A0B90419882F45C0
598E040B77E600BEC9FF9AC627A92638BDC359317492BA4BAB8B1F2CC6A5AFBF
E81F9CE51A6BA62D5CE57EFC9607693B47AFE3EA791B97EF8B73C7C234FCDFC9
70357D3E9B4D8D8F475BC7448C1B25929B019FDED75169DE66513CCC23D034A2
7EBF6E2D44E394667EF8D57924D4D1F874B89EDA39976CAB94B3D58EA6551D10
3F4DF6E795D36E5C468ACD33C7B78CDCAD0B29ED5145EF4D2CCC59706188D10C
712973EABECD7A3FF3EAA14767ACB0551E39C831ED5452E0088D4F1A826548B9
726B84209947D4BB01DCA1E29FD478879E7F845E833C3AD2E29A83260A53F64C
BD36FC42E14A07FAFEC1B14C54A53A5E2D852263D358E675B62F9E30FDDD384A
56440941B4C437D4418A7898667D111FD994ED002E2E9C6DD47FE9D3C7F1D6A8
E5040A87A39A0509FFE4884E63CA3C0434F07185D8026E5B93B8A50AF015C796
033F05AEC49175ADDD337E2C1E9CFE41838999960D874AE74B8EA0FA61DA9497
58AFFB7A98DBB36FF2693F4EA3B83C6331BE4677D1F5D8150F9A66002C4E37E8
4DD52CEDD41ED9B724D09B3E562CD93B50414D87AD378B7D0523536041FE0EC3
3A5C2343D7DD645BF1A70B6AF3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Cal
%!PS-AdobeFont-1.0: Fourier-Math-Cal 001.004
%%CreationDate: Sat Oct 30 17:08:49 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Cal) readonly def
/FamilyName (Fourier-Math-Cal) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Cal def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {17 -274 1252 724} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F78AE14C
71FFD7441F153F65EC489AED623132F7F0AA967C97A2E6C705F58130577D30FE
722A0CE1882455CFC9882D1055821847FF648509DA92A3EE12F984224F7F1904
F3395261ABA61816ECEF5BAB29D1AB8C21A8F46620894FC69C70DAB3226A0DD9
9CE0FBDF78469648F29A99C677B9FDDC8B90082BB7C984DC5C42930D1315FD26
EA08F21054360D1981E79A6EEEF345CC1B9D85A6983CB5E833C9F3CA972A2C88
B6220FBB013192E7B2F79DC214DD0964F4DA52469E9500ED2ADABDB0D259FDAA
648EE5A0339A6EFFDFBFEB97BAC430C00291576483521C8D406E8FA4DC48C7D9
6830DF6FBF39E9153229816D94F6BDDABA2B4759E1FB3DEB54C47D66E283E45F
3BC1B675DA1D8DDC10F24EAB54445658EDD0AC1ECEA12CBA6DA205698F18056D
DB1CCC0A8D93AA9EACBE2B5093275823AB48AD9B7B1A217505522EB1C2F09074
1D7EC269452BD0896C0B1F30769BD683103F7FB568F80576476B511F5ED74F46
E2F35F191BAEAE8C91D87401A8C28DCF476FF0CB9661DE7B93284BC8E2429CEC
A964C815F35C33B2B6E795088998E0EF2CD048D1D54FEC5014B1AD8A46618748
6D1446CEACDF027D1B238173F8FB6C828F10C8FFAEA574888C851EEDF4629C38
4D71F7D93FD74FE5402D7D788D76E28ECE97DCEA9FEDC5985599B679C052E445
3E16B23D20A619B501A088D5A6578CD0F56CCED1F2039876D4FC648DB69CE3CE
9EA0C3B37F27CFD4AB23D96B5BA02308081972E9E62A93B2DC9A37AC4A63E626
F1488017A209F97B3217B85127A8AAB35BD704F9614733E2C55D3004A753ACF4
CBFC509E71BEB3AA1179EC2955F527022F86711D2DDE84B112D18F375E1BAF0F
1DCFFB6A138B1CA05072340D5703F28DCD60FD4F3AF2EE0061AE9AAA0E39384A
E806173146EC48A331E5E3A8F900D7F580E976A3672054A8A2DCF66E132A720B
37F5C9D5DB8401B8BF5879DC472CC0113E27D529AC7265E93F51DCF7A4203C25
CFC3E853E2FEAD9EFFF3BBB849BAB875FF430A8555B7BC6501DA81B1BFA806A3
53E3217EA4E3C6B388B9306AC2B7BD973BFF3E39CC5C4F39303C2B0728CAFFE3
C5B6A3B6132EA83ECEEA7A270247B42BFDC3D46FD72DEC1FA73437080EDCEC04
DF35DC49777BD36938E591D8D8AC90126D06F7B7C2BFE4F6BEA7A13CBF5701F0
925CE2A7432B33308F262A06BF14B6EE20C4144397EBC24D878C2EF41505801E
80D44192B4267A538C9DB82EA1B401676F6268CCABE71D9C2D8DB59C2E58537E
08E7B1F5247E315B20FA3F32E2A69EF068A4BD88A45683BD7521ADB3C2A78601
8FC0DB09F98D6613341AD917AD3962D12E22023F95076A56361CA1906134904B
ADC9F026771AFC9FED26DCC1CEBD7FBC25302DDC78D686E67667BA824113CDCF
19BC7F03E768D109FFC55CAACCD1F6B8BD9AD518D6E86B1AE06921A28F0AFB9A
BB6AA7C8592651382C6609A2DABB7A2A5F7444D81AA66A8791531D1957AAE4DC
4B45E30F64D1644FB80C34FFD3C34EFD6787031F21DC0316207988216849AF2D
9C4CA389DA5CF542069E56C1DE390DD4DD286019B7C773C62F78793D932A97AB
ABD57A76F0F1E3C4ED9B7C90A553204425722A4F611BD1F455BEFA49A7216F8F
ACB3B98090F887F64661081B57610CE55FF07453FC1E48C6A9F0C842D3D7D28C
BC88AFE0FF3407525BE23BDC9E46B28EE347A06396A9481D8DCA2390972B883A
EDDD9001F47830A7B1255496B7D323DE105436DDC980CD75404FA33A678C3D98
302E764EAB7E5F6D5A46EDFBB77EED0B833688C9230D9D5A9093C035173CC4AC
1027F7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:50:41 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 163 /multiply put
dup 165 /divide put
dup 197 /plus put
dup 198 /equal put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F909707C0AA8E88898CF
1946FEBADD822804C3319B8F8FC6EB7CE96C596A8883E67BE54CB8FBE9AE9AD8
6165178CC031B3D1DD0097E80122D38E061601D78E106AC6FCD4E63C37A46924
E6D0C55C32045198397AF3B6747F4526427F8D5CE67A2FE296BCD263C5270898
62BB6871E51A44019D917A6E9E2ADD7C22D919B253946AD5B40875196296ADF7
B3EA4C9E940DCEE809650E9CEE1C226C215D5825E4A9FACCCC354D6996DBA8CC
7EFDD3FEDC1E84E2C9D9BAED3C98AE4AE25F5A21A5904AC7D0DFFBBAF61B24CF
781C6711806A527304A1C42F191B06BAD8D668BB517A7D6DB9D7D1AADE6013A1
42F9F77BED68BDE5FF1A56EB410C9CA573A58D2FD33291F604A1BCE4EB3FEB1E
44893636C3BC948482B71D35FE5C0FE7C09340078662EB07AD4756D6E4DC7610
CED2638D50B90DBFFE72D7D59766DF751455F3746F8DC7FC34943E8227EB3125
E0C5B001AA2A9F6448096E7CE48418F2345A6931CA901807109A388A9F76AEC7
0AF9405B22A3AABF925AB6878EC6EB477C6A6926A9ABB9706DD2ED589A3A34A7
E196FB969061434DF37B107E8E03D27B3C562601D302FC8E19EFD79885B3E216
6A06A8A89CFE7F900BB88AF77FF383399AECF4C812824AACBF8850E96C110DE8
93A38DEE5BE26239
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CE18407902FB88F631
211565C71652273016BF4C18DFF5C743B943338D442F565DFD196AC27327B183
14D5538860737A5DB4843C64ABDC3BD49E68B195128828C51F1913FF91F62FBA
C772DA4DE386DB5A11549F6616E7FCB421EA0C92CA95CCD6881B87CB00A1CE8C
185EDAEBFC8230B40849C226DD0945788D629725B2D8E2FCC3C2AA988A19EDF8
61A810A30D5E955120D6D5EEEFA6D4D54B096463D3532265F8D32A0782EEF9F6
2562390897539CF83A4E2E92CBD9297DBDC351AEE78944DD5A06583A473597E8
AE55B63D13C4817E5180E580359DB4465374FF21BD3F460A3EE2F3C6CD88E585
0C8DD4EB4483294509A4B7E8318F8DEABC67C1C1717D06FAD0E3A3489261A627
E1D5A47B8D8FAEB2D2682FA12B01150F646B6008DCD542C0504D6BAED25383F4
5A1462A8EC1047AB8DF1F0F85944C94CE186B47C8091E7F6473939C5B50C84EB
EE45312D6881B84B5D50ECCF27F5229C1E361D6D711EF99052FB0804CD12066B
257BF1D189E5A841BC1B76C50894F085AEA94441AED5CC1BB19177972D7E215A
694250EA263A157E9A799544BB0E690A1A86F80719F3E414084EDBCA0A23308E
0DC49221C046DBC8AE4C671A9D0B93E9A9F12C03D1366AB81F3057209621D565
96E6D3C834B842EB161D5350648A60367A6A7FA378F4DDAAB544E258C4A6DB10
2054068412622084FAFA0C6786658E44CEC74589F5A7906D7613B45365019221
11B8424B6EEFAACB7AC1136868F497C0E162318079392573BBED146179997EF1
FDBDF032FCEC52BE995F5F52A7E6D8DCA16B183EB03A04D2CA895309CAACE217
4EBF7138952793C03F61A77C21D9373100AF9A2415FAF892807D64F54544B82B
25D5FA8C787E44CC09C50E4D2F5F08BD9F391EA00B2A97ED67378DD742DFBAFB
1854E2317ABB53352DBA807E1A77EF35BF3E7002F6E0E5B3B0B41EDEAB29245E
70F9BF972086F1F3657F566CBBB0DB259072F02F6E3B4C5FC0611BC8C11C6D2C
11583E4A5A59F954753B0C692AB247E0B48B55799F20201881DA24C91C196177
CA28BAF2278DC4C7AFFF3FF590F5EE24403DEF847CB31C4708669AD901E3CFB2
5421A753D0148A1651EF96784ED2205F8C2BC3A5CAA9246C584AC2A078F20FF7
D0A1154385D0A04140B68088C1B87738C554429F72F819445C434D4EF1B0767D
EC1895323E2112F44701EB56E6EB0FBB6D88CCBEC94338684545DD2C1B775E7E
5A77989E7F7E8B46CFC07EE5417F70C6497495A2DBC1CF0A0533D42722ECD14B
D2F86DAF0FBDA9E00A55E3AB07981EAB2EF1FCEA7C25684C3B97F3B2BF4C9FC6
00A89D778F36AA134B1983A5D0B134FAAC6457B5C52A69A4FA68BBDE5809B7A1
A57F9CF79EA7458301432F5D5A7D94756F07C9C5B0B15A71082C76D635E1CC73
C0ADD580C786E911F2CA5C3ADB1255CB254A417A78A9A7F472BC752D340AB380
3E54B84DFA6DA93AFF3FB1D1630AD93B206209A88C5D9668F6CE9B90F5C78933
0F42BEB8396D03F419BB73128447CE505087EF37BDE4CD2AFF544E6B73916B75
3F05864A3F5BF598FF6BE3B8CC0930290311B1A7ECB945BFA51F805E84158051
E5C570F2ACCA99724FC1398AD9CDD5D87DEA46CE64D8A8B7B7DEEE2BB45903C2
C279293BE154F56FF9DC9EDC5D77EEA1082AFD8AE62F19B959FA2E81EE1DD213
30BA776B0D6D5585BE673CB9E41B8AB1123729EDBDD2C8142EAEAFE0DE91BE8A
EEDB5F8D97C63AB09309BBA8B4AF954976D2BE1EF5B8E1ABE5009BE3BB3E23E9
6C732FA45016BF0858C1774D0E2ACD1D4F9DAA6B60432DE3F51B9C44F40EE6C0
DAFBC40853694E334295A936E790A03F21C0BFC763A418DDA93E58230984E616
5F8D550F8ACC4BE5B3D96877712930DF2AAB440950B658FF4FAF06B805A2CE6D
7DD0DBEC85B33AEC147B3D03D363D9D17BC1BD8151701F0DD5CBD084F93F795E
CD58CCD8A7127D7385C74B44F1EE675862021E338B9CACC1D604B5093701B7B4
B939C208430A6E74D4126AE35689EED532EA5C1E01BAC7F6469261A421B1A45F
118A3464CEAB1A4EFBF27DF22E721B8B48A4E9D352BFC12C2C5CBDD2CC6E2613
ECF13262EE87719684BD73423B9F065B61B211D73E1B470F8E6D0F4DC78713D2
C29218C79B449B2BF510A3533CF897C932F4F19359BF5232F9C8F54AE8CE3CD8
B55A4080114779DF78CE669F5C7053FBAFA30308FBB56B064767324B68A3D2C4
779F0AAC4B8BE4BD47D440DADB4FFDD73F1821C35266A32248D878FAFFEB4EC9
C3903E90A1C9353BECE346EF6527ADA9A2CD89BAB669A35114AF1C63E3291529
6E14ED137B983B1A5593F00F91712191008C03514B0FBD3918F7F9AB043582F8
727DA561AD03249967ADA581085048D91B2F82BF18F30C5BFF35F8A85F8A5156
A7363BEB5774CB12C33EC96B9DBD18B29411F6C56D2C9200C5AA0CF9644FE37B
FA95636385045E49530E94DF4B36630B0C169E3FCCD9AE7DDD7029E0A8484020
DB07C4D8B1D02F62168CE0B06EF4CFCA7C341AFCCC4680118AC20A676A6557BD
6C0DB852418A47448232731C7563549DAB79D9963FC18B01491452CE099C0E64
77936A02AF2C1608CF65B80FA3775F2701D9D34ACF98A0F3048A3F2DB7EB82A1
27CD9A2B56783FC5080A99619C995535159490317737F630D0EBE4ADF6889150
3FE2B00E5F4718CACF5759355608A871347E5D71D4E6546813061D24AD69B43D
E239ED3720902A7EE853D6590CA6F5098F82828973DC2F01DA7723ED9A29B8F1
D86F8EC12660791A453B6EC9931831C7BFC75670EFCB4DB4AC90ADBB978D1AF2
5244117D60BA66CB7B4605F68758EF4409467EFAF26F37410FF38F25E562683E
1A4DFE87BF07575429B698BE2815F6DABBD8B03F3C8B26705586F86B6DDE55E1
1B89A257114220764553943CEFBCE3B519FFA1FA5C8AF351C91197AAD0373D11
919401064DC59B43DF20DC7A6C18D0F3AE67AA24039C4E56081ED5206F2815CF
931828B48EB5C36BD95CC24A59A5D32A90AD3A583C9519AD6A1BB1302327275A
F5D307128F7F52317B3E89FE3A8E547E9438835A84EBE620718FB4505342EAFF
00FE2606CBD42D6D35D0ACFBA532977DE47227FED5601BB39E823BD6A595A2ED
60738B460CC66BC84F566E8880D7B7E19C31AE2BF0756AD1987C4A84454B2963
742963DB430C578D28423437A02EF556D9C1206128E3277EFB09B152C00DB46C
B3BFB57F14A039B9875F473932B3B802F41015BF459D9932AF482B6CB7477B87
FACFA1442526A49EA4731EB49F2FA5A5946B07F3BAAF552903136D5AABB8F622
117252D1D718B34A12550E13321B15E9BE6EF0315FC86703508D1146E96C9744
17FD6E7EC85517CD9D19BDDEEF94B10A35D595FD984CA2658780D6E114BF221E
DD0ACCA54AA0698E72EBE7F9BE41211C1F69A6F9A0553D1297FB45C84B9029AC
E5083E194AAF1117DFD3124DA727F3AD72FA86B7C18DCC3D66DCB01FBDA0F71F
4DF0A725C10A8C4A879CB425566A103B762F517F73DFAC1A1AA2450AB5778CA0
E7290B98456BEBF17B2BFA2E5C9866F2C552D54F88E422D686E3584BB3082C40
A6560BA88DB7FE3C57E1D9957AE9450D5935040FAC37142D7FF5D962F6784A6F
95F8020607F24DE68A2A1B259D1ECE055384358DB6F7D7E5F2353E9219F908B3
15EA3AD0C72E1EB0BC1DF5DD26D5D0CEB7F54E8E4D20D681702745D81B882773
F8933E648E44E090485744671CD777C88DF914B9E7C16F758F126F601786EC4B
3BEA9FD601A8A2CD1F005C2E646B346594F0D3026F7BABEDE0E7A1DB0CFF155E
BD8648F8254061779E764CC16FEA1B45291C3F619D46DD42291FE4C18F6335C9
AA3D95BB4CA687C1889B249B077747839BC4D6C9DBA89EB8D3865001A47AC8E5
CB3C019C1E6EBC5641BBC9CEDC20F966204029E55D7C3D78126BC086FF6FCD1F
657F898F5ABDC56879D962F04F6C4592EDE71F4CC83A3304973C3C5B477B145A
961CDEF29DE336B9BE66F059426071613A80C401E94564BADE52709C04EED09B
48D1CD1C222C73FF507E67282FB23867D92893DF0AD31AD809655001DA4AEBAB
24093379917DC30539718C087B53E698B1066B276193CB447759CC505E3C95CC
A984DA46A2D5CEB461CA5B0215755A67135834E53F28C04989EF693B2EF8E750
E4AD899E67577D8CFEEC51A396EBDFF18BA887D70F022DD19B9B36B97E947E1B
C623F317989AFE7F6091B484C4F3ECCEB8F91CB93CBF1AF0BEDED451546112F2
F308EB32AAF02601FC4F93A16AAB5D775F2B98D27FEF34B60223CE13B2A0E953
A418FF05FB86EEB6311BF3DB0D2F8131A6B14C860142818ECAADEF583A03D032
63B1C28B143D124AD0A3FF30203805F0ECD4C66F7973DB61382BE76889E53BC8
BD66DE2AB5368DD1A196028414E7BE74AA08B9E76D189545E2CE24430DD0851E
102988862B2BE3AF10DE35678CBE6214E01975029926E349C327B9FC1AD3259C
E19A2B8DB77722B4BC7CE51A6004362D6B0DC62FCECC9F6303E779B378BC9C84
0FB04857C6A0A1D1822D1FAF780E786698ED5CE6A62177C66ACA98E64238578C
1A5B8C94E0ECF0C3888F23C3803C636FC56ABCC3EA9571C335E9C8E83A177A2A
2EC28AD700614732F3FBAC462F35A418B3A46853BC1A94950F24E7DA80A3018E
3FCA8F89BC7B851FDBE17E30BD3C312976040390CECC665C8BE47049FD1CE6C5
798168AF9E4FA02E85ECE37FCD5D12D6B8716E925D1E0F1A89340BE770E44A8C
2346F5EE903A1D4EFC90429432C88DFA94C3F3060E2949F5ECABF64BD29366A9
7A5D464F639D0B81E85F25CFD6BA1BB3D20876DF1262962ABA415230C05E6C7A
76EF6330923162320D340D73682A89467CA60DA3A83ECCE100606C0C46333C54
24CB772482920512144471831829384E579BACFDB7DACABE676B128D34DD75C7
1D35C11E6A10FED5AF00F4C0518A7E1C6FE01C1DDEF6934AA97CE042D8DF26E0
76417268C5346222CB0D60484C414BE8A1719A90CEF6316426D873CDB2C53D94
2781EBE5D7C8FE54C9A6DE178D997C4BABC5E9B864CE197359131990241EFE6D
72B9D4452D2F9A2508B35128B3C11DCD1581C65969AB8194BE9FC8213299F07B
0103ED2602A78D170CEC0988649088644961907DA1F9E43D3E6426D4227983B7
ADA60888B4FC551AF65075D5127695D6FC07A258594AE3ACB0E83992B02C69E6
95B9DA09321173441A017EAA8F1F489AB1FF3D51063F0B293D12E5797D3B3CC1
AFCDF3D5258ACE6346F15E2306521C620472DA03589D4D8061AEE5F079ED0B93
FA137726E88C54378D78B9A9DE98B68945D768C2080CA3A1E9B53585D61D3597
D2B5C2F88FEDC4A173FFB28C4DFBB75F82D8936D2D0C1BD6DF50196F8E5F3295
61417015FB337E8B9FF55B57B483FD7758365D9B419672873E34D825421C3135
9DDF8F2416750C8E0835136C15642D6C7E3551EC71ADDD56C12FD2B9E6CDD154
176673A003B7946FF936607AF5AD914AC3509E7B21D64A361CDC622E31A0B0D6
463621661EA9BEEE78D9916169393FB68FCE4E68B918A8449CA4E3CC3C51FA5C
0CF71254B9EF9E428F956A2223038579B12BE42F1CA2764FC4D964BDD888F390
8D193992F765A5803FA4B566D7AC98CD0F698B1FF81C95BFABA3E29336595949
1BF8766CDF1519C73463AF9134CF3A828F88713FB8009CCFD4F3DC54D583F169
8BDDE13AD0B0C0E3CB5664C60DBC135672D70070517FCB065276D747ACD12550
68A22BB75B05774BDA8D771EFC4048A4AAF9701057B34DA66567768FD3A338DE
A436AA66B914E1BDD480913E4496BF31686649E5BA5C2A9E899041256CB0CF6C
3B858854D55FC996C762E1A9932FD6AA996F4CECA9D408236DAFE0AF946327BE
37E5CEBF80C78C427E8E0529197AA0700E5C0A0B677C5D51ED13D6973D7DC468
69D7D5CB1E4FF4F89F863B138FD8B9BD7AE7696D31816635D241202D306C73D6
4D912BE8EA78DA56973F7F42D0CE252B62B15CC34613EFB3E35EFBF5EACD4FC6
735122C136E801402E920B74701EAB5035A77F9B5E441590EB25F4C9E936D81A
6586DEBD2737E97DE82767486D3657BEB27632947BE8BFBB8C208C8A4A6985E8
4B41CC5A6A47C65B19FC6E866F1740C1AA7959B24B1A63656649F4B57784C601
2C8B6369888E88F8DFF5A696EE8680F3D3EE477CE2F6A4CF1BDE5E6F73DE0723
61A0A5560B9B95D6FCF133CE25E86B5B3C931AD9134FFB899EB67FF7E195D599
9187A0ACAE8CFD0411727965C75B029D0605592B486C3433977EC0AC3E3B33C3
F21E07DF04CB1E35C49975FFBE59217023943787C54A613BA095230B9C0921D2
8A9416FD2D57739C81401F72107A233CDBCF0349EBF5739689B965BD371A1350
855C82DA962958BF100A9189488F9422B96396E29C4388FE7ADD9EDF9FFF7714
E5F40109D872586D85A70DDD020CB8F37D9D5F9EB2ABDE895E1214B58008A2FA
78F1F3AAEBB9466A406DD2EAAEC94A4E517F6503AD5B3F52A802B9CCA2138108
F567FDA116064442141A475216462CC7344F8F67FDECC3DB4B8D0CCA2920304A
AF8D37666D69771EACB4D6A50538572A939790B6FB66B7F7D3BAE9084547E50D
595AA035D896123E87D11CC81431E79A539BF85755AE01F21FEBE2D0D82F9584
4D83D12EB45F455A3C8409AC80EE6A26F358B8037314FCE713643FCC0259836F
B0559E404038CB57A833225F83C4666A55B66D37C8BDF01C9643776ED9CACD09
A11307D5202100CFFE7904D5F4414592A41A5B4B694D7FAE6D62456EBA6531A8
9913626A56CD7368C81E33628D272DC5BCA9A2B777CF374ECAACFF2671FF5B32
99364FC01EFA4C05CBFAC4861F0CECA6BCBDC124176AA9DF78BDF2B3235ABB85
81CB84D4FFBB6080F823952464D8D80FF6C62D541702124F2894421D450919DE
5394F489D9BC81E8D1407D42C5A41D8AA1FF1ED75B8662BB35F3719B4081F880
85CE088364EDE9F9043731A5AD059F0A3809F39215694896C2B3C170A63C3885
F3051C7B70AD2A3DB45E719AABA6378DD5D14BF0B0F86C7AC174BDBFAC53136A
F233C60FDB1228C5AE5C60CBD5B93019A8F96E2E1F02AD42918C8C67320CD5FD
993D2D9310AC43FD186B6BAB9526B3E294194D114E3867A048F2DE8149571FEF
BCB6A699D04482E886EA65918798C9234FCF9318E59317BBF22A04E4B4D2A2A5
990BB524171AAFC6ABE979C967A3392FEE2151C91429346C4086912C0F66A279
A6F9ECDEAC70E1B1B5F02EA41E2EA012B330F16272FA29A43E7AE9EA690F1ACD
C48001567C7B951F2A37E89D09AEFAB5F23418F75D0FEC42420A8CCBD24A5886
1A20074C2A48DF55F8731A9068CFF1C8E6F121CE75480E5EFB6D31F652026995
E006652292939101270CE7700686FE88CC6160C70C31A6C7BA77A8921FDAC0CC
2E126C63976B0A174D3AF0C9401D348EB226EF5B54B5FD2DCC30CE5814422C32
9AE0BA42CC0ED976064FF7F3C4EADC91E9062D122EA6217770402E5BD50D17EC
BB132233519E5DA7955CDC0B5A606B557219FCE2A81236E10CCE808B56812AF9
FE1CF59377EB39C10720FD14D665B0967E1373C63DF3B0A54FA6F22ABCBA5E76
C696F81A9F5EBF51297F61EFC4E6EB41808F6A25E99B9E87DA594650D66AE114
F5C50AFE0B8CC2124940D7936030EE8AC4644E83A3B4C490A972049A25249432
DC712816BB5F05961CA81341614DDA529EFC7128C0D1D1E32EF51327F9A99FA7
42DDC926F947AB52F2FF85ED8A2C0BA41D4D19B715A89133EB8B7EA10C126651
F8DFCCEDAF09F964453FFF5A4207F4A75E00221F787928E0B784C1A0F1767915
D356322C8B51C5D752678FC5D929DEC542547DFFAFA5F22C6A1C79BB42219D54
2502CF3455555037F147ACA3D61AD9D9B04ABD951233B8CB9A00E0222AB72B91
C379CBE1689A41092DEA8DD5A1F24769E58DC870F3BB11F6B2A33A375A49BC97
28F740192D702492E0A2D3F384751D59E91AD96CF3A7E4B7E2610D5508FFFFB4
47B71357F179F9BD2648DE2566F5ECF69E4E0F9A48BC39F65FBDC372092AB9E0
B7476235DC59756B1914CF08F71E8C35911DFB3B7E051A6EEE846A51512AC5F3
FBB9DBE72DB4E14C2A51BF29E8EF0DE163B7ED4CC1FC1AC571C2F9A97737B528
C94A61B8FB35866388FE04234207CF1733FF180CBB5CD4EF12CE9DC65705A80F
F787451F2DC03B143FC172D5801351C4461CDB3B87CFD9A4F3D4B35AF4E856C1
8603DD158CB0878B29F707E61EC852E70EA383388ABD6C9C971A74A9096C79C9
082104A7EAACB7506B0370319F462D94A10E6F2B383715537F4B6DA67916D828
E9BD8DBB5A5264C964559852B8B9BBE81C094B841F84F59E05007B8526F290F5
E23489B3F38E6D99ECFC649A614211D932C4004E60ACD78B3464EAAE7361B7AF
92D7062845A4A30AEF829A5DCED734EFBF53B2C736225102570F53EEE2BE859A
2D8F87B3B8A028E9080C619F102E5E1E07C9503B4C3491EA7C271A67225CC490
82CF49BA5F1F340A8D3C86F9FB8267672ED47161A3F22C3726D69681CFA7BC6A
0EE4907443E4EB70A95D1A144118064A7370A97C70BAEE162DEE83B4CE50A5D2
096DF033DC5C4A7C17F053618AB329C3F7C0C36D85CC6B526F5E90558DE4B35F
0225CE035C8176CC5F142BD19311691A1B8D575AA766C4DF529F6D9FFB0F4525
91BD26498ED5876583C44E67E6340C36F7ED1A6FE6E61F65992A1EDA95F6CC42
F3C1AA4E8C42A3509976DA380E74CEF6643DCA0FF7FFE1A5D23E335488AB6799
1AAB39609B706ACAA51EE95F0128B7C3E2BAE55D81A295CDEA5538E62D234EA9
92A9A9EB8CAC44FEF49F964FB9EDABBDACD9CA3A9E34D70CA992D805AEFF657B
AC8C4EF11D756CE5A62AA6701A374944645A4CC44423D1F041C4F4F4942711D2
19B0EDA951937061A3A778723FA0D4165472CC341FE743AE91CEBB18D9FA7B18
D0C4765B6ECE9359E7DE4037184EA0883B4272A2D4217212BEC21B212CA54AA1
CC5E939A23D7A779E82175AE419A2BFC5AEA33A9D92B0F1E7739D908ED39F776
01D53D0012E51920B9B46D41EFC82163C71701422C67613FA8BF404192024B70
20F7BB659C3C7853B068803074A7DB115C32E72A117EFC356B116DF4425FC3E8
E8F977303BE91E8F1B48FECB74110D8E7216C12115FDFDADE4CBA28B94F6584E
FC211E202117CFBE3DE2F4A93B2BB05DC4BE4D912F989950D4D12950FA0B17D9
3EAFF0911FF0C3C38DB3CB302C1845CF329B932D74D146CB0551EC08467E6CB8
707FF3DECBA71D8B36DF38B80AF811CE5D9B082B6485761C76C53D2A805C4E61
9D84488B6DFB1FA7F38B02FD7AB746F59796DFC3E90429ECCE5EE3BCD51E598A
E0216A066787B4AA4E18F144E3E85A82CA24A549500F485405A5C29414490B46
2A07564F6BF3B2B7CAD80BC85D30FFDD241DAD35144C001ADB11431C97A8E9D0
D48796C48401F170505C69A26C666E39BF84A95693F38E234CC44EB170145F78
3D9E68D31904724ACF76EAF4F2E07CC87E662AE666F72686DD12E48C99FDF1E0
C78012268AF1F4F85653AD90A00EA9C1689E3C43FB96CC833A946859D01FE863
0455A9750F44AA792DD7293D1D39E7BE165B393D488B7D0EFB2B5FF56D12BA38
7D89E332E8155E70C32A4FAD88841498F58914F54313F10BE525CD69866A49F3
4DE70DF3C989F9B1844287AB89A54F667E955F8005CEA7C5200B5A1B3BDA157D
238C514121936F6C3CB4A6311588B4319FA22E72C0C523F1E01DD32032BD69D7
FD97BA86D5907BB13D73B316189F1524222902929F652D8BFC045CA5DF4E487C
04FFFC8F5B1EDD7CE17647C1544BB18C575AADC6C7CA82C64B7AB91E167BA841
3257EDAE7B54D6D13BA2FB52EB7278A7A9FA9FCCBDCD211A04CAADA5C99D9E1E
921D3428911279FBBEE1A25F9071479F7879B542B5EABE22576A6852D0AB6878
591C85D37B447DB6C64D85C92EE8EE8993FEE04F7CB6C9AF6D6EAD9FB5BFA2AA
50111B9B8004F29F2180A261F0EFBEBBC914D8FAE44785B8192271B478CE398A
99303C380C1F1A66B050C76D03A185E2276EA27973FF22A0D0A184B9BBEC1F73
F879D24B8CB33D2460230175981E3A5DAF02CAF93A86E6541A3DB6A44A3F51EE
E8FC95B51EC95DF8E053C03376BD946A1699F5A53DDDC3F3CD96EEEAA809371F
1F8FB67C9AEF7A6B7072846045E2F01EF990464260E3B2EF7DDE96EAB13389D3
5B5D03B6CE3BF7B23C07924334C9599D055D785F42D32F498E39F18B65DF2967
5C6C0919C9FF009F27CBBB878978DB7111568936F2A2EA83F7D4FED9AECE3D6B
5685A39EA02150E6B1FB24753593F2B6373BD0E80344D9F193801C3904DF76D0
9C6559B46661FA8BFDBEC0B0BEAD84A6F444C2905A4E160AB79B9C0734CC08F2
C7C9145BAD429AF6976430F35F0AF5D89448F31112EF683638813C76EA64F8BB
BF1954D4FF2E9DE20A14B94BA7D3538B5ED2083FD8D2E1089FEA67167E9871AF
C757F4D2B59D89E1441245C196E894130FCFEA8BFA12368BD4A282569BF30C21
33CFC117D86794E6BA65A4EFE87A768516600EE1FC038A7C57FD8DBBEDA7F60F
28DA76A2BE32CC58E6E86824F23F68AA21B466559C84B7FEEE9AFBDF56C501F6
30BA5060DA93E7668D0CE386F333DA8D9EAF7A8576E5AA8AE53BF2DCC6F139EE
9AFCEBC75112CA2FBC50BBE9726C0CF6BD175D398E5F69C802FA1DF1B7E4A1A1
FEB21B2A38AF3242449E3E7BAEF56386A85AEF1333BBF6F62FDAF72C160F09B9
BD9664F1831E2FCC5EF1970A9251B9E529A69979C155A09077B10B83D8034357
583EDB9381CDFF94C1328B778B0AAFAF482DFD37A07D086F6F29C43472FDFE97
6BA027B721507A49FE4DF1D92A3E4C25D3879FBA6F3D58DBF6BA9C49A00F9885
6B1457E1E52BDDEED00B4248ABB4F664CD29CBEC7F8B9F4747E6F366E0D7A8D3
0EA43FC2897183D70591A91AF1E97E58EFB5E0D1EC14121A312D0D8462C90ABF
D7E71A80502C80781AFE5496CE73A0EDF0957CAEDB9EAA8CBF502C8106E9622D
D47407A248870FE01DC6DB2E16059E78CD04F40E2DE1B64F9EED0F48C9FC7D89
83EDC4AF0DB6A04009961E7711FEF9949EE878A6CBFC099A0E31EDB62A9E8D02
953E0A96198DD3A494944E66DBB027A418DEB2EB2F6A92AC501F31039603DF14
1EC943F03B03E2CBD1BDFB8177F3B79975EAD0E1E66815C02D1A87E9AFC60F18
D04E2CD4F8827CCD9E9275FA12C31810C74503793DAE838696AC9DD0D1F40CF1
56C8AD1F20E68CCBE97DC38FB272032A0ABA7503A0E1EEE3971481878F813B27
B530BE5EE841888D3CC905DFC0C120A90D7565429A66FB9D27977F418903179A
7A5349658457EB73E11592202FAB22FB8A18AE2CA8EE74F57582B548FE67F2CA
895C4C4082BB6BFDC7D53F53D449681F1A6A2B2CDA332C8BE0E85B417B298E4D
C27A694957CEBC34128DE7EE3E332AB78D50C971103CC5563DFC3C67C8248E76
95DF1251E698B1066B276193CB447759CC505E3C95CCA984D8E16AF1BE88BD3A
0ADE4BE6DA570DF0B0179FF112315ABB1400BDB0437F021BCE3FB62CC13D5F27
E9BBB5BD1441C6CB420E6221DF88F3A15DA499E17FA0F903F197B71C398B98EF
9C658D9B0296BA66F5390798470E16470345270E02163D500E957D47A0D91AA1
3469170FFD8DDB8F3D182E0AA6C58654E2E6A69CB4FC7F341750DBAA4E7CF3B0
ADB74D6D6A62DCF891A4F8CB9D533B946585A0BFE089CC39AEA4A2F281F46EB2
0469DB3581356151228D4EAEC273021F966AF6EAA2B64E261C50035877BC8CEA
A7110B5A5C5DCE717CED4B0C8E71004665A3C8639B9C5EF994F24952D7189D4A
FB6C1A2EE9CCACF1BAAFA2320FEFD72B3D0D16E9D6F6D84307BA95F1967CEA45
4FC87001D9209810E034DE6A6E0C68B37EFFC60A1D9E7E1FD6A1284F2D0E9F02
0824099445F425B10D74D95084ACD1366E775F2BD8C137F78993948AA11DF054
5AAD13761F12FF22794A3619431232B40E85F804B0C6A98E6FE1879C37A1E6A1
71EEA7F52BDB7A48E9739040BB41D1C03F7CAFFCA4F82971F1B6EC4BA206E6FD
1CBD6878315C88D53B945E177B46B150BAAFA72BA1BDF2F633F8F24D7ADE3BBE
8EA7A58FCABB02A0EA7C7DCD895764C5C04117C793205EBA07D0122A05960C9F
B302D518F124ED45663E34E5A7DE2D08382EF8F0841B6D339C555492F14648C9
5911435C6F76C16306B924A5A8917789E9137B81DA41C201EFDEE367C11AD523
30E85B067B58A533ED63F7C0455DE9E0544100F52B4F9B48038C63460E0D2B60
C7DD7A49AEBD5FB70D845AFF0ADF7B0F307D64775BDDBB29C8A74B6C543AF7A8
439FDC29FA5EFE0B0D3664F3719245FE0BD308F8592B28FE62B7B830648D1959
A338FBADA26E6C6786AB74E2B35B169FAEE1E0D79D8DB35B1D52DF53A4D407DB
92E713FF42EC8642128BE387882891F3D6A384DE8E57800487888B3C7724E9E8
A97C6132AD0FB0EFBE25040C6E35FED60F8439DED7CF4EB4F27817A2A06CE32E
55CD7273EC069B3797B1F5D551A282D391DCC06A0E2604CCB923FE0CD78F6864
A2589AF92B72AB61D9F378F71F87006B56729A2C962A1678933C7182CD8D6342
3293AC34DC351B8A65D20497C562E7CE09CB40A4B7EFD625DFA69816CA1B54AF
533022D0EE12A182AC138F09BF0E0F7291BFB7B54AEFD57301758167FC118E56
22AABDF4BF06E0AA1BB9A454F5D769D8B25A29A965C5F8080C9114E51E2F5308
16C73E3CD4BEFD6490FBA2E0C342B3534A2A4BA71984CCEC935101C7896BE178
9D1166ED69720DA99121D2C746C4EC5F1785BCA41A60874CF990DF5EE6392B85
4D0F05FB116BB4B404A9C981FD55F3886C20C7BA1577926DE65F2A66EF11F3FD
8D5E1F7E050F45EEE0AE1A90BD7520AB64A7AB2857441898EB80481E785E30B8
A416CBEE9A0942A20D7A7D0D4C8C381DF4AB7F4530F98A9AEA1296FE29C8D176
7525D360DA7935BABEC2074A2079BCB8ACA481186F5AE394F168D85BBB0E1E77
47929EAFE001CC3C3D2248C8BA1BE906583834A29FB6C654BB8C467DAF175ACF
7A6A317E875EB965AF3BAA11BF94B87F28D1B1BD5C55CD4FF87B472E5C4D39E8
9A30472D521AB4203BD33F91AD2DEB3A2D9FD5B95F5A13D58172757EF80003B2
BD2B5BF4039BA5D8964369541EDED7782D46F930C99588E052E884D6DF5A9E6D
219B1469BD393A4EB57DF745FF8B88CBF63F0558A3CB380A5A5A43493D03BC94
822C133BE10F68633E8BFA2100A4E1ED629313E277C6A1022E779A8C13AB1E31
AD1246AE181E5BDD6D0EA53F3715F6772FE5A42D408229BDC98296640BCDD77D
85D93AC5AFCDBBC3F08C18E2EB8744F4D6049EC3953F10F8D58037000DC9CC13
FA5AD271F323C53DD7CC2CC0298FEF84D157AD962FE7A92060AFB465741F3CEC
1FB34EA8006AFC5A31F0D80FB965FA4D3C86AAD4114BCF099D98B7BE0BCDD47D
D53FB9CEF5BE4053FFA9CC22BE98565938C923A0E19DE9491E37288D5F6912D6
204641048E8514B69A9F812DF9F8F82ABC5BA5BD9D104E3BEA95AC555F481044
7A02323B0C4D8707AC12D2C2CF380C699B195C66845FCA225319638F14E6B6E7
2A36ACAD427F782BFE336EEABE9ABFC23427E60B673A7242622BA14E5250C951
A640C6E2F69291A9B7FCC8D4823C41F392C0CE9A477B6B89156E7434FA8B55EF
E4961004EF5B8EBAD0162D077266C7164D73CEC74366492EF39092128EAC8DA8
516748E196B6BA39B37B4131DCEC7F6FEFAA6127E73A1A43BDDAE75DB72E5646
278D19CB6BB89D0A0CEE2491267265A87A3C80B93FFA744362E4E563BC6B83FC
7B588359D33616AC7FE1C12731EA8DF1E8995A2742AE82627403F38F76899418
1E0508A4BF6AA8AAE3500C201BF2F2D598E0752584805263D5D26D91B6013E39
95D2B0BED44D03D3792BEF0177A56513C5B171FC5E86C43B7698E8B472519A6C
C31EA5A11EEECE25E413654FA968B584732EC67F4794CF74D936DCB6180AF415
AFB98A5FD0BE9B2839CF66BD60E991FB0D28AF0D32C752E7FD98CFCB2F86CFF3
268F8A448955CB232886DCA2A2DFBF29086729A5EE47E87566604EDB1F662A76
00DDBB4A60C3ED082DFBFECDB45D7D45FB0AD50D304A1F672EB86B3DAD0458EB
71D8CD8F8D999C15888CDA77D7A86798086030657496A71D341D0803C44AE621
AD862998E5BC4E6F02ABF52B9C57BD4203809B93F6262826589074FC6801A0E7
CC3B6EFAA73506BFC50A7309B7607A4AEE350BE354A51FBFD04E0C219EC5B7BA
BAF62773253A29C2BF3E5F5C0132C99C1D5BB0D648486E54C0FA2BB68FA03B1C
2DF5EB352CBCF7F3B53EB65DCC50441D4311FF47A6100B484028807E5BF32745
DA9953741CF6DD293E9EE0E744FD35AD42264A31331E40FEF5FF6221FEE713D7
07B4F9321D9987C87D2FBE01FF46319D3D9CA3C577A47A2D3218A7CFD0CFFF1F
FD703F3A65D11D566C5DAE07A154F5C23DCC5A8E969B8B681F37523B50E6447B
6A06030E26B1DD6017E6890CBD87BC20C73B6F8BA478F67284DB9347F300D3E2
07AC8915563BC9A9C04EBBA32085EF56D13CCCAEDDC3B418B567B56E012E02EA
512777A91EAA0E4B1FB485675F6502E5A29FF05449905141BDDB4AA263EF78C0
1223E92C07CFE0389652C5CB02378CA34584BF3226C29A5F0DACC9BAD67939D7
68617A9567F44F791349AE7C056CF9C76943FDA934C791ABEEDD4DDD617D24DA
6D3D3DA27804B8903C42FFCC040251FC59D9A6023981F698768F049C2032F7DC
0ED43837E0F59BDF9F03412F7E772DDA69427062B9CB623C638BF89B92708100
69CD8132EAB5FC866BF7785702016C8B14B2C47629502DF4E9250A486F9CD7D9
B7ECB9462F28769F0431EA08D5D5149C04914D6E14BA892B9CC388830D07FD6B
5A1540CDDA88A70C54F0A36C7E35A03CBABB50C6ECB7D82E2F441815751DEC16
B05776200E5E04666945456E02506757D79FAFE32799224952A260DD33A0CAC9
172C3BC7D9BD8DCB921F50335F7290ED505E7172B363A0F12667F0D376625B2F
B83B664000A97FCEF4657CBE1FDAB6451291F2317A5F3322CDD89FC8AB30A729
A5016241318048A32ABB3AF9C2AB3A9B6A9EC140D1471C6038E7A9E2E1F219F4
07B7CDCCCAC53E14FB1AD2427FAA8F0A942EC653860C870A1C9CE74B84DDD25E
4AE38641A7A298DEB76F5EBA303F1B728BB4CE1544F4513DCA25AA8DA7C47B48
EB68223AD4ACABE1156C02D0C6CC16D3C2670281443A8C11A38887ACDD1AF724
5869DED17EB50FB99AB7AD0606AF7F70E35E4204CD43F5C4081CE825940FF91D
D93651ABD895C19DA62A5F4F8B0C1F435EA5F1D98199B2A457E2B67CDDC87C5B
A6069BFF05F8FCA89B06DA5CA2296CB7F91BBB4F74008F1C49A1620CC5A8DEF9
20822410477BE93E76926EDF610D72FA41E5EB25413A7D0BB7C5B1C36A6B2A10
5ADB79AC6698A6C54F5F6314F176F6A6F518E753E5F28B1BCE8DE72950D912F4
4B2D0FF4B640C7C053B6BEC7B1379225505EA15C22F5DAAD6B1394D45AA26D02
C410B3A41E11C925769BCE2B0ADA93261D923E473506F548E67F2FC34104339B
3C18224328BCBA5872541A3635F78A3725CE6306BD2A61FDD990532C1BB5FFE8
1991A68899E289DE33C4E7CEDFE72D77B4A25FDFECE636602525BBB3072F989B
FCECE5653CF896FB9FE78B85C05F0F4A39F48D760C03A12E2F75085AEC223D0E
0A5D8024DD3889B50677CB1564BC7B58829FAB978A27CFF891D70213BD9C4933
CF78CC7E2EEE2EC95E39FE65DA56B8747CFE885A260CCDAB128E6A81FB0D33
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (CorrigesSeconde.dvi)
@start /Fa 22[31 115[37 21 27 24 36 37 35 38 56 17 1[17
18 37 32 19 31 1[30 1[32 20[35 26[32 2[16 1[16 4[17 39[{
 TeXBase1Encoding ReEncodeFont }24 61.1042 /Utopia-Regular
rf /Fb 151[35 37[37 66[{ TeXBase1Encoding ReEncodeFont }2
58.049 /Utopia-Italic rf /Fd 242[83 13[{}1 83.022 /CMSY10
rf /Fe 205[36 36 49[{ TeXBase1Encoding ReEncodeFont }2
68.7422 /Utopia-Regular rf /Ff 229[83 22[21 3[{}2 83.022
/LINE10 rf /Fg 151[46 5[43 21[43 3[59 3[58 50 48 48 65[{
 TeXBase1Encoding ReEncodeFont }8 76.3802 /Utopia-Italic
rf /Fh 159[44 96[{}1 76.3802 /Fourier-Math-Letters-Italic
rf /Fi 177[58 78[{}1 83.022 /wasy10 rf /Fj 190[66 65[{}1
76.3802 /Fourier-Math-Cal rf /Fk 57[55 55 31[55 1[55
163[{}4 76.3802 /Fourier-Math-Symbols rf /Fl 92[42 163[{}1
58.049 /Fourier-Math-Symbols rf /Fm 23[30 109[28 5[20
1[23 1[35 10[30 3[30 41[31 31 31 31 31 31 31 31 3[15
44[{ TeXBase1Encoding ReEncodeFont }16 58.049 /Utopia-Regular
rf /Fn 4[46 17[39 39 7[40 67[67 6[31 8[78 17[37 39 37
1[38 46 26 33 30 45 46 44 47 70 21 40 1[22 46 40 24 39
46 38 46 40 13[41 2[46 58 60 1[43 1[27 2[56 44 1[60 4[30
3[20 20 1[40 40 40 40 40 40 40 40 40 35 20 30 20 2[27
27 21 35[47 3[{ TeXBase1Encoding ReEncodeFont }60 76.3802
/Utopia-Regular rf /Fo 22[40 112[40 2[48 28 34 34 46
47 45 1[72 24 2[24 1[41 1[40 46 38 1[42 14[52 12[48 10[21
6[43 43 43 49[{ TeXBase1Encoding ReEncodeFont }23 76.3802
/Utopia-Bold rf /Fp 22[57 57 114[69 41 49 48 1[68 64
1[104 34 2[35 1[59 1[57 67 54 67 60 12[69 1[75 32[62
49[{ TeXBase1Encoding ReEncodeFont }20 109.987 /Utopia-Bold
rf /Fq 22[47 112[45 4[40 36 2[53 5[27 1[48 1[47 55 45
31[63 67[{ TeXBase1Encoding ReEncodeFont }11 91.6562
/Utopia-Regular rf /Fr 22[68 82[66 32[80 45 58 1[78 1[76
82 122 3[38 80 2[68 79 65 1[69 13[71 5[125 77[{
 TeXBase1Encoding ReEncodeFont }17 131.985 /Utopia-Regular
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -254 -561 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-246 -246 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246
-246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246 -246
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Rappels de calcul et de g\351om\351trie)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -246 -246 a -246 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -246
-246 a -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246
a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 0 TeXcolorgray
1162 166 a Fr(M)n(ath\351matiques)30 b(\226)f(S)n(econde)1496
577 y Fq(C)o(orr)q(ig\351s)18 b(des)j(exer)n(cices)-246
937 y
SDict begin H.S end
 -246 937 a -246 937 a
SDict begin 18 H.A end
 -246 937 a -246 937 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -246
937 a Fp(T)-10 b(able)22 b(des)h(mati\350r)n(es)p 0 0 1
TeXcolorrgb -246 1120 a
SDict begin H.S end
 -246 1120 a Fo(1)67 b(Rappels)14
b(de)i(calcul)e(et)i(de)g(g\351om\351tr)q(ie)1045 1120
y
SDict begin 12 H.L end
 1045 1120 a 1045 1120 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1045 1120 a 0 TeXcolorgray
3058 w Fo(2)p 0 TeXcolorgray 1930 5895 a Fn(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -246 -246 a 83 x Fp(1)105 b(R)o(appels)23 b(de)f(calcul)i(et)f
(de)f(g\351om\351tr)q(ie)-246 -52 y
SDict begin H.S end
 -246 -52 a -246 -52
a
SDict begin 12 H.A end
 -246 -52 a -246 -52 a
SDict begin [/View [/XYZ H.V]/Dest (exo.1) cvn /DEST pdfmark end
 -246 -52 a 0 TeXcolorgray 73
x Fo(Ex)o(er)o(cice)14 b(1)p 0 TeXcolorgray 42 w Fn(Dans)i(chaque)i
(question,)i(on)d(obtient)h(la)g(r\351ponse)g(\340)f(l)o('aide)h(d)n
('un)g(tableau)g(de)f(propor)q(tionnalit\351.)-246 64
y
SDict begin H.S end
 -246 64 a -246 64 a
SDict begin 12 H.A end
 -246 64 a -246 64 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -246 64 a 0
TeXcolorgray -141 160 a Fn(1.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1435 212 1239 4 v 1435 311 4 100 v 1488
282 a(N)n(ombr)o(e)f(de)h(personnes)p 2302 311 V 145
w(4)p 2526 311 V 144 w(6)p 2670 311 V 1435 315 1239 4
v 1435 414 4 100 v 1653 384 a(F)l(ar)q(ine)h(\(en)f(g\))p
2302 414 V 268 w(250)p 2526 414 V 114 w(?)p 2670 414
V 1435 418 1239 4 v 1435 517 4 100 v 1660 487 a(Lait)h(\(en)f(mL\))p
2302 517 V 276 w(500)p 2526 517 V 114 w(?)p 2670 517
V 1435 521 1239 4 v 1435 620 4 100 v 1779 590 a(\214ufs)p
2302 620 V 435 w(4)p 2526 620 V 144 w(6)p 2670 620 V
1435 624 1239 4 v -38 743 a(P)n(our)g(6)g(personnes)o(,)j(il)e(faut)822
710 y Fm(250)p Fl(\243)p Fm(6)p 822 723 165 5 v 889 772
a(4)1011 743 y Fk(\306)1090 710 y Fm(1)6 b(500)p 1090
723 130 5 v 1139 772 a(4)1243 743 y Fk(\306)15 b Fn(375)j(g)f(de)g(far)
q(ine)o(,)1860 710 y Fm(500)p Fl(\243)p Fm(6)p 1860 723
165 5 v 1927 772 a(4)2049 743 y Fk(\306)2128 710 y Fm(3)6
b(000)p 2128 723 130 5 v 2177 772 a(4)2281 743 y Fk(\306)14
b Fn(750)19 b(mL)f(de)f(lait)h(et,)g(bien)g(s\373r)-5
b(,)18 b(6)g(\234ufs)o(.)-246 785 y
SDict begin H.S end
 -246 785 a -246 785
a
SDict begin 12 H.A end
 -246 785 a -246 785 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -246 785 a 0 TeXcolorgray -141
869 a Fn(2.)p 0 TeXcolorgray 43 w(Les)g(6)g(yaour)q(ts)f(p\350sent)i(6)
10 b Fk(\243)g Fn(125)16 b Fk(\306)e Fn(750)19 b(g.)p
0 TeXcolorgray 0 TeXcolorgray 1541 952 1027 4 v 1541
1052 4 100 v 1594 1022 a(masse)f(\(en)g(g\))p 2074 1052
V 102 w(1000)p 2339 1052 V 105 w(750)p 2563 1052 V 1541
1055 1027 4 v 1541 1155 4 100 v 1625 1125 a(pr)q(ix)f(\(en)h
Fi(N)p Fn(\))p 2074 1155 V 194 w(2)p 2339 1155 V 214
w(?)p 2563 1155 V 1541 1158 1027 4 v -38 1291 a(J)n(e)f(payer)o(ai)325
1258 y Fm(750)p Fl(\243)p Fm(2)p 325 1271 165 5 v 343
1319 a(1)6 b(000)514 1291 y Fk(\306)593 1258 y Fm(1)g(500)p
593 1271 130 5 v 593 1319 a(1)g(000)747 1291 y Fk(\306)14
b Fn(1,)8 b(5)18 b Fi(N)p Fn(.)-246 1333 y
SDict begin H.S end
 -246 1333
a -246 1333 a
SDict begin 12 H.A end
 -246 1333 a -246 1333 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -246 1333 a 0 TeXcolorgray
-141 1417 a Fn(3.)p 0 TeXcolorgray 43 w(G\351n\351r)o(alement,)i(dans)d
(ce)h(type)f(de)g(question,)j(il)d(vaut)h(mieux)h(conver)q(tir)e(en)h
(minutes)p 0 0 1 TeXcolorrgb 2575 1417 a
SDict begin H.S end
 2575 1417 a
-30 x Fm(1)2612 1417 y
SDict begin 12 H.L end
 2612 1417 a 2612 1417 a
SDict begin [/Subtype /Link/Dest (Hfootnote.1) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2612 1417
a 0 TeXcolorgray Fn(.)p 0 TeXcolorgray 0 TeXcolorgray
1528 1500 1051 4 v 1528 1599 4 100 v 1605 1570 a(temps)h(\(en)e(min\))p
2208 1599 V 127 w(60)p 2392 1599 V 134 w(?)p 2576 1599
V 1528 1603 1051 4 v 1528 1702 4 100 v 1582 1673 a(distance)g(\(en)h
(km\))p 2208 1702 V 103 w(20)p 2392 1702 V 104 w(45)p
2576 1702 V 1528 1706 1051 4 v -38 1850 a(On)f(mettr)o(a)342
1817 y Fm(60)p Fl(\243)p Fm(45)p 342 1830 165 5 v 394
1879 a(20)531 1850 y Fk(\306)599 1829 y Ff(\032)611 1817
y Fm(20)o Fl(\243)p Fm(3)p Fl(\243)p Fm(45)p 611 1830
238 5 v 688 1897 a Ff(\032)699 1885 y Fm(20)872 1850
y Fk(\306)d Fn(135)19 b(min,)g(soit)f(2)f(h)h(15)g(min)g(\(puisque)h
(135)d Fk(\306)e Fn(120)c Fk(\305)g Fn(15\).)-246 1901
y
SDict begin H.S end
 -246 1901 a -246 1901 a
SDict begin 12 H.A end
 -246 1901 a -246 1901 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -246
1901 a 0 TeXcolorgray -141 1976 a Fn(4.)p 0 TeXcolorgray
43 w(L)-10 b('\351nonc\351)19 b(donne)e(les)i(infor)q(mations)f(r)o
(ecens\351es)h(dans)e(le)h(tableau)g(ci-dessous)g(et)g(demande)f(de)h
(compl\351ter)g(la)g(case)3554 1973 y Fe(1)3530 1976
y Fd(\015)p Fn(.)p 0 TeXcolorgray 0 TeXcolorgray 1629
2057 850 4 v 1629 2157 4 100 v 1696 2127 a(F)o(lor)q(ins)p
2002 2157 V 118 w(7)p 2146 2157 V 113 w(?)p 2289 2157
V 2366 2124 a Fe(1)2342 2127 y Fd(\015)p 2475 2157 V
1629 2160 850 4 v 1629 2260 4 100 v 1685 2230 a Fn(Pistoles)p
2002 2260 V 106 w(6)p 2146 2260 V 1 0 0 TeXcolorrgb 104
w(4)p 0 TeXcolorgray 2289 2260 V 0 TeXcolorgray 2366
2227 a Fe(2)p 0 TeXcolorgray 2342 2230 a Fd(\015)p 2475
2260 V 1629 2263 850 4 v 1629 2363 4 100 v 1682 2333
a Fn(Deniers)p 2002 2363 V 113 w(?)p 2146 2363 V 1 0 0
TeXcolorrgb 104 w(5)p 0 TeXcolorgray 2289 2363 V 1 0 0
TeXcolorrgb 104 w(30)p 0 TeXcolorgray 2475 2363 V 1629
2366 850 4 v -38 2484 a(On)f(compl\350te)i(d)n('abor)o(d)d(la)i(case)
981 2481 y Fe(2)958 2484 y Fd(\015)f Fn(:)h(en)f(\351change)h(de)f(30)i
(deniers)o(,)f(on)f(a)h(4)10 b Fk(\243)g Fn(30)g Fk(\245)g
Fn(5)16 b Fk(\306)e Fn(24)19 b(pistoles)g(:)p 0 TeXcolorgray
0 TeXcolorgray 1629 2567 V 1629 2667 4 100 v 1696 2637
a(F)o(lor)q(ins)p 2002 2667 V 1 0 0 TeXcolorrgb 118 w(7)p
0 TeXcolorgray 2146 2667 V 113 w(?)p 2289 2667 V 0 TeXcolorgray
2366 2634 a Fe(1)p 0 TeXcolorgray 2342 2637 a Fd(\015)p
2475 2667 V 1629 2670 850 4 v 1629 2770 4 100 v 1685
2740 a Fn(Pistoles)p 2002 2770 V 1 0 0 TeXcolorrgb 106
w(6)p 0 TeXcolorgray 2146 2770 V 104 w(4)p 2289 2770
V 1 0 0 TeXcolorrgb 104 w(24)p 0 TeXcolorgray 2475 2770
V 1629 2773 850 4 v 1629 2873 4 100 v 1682 2843 a(Deniers)p
2002 2873 V 113 w(?)p 2146 2873 V 104 w(5)p 2289 2873
V 104 w(30)p 2475 2873 V 1629 2876 850 4 v -38 3031 a(On)e(peut)i
(alors)e(compl\351ter)i(la)e(case)1086 3028 y Fe(1)1063
3031 y Fd(\015)g Fn(:)h(en)f(\351change)h(de)f(30)h(deniers)o(,)h(on)e
(a)2280 2998 y Fm(7)p Fl(\243)p Fm(24)p 2280 3011 135
5 v 2332 3059 a(6)2439 3031 y Fk(\306)2518 2998 y Fm(7)p
Fl(\243)p Fm(4)p Fl(\243)2669 3020 y Ff(\003)2664 2998
y Fm(6)p 2518 3011 176 5 v 2595 3099 a Ff(\003)2590 3077
y Fm(6)2718 3031 y Fk(\306)d Fn(28)k(\003or)q(ins)o(.)-246
3143 y
SDict begin H.S end
 -246 3143 a -246 3143 a
SDict begin 12 H.A end
 -246 3143 a -246 3143
a
SDict begin [/View [/XYZ H.V]/Dest (exo.2) cvn /DEST pdfmark end
 -246 3143 a -246 3161 a
SDict begin H.S end
 -246 3161 a -246 3161 a
SDict begin 12 H.A end
 -246
3161 a -246 3161 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -246 3161 a 0 TeXcolorgray 78 x Fo(Ex)o(er)o(cice)c
(2)p 0 TeXcolorgray 0 TeXcolorgray 147 w Fn(1.)p 0 TeXcolorgray
42 w(On)j(compl\350te)i(deux)f(tableaux)g(de)f(propor)q(tionnalit\351)i
(\(on)e(tr)o(availle)i(en)e(min)h(et)g(en)g(km\))f(:)p
0 TeXcolorgray 0 TeXcolorgray 452 3354 1072 4 v 452 3453
4 100 v 528 3423 a(temps)i(\(en)e(min\))p 1131 3453 V
127 w(60)p 1315 3453 V 144 w(?)p 1519 3453 V 452 3457
1072 4 v 452 3556 4 100 v 505 3526 a(distance)h(\(en)f(km\))p
1131 3556 V 123 w(3)p 1315 3556 V 124 w(0,5)p 1519 3556
V 452 3560 1072 4 v 0 TeXcolorgray 0 TeXcolorgray 2615
3354 1011 4 v 2615 3453 4 100 v 2692 3423 a(temps)i(\(en)e(min\))p
3295 3453 V 127 w(60)p 3479 3453 V 114 w(?)p 3622 3453
V 2615 3457 1011 4 v 2615 3556 4 100 v 2668 3526 a(distance)h(\(en)g
(km\))p 3295 3556 V 103 w(15)p 3479 3556 V 104 w(5)p
3622 3556 V 2615 3560 1011 4 v -38 3726 a(S)n(t\351phane)h(nage)497
3689 y Fm(60)p Fl(\243)p Fm(0,5)p 497 3706 181 5 v 571
3754 a(3)701 3726 y Fk(\306)780 3693 y Fm(30)p 780 3706
62 5 v 796 3754 a(3)866 3726 y Fk(\306)14 b Fn(10)k(min,)h(puis)f(il)g
(cour)q(t)1649 3693 y Fm(60)p Fl(\243)p Fm(5)p 1649 3706
135 5 v 1685 3754 a(15)1807 3726 y Fk(\306)1886 3693
y Fm(300)p 1886 3706 93 5 v 1902 3754 a(15)2003 3726
y Fk(\306)c Fn(20)k(min.)-246 3768 y
SDict begin H.S end
 -246 3768 a -246
3768 a
SDict begin 12 H.A end
 -246 3768 a -246 3768 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -246 3768 a 0 TeXcolorgray
-141 3852 a Fn(2.)p 0 TeXcolorgray 43 w(S)n(t\351phane)h(a)e(par)o
(cour)q(u)g(un)h(total)g(de)f(5)10 b Fk(\305)g Fn(0,)e(5)16
b Fk(\306)e Fn(5,)8 b(5)19 b(km,)f(en)g(10)10 b Fk(\305)g
Fn(20)16 b Fk(\306)e Fn(30)19 b(min.)p 0 TeXcolorgray
0 TeXcolorgray 1518 3933 1072 4 v 1518 4033 4 100 v 1595
4003 a(temps)g(\(en)e(min\))p 2198 4033 V 137 w(30)p
2402 4033 V 114 w(60)p 2586 4033 V 1518 4036 1072 4 v
1518 4136 4 100 v 1571 4106 a(distance)h(\(en)g(km\))p
2198 4136 V 103 w(5,5)p 2402 4136 V 134 w(?)p 2586 4136
V 1518 4139 1072 4 v -38 4287 a(La)f(vitesse)j(mo)n(yenne)d(de)g(S)n
(t\351phane)j(sur)d(l)o('ensemble)j(de)d(son)h(par)o(cours)f(est)h
(donc)2502 4250 y Fm(60)p Fl(\243)p Fm(5,5)p 2502 4267
181 5 v 2562 4315 a(30)2707 4287 y Fk(\306)2775 4262
y Ff(\032)2786 4250 y Fm(30)o Fl(\243)p Fm(2)p Fl(\243)p
Fm(5,5)p 2786 4267 253 5 v 2871 4334 a Ff(\032)2881 4322
y Fm(30)3063 4287 y Fk(\306)c Fn(11)k(km/h.)-246 4389
y
SDict begin H.S end
 -246 4389 a -246 4389 a
SDict begin 12 H.A end
 -246 4389 a -246 4389 a
SDict begin [/View [/XYZ H.V]/Dest (exo.3) cvn /DEST pdfmark end
 -246
4389 a 0 TeXcolorgray 92 x Fo(Ex)o(er)o(cice)c(3)p 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1225 5519
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 174.69983 a add def
/d 0.0 a add neg def /h 114.9489 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1225 5519 a 837 5746 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 113.81097 113.81097 199.1692
113.81097 199.1692 56.90549 56.90549 56.90549  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 199.1692 68.2864 187.78827
68.2864 187.78827 56.90549 199.1692 56.90549  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 187.78827 113.81097 187.78827
102.43004 199.1692 102.43004 199.1692 113.81097  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 56.90549 56.90549 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 113.81097 199.1692 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 113.81097 199.1692 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 113.81097 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 113.81097 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 56.90549 113.81097 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0.49803 0 1  setrgbcolor  [ 113.81097
56.90549 101.7393 56.90549 101.7393 68.97714 113.81097 68.97714  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.89961
0.8 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 1.0
SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.26372
113.81097 142.26372 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.26372
56.90549 142.26372 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 837 5746 a
tx@Dict begin { 148.52335 91.04869 } PutCoor PutBegin  end
 837 5746 a 51 x Fn(2)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 154.78299 125.1919 } PutCoor PutBegin  end
 837 5746 a 51 x Fn(3)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 154.78299 51.21501 } PutCoor PutBegin  end
 837 5746 a 51 x Fn(3)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 80.80568 51.21501 } PutCoor PutBegin  end
 837 5746 a 51 x Fn(2)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 51.21501 62.02676 } PutCoor PutBegin  end
 837 5746 a 6 w Fg(A)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 201.44547 60.31967 } PutCoor PutBegin  end
 837 5746 a Fg(B)837 5746
y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 201.44547 117.22516 } PutCoor PutBegin  end
 837 5746 a 835 5745 a Fg(C)837
5746 y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 116.08723 117.22516 } PutCoor PutBegin  end
 837 5746 a Fg(D)837 5746
y
tx@Dict begin  PutEnd  end
 837 5746 a 837 5746 a
tx@Dict begin { 108.1205 45.52455 } PutCoor PutBegin  end
 837 5746 a 2 w Fg(H)837 5746
y
tx@Dict begin  PutEnd  end
 837 5746 a 2675 5519 a
currentpoint initclip moveto
 2675 5519 a 0 TeXcolorgray -246
5569 1757 4 v -154 5646 a Fa(1)q(.)p 0 TeXcolorgray -76
5646 a
SDict begin H.S end
 -76 5646 a -76 5646 a
SDict begin H.R end
 -76 5646 a -76 5646 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.1) cvn /DEST pdfmark
end
 -76
5646 a 0 TeXcolorgray Fa(Les)g(calculs)g(ne)g(sont)f(pas)h(toujours)g
(plus)f(faciles)i(en)f(minutes)f(qu)n('en)i(heur)o(es)o(,)f(mais)g(c)n
('est)g(g\351n\351r)o(alement)h(le)g(cas)o(.)p 0 TeXcolorgray
0 TeXcolorgray 1930 5895 a Fn(2)p 0 TeXcolorgray eop
end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -163 a Fn(Le)18 b(tr)o(ap\350ze)g(est)g(constitu\351)h(:)p
0 TeXcolorgray -76 -63 a(\225)p 0 TeXcolorgray 42 w(d)n('un)f(r)o
(ectangle)f Fg(B)9 b(H)f(D)t(C)h Fn(,)19 b(d)n('air)o(e)e
Fh(`)10 b Fk(\243)g Fg(L)18 b Fk(\306)c Fn(3)c Fk(\243)g
Fn(2)16 b Fk(\306)e Fn(6)k(;)p 0 TeXcolorgray -76 37
a(\225)p 0 TeXcolorgray 42 w(d)n('un)g(tr)q(iangle)23
b Fg(A)5 b(H)j(D)d Fn(,)18 b(d)n('air)o(e)905 4 y Fb(B)6
b Fl(\243)p Fb(h)p 905 17 123 5 v 951 65 a Fm(2)1052
37 y Fk(\306)1131 4 y Fm(2)p Fl(\243)p Fm(2)p 1131 17
104 5 v 1167 65 a(2)1258 37 y Fk(\306)14 b Fn(2.)-246
136 y(Donc)j(l)o('air)o(e)h(du)f(tr)o(ap\350ze)h(est)g(6)10
b Fk(\305)g Fn(2)15 b Fk(\306)f Fn(8.)-246 286 y Fo(R)o(emarque)g(:)k
Fn(On)f(peut)h(aussi)h(utiliser)f(la)g(for)q(mule)g(\(hors-progr)o
(amme\))g(:)1301 509 y Fj(A)1367 521 y Fm(tr)o(ap\350ze)1580
509 y Fk(\306)1659 453 y Fn(\()p Fg(B)g Fk(\305)10 b
Fg(b)t Fn(\))g Fk(\243)g Fg(h)p 1659 490 358 5 v 1817
566 a Fn(2)2040 509 y Fk(\306)2120 453 y Fn(\(5)g Fk(\305)g
Fn(3\))g Fk(\243)g Fn(2)p 2120 490 326 5 v 2262 566 a(2)2469
509 y Fk(\306)k Fn(8.)p 0 TeXcolorgray 1930 5895 a(3)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
