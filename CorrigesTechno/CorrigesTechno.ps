%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: CorrigesTechno.dvi
%%CreationDate: Fri Nov  8 16:27:41 2024
%%Pages: 17
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold Fourier-Math-Symbols
%%+ Fourier-Math-Letters-Italic wasy10 CMSY10 Utopia-Italic
%%+ XYATIP-Medium XYBTIP-Medium Fourier-Math-Extension fourier-orns
%%+ MSAM10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o CorrigesTechno.ps
%+ CorrigesTechno.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2024.11.08:1727
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 73 /trianglerightsld put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DEBE0B8C242F6EA75
5CA2D45C688BEE3FE55AE3ACF0B696E444C8FF31EB68E7868ECB1E8069FE1F61
74267389141060BB9E7F70CC4ACE145589916E01771975AB24DFF6BC7A2AEE55
DAD15F08252EDFD92DBF9D82CD081ACF2464284F5D54A83BF518CDD4370AFF9D
077D74D8C7DCD2F7ADE2465D8DFA46EAE6ABE863D7AFBDB909A0B9A944A74D14
89DFD974588112D4CB630389A4F601F2870E6C6A01AF6C1A517F86D2C6190AFE
9B31BC892F0355E991C525AE6E8CCDE226F4902BF46D68C5DAFA90C418428EEA
7FE8502D8A61B50F46B5B91224C722E7211327F13F8133ADCE7C195BF3B07AA2
B353A44EA785E273ED52156C072485C5377874A00CE95E8CA6BF14A5D39DE3A7
ABDE2A6F2F91C5C4EAFABA29E96C569BACF9290478CFDD203BA47E66E3B89327
F2C88A313272183BFDF418D3C46EE0B1269CC8781E2CADC336A4AFAC6A910A6B
158DC42E97769D57AB2B2D70122634D5A247EE4D8672339B1D90113137D4F9B8
7901F18B38FBFF69D3FCB65A973610C405074CE3DE045C9E582DF0DC455AD6DD
65F47D33F454316DDAC452AE79C0C7596E61997B1C1F3C19B4A0FD935426EBB7
BC46BEFAE400803D67E797DBBFD885DC2D0892F936D6DF2322FBF59875757C36
37C45159BF0E1C332C69FDADB27871E711B7F00F668A0240AC9A7D179E386226
60DBAB749090871FD2316356C3CF06A91C46716827503C93150922D97E5DA774
EBD006978CBDECF5B347CCE0D73E5DEF603D68C3984D89641875C81B274C8608
360CB80F0E85619073C13E213CE2CD9638D809084927E0DA3DB454B1BED8CD3E
C75326188E2EE4CF408214A4AA87D2D24B95D35C381AA7D2DDD0EC02B2B7658D
F687C9A775D9EA3C72674A561939FD25EDEF04A2B4D3084E86BE8B45B2158D28
4F2D0E9F020D3FC6A0A62B66FF1976403B8C17B6DB619D0DF87CFC1DD1D68FAF
F1AF62A48B92A023EC0FDA8B73C48F068DC7B6146A0FF73318128ABBF13F33FF
7DCD3EBB6BD8CD9B34D5EE86C314F6EECF2F28EB74D60E31F7C6E25794CEB48A
306E9448AD569D93E0D16ACAA34C7B5AC9D031D95FA94F8161EBF018376B3906
F9886DC5470C9098E46006A8E968E2782FED1DFAA90D199868A39608735374B9
4A52913F25E79B7CE6E908496D6A7432C7F861BF53AF14B0B9CB5C10D56BC9F8
FC755012CF3167FBDC29D062680850691795079BDB9FBFF9BB3BF66D7D3031E3
1CC2B067F7F7DB21753AF1E53B757FA94068730FECEDE5088075E62D584B0DE3
E508B5599C789E817C016B307FC0DF2F4C8424F29E00856DBF740717B386EAC9
0E340AA4F24116CEB01623A4C092FCB1E6BBFFAC38DAEBDD05100D732CDB2772
E18723
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7846985ABD6DB9B1404A5E1EE79A612F3F94DE12F21661
BE7E591D7947341AAD30F1FE76501224D644A36F805D33FAF448F1924563210A
E3A16A2A43888775646288E228A16F187998265F9861902FD93DB17DC1A0DE35
57997B95387966353736C5764EB5B3552F3E5FB02EC27C94DEC59320A85D8638
839E0B4A706FEE1C919E60BD887421EBA20B332314919A7DCE09D6BC9AFE8A87
AABC30C4C8E71760B8D8BFF54A92D01D56633B98C875EAE44A8E1A57FA8C4B4A
78D6DAEF11DA248A1939C377F5801511B68EC34FE531B3D50F27D872796BC5B1
A6EE6CC8E4E57B32B8C2F4F1BA4FFBBF8252F09AECDAC3A7B0BF0FB64D740B7B
50FF95786E4E2F3D63943BD9F084F1B2648E88B4B9D847024797DC8F8377930E
B0B645734348FF709A3777D21C0CC75DEF2CAA2F135AE7D0622B4A37A8442609
E5549935182284C73E5D8B037CD15B4F200BDCE328E922DFF65B3BBD5EA5D5C9
45E91A7EA9602A98D668B4CC098C8A1B48EB84088D6D105A405466115849968F
489FC8E54E39C0092C5C0063A5EC583BACFCD114B047793A609E7BE31EBEC063
10C052103F17C41482A630AC02E0F44F6DF71BA250E9664AEABE18520919F961
24E66AEC8B8DA2951AF06653A1BD6F4B5A521F77A86F3583217A6829C8B74F1A
60D5360139F38598D059C703FBE98FC1B71E7D5EBF03B768A7692C90996DDB3B
E2F34863516B1C688CE2AE6C72FB0BEDE2654DBD8E1B5CC728A292DAF25B2CEA
3C2D9851C2D53BFB65EE9BA27728AC5B38D5F364260CF69303C7F766F2E9A8AC
FDDA759A24ACED8D22ADD6648E65D0B471780D4634A8981E0F606F27AA3CFE57
7DB1617AE7D789F8F282C5615BE17525909FD73AD8367C312D43E70DBA125589
7F0B6614D0192F3C52C0AB5FE2DF561C0FACE0C9D317AE98A934A369BF8FDD10
E699F4665EB768CECA4CE02EEC7145820F952C3BD0C4D66089B5785C7B1096D8
81220F31033CF4181EB27D921705E60E68B023385A6B9893D1A83B039E152076
814F6B59D3114B5726AEA7AA5055797E3EA11B7CB2DC9B7155ACBF85B44CAEC0
81302EA07B8F1340E263A979C3C2E1DA7A2AC341A2098613940E82EA6878591C
85D37B447DAE4203563B5A9D9F7CA40AB6482AEE047DA08F78B1F2174277CC50
4C023A845BF9775C627593AF2EB07A9245E3EC934C8690B772B0FD61B6D57BCA
6ECF48D907FBA58BABA1A12FAA4F1D65C00998A5BF006A0AE4B387D2C2C35265
7315D712BFFAE19D9BC4C9008A7EA647B445867313A3E9AF7E6BCB495D3C7514
0039CCD4DAA8948A8E94139A3CBFEE4963F306A73BB71FC30982332906A729E2
E9B0D0FE00DB7D40422E43467A23261A0372C6F83E552C25D613133D20852B51
04C79C2836BE9B91619D69FC993446EF9EF4231EB78C7DC4285AFED40B4ABDA4
CC2C031B5282D1B680CB0F8D8835C074410702084D1E275AB5179241D3CFE342
27238697944992D8A1B6A4051443F43CD6D764FFCB69156E89A50DB76A9C07A1
11F29C42C5EBBF5709FF71379592FBEAC7429F178C4805034C886967759CE540
328E8722B60DE4AB4B97CEF994AB5BB692BD85DD00090E081051BE1AA7278913
F99591F653F69DFF5150A3BD222E3A8CC8894A8A612AE12C9486C5EB48D600D3
487086C4DC32A47F8F4FD11224B46E40F763DD439F069E1461A68BEA740343CF
24CEFD354E22FA791B4BA6EDCC32D5D32E9AAFC7B1F8D9FCC459BB788A9BD5B8
9D9C1327B73F783AF68E559531003B3C15D10752B00881C5CF52CFAC752200BA
A2210C12AA4AAD380A37916E5C9AF47FEDC3CBD710157C5A43E5AACD57918009
20FB507042053282E1F8064DE01B04FF694378301E2E5EFA647D8456D0D12BB4
D27C641B4C897AA02E5941B5DE896F7F3E42D9FE3F123D4C599961B0ED6E4729
77042467D628F4035DCBD6024D1433691B46FD11A61E4C8D5D832F337320D9F6
A15DEA0116853C9CEE86D9CDEEC4F303B7CAE67F9787C211FEF04986C1DB9090
5A65959D99CF3B485C4E8BA1B65A55943E5302862435E2C4DAB277DBECBCBD04
40D089C9B7DAAE866653F56DB0AAF4EE462228AA24B1939BD48C3D1A66EA47A8
7BFA0FB90753485C99AFF277F7EE3080430932DEA4AEE633392265DFFA42730E
666D6EB9F405EABDE860A7C6954F8A74CD7F058F3C6C8C8F261B7BDD3EA41041
56A84E065626AF70D339ADFF674A6697D43EE6502D651E0D3949DEF9EB7CE7AE
DCAE3BF30AE286731902E3ADEA7297D41ED31B88BC8EBF0AA2136E08ADB70B6D
7FC1053EDCE4112DB5D9D0A825924EF1C38EA6BA430008BDB5FE33BFFD049993
AF18E2F500E56788C9956DE1AB791BEB5E2F69F9282A42EC24773476AE15098D
7D998C3ED88624E9CA78285621EC6D1B1763C0A9DD6A9C68E1CBFC14B35683A5
CA0A282AECE33B4228EC5982B37FE6C17B68C29A8B042BC28360552D1005C889
79532AA4B2DCCBF986764EBFF4319C17F7214515653678726B258206007901CF
AA4364CE92260822993AB0B9E22A4744ED8D22ADD6648E624156B5283F6DA833
60304FD417693CF1F228BB2C72755730FF7685075B2C3409B8212A30C907A4B1
A598196B7142F8845CF78D4BE9F5B010AA035CF2DC67048E222E0A694EA77C5E
1EE7846E609078D6068E3C57D62B21CD6BAD1281FB4A521FA2A4B9BA84870343
EC1A43A5E9E3B869A3555B0C9A2260099B26B351C1E3EF680A08E05E231CF45B
B03781F648442A31E50A8C8DE7D0A50B33234AC086A7F7814278FA739D4429E3
3AB7AD4FA9951DBD54EC17F0C770CE467D3DABC08B12E3C660B1C107652914BF
028C64B0B91DEA3F9C89628C6E175FB3E52282548280A90A58EA20190FBB6137
0E0B31C37A3C2AE3967D6BE94A43B2B5FC88D7FD6D9919B9D4383AD755256756
7EB966A73F951D647A2DD635CA720C276D044ABCC68DFF8ED7AB4414B3CC4F15
8CA5301AF55B2558FA70ABC3867D817F2AF7191B77CBD53098AE390EF74566D0
D89C84A398210B93FE394BFD3FD92B3D78706987CF544790D36D5AD98193600F
23B6F6542CB576422EA9BC0E32D98BEDAA0E6750EC94B807F105CC6877CF7323
02E76A055032B179A370ECB1B0184A5F3F9183406A99EF9C2967D3E35DD45944
A3FF9C9E1119EB8A46B5644DB055DC86637A10FC2A81204B6B3B0CFA5C6E45BF
167C356AA580ADAF7F73FD5D6F40FF07C2DC0FF3C67935EE66918F259471AE50
3206F33636EC3DC07DA8FB8E9A93D5F6488D358EA6707D6B09AADB59A9CC25CB
86FC9B06AA30982C8832D43E58CC7057BD30766BA99364AB7B411188C875A3EC
E8D0BDB5E5E1EB317F1412AD213AE6D7DDC2FC2A1984CB7D0F36A0AD4987211F
DD0ECFC086776222994209411D5D305F57C9BBD3C32D8F59E5A510CF2A15CD6B
C0DFCF6BEFA0194D1EBDC07EF08F2717677B7BF8121838A42BBE51F6C9AB0195
57A4A5B851485C9D91EB84B7221B4A09BF466FF623A4FCB1AD882AC50F81AB5B
7E8EDCB96290A9F17D099C9C12DB5315B9C533056C29C20F3C3F8B5EEA74CA99
C4B0632EA9FE7749AA34BC2E16D025B2AFD1C1CBA19A937A614ADED59B1733B1
B760B4696B15BC4509F5D74BA8D332888661B30CAF754C2F73293E7BDAEB5478
BF8C753220149FC00D95E0B76A9FC85EDA42FC1D74D1350EAA11154C57A9949F
555F84CE6A3A8A0128F189B3EB563CA921B50D54C0BFAEBB278DC1961A02B350
A76F5BEE64A8035EC3BF1FCAD6C8E458AA2EAF631A489925EA09AD858F9CDAEE
BBDCB7ADCFBBBBC2B889EEBAF798B72E55A923A007692533D5E8BF44603E35D3
600CFE96C0CCF9A47A63C505C21A027412457614C8A54CED94E7597729C8F43C
E79879EF0E95DCC8CB8B3AADAB6BB6D86B6E592EEBC22993A1DEE12E23DE0E72
163E11992E356F8CD0DC56E9BC4B14F736D4CABA1323119AD848664A3E746F25
5033173A53EE015BD6BF109726F7F767BB2D9C3AB7A546A99B01960E11E3A562
9A71457AFC953CF24F0F544C00B58BD7D94FDCB0322113629B667EB5B3A95048
4DFA3F61A1E3A59D151914D907731825382A28319378A96ABD30E138EB6D4FFB
DA0269E98AB55BE21FA8ED6F93217DDEB019500E8FB6374AE683FEC794C5059B
AC109449AAE476588E9673A9AE42A7789EFBAAE5D96D6545177D6B1C7CEAB7E9
4C4CAE972319D3D074B114B579FD51C8355449AAFE8F74E9E8782D670AFDCFF9
DCA956F1D0F0D05A8CE551D73D2AFE934931936ACD1F7E80ED30D5F0CDA27490
67F7010C93C6FFB56FE9364998A2FDFD02A09B80E00C0F46D0F308B7D1AAF7B0
914CF416F9DE8C5BB380E5F5A47C0BBD9C411C842A3D61C789E9733D5EB43AD5
5805F3788325FA8B58D6237E52C4A0CE54154EBEF71067D75442072E06BBC34E
1885B8E6BB01979D4D4AD71E28C60A1822F3F2F1BECFDC5A67559F1F1500E4B3
1F5F16053743C96380CC5FD12E154E5C47C3327E0CF82F033635EB69BE4329B9
7EF8EC038FE2745A2F379526106A305B63622FC22656FA5AC00B1528C27406B4
08FEE2918DCFB5CB7A3713505871228399D30C2F80F16F2B9AE78B560C726252
AEB9C16DD1CE7D86C6587968A767404D63564076A1590A8A20CA6EAC89F671F1
0D954AE622D5CAA7BE0E8530C1AA22129C48EFA34A171A428CAA7035E5C974E8
F40C716B11D0943A1EB5FB5E32934D85A6D112DDB9BF421E82415774F142DD38
0FC313A0B08ABBC68EDB4FFFE7326416B920D778B095DC601E15EA7409F108EF
7DE25BC5A02632ECDFD0BF939A646767FF65FA4746C3FDA17F2CB621AFADEEDB
AB17EDB4A3407B41E06CCBDFEDCFD1B15B09C17883D0206785E93C0269A831E4
7B7741A1DC91334DED6FD07D2A066585ADDA49546AEADFCFDE60E6818C162254
21DD64A7707FE5429B1B1B8550F2138E7F06D46E1673B01E03222B745D009BEC
8C5951709E8D139FD43461D9FCE24730DEDF4302AD80B6BB5C196B3AD2436219
EDE67EAE0CFDBFFCC5CE9C78BF906ED76DBCB408307A660C069804971A03327F
EC53C386A53E3314FD857E5FCA8F4A59484084013A70741DF533D311387BD822
B180BFD6ED2D81EEB6FC227010B5F178CB8C6CC104A33474A1C4D90C3F5CC3AE
9D3BACF73444EF935DE903713C2D3FE9AD472351050FA60BDE73DFB8C1895795
12F8F52A45D1ABC29706559045A841EB3B963C7EFD214578FD8D18345EE64DC1
28876A2B882B1AA140DB0C2D311E7B48EAF24CE73DCA638765C46EB392B80648
FAAB48058D312D3E154FDC8547DBB905FFA04DDCCAF80BE718ED5951A3093A78
4A146ADEA4A232261A9BA58208E0992F3E91EAFB63DDAE8346CD6EA5DAB86841
9E5844853C5346456FE569FCD8FC6085A040EADCFA794CEC422D7CBAE78037E3
C1B6D3DA1F14D9DDD47544B78D38646FA8C7C46C55A2A486B20C5F8C3DB119F4
B764B48BD1AC94E695729794727ED15F034091340EEC605313952366C1486113
854688B3B111A4F946D5B3A385D0A4272BF05BB07B4CFDAFDC6014539F62A025
CC9E12C44829227C11008F2914A1FAE6A7CD65C78EC5C01123EFAC501F205937
400997B2AAF466E041277F3583821D40C3B450EC57A97E58D404B3187D0FEB57
5FFEA05997C54FE006D67AE53C4962F0B4269F80CF1EF32324EF6958FC0529D7
2B20F24922645004DC5A08D027B4FB38326E4948FBB86496FC70F53B2221627C
8F17904A570A77983097A210A6C797AAF4E7094B3A67A693F7BB595A66D92A94
E8752C0407B5F2CAE74A7F7B36073C73E43408C7C2F6D47429CCE03E37E41392
473F5D223DCDADE0409B1A24B910A0DBD662C2CEAFFF5053AAE9FACCC5955F60
4FA6648CED1B979CD49A52E0342721CB2FB7C4B1311AE91B5B4094EBE0611807
F6437B478FC7306842AA0973C77760FD5A7765695B6781EE664A384094A1D84A
AA7C2CB50BCF312E7F9CB50350E08303969340CC4B37D081EAC8AC5897E3581D
B6C98B91E194DBB881FC7174823D830A396459C87241843DEEF3F9C30855C601
266ED2B909E68D8EA28ED7BBA71B1AF8E600D76ED0B8814EA6FDAADBFF96832A
8978E6A0131184185A70FE8DFDE7F7DC331B8DA2C76C5EF6B41E595F24355D53
A7B5D4448A8D8BDB90BAE586F74C53268E1A7EF830519C2A613CA2134F98AD0A
7D9EFCC1760E9C6C4A959298984C7EDCCC13A01863B47FF5400BFA745CB7184B
30DA0E9B6EF023C6E68FA939F164CE2C298B3153BC4FDD03A06D13E963DF16C9
25DD9B4396F26879B63866E552F8030DBACE010E901C90CBDA109F6CFE167352
E6BA2E991B02AEB1A421E51942C0292D48F540B0DB71B8863D75921083CA2BFC
B507AB79FD0413418C44A895C7851B184B194DD1FAF564CCA85F90735E1D7E81
16BBF5519D94C46081FBD855ABBC9553FE8BB0CE288A340C3E471AA721964E95
E3D9D2BD1E06C9F733F2E0D531E977FDC9FBDC40123D5273FD55940C65DB647A
E83656B9C70B5F557CA50C1EFBB3AD7AF9812F3D1F7261BF15359F249C8845C0
A7FF2E0CFBC0D6BB31A72854B0AED55434CBA8BF1DD13641CF122B1931854356
8DE00E39F074E487C20244698BB764D82076C95BF56C21AD7301A51CD25C6D3D
E62697557282EC4820B163C844D76926964FB18FDB084BD307CF356EDF826024
C8653245D5AC0CC86C3E3CF3C85984F5C1CB17A6C3E2853071C771FB331AE9EA
75786696B28C7AB13915026AA91AAC2ACF5C9EE13CB67B82AA179727D336E04A
5883BD5B92A62701259915BC148498F04F23FF13004EDB952D585CBE638D9A6B
5A3FF937C6CB1882159DE5E533DC39101F004DB32DA5683AB86B8D550B3CA6DD
111D85204088CB97755F3124E283462DDB1F1E85840CB85B438D8DDE3450CC30
C245DEBA1EEAB80430146B66B91164A9D8352191AF89BC0A9AE90D0592F34A51
0C26992BC262DE9CDFC62600301076763F9C64133E1B36011ADA2DF440658BF7
E6D5128B78A8D9618111EA5DFD952247BC28B35FCF55D409355C802A928AFE45
16A9DB49F181F0A15E3D66D8ED27FA10BC88BC6C3635BB8A9410E7B2D42EF009
8AE31F54ADEF186CF3B30F957D07C2EF599D2825AEC60F544C3D416C127A85AC
594FBC458486B32FD225E5D4B24CAC911FE6540270DB3D9AA1F3C16ED668A756
4C18D44C6961BE5A950B9A0D5BCBECB3BDD3D27C8016B3ECB539F5DC5F3229A3
23BC937C8849B533D9440DB8DC292B7D05C65CB041FB2541B561AEC19D5574DC
1FEEC782F2D61265419F49101509FEB31E0A709FF083B86BDD63A8BFE3C8AABF
A0F8530A9A37513B64D21A8A6E4149C8CD149975A5335ECFFCAD74E3EA1489C5
7E420C40CA49CBDBE8AB8AB3CFD09DA1A6CDDBDE5CD4F33167D9CEB2EA7B3A1D
8E062D5207E73DE2C6BB2CD4DB9ED34A6EEFF59ED005AE85DD2EA3A50A352029
5B06FCEFB793D6E0EBA6244D7FB96F0C0D960075B602BCFE4051ED02837BFA66
9EBE57C20FD02D8973137119DDECDFB17CE65D81709D1B3AC9A692CAFAA72A6B
24CC41EA9589432DDBF2CDA5AA964715719B27BFBBA348AE056ADDFAD1F22DB0
76A5305FEBD4D52570D1846AEBABB757FBC0C63CFC3B7ADA0B72980E67CA356C
20ADC07DEC055DCB8504A3776F45C3DE3397E5EEEBEEED6C07AAB6821ADAFF3C
67BB4ABEB9644731BE5253A0F5F534A5AEB43889C7D20B4C636ADF062E944A87
1ABC61325A975370A4EE24C1162573F54297DD89B42E357AE028A28BC48676E4
774F170FE164729C6D11DB5AFA07E8BA7DE9ABEA28C4D09F867CFA5CFF8AE05A
9B84A4CA17F851A9E251C435C4D792FAE79345A2D3F674337D31DBF480716F1F
D520C8FEAE3B21B797D56D2C47680AAE888596D02618680A5C213BBD44803B55
3BC6B7FE4860F334822902F7767E50C446FC9B11A8915063460CF17342B3EC70
B0FEDD062F3D084ABA564ACCEE57E84117F367041598291C14306C0871538638
772F12BCECEEE74204DF16BB65F527CE4E936F9CAA0D3BA3305EC02A769B5293
944581CFFB1FBD75A903DE68B8ED43706FC6C459E333068BA69F820085B49976
5B6B1920822CFA73E67CCEA86A630DAACDC5F70AB453873C55BEE1DB042A6900
7BF67FAD96B8701B27533241FF7A27BB0017B02236B46FEF35BB1E7039269A09
7F181B5503ED3C7735A7AFB464D534A4BB499245514FB4850DEE250B014DAEE1
9B8348A6324EB634B305780617FECAE7CB4909F498E0629222FA61ADFD86C86C
283256026AF9CCBE7E381B245B7B0AAF9EE81A2E44B37CFE4DAA0BB86535C870
E4CCE17D15708912AA930CE04C3DB0AC94A9C80CF7409AA0E92BBEB2A4A27594
F324C9D1D083F1B70E9245B023189AA982C1004E1CEC3255606B1BC1DB315410
A6CD03932F06C8C46E06E5AB92F7D9AB9A51237742E423BDD7D8134E7A8F2137
41E88487585BF587DE01F9D8B857109CE71B5C66806B814938B5F8D4CB98553B
BC845755CE5BC41DBBCBF8BC1E27FA758C0D0F7A49A9559511E9F3915A48B4E2
6642B34029974D1B04F241ED27199A84F062F14465E0FD68B5C82EC9A9F861B8
8DF3C0E4776A69734169EA2B0F8EE8CD4F4F84A0C64ED18EB28564E5DD50AE36
E6A4A0FE7B5892AD9496AC1C1B8AB369B2F33CEC29E4D315C9061C830587CB0C
3E9C3D4F7711A134E6306E7C084DD33E41A3140E8C7336E07F14833069437989
13C7A37DA7FC981BB59DA38003A3D5B0AB7ECA758370022F1FC0C40D75F7809F
3C77777C75287B6942369D3DE01F71BC79930FBD02DE932B3D38C5A98A44DCC2
D179E1B8DBBBD4B92F3711E5D5F6AC5BAB67586DF7346BF8AC62403FDA4DB77D
DFB68AD2520BA822088433B34BF3EB64D8863CBF50D220AF76ABFABBABB04187
EED2FE3B73DB5A6CF3F06EC19BA04E7CF3915E85A94E60E77B2B5E0007167BB0
A820BD28B685E2E5E12C1D8D6A456323CEC9ADEFEFD2452620DD0BA89EC8CB37
D718E34F99B0D688A9979388D971D47BF9F2C2F49857937669DC31AB5ECF3717
F05F9778B72745DDEC0868BAE1B2FCAFEBC3450F84B5A7C21C9EE2F47361984D
771C7A8A831E40BCE9EDF95945B40A26BC5821CEE02F8E98C18B051528C955C1
A01AC5A6407FEBF4FF1616F4BDF7295199881F4B30EF3AA56C18744DF7507834
97CA29559C5C541DC570106BF7CA64AF94E9A9D2EF2971F29CCCF550E249B8BA
A934C9AB10A28CD2198F7A5861942911306E7E1E4568AD5DD89613992085684B
73AF03A96BA35828852681321D993DF752B5FFF02E88271BD6DA703CD60D88DF
9788DD835DF22112C93658521344BA4F42599EB093721B434C32755925101909
5B38575EBBA55592BB07042DA72BED9AF2C6F4612D69D72441E21669C69E4DB6
00D83A0420E80A2FCCC93F8D71BB6E27553263CE357B2322EB83144C54204791
662BCEB0D1B85B20B17D2F5962BB70FAE792936BEF368772013E1B09EA9DE492
5ADD9AA2A19A1EAD4FC1A3D3B32D92BF326C93EEB51624D3DAE722264DA1DC9A
4E8F3840F3D8080DFCF997490B2B6C646710BCF518C1B4255A2895A9235CAFBF
E704782FB6480ABD03E9185334DE1EEB963F614356A9954198BC1852C51A4580
A8D746F90924B9FD409ACBD38225D241B5BD9104F15B9A257D4373022D587477
BAA421C1468DE68E6C16369AC556DF48B6E1967D66321CACFA503730CD37CDEC
0FBD45B0F6B4C19A22F4374E463BBCFD35D5ABD746F14FB0C48DEC64DEB0BB07
A21A8A8635A5EA88BD09D273E3A66A76563E5562CA23D86E0A721EDF0B62673B
6F8BC76EF77C6E77950ADCD1D608F9AB414AB082CDF9AAC1962C6FD065C79482
32BEACF11DF41BAED39BA75A6DB54C32176750C08ACEBFFA1E0838BA6C625559
09267448841AB7545BAF44C7E77E63CA0862E5C33230544C27C39D8593E221A5
B0450B025105CF98316531A5D406F415221D7B1D4F8C21E4A89527E979BA1A34
F6C8CF24705BE07518F59A767DEB641AABA2E55EB91DF9361C0B5B3754C4C95C
5F18B92AF7572A42B4F49F66D5BF6E6B402207946720C31C5D2041B850D1C55A
53C600300E33E05FD6FF960420E3879B8A6C79FE2123CE35EFE317B3A544EB10
B5E3676C9EAB67E3A1AF93556F30C28F318C90585CFC8F5D44C881E8D82CE0FC
89E97C3C24F5048395E719E783B76658FBDA2D6073DF237F7522F4035618A393
9D7366794CC27CBE54C25087DE408EEC9C19DC16C3DCC00A570796220FC2B938
DD24E99A838C83266B2BC40B44246CE48350D3C1D944DEBB96534FCD10B92B2A
BCBEFB7B1B95965083DF8D05F160A06665A29C9E805736B1E932B9CE6452FC98
4CD52A54EDE3D638E1550C5264B8EB3FB03E76B3898AD9A3025352B4368D1F58
2B0517CD0697EA02E93D32F8D425A9ED2259539E2E8ECD3A1449DCAB33A62AF0
8F4FE57F58FC76983BE2CB78D6F6FDF1BF3E0A2B83D3183F8EC0CE0249CE10F9
5B4172DBC9FFF98C6F8F74AD6195F7D4FF9A33CBC148B3E11CEE0FBECE6E9BD9
CA901F28C2D1B1B8D4D0F6BBCF6E908D334EC8DC0E23191ABDDCB651F81B44B9
527498C2E92E6C369238C6D3DE0664CF0BB9CB4EE64549135114AE28CC3333F8
A14ADFADCC4ACCAFF5582C597158B317E93380DEBC12FCACC5F414CA4F422F0B
58FA3402E716DA4886DD127C4323E8E2C6915C93055217417474746B8C1855F6
60CF6D7F0E90A9435D3290053C2A0C73C1316698F13D4BEE769D1E040952D7F7
AF5CC1D1CD098C913957365E0FAB8D799E4BCD2961EBBACA744F5670871E4B60
DF74A8F3B7915B3B1E68910DA373B31A171E129FD3DB8AEB55B0F959BBC8300F
BD5BB42B68B6D09F1DD501493A02C8EAC2F0FE4905E60E4643CE41DD28FDDCC1
59C88E5EC83BEA7BC5798DD5544256A7041BB25ACAA08D4752680446F888A3DC
59684DE7B8B8127D394BF0B241251370A37D0F0641462009E52E3AA80B2D0848
A05B812A7DC62E04F532178D37178888B2F184E0983D7334ED7C98E2374D4A05
1DBE38405ABBB052CF5DE83748370C3477ED7985F53B8D6A1817AB404A39DF0D
6FEA3A38FED4589358519C7691424DFC328A3CED61D26DC41C9AF9ADDF4E778E
682F2140B50DD089676A2BDFCBA45394C7CEFE52E259E32A18B5B0D61D36FF77
BA3F8A9D4FBA0E66BEFD41F659797DB75F1339F80161E5C194C1E1009CD7314E
4728A423CE6E829C81A5B209AAC3925944EA06421653CC566DC562FD91D47395
33513C123E68109B1820466938A845B96215C0455A552AF1A148EEFAC27197F8
A4BB936F109B3FA38A4102FE0B35A783004B2F7B8D9E11CFB6FA9339CB21DC6E
93ED9D24223917B12DD1B7BB175FA63C265E0375343A8FBFC7A56EA6C01E36E4
A2ECA3B89544871EA9B88B912EA92D947F567C5D97A55A5B5B1F733EC5A99D98
2ED4D40AC087D41BC76F931987FBFE762B85987CFDE6671E624E785228DCB406
1F6D88700AB2946D2419C60C3CBF5F68B12C396926DEAC306263113A1FF1E4B9
913991EFE60F243E846AF352D7B91D5E27CCC1DDB02BC678C04755F1FA62CF9A
C0CA2C86DC8C30854A04CE71B668CC53991E72981EE94F500D0C69CE0B266E11
18C6DAA647D662F7236C22966524755CCF6A5D0B2058668BF58E76130CB18A5B
E82E4101AEF88CBAAFFCBFA76760E27FBD01CFFA259F234DA67D605912B7A3B0
583E7AEDF414C14D404AC7F2E98EC50C8BDA3FC53D286E85940F3DB4C4ED6E7C
0E28AF6A12515358D05BBD6D4D1D31BDFA6733F7AA10647DA6B579BCB5953BCB
E65A564A4F6A0884173ED8136EFAF2C356115DDA525C95E60D2BF4F18EC6389A
4BAD3CEBEF5F12529E35EE4AC7B4FCEAE14F3045C6DB361958A9CD01B5CC233D
CE4EA294699432DEF87A85DB16DFAF82081C4C2E462E0BAFB7869AADC24B14EE
DF2C03ED6CF8A7D500C6A5A324D98E885068BBEB6D3E05FBFA5D8636AAC68A04
84AE1F09DBCC5258E44617879F8546751824CB71883C6934B46CE55E71E05283
C4498EB6B359A333B73EDFD53261CF7652215E67170675CB21F2A7A94A60F7AF
92C35969666506F5FB0DC935CDD3EBAD62CED2198F56206C416134FE38B726B8
DC50CE54C4BB910427E7DBB047DA11BDCAA551BAA6B894DAA8840D83C15E442D
211F09D57225EFEA467D57E55FD724ABD822C4BDD35B7B16C0F388D036D6F375
14D749F5BA55D4956881CD82BD3C0BED43D3C22C80BA92F3EE99E1DD6C6D57FA
4E84CC0764E9155CFE25FE7FBB8147448BE9A4B8C58C3362BE4F67DCCD5CBA51
79168B596FD7D652B330C68606D9748E4FA08C80AF1B1B7E9A35896E8005C48D
29BB91095C22924D69C725B9FD9BCCEF90FE39B66B32AF11BE7B3BC62F7F3EDB
1C6D604D2E5EF36DF342590F9EC8E2329BF5D5E56EAF8D3570C750280C1EB357
C3A6C9D9BC4FB8A1F7E68C35848B61D97BBBCB0384AF248BEF5715E2CF45F5C3
62FE5BC8FCD19E37566BBF129D9269ADE27D7CC7C2D219309AECAAB203230649
2A488B5C71A2A8E2B6984505500C011D87AA5F0762B5BC7E59927A243C234413
756C945C76F5F25E648EFE61BC4A7B9E09AC979D2869710BB25B14B22AA5F905
566F244936FAAE66D21853B74E53B068936559914102AD4E5AC0ECE1688BBCAD
EC2055196D56E70153CD7AD90239C1CD425EE578CF043E86AA01A45250198BE9
BB184A60E6A6B96145DA9D0C11932CB54ADD360F3CAE4D459FF0AABE6D76A61C
7D2C2B6E04A993823A59DC78CDBED2C7CCDECB7D0B7BED5BA0814055648D3CCF
1BEF6FA2E30943DEF03510271F8AF3D0C15282A308782851C1071469403633EF
66B257DB2E4947C5A5D8769428006D72B5B59E3EBF913FCA9209F9141D432524
FF9BFD4A547C40152927CEE8F9145177847FEB6F90B2B61630B53C671AC30548
4D83DAED7ABF6A9EBE753036BD025D382E76127B6E2AFAC59E1029B0EC291852
C6AF399C94083C78DB1ED616D11FD33021610CA7D89ED2FC5C4024C3B0BE3D56
D1D07217CE903E921B80696C59A70205A8E56C2E24ABBB2C09ABE6203CBA0F94
90B61DB195DD198C51BE09B5632F9F558803661A4CB1BF6A6F67C0D2737CE838
64D42BFBB25A90620EACD8426B1165913CA4D338959374090B783619A5C4396A
39A6CE6E2BF158FFE415CF5A3B62223FA3C0D17E5425F74D9A76BE369B8883D2
021F8F927B51B17511DD852CE7E52702AE1954196C342F85A667E7396D5240F8
FD238C874CB1371A0723AEB2625F9556985A89975D13275679A9ABB9E71F8CF7
396751C8FD49C13B3CD04EF446132F4CE88B1B1942E8B2780524BE75E02101E5
38B06D6ADEED06E06F828E912D9375B4F0F91C29D430CE35AA153F80BEBA54C4
16BAD2E20F9B9100BDA2FFA368279DEA81A1B7517712D0D37A742ED7751FE90E
603B2C45FFAD3F2B4382BE06162D94F6B93F5F80478B53FA21FD792344F645C1
5682EC01197223E0BC45A4C206F6EE6592705FA8693F0BFCB092B239C65BD5FE
28BDF0C16952BA2769FE1406751D2DEEBF944BF8E70E210A4AD9580FE1A6DE1D
9A776FA846ADDCBC222F34BDE19E9B873386347A4DE13D009C86EDC522C73846
DF74E0240022E43BAAC642E71F4DE796F370E6367E0EFAF3A9808DCEF90B9360
CDA5DC1853927FBB9AEA163553FE72474724B3A9E2EFDA36AB2BE034F52B5ABC
BEDB9BDEFD92AD46B8DE0B3D296D5697EF940A18D4B3DC30C38CA482090FAFC2
29B8A04806113312F436AB58F2DB524BF69E3A57C2DB3FF2702F07D749BAB441
B5DAB13EB98DB2FD75B31B6CDD6C736F7D096DC2576A223D184A7BAE324120EA
B2102F743C7F9814B5D8453104FFA6D707AFC97C5ECE4C82896F1E6B6510274F
993E8D07A04EB1CF214226E765C79354F4AAC483B43BE2A94414987DB5FE6FE5
F110DD5BF815478F8FDA342685CAFAD20E8C5FD9C03574E98B9397D3F31070DC
41A9F608ED3A7799299E8E7C5EE5E69CA16B22BDD9F9A8223F79CA29E96428CC
C27DDECC9DDC61365274E47B5C6321C14476C578830BDD51C82FC737886B7740
9E3AD6C97822C5431691AB81BBDBF4241C1E9D065011DCD3A5CF87AFFDF4A509
06F9C3822A931A1D503DF71DBD035922776CF56D7F9753AFFC4360E8E499DA57
E6FC5A7E7467970FFF3F0048A2814E837ADB671A182EDA77140BDC5465C1D280
2085DC6DCCF706DB3743CCB6FBC5CD926A66DEF4CE5CD33021157B3A4FF7FE6A
49706B3C64CEFE0EF6258E1A3CC6BD408BD070FA76C6587968A767404FDDCE13
7B3B1F0B108A87C7C2D3F749379943EC419481095804C6A1DDA6911ECF67E87F
6C72673D064FEB437BACD52EC4D1ABE2C0C52E33E4172026981E9CD06DDBD129
8F498AFC6DD4137760B4F9334E1F6F4FC2688240DC951BEA104AEFA17D7535B7
85D100CF9DEB3C952278C798B2AD1002E88263F9B58E066AA479290EB8B87341
A15D8BBEC87A18B9001211E9E85AD6BC80C921647BDDD33DE0BB0681DF148A1A
55D2F01749118AC087D2E23AAC792C2E450B9BF783A068B9B02B9F9D6D50D75A
FA5FF5674E22A72A230F7ACF157DDA9DB2B1C3D5D7C7C073AD173DFB08DE4D7F
DBAC3E7BC9934BAA360F7296453CE49CB1CBC17870B36653E9BF8FEF1CD68BBF
C3A96CF8B032A40DC57B63F4B43B193A4FE1CD8776C35EE2434FF16034FFD34C
4F6929F468F9EB5DF6D5C2ECF2E5F5ADECD77EBD3FFF94728F3C8414FFE9E69D
84B1A3AAF24B7124B0F1CF1EE16673CAE8245E3A9722DE9863119DB000941969
91DBE677DD85C9DFD480060642F960E4BAB34F2B7440909566CB412D825D973C
8A699214EF74620927C9D403438009A9D972141D7E5F0A53DE48EE91E596B94E
70DA2885F7FF46670D1A46F53CDDEC1F495CBFA0272F619C33DB993ECB786E61
6541B7A1165021D2F2860F6AFD0A1A143C4C8F529F14C73346ECC0AA30CEB08F
E46E01C62835F1A6731D6E1FF7D4657089CA03661DA8BB4E577288F1C67A4142
685ED1140CEDC5E32552DA410D11513CE327B47A64D3316AC79019F633AFFDD0
AA101A6E98A2C53157506604E576E02126B7498AC9124D7998C40121BE3A3F89
01391308AF9A8C9EE83CFCD3FC8D4254BCF6BCA2237AE9213B76B889D2498288
67433D54D8A3DB78E8BEE86BDE18A80D732FA0D9C561A977BCCD21A8AC97555B
CA43D9F86A2A0A87F6CC9E1BFCF3F267D502017058C6BE64FD59C45B12286871
185E02B42590791726B0E321FFC424E38AB84E38B8CA572696E7576D1443B840
82C728E992416B7B9BE2DFF8A50164559E53B566D39FF18C4AE04084CF47BAC8
A3F9711E15F2B4B331B971E3B60838DF57CDB61130DA2B726E81D82F6F904C46
E2E3A84FBA96093A3198590EEBDDAF027F4C4ED6F449EF02250CA7DAFE021BF5
F4898A4FA7E8B59C3BBD5113E035BC4638891CD89C50C3C54B4104F822846260
B9E63AFEF1AF4A1348793475561AE243CFF098B6D259E99B0B3B0F50FF51E7EB
7033D19EE2BFCCE184E80ED12C144B9587B536DB067D7F5C1D00DEB2CD24D084
D791C195B76FF6FAC771C4A87D779598BC1A3A8BCDCA74A9F6F68855DFAB1607
297787516C610BBDDAC3F01A88B9A8CCF8C31CE0714CC45AEC749E8AF5E10A4F
DC275CCB1EC7B146FD6947ED605D94066C73F7C27FD34116F9F6CD671F3894D6
97C456F249ACABBBFCFAC1A0582AC8AF772F18840C2DD8B4406B8997E2E15427
80B5B9CEB7656B958A708CE2ACED2A1B2A7700A35E7C098E67AD7DD56E11FF13
C375592CA3334B330EB0113138BA0C927415E25A3D6F08409F3A7D93FD5467B4
3BF0F41517DE6BF5ACE5CA8ED935DC696A51DF370AC6725EED28E3ABB52D916B
38E9064EAAED2BA3D6B2D645D95C1A29277EDCBF73B08EB0DE6C66E2FFFE21E0
EF125791FBB2740FFA91C426EFDE598384C8B7BA66A7E8BCE5080C9554B2EB52
A52F756FA21E4BE6CAC8981EE5C783D98BFC74AC2360B61046FFBAE77B0E470A
881FF87CAFAEB9FA1F22EF79443D63C39F0975107A2D766493BD7D1C492D16EA
4BD56BA156B0BFFA48B498BF0918C8D42BE5F4BBF3D807C9D74544D595D0E561
D5590B4ADD323D0DE056541C1E786B8EA98B51F3C145E0B61F3D439B5E0D9B93
B65F9D212F77AA3583FFC8DBFDF89ACEC6A3BA57761F85FE9D9EA271C0DB0B1E
478AD3FB934AD6EFC407951EA1717807B6F91C0472F6C274491D3ABA0E0E8038
7F681721C03B725E91DF282E10B1D24C0713B31DA3E63948863C6FD5BB0DA53A
0712B8A28F59E2C0E380018F1BA92982B1E4386DC06DFFBA040999A9AF30CB1D
9C17242A73BEE906B2B7BF8991DF831666F2C1FD1A821001EFF81EE6495A0FEA
DDB329470FABBFE06DF488FBC1908A517FF0A22F546DE73D7E1BFC4FDE391000
2CE16A34C503A0C28D57F4C31C56EF4C80967B01B7F6F002FCB60405DFF76460
70F37F287091AED7841601D0F26D3C98134025076D7E868C34B4DEDF069FC9B6
AC1F8A973FD593323B5D54D3FBFC88562853F219522FDE83530D72C9E6A2D70C
A27776B6A30E4C1900BB7FF3C978BBBFDBF5262D9B0CBD93F9635DD85EC49E9F
1AE6A4BAD4F77C940A7147DF70047A98A93EA0A807AD21A05BCE11108CA3020A
ACF2C9C779212392141EA6D941BE6DAB070002D4FA59ECBA0F8F55B787A0F68A
BEC507F531EFEEFF3D09EA83790AE63E52F7F53AB4D6998F6B170A2CBC0F55C1
9225928F8B80884576AA260916C748B41979E9EA224C2B11B61F4049533A44BD
A02C44C819E85CB59C5C1D31162176D69D73EEEBC6BF011006068F0147E134D3
923B3353B578E6FC57FA7D73610AB33FD42DC5525C52C62B0F4FF184B5F5787E
0839B36F580F533FCB23A2F49E435DC82DCFA0BF52BA14791DDBD0352298B344
535C52752CF7031F521E11B97688C2AC2345265ABCFAD12243AE9019ADA77CC5
C73FC4F6CB363CCFAF0F22C685306F17DC8217B9B39553A068433D70E1D1D668
4565E635B98B38CEB3F6131C269AB74FC31E0B52017A7811C92278EF7E1B4938
6C9ED710573AE009D4A12E6481B352BDD7E53A558FE7C473FBFCCFABB8D54A69
52A909BA2349EE032BE75DCC71CCD239A0376FD4756EB5714074E4AB3FB765F3
43A74AA72B203BCD5FF1431D2A68B15AC56FA0083C144818026671C0FFD2B903
846033B20FAC028B6BA5F13B22CBC14204BCE7C7B6EEA6E55109D6A1698BF2FB
ACB0EA73BCCA78465DDE947D47E263EFA172BCD982E871369E5E51D4AEBD1BE9
B44678D6016A15C206F0074594265D42B4216BA6D631506B1321DEF62EBF6460
6A35FB31B768B1E5A9EEFC0256B71B26B58057F8B05E640D1205C02E1CEC7928
7DA69E2ADB94E2F99AF08A3678D284745D290CA477278F0F0BAE01027121780C
6BB45BCA62582AF4ACBE2B8D155D0361FCEA9C60508107A226F6601EC4EEA64B
2A61947FA45DA960A8D9F0B59E423E75E043BD0173989A569FB5AC1EA92B01CB
78640D2632FC3198CEF3A03872595770D807DECD6D8B190047BFB0276D3611D4
13D584BB83AACE3351408280442BFA991827663173756B5550085640B790D738
92D19C25C4B18B7666B3D9199682097305EA47E3E910C5DF576146F860A8B38A
92030AD778A8DC5FDC46E8527C9B0E3D14C4B36BDD341732E761B308AD42D1DB
C4FD4011DDC2F7CEB76059679CACB5A5DD0D58AB20E1789A28DE7F82ECAC0F8C
BCA4BE8BFB76F1AB799EB3F61023B07180E63FA1C9C2008CE4E9FB36F2067B29
73F9C74E30AF12D72985C07A9BF295B37DCABB3861B152B3BB55BB3EF86B31E6
A9C8BA244DABA7C6BA47A14CF046AC9BE0201372529F383972E153446D2E8501
22F49DA6519AD4BC4BA6BE29C31D0DFD1EA8A0B4D29078BF548E72A3114CC1DB
68A94CDEAB44189DAB20917B00D6CC6724B0B704C34CCB56FD8733D1C69914C1
3D7F6D7AD881B717B1C233FF57255DF917BC4338BDF64E52908EF84EBAB52B1A
B999925CC1A75D1D2571099C878E84AD628E61F20D010897D4B0AF9F46FF1406
A275F3114E8458DA8540B0ECEDAEE41F2916D7E789D8476C94064D35F171DC2A
1170A72F6811A7CF6B2A78AEA201706B2CF75761ABF21FBE3CD8D88AD4B6B426
BE150DA023D79B939CC89B3BD72BD15C3C64ACBD54838994B2CF5BC2B6A98717
2A16A9A05B1CB8F936089C09F660DCB87F2C220BA48CA34EDE3168303A477661
F41CDFD87455708A74EE83CD5C4088187EBDE4DBF21B1719B698C6038B484CFB
E486735724BE2ACFBB0232E461B55D518A0D21D8346462B9E5E6ACA0F5752311
0DB0390837A806551E1D98310F993A4CB6F08D97673182EB35E61A1CEFFDA3DD
024643251776925E79FBAB16F121963D92EEE93BA9FC01B4D5A1CC9EC681E276
9595D5BD17A4DC7F8B3E36EDA0B5DDCF43D3680CD1D1E993E2FDC73140C46DFE
4AE3C410C5DC82CFB5DF16E8FD14B56CDDC090020632C03BDDF91E55A84B3A60
FF29E912E7E7EEDF8F2889BC8B14EFB0A5DE549A86C05A867190B71263E6A78A
29BCA616D5C8E5B1B1AEE791AD98DA358F1DD2A2E84FE885A569434128B9CDF9
657C512D4DBCF3CD62098D8F9340FD7C0F61F5F7B81A23DC818AD4E299E18AAF
44B7AB0E556DBEF425CD01C4B99C0FC96E15A616A1E53ED7AD1B8A31A0CDCCA8
76F10C2F6B2E910401F601334BDAB54EB8EEDDCF8BF57B83ACE49204B7AF1837
0BD70D4C1C60B8A9919D211E0D0C3B219FDEE327C4F8D0102C4EFCB5746645BA
E6C7D1236C4AA5592B33BFEE9C3AED8B3338B13E7C41405880AB27C7529491D0
EB03B509958FBFC5ACD53E5479FD9054CF487462F7F936ABBE67E17779E51D62
70C83A59695911850B24B54B7DCBCC23C7DE8B95E8EC9917C3EC8C383F296875
96D56D5A8EEDB9003DC49193ED4CCDECE9D57C3073F61E2CC56FB9721DEF0403
8D51620967B361795FCD0BEC0AD8C25B956FBF2ADC90E6FE0ACFF34CEB19951D
BBF036E8DCABA0CE6B04542BC61D116226F199D10C893C3FFDB74EEF3D4AB504
9328DC534C75E86086ED7C461DE8FC650B91108B72CD5040041B85E35AE7F4DE
084764C44E525D8F3BD708A3C9A09A0C05B786D49B2839670E3ED4CF2D8E197D
193AD134F4086D75771AF2D14A71860FB3E98C177E4B9229D6AEAA8065856263
5E6B41419F4DAAB7B08712D874B2F946A1675798E35B94745EE46755CB1712CD
18955F8DD65467CCB760AFB664563F60C4B86879F739B4D4F984CB6A67064142
1E835363A25F50F7BB10B084DC37AC03760E855DBF0EE61A6C19B5EB14F942FE
3F8F5927E93D52424E49170164248EF5CFBA11DE05D542D1A69CAF03C27573E8
1F9DF5B96A38A31C0D61B81106397B4B930A0EF379A6447A3FEFA8CB2693CE10
05869A9FA843B70AE2225A4DB9573A13AE7991B599133D329BF7D45BBD0D3B50
910CE5A01BD9CB58F0EFEBC6F5999B9F0DB722B1E96BBACFDE6765716B83A1D4
E14C6D59FFEF510ECE28F7816789836E1AD1BA186A80956561EB494C2AE531B7
280AB4E918ABC25B90CB024E992E1E9C0084AB4C3E5BA03719778CCCF4790FAD
B4DECB3AB076320DB909F5ADF079CD0BDBA5C451DDD520D1E09F03E286DEDD71
CE85FC0E4DF6F70B296B91CA96ABB949B7415D56378B910667E139DEB4B74E3F
4C41AB7F334BDC690BB0C0744C17A59CD8F0726DF3AA6BC2D39092669FF72668
5D98BBDA5CC6ED285370799010037936B664B6AF8D3BA6BCC9389507567FE8A6
CF18958CF5BCECF562750F4EA7385D6E4CB0B0F351A2A1A6869FADE16A908423
4C3D248B23C3AA5F4F7A3316B984524A49430781FEBE20D655C6B0CC23A6776E
DAF6CE43AF8E2F484B64A030C594D07B2832D21CFD9BA45919E19EE3C615BC72
4EF99AF61A3E1883974DBAA87DE97161EA61A17D2023C56754873CE470FBCC50
B6A5EA4F1EA40BBEA688F91C1D12F46454D739A312FA6DB9BE9F6CF7B0046ECD
E91EB992F6941366085B3F117DC052124E2766389BEEDD15DD38D538CDCA3485
600A81DAEAF5DB364502B718346EEA5548F4C798A9AFC819342AFCC9F5BE704C
311C9DB96F6850A0EFE5C0E8DF579298A115B3732E72B38209428E8E1917F35A
99A7D141E4049DD60FFC744E81177435FC795B58A81AA7AEF943AE809540AADC
561D89489C5B21BEF976AB7EA6BC271751C77351F45BAFC8D89A88950AC56AE7
14C845F2C0B3F1FBCBD1C7BF6A496FAFA00A54F9C82D5EDA42B2B4328E4D53A5
F31DD5383A59B0803E14D324788A8B6B84F03C1D61DB1BBD96C3584BF352CC0C
0AF5E88919DFEED61EACA982A102E306780DEC3A45460BE39F13D7D834AE6296
29DD7375AD85028B774ECAF0AA5B130DFF1EDAD1EAFB9F811EE3CDD6D5037703
DDFC8E6C1A2FEAF02920D508C92E4AF2F81A735774DDCE4EC0D745C9295A856F
058DDD1BEA61520E1076751F2F540216D24534229737F29765F6DBFA6A4756FA
900CAF63E0C7A9A6F1D6096789252AE357F0807CACFEED213D741FFE747EA4EC
A5F6D2B4A391CAE22B8A145281A359F1D83854E4403BC37CA087A9595700909C
98226E2D95F4449623A3F575B7B3ECBC2E110ACBB3594312E85FD1A25FB6BDC9
8C81EC0645EFBAB913AA1A922109826547A6A06F8275ED57B44AB32CA06295BE
767F4C4237F834ABA480CDC41DA64A3B35EBF9FCAC332DA3233A9FA547795E48
16C9A8DA8C62618CC7BDFD9D7496A126F3A174F85C02ECBE247CC384FE999E1C
CFC106B6C90868E280F78CE8EADA1C98ADF49ABC37B566D343B6432B37ACC795
44B155EA6500C21700BE0353C119610A6324DBD127ABDBA67057F37AED4149D5
66826DE10C092357597F5E0071B7B1A67AD9EC4AB15940E666AB54A84409B5A3
0E3136D27057D87CD44DCAE569DF1C77F8BDE4934BE6E2D0C496ECF6DD6EC65D
2C44E83FEDFFCD107B86698218E52F9194DC087C1109BC2779C89B417B59644C
EC8AD6794851DE9D66E4457AB099AC490874A7E671BC6B534EA977124E9D2C87
50159D4F4B8672184A3E5D38A558929249EF87DC3E2C3955106AC329B922B0C0
98CCF6DDEC358062A4FB4CE6028CBE4F5F3932B2853045E4AD61ABAC98A68B0C
D4F3DB61C9F4062F6247DF87FDD30FCD2047B529C23E16607911B51A8B7F31BD
9526E299DA87C77AA89449B0FB56E49A78F0E0BB2FACFFA1D53758C2427FD0F6
02442F4D99DB44C0D002F267F9EA589581FB21EC9D29E2DB36CF8F3516DCE9AE
E4F2096BB5430D52C7AA871F5B2E03DC55BAA2AC9F6B7CA966B9A2133781713B
8935D6C9695B6EE8CBF3A15F865D9163D6C2D017D43F798EF0F9F92F75F37363
9C14D63BDB927CD5F2BF6715B9C6BFAB252A83D9D43A183692336C6C51A63457
B2BC30204F868F1D9A4D4DDFDA3ADFE3964FA7AD71942EE2AB16F01190A94E0C
68583B9AFA76DEF20B0275D0ACC1E8539FCD6E15AF7AE4379B30B388B89CAB3F
BD15D114DA11E9DCCD6D52DB56DEF8EAECC114DA83CFFB7970E0A53CFC085F4D
DADB1927AA5EFB27B801F867EDDD7B48682190F910301141BBC35E52227A5906
69BDA034EA47D403EAFF3688283440B513E97B26F3A741AED8802A794D8EDCE5
F026017BC52BD1EE0D3B69312856010B6F2AEE6BC63726FF230866CE9C75BA67
BF7EFFA9E724313D035B59810CC6E9BCF26BA6055086E5EC77D03F219D8BA39E
583876B40A5568BA80B42BF2AA96052454E005EAB224C267E0453C1E457D32F7
813DC164567029AE4A96CD2CCA263BD241E54D9F9E3E3CF00BBB14B0F7B5A34B
3924B7CAF4FDAA348D07FA4C7881CE7E3FAE7810AE158823921EBDBBBD582CC1
36C29D63D2CC4B70E252FDA90984B8A7D930C72E122BD9FB26AC29D415DF98F4
005A2223124DFE3B14308097875555BFDFDEFC4304C363CBC87CE7D8856C37D0
1EA11B420E6B405F8F485E3B13B88BDA453B3764A6D2242313AFE444503BC8CB
39CD4B5DFEE4635C0596E5C27C6DCD64AA0ACDE0CFD71FA2322BE6054D8E5480
6521A9EAB52F344948ADD2092507949C4AAD5C853C497FB177DA9FF93688CDEB
2421A3652C416CA4D857006A4186E094D66E09079D1D6ADE0574051E3A473312
95888B91CDFB3936D8900BACF14D97C549CBB90F99346E78B89830CE52842DD7
0E21784121916DB7CDC743350762AFC8916F76D1798E779498854C5AFD3A0AC4
71E9D7829C7838EDBC10C3DF8DBF6EF67456AF18C40ED5991410BD6CAAB166C1
21951E0AB6DC121F3DA82D1B80E87BDCEC8EF20BCE8B16C6F8C9EFCFAFEE2BC1
4BE8C9C9D98D80E5807C88310EB698A732E9F5BF293916168E75F937DA090E06
5A35E698250DD6BC9036680F180CEA4DC1D0391C0321CC04C270F03A648CDBE7
8E3814178280181292C5F10441BD0FA2594B6F706BD149BC61BB1C93ED95B873
64FBA1CF7B0BBD42052032F2D8319470F085E20F26FB35A015B8E5BDB01A0A9B
F7FE5A406C8F5EFAAB25E01F7A028563CC5CAAB53014C2E4DA47F8568BF0709A
70801805620BF9B3253213A4057CB14D4B2D93AC629ADAC5B5D3FF81CDA4BAE4
52104C2CB8589C66DAB4ECDDC969DA59C5556326051779B8A9E5F3D8877A56A2
98C15A383AC7540F5B0CDD840777869A5AD219252F9AC4F9781229885CF8D41A
8BA227125AED90FADF57EABE649935B4996319832B06C3C9C451F04FCE8A9C19
E2D1E455593E897E90CBA509108BAB0FAF6523041E2FC63B73186E60202F2E2C
A747716FB34F6E76F6419343EF15E607E818B84A19D938AD5C5736803350C045
99B7961773D63B834F33D1DC304546CCBE220A6DA709489FFA4E0B0533962632
1BF4EA815B768C4DDADA604DCF515403F63A0DFFE439A423351CEA10F4647440
53AF5CDF79FEA22FB08C0761F84E548D7886773370407D773CF91A06BB84AB5B
D43966FF8D7AB0CBF10151424E13612BACFD20153707FB8EE7882B9FD2E83114
A6E0C2ED59F3F845C7C37150E8FF7ADB24BC0A24011EC4D35EBEEC9B18E41C9D
30895B9C51927A8510C0B54F958B2B2F6023ADEB50294F80C5A831F63E4A32C6
003347400E4B4FA8347A0A3A2DC292AE20B596C3B12A7336C73C2BB7C2D18580
6E4681CE896E81FA6B7293C30BEE5E80F476CB85FF748FC6D27CD6548E127776
BD48A2E36337B45FCFF5B7BA59ED10133CF2D275FA0C4FA9F9E6CFF3D996C3F4
A78B2B969CC93ACDD12BC27316513C8555CE16C8768AF91CF1990FFD1BA4FC2E
C6186E73B50B55D883A53A17D2A0BC96A6F1AB4FC8404E178456AA0871AB15E3
7D606DFDCB2132C69ED24A64BDBD4E7A78BDCB8EDC73A5DD7088200E4190A83C
7EFADA6A216C418162CA12054C7ACF2BE617733C4E9B59EB8D7287D75EE74879
F8D5151189D2142055BEBA63A3E6DCAAAC6FA5DE8D18EECF279B60FE6CCA3B78
687A1E108F824B5303B2B80A03F075BB160E2EEDB4ADF7F0880CAAF24E2DF7D0
60F632D19152F958931324EB6DDBB6B97716F074A8671E9A1822C5BFFC532023
BB5485661F40CEE06E9E4D9A51DE91211C2F22A80D7A5485A15899DB96233B26
3BBA4E3283CD5CF5F1B739D42E37022BC116E32C05AF6E717193805CDB88BC50
3E39C3EE89AE349960468840416BA4559C175D4845B043A3D535766EE8EC9B6A
6FEE4F220028A1D9CC224D02E8CD1AB832E52092A17293B1DF927F9D9E87E56C
EDBBB392ABE501FA32322EDBA401D48CAA1E644123C8BC3D94A8285781FCF93F
F695988CCAC29D7E89EA9741067570DA2CB61DDAB57BB2FFA1D428C39D3A41C5
B4A6D32565CFA30652B4913919A708FB7EB945D9D233A32AFD43211DD366B937
C376F665C8CBC38B74095A02D80F086B559A0E3018100E35ED97E45A219C0EC0
4104C8E84462ABB3A069BE84E102DE3C2E63D270F64898FBF5AFDC8A60F6F18E
8BE55992909BE1552686FC65D9BD9FF4231CAE2F998F8FB04C6CB90473727BA9
D24832287669576F83D44519D8627B2F0E8973D92DDB8BF65528CCD065C022AC
26F17D973EBC3C938127F4502E7F3AE8C10FA4D72BBBA59CC965AEA6314A7A1A
F4B4BF2CD1F15FF6927134121C2957EFCA21BF7A62C91EAAA3F9B7D9D4374934
8D4C355597BF32A39092AEF01A5A9E8573D63C5E0BE600008B3E4B8E2929CA9D
2BBDE0E8674D7ADB612458230B4DD5764302539FE1F20D775DFC78874CC2165C
490346A258E89264FC3B06EAE5A4A271466DB8A67EBFD30049ECE46506C45A9B
58C7B2D34694742CDDEF9FAF1F57CA1E4978ADEF51BCFD10268076B72EDAD97E
B930463A4CBB46EC5756B606FE929345ED7F8394041C97A55C7B4013DE96FE36
B463061B51F7890EB6E8D457166E1D40C8C19AC1BD2AE8443A8B9947E335A026
16C45A7EDECD6BB614AEDD3F11479E96E84902A21F731C2E76EF5C73B08DBEB8
367767FDE1BD40E8CCDFE3E043FA8B6C98E50C99816759B56C70C4CFD75B6889
3683121D9DAE1F30A249211B2BE0E052355C5F25539D00B5BA2216D012C5DBC2
E68F495EABE461CA159EF6C2FCF3A49E07D3416F420073843D4D052B4EC97694
74A1E4D68ACC735660757E52A947C4FDCDF644EF5C8B1F12106CE3A1614A1406
5AE00EF8D812F24E0424585D2408D34E42874BD64F02AF1A621B7D97B7E5BCD0
088966888A9C8A50A436F8155407A30B772A1C7E5BE08000D1CD09716F23722B
7C698E66AD5FE4E10B63CE6B02B39F4283349D33B34A7598A40C0870B64916E2
D5B8794F6843E1923A61DD216D1486B904345D64E6E8ED6D483D9CA58C16823B
A13FE92DA935BF3FE3E3916C34162F442B621DCB875006B494D50056D881DA0C
01984A6F540FE532D0BBDD017D4B22183F8DDA81C85A7ECB1502E62FBF7CD307
65B53E0B000BDB663F90284EE3E429F84D7357E3097D630541928739EFD9966C
FFDACB8A2D77B333DD31DC8C2205F5ACFC82D878A0C32D5CA868B4561BBC2A24
71F93A21AB57F843E6164C1467C7729CBC248A26A43732BC1EE4267055B5A7B3
67327504290F6A4C789612A209A2630DC015842FBD531B16D39B6E22CB377EAA
E2A1A6037B327C66F8CAFF2180B58BAFA58B032A9AFBB0A793040ED46553D2D9
52CDA6DF2DAC9AB8CB66625F049323A2877E6961794EF7ADBC7F6536B541DB74
478A8C34902CF309F87CF8237C6BE1C82A5C677819F28B513D8798886210B06B
39FB0A004CA619944DDE2495DDC2A5A2012180437055165889441BBBF988D07E
57DB791EC3B6157725DA9C8B970309134541F873063046B06D7D75F0E270EFFE
1F42D70A8DF9E7A480A6D1B17B54A67A9FC4D940A99CAD502DDB1FED16FEE865
12550FC80AA4D395096047341133AF65C4E3A949BE6ED500C9BE751A2FE4497B
228670167BD27EA7FE79B94C51DD5BE5CE6EC826F72942EC6F12A5FFEFF10E4A
F25A133E5B809A7AD4D14D6B74B076C119CE0A132DCEC845E5B07FA62E9EC001
7ECE8AF03815EAEB15B998378515079C4478BC97F3435362DF194D5252462CA8
F5971A8110C1DB5A55A485FE31FD30DCDDBA3257A9BD679B13448610AC073682
2DD15291C3D1F1A29DB9FB6C55DAC4C38677ED6F1B952275EC7F6EAEE9C58848
EDAB03BC0DA0AAEC44FAD1E90035CE7328EACE55F03A868186356AC75A251F64
78F7771E20EACC267E30E7C95361095749074A93280619A42200B818241A63BD
FBFB9843B19AFD8C175FE6E8851DAC63AD4EECA296630B6CE947EC99BEE37E11
4815582064C682B0A8404F33A559F59A3613C5BC02605F867AC3B3AAB8602AD4
404D2C8D545E527EE84BF3064CA93397BEF8E31C9C20476A869F7CDCFA009ED7
A0EB9ABD17BADE021EA691C39FB6EBD5D936F621439529B18C7AF0B431AB3969
4ED878410B8DD1788EEC373245990CA07F84100786BFEADD5801B3E600198B49
27ADEA61BFF306A745EB273A6A731CE5F7216FF91AE6F88681C8B8E8AA094F9A
89FED4CB60DF0C6D157C61DF6DAA6BC0520DFFC57FC9AD43F97E2C4E00028A50
D2A5898556187AA2D8BC77E992E7912FA0CC07E6F66D5E69C96C6372A990AD8E
853F07D1C6BB666C4A438D657E89B0179B6AEDD2537CD0FBDAB8B1C4CC99D45A
72EA83BCE7D7A768C4D22990368CA739DAE1BA5ECE306F44FB9B25CC91C440D0
895F93E01EEED3E44E51B55E6C906E18597BC701A6322CB7D9D93F2B84FE7C18
0D8EB395DC778E123451343CFF3072047580A22EE9A0412E905C9FE9C113A312
691B8DA6B3ED557AF0FC5A8C98BC11B3547798F47AE4A57D4BAB9EF3B558C40C
C8BAD0EA931BFF1E6FD2AB1D213290988258922B85C079E81FEB0A21A23DB5F6
368AB1E53D27AEE1F4DB8D9566F8A64BE0B33BB1993DA10CADD16A45264224CD
33884CB3C59D1AC7C63083E6F971DCBD1A2D9625D962522466FA77D919714474
9990033AF5907E6BC44C5F3E75D66B9103159336BE388BADD92AE23F8B0F7D46
EEB39C06EB4B6CF9AB3DC2143B402C23B9D1C2E0E0D4B4B74A8492B5F08DBAD2
EE1ED733C868D36A0A96EFDD9FD942A4620A7238B7D8DD4BCD4B1DE6BFDDC502
4463326E4BE860AE8758C84CAF5840E0E8613DB831EC648792D9D71E1435A8FA
DDBAB74766291BE3AC5A4EE3FB11FAE731C8B40E21E61107D0F75B166B30576C
5D77ECA97EE25CCFD519CFAB4A83719421BAE9B6D0A0B7155BCF5027CBA34F64
FBC7A43529E7E2DEB937A6932C44B46365479AB8E2901AFBC3B6C9318B772933
5C397D57169ED01602372ED7B107FAE6C5380BBB623834C88B73D3058F3604A2
496B1CC9BDDD737B721746E70C112569F4F8D70E48F34084ACD84B74B83EE154
38FCB24151DD12D77A8AC6E97738A34F4AA93B5A122FD4A49CAC379C81A63FFC
63AF7B746322D566F62C098F76F2802DE73AEDF3C405824EC7F9B7711FE1C953
2CE95382831D0FB055B361FBA233C1C8D0A328D0B1255D3ACE425F36E53DD14C
99661C782CA1B0D33BF5A2E93502C5278751705098D4570CE4ABD094998421FB
571A214244305626BA614DA8007693804B96E34998FA8F2CF6FCFA785A7F61C9
CFDCDF1C3FD73433A000F454E6C049B297E4C9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:50:41 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 91 /union put
dup 92 /intersection put
dup 161 /minus put
dup 162 /periodcentered put
dup 163 /multiply put
dup 165 /divide put
dup 188 /approxequal put
dup 197 /plus put
dup 198 /equal put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F9097078C00473BD0B7F
46A0B35416F89E0B56CE39E95524F86B8516AB80BD32590E7B23CEB9BF53A313
F70EB6FFC5F217D5443DF922C873CA50362616261A28F011D1BD6932D2DDCD3F
1346EF1CD9EDC5C03FA51FBC7BFA21DF70A6F0916340F924DD54EF6823C556CE
20E3A0D39307CC0586141ED6630EF495DB2F978066B052DB621011A3C09E4DD3
271B411D7DC93087AB2F511758CAA594F3220DF1570C3397C812C4B7B00FF028
72DAD530D23FC96B06D824929CB76358CCC9F0CC20E11454A860A889B94CC3B0
5C30181FDCA483E053337ED08F7BB118DF650AFEC91735B71CE9F6EDC401BA48
6E3F0029CC7D23CE3F287BBC852896B7C8D7FB2561C508E4EDC9A1199911A88F
8F11EE31F57ED0A5AFE02141572AE6CC6DE29C450EA81AA6E79C012CEF45D8DD
BBE5218C0E76854509DA5117E12662C4A71835D1A1374B4DCA069CE2E0A2DEF0
4877BA22E90A992AF0FC3BAB7DE88FE693E2A660D5E6061E9962458E2D975C5D
972B1F8FEE797DCEE0EE0E8C0C6A72AE694367C64B666643606812AA6537D972
F3E6389680C75E2CF2345AB24D545AA2691C7E9656E63724274E06B8DCE8C0A8
28F2F8704C556C9FDD76C1F924EEA2205BB42187445D023A168E0866B74E4625
EA7C3F2A2E5CE9D1C163E77E8F81A14DF57533C878FFD068844C754CB0AF2BD1
61E97F0F3FFD64109A1BE1A8E97F9AD705973B514EE9CDA8013A20D6FCF63CDB
3A42020EC4D73ABEE5213E6F114328A2A54252BF9616DC98820DB2CCB1CE298D
B9C7CE65264A0E976BCF61484D9EB73B8A1439E58D7D237B4973A9CAEA5DF4EC
A50573A6BED0F505BE62970C6B70CCF2AE5DBC6AA7748E29546819EF937A0130
1A19E7A81826CC40F42996CA87BF00402B9530C5F8DC92EB9C08669C9737EC90
E24532B441559CC80F85EC10ED515CB4926B2E933DFE9DFDE0C9123EDC2B6884
4A286248003ED11C02EBD4C52D5C6F119EE54A61A8D65AE89336AB9CC73A8812
44A006F45FFC014FF469FF0ACDBCD089F4378DB859693CE2BA9B297C24C95F85
763D1F33ABB4989D0DDBF620E0A9CAD4EFD856B3A8733F504C351293DCD033C3
4B6F2CC615923E0112B59CC27EFB3C46FABF16B1E592C1AD027C2D0B36DD9F6D
E375098ED3334A19B35C5A70BFD2219C817DF68BE806A607D1A24B20E7B26A2D
61A8A588CB59AB03FD0577898939939BEAE15514C359FCDEF77C6D1CC3868CA6
B5DA15D3CC2EF20E2B2457856884FBB9F37083413FDD260596C68958B71396B4
CD9F8DF5037F0D43F502AAA34DD9163C3DC1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
52978AAF95DD252EB0D606F78C7E295BB640D1153A3A0AB2A191B9458436471E
A80334C07C23E3D43BC2A56EE61DFD9FFDF3329FCD4DE9A7CF92ABB65FBCAAFC
7EA124656746FA3B8D5E8C9B51642207EDC0600CA659E44717F2BE08C400AD76
EA2E4F62AB149858C2DA5051009ECCE091A6E497D4729FC9924FEC3FB6A9133D
6B463F7C7EBE4EF91B9B17160941AC0087818BC60EB64E687E9349331FDB33F0
7E1D24C34E9E439FB6C392AFD85238CFEA21292B8E1D0991D029790B7831A2EE
2FA82A3B52599EB0636EF92E5D7C13FB08C67361F04482BB6BFD44CEF14F39F1
21263707E73B9BCFEC74AE58A63D5C3D4D773182258E76E62A5EC2865FB5951E
70F9FDECC6604E7D7A3A56648C90B4F400CD61B0B1ABB6B2EB9F977F0DC1A090
109733A75F2CCFBDD27403DE02C363DE41F7C24249DA6FF6A943A97302E113B2
7C840C2A6EFF6442DD52B43E21BD247CB559F781ED48E700C7C6818380E335F5
C15409940D60BDEE0EFA73595159BF5FA6EF014B844C996C73F53F63A48C7F4E
CEE23E1680B0037EAE119E8C5E67E32C964A18B5D20E9DA6FA4E53156DD528AF
830015D7D80E0A7974FC52EE48924BA4AD2AEBA3156D5F5916537207EB369B2A
6B80A8A4B044164ECE1C1FD5A30B240DE3246DFCBBD6E7EF71B3F46D35AF2EC6
76BF005985FEEB5D4A9ADD84C49132594E273D0A94C8C2DE65B5AA436EFD8768
EC53F2288DC8C1B20D1AD0FD1CBCEE7CB7349F8A7410C5BC584A6FD6CECBF3A0
6263414BCE81888528B6D00FD524B3E8A9F72055812C6B34B53A27A4DDF49EE7
703DAF38098846BCB32AA54EA696669DC99DE3BF32B96E7D0A4107DD5E132FC2
4DEA28F304E91752899FA8BCDCC3D498B5E50B2FC370906607CC7EE79F2B8401
2920F318C7C15BB0A7ADFDD2E1779F1307346D19833FB655D41CA42BB4848ECE
46F740769FF65FC3860D88FA7440A3E6197359BD222D0AD59143180A4CECFA73
BC65F0AF65086878591C85D37B4521D9ECD654E53B72647D9CD0F6A9D09C62F0
0720E1966B4081CA48332B5A5548C8E22E9F467B553F5FB957681C7400A03D95
765C079FA72EE85F0B8D0058ECC4E243CB3A58D039174202E3214745BA472D39
0D3A037DB040BCE1683EBC8F2B43219E7542AA1E1DD13BA42349375524621539
25BAEFE15AAFC017BC085A39BC7B106A1F859A7BD0B76050F96B980A1D82E91C
8499E6428AD036B3CD6B79686A7C4E73978974D32CAE118F50E58B83585E838B
F4E9863C2CAD6DCD24A4624B7CD1FEC6C3959F468CD1B4255C64F9D2EB45F8EF
9429592FAA85A85A8C7A6C02F4FC4FE7EE5344787B394B63EC51FC4F15022F60
E826BC6C58C10F14C5CD9EB6BA7905C1A06C2C962B47880CC6B282B8F502C3F3
FF67FDB7D2767736315FF815E67207A8E469C0945216F4B4A2A760689B0D794D
8433BC57F11A56839FB65FA8E5222EA9A4B5B760E4957CF80035672F0E127296
7040C0D5153336F1C57444753F21C7A2224394411E5142A0B33145DB2DBC85D6
1ADA5BC37EE9215B73B7E88D9B255616AD093C909067BC67DE168ADA889723AC
952E6D0DF94F448085BB986340DF308B966FBCFBD9E9879DD03B43F0240E07C1
CCB2A00BA43D8BE4F0C4C16B7ADFA0E47C8ADA6F33F274E322692410F18B3593
684980219702064F30E256DC646668641E4C15422D8DAE5A86550A344C3DD6BF
EFE2663FA57A881534708C378F40466E1741ABC937739A93A9708BAFDD6B9F09
DA1BCC4AC17C7E8E4B5D609CB0F6C0972CE96B85A351293BDB2D6C41EDF8B74D
44AAAF83D66C2124FD165C2D397D12BFE79C1AFE9EA5C2C1296AE7329A4A890A
C7214607A445DDBEEA736E06476732FB24541F1F435A13F6298BF08314368A21
E37A3513F8EBD9E500653F2BA4B366FFC485D37B59782FA17828181A7002BFE5
21DE1DA426950A66B0D7A78D98F35CD2F4934C5CC9DAB4DD887BF492F06C0285
2394EF7D22B2B8E4899E3162B9BA949C4F6CD5621A497C042921C72B89C78D00
35BBEF52DBD2C0554D446BC7A5C2A033C767BD66F5615EA29BE5ABE7879D8557
7FB496F3710974ADBEF7AC54AEF0AD0088750FAECED19F8E95C2A24C71480018
56F76E79BE7F7030D8A0AEA216AD0AA12D6FF10DC6F1E8D3FD25EA1409D14482
11CB4EEBB46BD6D3DD7565C4419B4F34B9919AD6EC8228143F14487BE8C925BE
37F7868A56ADCC26A1BAB963CE1D684B85C0335245D7EACBFFCAE54060FD95A8
A7F472BCC0651737C5A7159562865AAA86C1E8BCE46330EAC417BDB461017D05
D2463C9E3298CF27DB383FF3AA081661CB91D2007CDC6DD09D082DFAEFAF3C20
6BADBC62D92BF3AFAF77B153CE10F69148076425FEA1A5980EC38A9CB92C9623
6EE25394EB4B23B598DF1EB5BB9BC4018439FD1AEF96F470F11E6E78E0F25358
E6B038AFD7F129264121B465C6FB3670F04C637C7181E3B2B4CB0F368902B04C
0EAE0F92D675BCEFD2F13968933B94E9E5211A8475CCD87348A3A1AF86117A33
9835F09CDB73458BF533E9725488FC9FCD16EADE88A75808666C11C1BA898E04
7B04A4EC5578AF856CA0094854392A5BCDF7ABE8C404C06EF16DAA32DEB92D0A
9191A62866F4E857F4D8A0E9FEA9B22AC5CE3BBAB5061600B69EAF12178B7D03
53AF45AC99D286DD04EC72C7A3BF07DDC7B84C0B4A8233CC770D5E13842EB18B
89BB4CA47E6536C7C2612AB3DF0EF6599CE647DF4C4C6CEAEB6A4B27C67DEF29
C1C336EEF42FEE57D7F7129A2A5042F4CAB7D5F165EDCCFF29008D62CCD62642
0B296BD5CE8F045849AC45144072D22637F815185CDEC3E4B7319555810D7224
33097B78E6B2554D60E0C008D17D2576A07C20E49586F53BB7773244F15F3FFF
466EDE7A5D09E1364842020D1929C7B1AF5D921048359669636272347D419814
557B14CEBF7D6F57B9C234C923B9C92312E0FC17BE93D4D9B15F93496D2A5BEE
403EC280F5101B560CE9F52C2C5E1F1B68A3A52DD36BC5FE9325ABCDA48C5397
01908072ADC6E6DEEE578FECFA1AA7DC5E0BA296F88EE58DAC511D93714E7CC2
7EE5345D4E041C4AE7799C5D4B1523B87667C38D1B54A4AE15FD414A763425CB
AEEB79ABA7213BD4249298B091AECE8681AB5B7E8EDCB96344FB71216AD5F872
45ADDCD1E97FDA8BD4FFA26E25B491DC9CB0E865AC3E7626164C1FB86D4090AD
B946D937B1855DAB79128FF7690282B3D5DDF6DEDB8592A6699857A7055B3CC1
A1C3E2A5A27845585F4DEE9C1C07E685A2C3B4516EFA31EEF52D0956C520A7FB
79175CAC5254156291472327B28F5F1E5BF1973C7D44231E7BA5F37304003016
B3CF3FB06CC6A08842CF2F205D8C72DE0878FA2246906F1BEAD840BE173AB908
82A2E7A942A437FF8A6E6797D9D6E600A47E7C02D7503583D1E74F1A2C04AA09
2C76814E11C93E48CA41C2F2C791E3C066A0B6DE83619080CCCB31C18FFE2BA1
F927698E5C34170C5016A02608BAE3AAEC92940889D9C37C2F83B5BEFBE0E0F5
1C498312E0B10F8803ACA85FF382778CB022FA0CD8B0AD7A4B59B724BD65916D
5BAA6E559500EA82876927316B02FA720537B62CB30CF4AF9A0371729A13D392
2AF00FC981DCCB655AB8E8689F56167D2DF24878CAA37C1FAE100FA5AC9F14C3
834B0E2D3A360C9C94BD89ED4DAC4BEA7FB4CEA8F1CF41F2542DD120123D8604
E61479138E8CF945C95FD82A49E953F5B5FAECE0EC87FB8A49B81F8BB719CD86
6EAE9ABF1B70E7B535D3490438AF260A47AF6A57D1933191D69B6A72F6874391
1BD163518B50D0925CE6DCEEF201B23D71CD0AE62A01DB63F00AE8DE090C92C3
CDB99308E3583315E329FBD4DB3D234940C5E50C6D10EC7EAD956DEC63D4F238
359C63DB25929254695BB33F790D00E851167F366BE18C334DEE7CD9AF58F57E
47DDED97FD7C9E73EC6DC35720722FF8498FD0D12B1C3ADF0C07C6C16AE1F7AC
503886DF9CDEADA6C881A3AD27D3C5652733E726A5AE326CFF766FFBDF1A674D
A952EC8D65E617C43F24A890B95B8518C38D36A44F5BFEF4540A9941CD2873A0
23AD82C398EB2767C8D190AD1C8A0331510C003930CD829CE49195D2F72F211D
76693FBC62A52A959EBBD9B870A1FD86F2A6FFF895207E57106950EAE6394AE7
2B8A76300F0C3D93BB151BBF93BDCC6A90E78BD27F7407A079D9788F1CA5B727
A758A924BE3FAC870A28CE0101EC278EEDDFE8AD0FBAF257DF760B94F04E7E98
67ED4CD4EEBF80388BD866C81A47B585F3A9FE3660A96A4B9A6E72E422BA70B7
9B82D6841D1EB5B4BDCC1760E3C0DA9005874421A95E6B02E8F45B35D595220E
46BCEE9891F58ECF3CFCA0601F87941DDAD3416FF7F8A79F0F77C6F426986165
7DAE11F82DE9C6B61492684631A3A86B8344F2B0A5FC7CCAFB54E4E21F06F218
B80EC77DE98AFFC6888CAC0C2103606247E509F963A187E7C08FEC5DF424BE6D
CFEBEBC3BAF1CCD316FE41288675F202B95902DEF39C68055997DD487BC4B573
62F878AB208A1309F39157CEDA3CAC91E253D6C0D0FDC641CED82563F58C453F
45F07346FD25DA5452D5C0CEA9AFABBAC9D1FC83063FF8C725AFEDFEC97AABCD
07D214A8C1AC5997F21A14D574A142800F1E817EEEBAD2868524DFE37E306818
E2B4EC0A94C489EFCC51481EA8E070EEB5E235C61EB75D11AF2E820DA83B014E
46A2B4EB08DBC89FDCFEB0D64B4D9C6015D5C7B25D9E26190D6311CC070987E9
9A6546157858A766612661883E19E10D2EC89FE134F450B11BECF3DE54500079
ED817671068172F99A4D0D5364892FD7673289E67D21F49C2DCE86D7F37CCC5D
0A0B2E0FCA522C456188FDC83A84F0DC427C5785FF9C2E54953FFDE02812BF55
827887152BA0CD5C2AF8F5A1C1D17571E05FBDFF24EA3CD69F1FAAC221E5913F
1D146B2AEBFC2CD1B7CE1F2517598EEACE52245D9DEC3446B39F65C5A8C6F917
CD30E0A36D1F723311D7C48435ED1742BCDBE8F0BF84846A929A2ECCAE0FACA7
8A9D1231989F771741FB1799B4E67102E1505BBA2D1762B7878758430EC4DC99
E24BBBD58B3B387D1A561C78556DEF797BAA4912BC509706C00E046F12B9440A
72B0AC45171F41DC7284E947B055CF58E5CD6222EFAB7768A3025C9F0BEF8732
C40F1F4B662627DADA05827782E6D0BB09E1B97A00CFE9FC5B0A3DAD64547D68
35AC938EEF986AA1C9F176D1881A42D943CFEF44D6C2190ECE1CAFA59CA20F18
140F32F2593D6863E7872E3AC5AD7401A618CBFD44AEDF8072B2D64975DC69CC
92DC073C786E58B9974A0A2C7449F5439695896C5687995AC85C64987D77178F
10FC474C2CC8AE995BE4CD2683BAFEB6E6B76CE1B7C8CFD8541C74E52869095A
566B5C50C939A6EBC721B3AD344D719E1D3195F7AB75F1D47D9B8C960B128A6F
37BE941653699D7688E10B01055D5803137D875DBDD15F3739665F4BF4162156
7604299E1D5027D81C4C17B9BB8844C404A5C01A43B39F91F756681A4FA8B247
78A19B53E278CB4B977825CA18338725F946C312B28A26918A0DC8FB6F3C8191
BDCF716435805B79260E90AA9BED4F94E7539775691AA21871D3FE7B47F0B4C5
8C1F0B5B22C63885DE768C7E435E17A6D6AFDF832B7F36AA67E42ADE7AA94D64
ACB433A317B27B4E249F282C0403FA6A5598FDD942A5DD89053F4DCD13EA222D
6EB778060F35A5C17D8AAC353D6DFB27F0539211A1D594F9FDD3F6E178540922
2FBC9734E5F9DD5CB58D633758E2F9F0E4FC5390E6A149CF873290E99A3BE7D3
AE8040DCD888378199F17FC3F69318771383D3C018B7321E63AC7C175C9B8340
AF673A70BC84576704E1675EC90CFFB6581BB99D7BD3931EC402CA0F24621539
25BAEFE33180EB8A7807C000899D54676A2D3F2C62BDF74FFCCBF4F074AB0F47
CD1E87796B6F6713B84ECBE93CF48E7318B33935B87760012E1331E9E820C676
AD5971289DD018F62F2279C610ADE46912238C6FF6FA8668B0C6A82284744B44
FEFEE6B00CDB6C68CD684517F33F8200AF3461A1C651E27AF40D2CEA13ABB3BF
00C27C063BBD2C56FE0F72CE2CB794D5EAC8195519283822CEE995E20C3E4320
443A855CDDB0EAB5C71443D7F51FE7491622A50F351D3C74500ED70D05AEA2DE
CDF90B145B3A016FE649801411B9362142110B7CBF4061BC8C7B712930DF9F81
5677475419F733D2AFAB834D21B6B9105A913C9AD337F4726934D916A30EC708
42F4D258D69FF54389FF766162CEE656EAA8868DB2A988DEDA95D29FBB8F8071
D07B6074E4BC1F616F6F00BACEA7ABC46E1FC3B716A8AF838B984479B2CDD258
2DC9DBFE211CE9D306E08AF280431A0419D9579EF4DAFB5A0412180150409F71
1CB3A50C3C91643A8A5ADFD186DE680F692FC6772041BB412398C6351B15293C
EB062949EAAF45C8379364326F013011F77094D65BC71A40A8782F55C38E0CA0
6E7339222BC8F30633632B7A606850089F50930339C0E99664036AAE22D9E232
B1C273D9B94FA0EF759C005F8325C89AB1ADF3126D07429794035ED733BBDB07
BB59D8E590A22DE8C1B1C92629486D9DA2C2E4AADDC598D67A870757025B10F2
2C1B30E24C5D0A20A385A3D58A974363A09CD8C432D55A53F944CBBB0E7BABF2
68B5FFB595AF1DFB3F4093B37E26A30647A49AABF61030B5A9733F6B23B180CC
3056212FE0A67ADBC292590AF5861B230E2C7238239371594273440430827052
34465DC5DFFFE0CCE12D83B6271FE38DB3B8249552FF9A88ACE4C11C619A92DF
A740AFDFDFE2E7C1A98D30F85D2BDE543CE69823B632382EF21A8DD9200B22FB
AC78768D785902329161C0A780DFEC1B2DE24C92166C90766918144F98AD0A7D
9EFCC1760E9C6C4A959298984C7D2AE30671ED54F352DD4DEB99D759C6D27DC1
FFFC2488525AA731D22BC58D9F29B5C0040209F6EDD7742A91B67373912A0E52
06D43C86F4FA7B7962AAD6802DBD4214EBF6146794E887C1E8E92C33F52FEC7C
78C6EA4CB69D0A10A7E7782CE421AFEF2BD97F4E938B97454BAA4C913A1DB0A0
217B02C96F693442B3E3F613725DB385F7D8AC5BDC3C107F352C9900BC04C5AC
8B6259C9562E601C15FDAB3631BCC8E940558938D5D172CDFE5C82C5E1ADDC30
CB7ABA7600D6038DB08BC3CC4BB33C0689C146EA19C26B2B5689A71F71CDA3E1
90393337AE2A77EF2E8C745F8C84B6504B2A0A92D775F6735507AF7F488BCB94
8F7B4397F54EFDC5C30EE418922BDF5115D3720C587796C7A1CC3032E4386B42
BD2528E0E89EE22F1B5117C49C581BA64842BA7EF49D859177253F56AFD54C0D
F38C0F109906EF64FB73F1E9D159C3C5178993C5D8D6AB06D371F10BA0FAD220
67A2359A2858410D72A2E5E925E366B12B8A360F6E0A13F514B2F5650261EC16
A8C79601217D77EA610B178B7B536FFAA648A9822FEE696F566A835978924ACD
404636402CEA91CE37B0968A49F851011826B56B4A4939DCEFA9195FB9D4CD59
BA2C0E08285E4C6ADA013F910FF60BF2C9AE7F10EC828598C898176949F7F0AA
BC9A0CF6D3E1511E154B65FFF2FEEABE81370D3C29106A03C074574A19DF363C
17F2B355544E0D5283C7C7C5479FE55A39225D8A5516E42BFC4AACFC12A743C7
124C755F8723668C15315CCCF6ECCD272B15F19F8A078867FC90C3CC389990F0
D03C53211AE0E9313F4B61886A3704DA882C3A88327D68BE0F3576BDDB9DABD2
347B04EFB8F9E912C7134B90E438D82EA9008ADCB9D96A018407685AB0DFC91E
0B5916B8B5042072C0BF81C3205B89D1B688423C3ACC13E96670E4071F367990
B9D26F80D6BF9C282AC3657A3290BB4EE86F417EA480C05CBEB059AC51258965
513EBF5784F1A45224E44592FAC593A93D2E073116CC10AA7A9BFF36B80EA253
672D9A228D1BB3C6518D896472D79ED8EADE8E10D1B6A068A959D9F49D302B84
C57203C04D5459B142512CEB1A0D30AFA3E6CDDA4259CEDE6FF712D0E93096C5
8C0E02E4719F8DECAAF40C6931AD22CADEC06658554F86F9FEA1E5809361E52F
FE1E8D9DDF133A2672885A643CF90CEAFBD5702A35AFC1C630012F9BDD2E47D3
2FC2C2728AA1441D2A6819AB94031C5B5D5EEF2CD7EE2477B40378154A37982D
78B5F6A7137A0BDF0BB769D007442CE8359867346EFDC9792B006B4B188B6A09
F65D302CB9C7CBA91650424B7843261B6E9F4D2636B0F9835EBC80C3FC246E46
B47736A70E54A60816F46551DF671082B7E78404A9C5466BBEEB3994A867BD29
C3C928343FF2DBBAA492654CB56A2DC784E5272C8F68DB0192D2432878C53EEA
799EC88408FB8C0306456E152BBF4F58F075842061210DD2345014ACD40C64A7
150D6C438BD3958C62CD99A8B67CBD0AAA07D76716D40C47CF16D23500585939
7ACA39AD0EB00F9E79F168B55CBEF8FE70576EA4200F2DF6930F21B633A1C5EF
47070468B43171E866EABE75291891B01249065002CF251C93178F93FD0BDEBE
CB47CE5D0CCDD213C32E3D3EC2F36B325ABDC3976FDFDCC80E51AF95AE5C97D3
9E333C3677E61344A6ED113E1CA9633433DB6921D7695F958E5805EA0545C58D
B1F4BF75C7AAF40D24862CB260B9BD7139FBA1FA5F58D9E38BA774FFAE9E386A
0F7E8DD00039AA5564A4880A35D843F43591473F853FD164B017EC6A8CB6ED3F
E3E38F60EA8879C3008EE7E36306DC4CABFC7392B85551085B2504A01A4B9DE0
2B1CB5637A4F9BDA9F77154D0D638B4D0E45CEDBEEF71D166A59C8B5CC3C7D27
16D65283C2617E4FF18717FA86BD19B07FD9F1DDCF4CF6051F43FBB34AAABF92
19F029BC191D8B42931585006E95F2D1A64F2759DAAFC612D71BB961E24D16AF
015B0A6CD1B04FA86E4903A1BC65142ABDB65CB284E0A1E3760F27B4902F97D5
5FA6D2DE2B203AFA13041C08CF6526CDD230D831D069571D382E5209ACF9FAEE
042DDC0DA0AFC48D883F2B4BD8D02A9B56C28CB8D9AD8BFA5B622125B11C5976
C997030D39F44AB83076A9D1FD1DD83AD47EAA9B4B59E70CDE373E47FD68538C
8EEC103F4D58409B6D8E3FE74DCECBDF7BD4B7FAED7B610DCDC65AE2ABDBA8D1
EBE06555E167799AEA37A21A124918833CFA447AA84E84C5278C64F82CC0BF9E
EE8EDBAF856FD1956D925944E11C92E67CE5DD4798ED52BAF831CEBCE4CA44C1
4BB0C616F09231B7FFC062C3234870721B03B9BDE7D0E03ED916E75ED3846256
0791E5A9D0427925DBCF92836DC87BA9C8E24D588A398579504C3C7994849F9D
218170F1478223AC76DE9B1920271BE74A08181D514047E4BAEA06E8A049C76A
A714D454416CB9786D465B4A494497D2ECD934AE9A03BF29AD21D878DB8B1082
5259D6882F16D397F8F43CE857E93D46736504440276DCCF0CDF7DC66C4E39CC
D6F634845C1C6ACFCFCD20E316FB1049C3C94D1FDA5D8001304FC165F96BD9BD
6496DF6B0DD2435E140865FE5837B27A69642C5D59F62FEC2B8A5B163BC69722
9234AB27CC44263448DEE0F0941B2FD3CCDA225D2E81E8CC5ECD0413F38A4FB2
0B1EE6F6F4FF975E04E30077DDDB73DCD864D6BD5F44FC72BE8D644F5986795F
BDF1682C8957F08D7805C3D89155555FF53B4E8865F8751FD1E0EFF56357C0E1
426522545243D50635FD40212CDDC0543A0FBB549621953D0A0F5A78522F0D8C
3A4C1711DB195FB9A3F1EE9648134489283FF3BAE7B9C34FECC6E703A3AA48D9
80C48FEF287CB787EFC7BC9927ADAF8F8BA3E499A6E19694F744C02BF2E3776F
E26688D3A4A88E5A9C8393E02F64ADEEA9F33F9E3DC40386FD630BDC1F14FF15
872C540FAB2C4995EE0788CBAE0C07A2EC082FC4EB7DBB47E63CED179B3DD05D
DD24B5181A08C0263E59EC3D9134ABD970E5167F82EE0052253D7986DF52BCCE
1C45A99FD523CADEBD7C1723B2F1081E1066E9255DB9BA82AE417570D2B23AC2
9700B2E1D7688D559CDD4B6A91C1BA77C8A4E5FEAE0B0163B17837CAEDDFABA9
BC83971B27EA115A329B2C2C772250F191A6C08107DFB9C648B1611D69E0DED4
01A58EA63476CAA415E49E919F3B127999E76947100F6A66BE92FFF38DEBD205
2B2D06749E8940613656A3CC07A5C208E3DC4767E2256ED79E7435719C1A648E
444D1A7B275E2217BBE84523F4B94076FBC13EB89CD9303057F0A516BF00BB9C
706EA34972016C5B0D77A277DC8C1356CE7694AD06E71853E534DAAAD67F1C43
F8776506B2F15DBAFA12BB3C5D747754CAA61E3EFF7D4D57382BA704377FD7A5
385D83A2204CB99B936CB72F0B0EA52DE845CAC0FF290D6DDF9C29B37AA71FBA
0896F8BBD114E660C1FC75A0F10DCD474B3B5D476629E97DDBC98116C879D09B
847720D20E2210D12B1435EE885780EC6219758FF05164332997D9B7BD97400A
A41C55881CDF1557A70C454169C6E509720AE03F98A14DF2300F1D37609161E9
093485E36BD7B457DAD3CF24FC4B1AF90C0558C07909D06D055F96E0007448F0
898E01882EA915F9D0D766CB53D0E2DBFA6963E77ACF535770C4920466DA7BB1
D20624E41F3E1893F1D67B6FA13982CB0CA776BE5D18E69D557BE82C6E81475F
C4FDDAE8519990910941427350FFBC794CF2B255927FEF44E586BDC0AE9C1A8C
225F8E35DAD8E60FD500C8095E16A1AB117729205C51C0317437135C5B5C9302
F28F85A4D507130E8F9ACD0E603FD1A9BAB841B3193B935229A89E16DE5B0C37
1C7E7A820AC17A4D72DEF4CBDF54DCCE8ED7C79B04BC0FEEE99AE1C678B064D4
521B897D8542A37DEEA9F252DFBBF4AECC0FFB2C3B2EC25B75C01085E9F6BD52
1355CA53E95BCBD585473E07089A55A764D43C9A499BACC975E62468C31918DE
F6BD3617317E1727CB4A523B449318E550E79ADDE4768DB059928989263FE702
071AD4F7A8774A6878D4E2174003409F7327962802947543D2923848C234C404
321CC224422EA15517B661E78AA7C80CBC7FC622DB9FE06FB7BBDF2C41181D76
5975F0A711B2F23263092181438D53D676F5D5ADA643A0FE237E333A656582CB
C1D93F10886EFF8D56DCDA7C9B59E3022EC12095538DE5639264CFDDD00F7FE9
7C4D9349C6878BAAA644AAE629BFC8F0677F7473894CA9D7E303BAAC25B91ED9
FDDEC74A73FB9FACD045E920B90CF329BBAB3E18B30CC2126CF9038E4527E4D1
4747E1564AB11EE10C59AB784ABFB5C30B850E04E6801AF7324B5622A04DFE93
911C66B2FDDE46177DA4CC2B5CE3DEA91C4F718EE6B39564D3838D71156798E3
1BC3D77FC27AFCDA78AB76209E2DDDFF94DCC51ABAF46F44989A8E9621814FEA
EC654AE20E08ED1AD4B59F7866A299A6F8A239302DECEEC0AE991C3161E15D1F
36EBE0B77654D108B6CAAD9FD891E7DAA30785274BAA22454682FA80DB01A38F
200342ED802DD7A3B25E2FCC58037EF2453EF7A4E0988B607135575D75485945
A5459ADBA009D2A3EB8967AA5D4B6F3E71CB6E61614148FF5357E6982D78BBB0
BBEBB30D3F4BFEE6C68AB6401B735DC93A579BCF22F2F50E9522F31C8169382F
C879417D4499D22CB6FCE60E37F7971F75DC8184B59B2B1EBCB8A95D56588D6E
07F1E26F05C8A770662BB3B9DAF3E56DDD2E1122610827DAF89C007D53E5A907
6CF3465E7037459A5426FB211F6198661FA7752BB07D3F886B7A60328B1FF6F1
4BC762CE8968BD80C9D94D7DC5D6C075EC22E6191685FF2ADE5C8CA870057E70
F5A87C5AD0C29FEC4BEE0771CCE79CB42CD6365545A10C77F2F0D64B3BA86206
32037F423BB146525438C7DAB1EA2DE9F6BEA875EC0FB3B1BBA0244D2732FB07
0E0FB9525481D950896E67A18231B5B79BAFC04305501695AF77772E5D35D062
579183F84316C85A4E041DDF049B6E71839BF0B7FA898E8BB07630DA786E599F
7698D65C1566A90206DBEF846682C737C674D4615D38B4164FD6F65E9BB4C6F7
9EB0004782212139B1E156F69B4B2ECB5B40002BFB9868AD6F80B0448AFED23A
D6C40F42214ED7740DA18D2A03AF3FF7C69B5883ABF8DD7BD3FE1E7CFB5DF3D3
B5C358D4242A3485DFA6D5F4927526A82694DF537AEDA1E7C00946EA7C60B76B
99D0960E5723A96091C9E7BBF53AC2F66E37E4571D7B14F4CEFE99A6DCBAD057
A3EB4FF7EFEB225FEC897604EC54C79626A83F69D00F9C5E326B513BF95DDA41
10F052D20BE552A4A9262FAD6EFD86388139E0BE821127D0C5319D04DD431EE4
1ACEB156246719B047E6E8938D4FEB6F83D2CEC82251F4B257DA9992A34CAEC4
7A379FAE11D6EC2216705CD4B5C24D95EAA25F850083BE5E42DC9C42A738E810
178DFB8148F709947E40893C1E511F85D2D284D086046CBD7C8BEC55E1F75643
9D149BD83EE4E885324B7DABCA15E0DD3CB6A8222C07E203C2C4AB0111194D9D
2E18053D09886AC724A6834CC1E843D67BD3501CD78DA87E786D32108DD63B11
504ED6E2466A6A8862CB1537B5F8CFEDDFEC7B4B2F8D902180F45FB0F467D13F
D885118AEA16615817D5858159A25DF190E7C0BD07CEC7B0B61DADB95FBF9319
2734EB6FD4A9EEDADC08147A7530AACDF070093E6F56C009B8958DB049BFF3E0
17E8C804239B20A6604D034163570D77282F434BAA4B7FB2E15F1D67FEEF1911
6F53F54BABB2E79DD09813F18FD53BA492567B57F1A36D9B744F93F9EAB5E6E8
5409C2DE87FC34FB5114DEE607734D3B9B63C702200D9CD6932F9650B21E5DB9
65018AAB4E1A67E74232CBCE77FB1D545874A9209B657F022DFB984FE5F96D1B
445A42F7FF4F6F4AEDBF423F279FE0ECE2AD6180433243428A2BC80112148893
E5C2ACDB34D766FA7C66B4F4AC2957CE44699387D9614A034DF2846CCB19DBE3
6F1B71DC0BEBE884588EB688EEFA67E4166F57ADDEDE0594E0643D3985DB3AD7
B7D5391D51E0D5A48E9515631556A6C76096765099A86BD002897974D32BF962
2DD1F399EE1360D5231E673F9EDB426D84CA8E4DF11E20C39D442B7E804E1B2A
5B96270921F6AFB0E4DA4415E0E8AE43B438B2D2DA79959D261A69268A59F7A2
571939CA8AECBA5C6CAA7D957DE078C19369F0F95BBE0777DC7D49276E1EE40F
1B0E9B92ABE56B4CB2B297D0578C342EE56C54A36A4957438363994EAF506DAA
A7D87911F4378718629EBBA2BAD3161C96F51F7D585B29473AF1774D308793FC
1B34C959CBFB2869B5F6B499D8D648CB671BB21D7D8B1A7F890D84DE7722FAA0
182AB4264AD1EF9D199F3ED5086EF0D3361D0AB36628A9DF5455E0D42F0A83A7
8BFE9FEF9BEE08C93C8CC357F60B72F702D031E0E8A39F01C2D87E2C0ED20625
E99D88F0699EBC7FBA5387D88B8F60DC2718EE9D3623F81EE19692ED64FEDA9E
A11EA218C88AC1B10B7BFAFE95693AD4BAFA03BED9687A9C527E6F7147D0EF09
FECCDE0506C30655631BA2ADBB9EBE4B1F6DF21F58EF21555C7F9F3D4A09ECC2
DAD85198AB5F55D8C635ACBAB1B57B6E92CFF689A4C3ED2D2CC5A315D0882B8C
200D73C2463EFB472CBF9AB40F258C27AA709925BFC2816B2407207DCB9384E6
4E73AB49530F931C750E1F2F496E343645DC0F6ACA13225A71AF6A5864668D2B
AFF262EC118C20303F121848CAC04A6B1E53004891301214563B84176A64A4BA
955D63A7245C3DB0B51B6718A15E3B155792F8BDE4E8C029F9D95064E7949E0D
C2D2083FB7F4E9359161C0A7E88B991569FE16B255BD83DF1DAFE860B53EFB5D
C65270E3C96B3564C3933FE145044B6D153533346B0A9D53ADA5209B60A7C673
21A14E2B31BAAE9475DF19534BDF910554BDEA81102F1489F5E275FA86755ED4
4B728E38F5A8C79084029EF45A0230E88CE7D3EAA03950398695AF91B1696DC1
51B2E11D77B6BD58D0F7BFB1A49839D023C74078E22027EE980A5C05C5C8552D
0B331696364B73A547088E6C5FCE76A40321C34B46274DF24C7127B00AC87B6A
37DF478DDE33538E68829238154CBFABD74F37A7BD3277551C9A82B956BD618C
BCA5DE3B6A920F89F42A1F843653B31A2E6E8F050FB4560981458A677ACDD684
B80458B5DA8186A435B0AA3D808EF01ABEEE4572BA10542A20717BC524A7B24D
8D5D55DA07D96739D8B51F30E41E6F6043928B529F6D9B2A4828F289D918CAFF
4F117FB8A09843529244626FED414EFFD130ACAEDD238823F7FA72F13047B757
18F08E9D7D9C7EA1146839D47035F83F756165141343087E5A5BD2636BEBB7CF
749D6B4D4AE31C9FCE4FD1F2330744611C35DB7DFBFE3ACCF6937356AB237C36
AF6AE7951FD4963C6493E36154F2D1C1EB6F1752C58690B87EE34C8C135BA12E
261C7231FA62E748BADF9845B86E504716034A4DAB49D003F4B96B0A490CDEA9
422F9C489942C117F42B978C22EB16AC6B8D30175F4719AE8A167D2260072D6F
7A10E8E6190A422C41481104AF0AB36CC55A89A16155B26FAAFEE694687BA48B
19D4744135204BDB57E87A083BD5180B020CBFE91965706750B39BA8752C048F
8D2D6B1E966D93154837B6F6CC57300C7AE78788D79B1489E740DD221CECCAB1
E3A6A42782055E55C188BABDC2D655910E7C1C052F527C4E8BAB9809715846C5
282B765B3749C0D8CE8CC325D950B8C46C7EAF135CB560095AB5612CF1B24EE9
33CBEE94FDA157551FBA65A632C58BC1ED0D5711E12B63834E7F2C2198DCB59E
1EC81BCBA7CDD85C107F9C7EEF4D943774B6A893F852C0BD813CBE0FC58EA0F4
0BEEACFB3AFFAD1FC4A731C625C9F86759C28ECFB8DE10D986CBED2508310B1F
5D1A51C92D1BB4A35C6288731286F930829A395907F0BECA2DAF8AAFD00F364B
D726241B6FBD3F9699DAE4DD83B424B08F81D549E5415D7993860F8FD2A94560
0783AA8A3CBA8188C37999E5AFC29D50871A05ADA811F48ED14B617C027E18E3
5DABEC735995F9FB629CA6EB72531E9E3F063199EB9111CD243BC173BBF8B3BC
9146D4F8579F9DF433A8EC2D219AA4BCAC6F0FC917FAE9CECF48D0BD6DF4F15F
69F853AA73BBD19133262C165890EFB6020345E07FCA709F2BD1BF5A17BF1046
4398CBDEBA6CD81BBE2C350BEC95BEC0D92BB7F8A10720851B0FCD3F1F1C3E32
47F42A05D0853D30A234ED629C9F2B047F723528286F545FB37986450117BA47
B4F837F202E1AB9DB6926F14F62823039DCF4F991E6AD6DC65F8D686E2FADACE
2C955F34F995354FFD66EED02F59B174B6E26925D21F3F6CE65FB4E4B6E087A2
2E1705DA6D1E87FDEBABA6BB5B5AF30E04A8F7CD6CACB3B635A3AD3F100243E7
780732FC96118CC0D462696B11B151B2E23A3C716939BE3FB0CEFAC95C97FF7C
59B1DCF6CAAB0FBE80874EA8299CAB9ECB1715D9A654B1F27105EC3EA197C67C
874C07D275F13A55CE93192BEBD659E95BD930B8BE55136EB8B9C028F689BB16
A5D95F17E324EA16B4FE1DE91520CC93C3073E838001CCEFE7941FCA65098D68
167B6193884840B058DD80BE25D31638A9BB49FAD5A6AA8E51D5447397B5B0B8
18E9BCAC9D76B77715AD65A8B29A2BDC9FC2BF521B4AFAA2DEBB36BEEB9AB0C4
F582E75B93494AE79F5CAE3AEC7C480F43415D119524EEB8099F8A4FAFCBD151
BA1AFFAD0E68B2A9769BFCB3DD11A234D2C70B719211D14C91DDD1621AB57AAF
F491C4ED0E4570BA7213C5CB7DD766A398458588A79387C9458B0E5FE94D069E
EC3C268E333C11E610413F05BABBACD08A7BEFC14811143D70AD709377ADFEA2
7FB8BB84E38B00C7538E586D0990403C81778D8C4CFB926E440866D65621FD52
A0123B3A8FC9FD00087C28003C2AF605964AB00D122EE1C56038A8463388A584
8DFD44C1546965723A6497CBC847376BBC9081E8C2C431D32A19CDB5E706A291
4EC8CF118850EADC3BC816CD8904124D4F0C95DF2902E5C7B416609AB5C808D9
5229CEE8B4B661091C6BD4B3056F27D0B34439B6D3E5ACCBF3F2177FFE2E42A1
83FC6E38AACE6FF4989451CDF8CA1C8CC9717F741D28E757E361CF2816AAFECF
F22DDE620142B89D2DB92029F23F62689F2E1809FB3DA132AB6C5367D012514B
7489FCFD59FCC6685CAB581588CFE46CE7F875D371B5F75E2F1BC37534F05C1C
F94563CD5FE8E3EE46CA12B533AD713F8D50C53D95B489599443D342DA572918
46EEF677D1B88EF3EE1BA20C0BD3445E9F1384AD7C487CA413C486C95FED1000
38814926A1BC8B9CD3C6073F80096255FACDEA9C2F50B38E9FEE14053A2788D9
8BC49EF4098B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters-Italic
%!PS-AdobeFont-1.0: Fourier-Math-Letters-Italic 001.004
%%CreationDate: Sat Oct 30 16:49:00 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters-Italic) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 96 /lscript put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -249 825 751} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D440EF
6A6F1325CEC03C3A3F20FBB1DD06C21761D70838D1E83592E85E284B4270E83F
629BC6D3971271C950F0BBBEADF671311AF5411D45ED8085300D8E64F313462F
D04E2C3161217FEF562725FC5DC27438784EC45E8F533487F0B4622BD496D97F
F162ECFD0A3F379AD617BE859FAD42B9260E56747BEDB156FE844C8F7CB9A067
E940C5658DE86647C65CBC0C2C08D79C09F07B00890641C302576D48FCAF0EAE
D328445325AAAFFD80EB6CB76F52E22BF04678BA9FACA7B18B2CD01D95FEDAFC
DDB9720701A17522D74D4DFAF4F00E2534412DA11B60161DC23E13B16B54F7AA
8730C5C0AE9AC9EB6903540CCECAF0312A0E4E4D61402D7A7B1775D9591A2EB5
F284D11E9DE117B588FE6BFCC3C2965579F10F096E83A53FF334587BD24B0D3E
5783469281D7C7514BF9448059616084FBC5B2B797D96E7C7511784C9E290A48
088817AEE321C6C7E1D103680C8B1876C552361F3F6C2AE4090C120A08BAD8E3
5942031F8A3E739BD16DFDD228F01C1A01233D1B633BB37C6F1CCAB278FE8F8D
F6EF0C61C428EDBA1DDC254EF1F6109EEBB032CBC33DE7E1BEF1F4FF672C2D12
F48EE105D9B48C8FBC0C8567FDE51492E87EAB9362A1F3E3670416B0BC64480D
C4BE1681D05E3DD8B659CC8643CBADC4D1D4CF4190F7DE32271EB1DF06C7BEF6
013ECBB9CEC865C2FC9620587044E26D17216D2F99571097694DE10F548890AB
ADEA3D9EC11501D1F492837CF931D1CF1A7EC8388DA83793B661D8057DD36586
43EA5A9CF4C7437416A31C5CDA9FE54518A2EBEF1508E16AB5B944840D233F12
9DC0F470BFFCEA640B6CFBFF6FA5585C8E369D3B09C6A08A8ECA9D2481245BB4
CBD54FF3DCE252AA7F9820491384089BE8305D95BF3D75687FCBE284E3D9AAB3
77DDC466A669A15614813CCF13D5DACCEFC0044612E8DA68D16BD1CD44FAC85B
77D4EC8E51FAB737E69A5BF653B8E6BFDCFE4783C4DF6C06F669EED412848DB1
C2BFD00F84455918F6F7B0125E9AD62A8D51C0DB9E7286A8A2312B11DE4D3837
1E5D5E2FBDDB3EE8368C068CA768739C7B57E06AA6F782FD61F4CD0197B54D1F
72CC1A4B453BD8AD2A79E22212442BE535E01859C46C6A00E00209115AE10C86
D4134C8C541EE0C702938B25160E5A62B76BA761C38714A62CA5BA035C5B8BBD
EAA179648C41D4F6477AC75D7275831735AB24C6944A71D97332B5C2775851E9
6006A6604ED6429695CF8D4986849D9B31036E93C48FB693ECC593299A09D377
AC9DCC0396B2F1FA8ABD3B94B89311E353E7BF370F2CC662E1B6B61D8AEF337B
E4D6FBD832273999367D05A85FE31B5F2C0387456A37B80A3000B907D78BF114
6556892940F1A66A7FA4B442A843A915E7D3D27B2DD42D72D01CFE2A664E0632
E56F8C1D694079CB51AB44F3DF083D15E6BE7076BB0BE11B36F8E4D8E14950D5
A13146B2FE9CA799E8F5D938B6A1A2D12857FE53146A346ED4829FDA3718A154
35BECB6C91A2A41F9C4C4CA66E9CD469993C5BC48C2ABD45F298
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Extension
%!PS-AdobeFont-1.0: Fourier-Math-Extension 001.004
%%CreationDate: Fri Dec 30 13:47:17 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Extension) readonly def
/FamilyName (Fourier-Math-Extension) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Medium) readonly def
end readonly def
/FontName /Fourier-Math-Extension def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 122 /bracehtipdownleft put
dup 123 /bracehtipdownright put
dup 124 /bracehtipupleft put
dup 125 /bracehtipupright put
dup 179 /parenleftBig put
dup 180 /parenrightBig put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-32 -2960 6882 848} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F6FC13F6
FEDF4B792B4382E1B8DD4D6B66F7698F4BD76CD673F74E2FFCF34A3EACBD4F3C
C6A935F0007CEC07779EB225FD87A32485FCF1300A8B140DF1FB601966E239B5
C97A004A4205CCDACFFC747D59C0AB62F98C58566E92367FF923A747FDE768F2
BC84EA22988D2856786B73BD956D58D8E1DE05E3B73798BA7BAE21AED1D65A51
3E8B275C326E384F909CDD630CC3B3D3A664C6BB0A43AF3EF5B681E8178A68F4
18925BF7234218D39BD091D0B241B2FB96B24A302B7A2C3648C0BEBA299B1422
B2A246F4DFA5A9BA475E9963604E772769D365D898BAE237E423E657C64198D6
C50DC4E23676D32A80D9FCC26CB7EE5882A7CD7515BB142652043EFE62BF1296
C02D6A59757DAE8B7ABECD31FB3886ECFE4C018918AA771BEE2AD4BE22C921A4
50F44C875C97D243655B17F1C1C4E4C34EF324C3BBBBE230EC9D5EC568CA45C1
F0B2F8760CDD8F8CC7A19377F15ECE29BAC75C965984E9E5C246419CAF94119D
CD396DA99EBBDCD62D4493A16F9D040A24BA632716AA2CF3E8527A11E08CD983
08E109D5F610523FC1A976251F5BDB7C51EC9559890B4E838A6B7AD783AB3E61
36A0752C1C9586BED6F91B6B2C31BB5EF83E54C2E1A67785891B6161DDC05BAF
0C11DF8939F72ED4C1CFD293B9BBE5D7BEB0835695972221F1D1BD1D197E1A3E
BF18CEA3EE0C05151741C87469C417F1331BA729FF30D6CA8AD4B25572C230F9
2E250FF7F828D5FDC41884B337483286EC37AA4563EA5AD6F28E5227E8EC3AF1
6038BEA4475B0CD36D674A344E85B43BA3F22462B286886B2FD9B2FFFE1A996E
B0F752104862EFB24394FA6D39DCDA3FB70D93E95FE58AC0B21D109900667349
5B2D43FDF1E4EE5CE4F0CA7062C6BC568A897DFD9185BD17E8FB9AFB68659C86
242E30DE8D95EB6A9E9CB42398895F1F95D5F191D6FF2E3E78E08934514C342F
45D4DD4D84EA7F29299E3CAB95D642A2CD023A1848E1121734CA2E7AB11BBED9
E4D18AA5240AFE1BD43AA1CEFBCBA72DCEBCFC2F4C267D7D1A41F79C9222CDE4
78323FC84497174F388FDA403B899415F3729C825E7F753741CDC08D66FEC318
F4ACE1FBDAAD85BB8A31F20281267275F4AB88DC02E3050D55F714F441B73409
F339E67C954A941B31FEC074901D3343ED1D4D28A327FF490B7B73D35660B642
D8363B07D1BE14B5BC2CC9CF4D1A6EE39F275660D02196D153D0C3E90BE448CA
847EE7127504933763B9D32FB20D616574EFE595D315417C9352D58104DC13B7
A3460EA982F490F9E132F2E222E0B47F1439F5FF20D50DA787CC554B8D83BCFF
44EE3B67C34D1FA552407C97835DFDAB70FC4391E1B7EFF49CAD949F76135529
18939F79C3659CDED77678CDCEB9F81E60DCA591B5EB2D8C6A12300C088CC449
A1B3BE274F1F3E515D7AD3A53C30EC2EAC74A6162936B372F35642F099637138
55DE5D4C697C74A5CFDC99B5F903268ED71607AB03E869A6E96FB2711D2048E8
0C1AB2DC42DD11E591E91F581F8C9F2CF1096383CAF45C16115EF08D996954C7
1E00DBC219B2C123276AB966700ADF9B47D827B82BB5541C28A91C525205A76A
EAAB74DB7BBE835F6E8B9268B6760C941544F1E0C45F6EA5A8C41B594E58F214
CBD46CE9E9D10F47000482EBA4B32F93C10DF87F671A5426E64468012098A851
FAC0685F7AE6A6EFDD0CA64AA917A6A48119E8D8EFF12121E6B543F5DF552BBE
5BE65D20E1864E86B4B44739388555AD3D728A093A747F7D335EEC5A9D765416
FF51B86F4A43CD2D9331B1BA6FAF3FAE0C9A98F10329FEB56EF8CC851C551074
32D1473CC3C5FD31A14BA1B2AA661ECCCB77BAB1E882C97B9E647A3FEBFFCDE4
42426AD42BBF0CB1F4352AEAF13ABF87A46D17
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: XYBTIP-Medium
%!PS-AdobeFont-1.0: XYBTIP-Medium 001.389
%%Title: XYBTIP-Medium
%Version: 001.389
%%CreationDate: Sat Oct 5 21:14:32 2013
%%Creator: Kristoffer Rose,,,
%Copyright: Font converted to Type 1 by mf2pt1, written by Scott Pakin.
% Generated by FontForge 20110222 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /XYBTIP-Medium def
/FontBBox {-543 -543 543 543 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (001.389) readonly def
/Notice (Font converted to Type 1 by mf2pt1, written by Scott Pakin.) readonly def
/FullName (XYBTIP) readonly def
/FamilyName (XYBTIP) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 35 /d35 put
dup 37 /d37 put
dup 39 /d39 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE373DCBE8503A9C1BDDCDE3976B9A
FF31FADC784CD99E8D913C26819A4962BC428320D924CB0D4BE15E2EA33CD98F
3A3090D3A2B1C56F2D8E679576FAF3FC1A79261690287D7B9444B1B4E36B6E78
13E34916336239067A606618EB045356D480135F7C325841F7B5598118DE9F10
DC40B14F98881CE9249D25473504F621ACEEFEEC415938B11B1EA0DB33CD14DD
BF0F9224FBD2D8BDC80385967061093CBA04EF9F2CC7611612A7B40A88C5F557
0EA7B75CAEE65197D76E2EAFF968FAFF7C1105A090C077A7C79DDAEA9DFB06FB
D5FCEB8E0AD1BE960FAF302828BD4FCBDF6D83C15C670BA0C633C68B75B8C6A2
18BEDF073A57F5212819DB38E30D9BA47521ABEBEAF35446353D5BFBD13F0FF3
5104C7E7B27F68240654E12DB59447C153C755A51AC2D8A60523ACBB0BBACF9A
605174A4E65D6320DB4B0B413999F0F132D46F188C11F9F61722C49616A2AA90
84ED72650D8EE114E75CDF80D98B0F86081110D9220DCEECAAD9E18B33AFB8C0
C81E5B7BEFD8BD70FB1666E4B0E60D68C76ABB487E9DF06F8C0854B04230C3A1
871520619EF605B65CD8EBCD33ED99BFD9AE77A5EF384F862E7F74302C0CD0B5
3D0CD2785C3898A10E23575E442E7F4E27F18C2C3EF3335AFBDCECFC630C93D2
42DB0D82F5E710E8B72F7A2C7A334BC02F848C8C796EB9B19E98407FFEC9DB8E
546FF05F254C41D701ACCD0EF56387CED4F569385655BBDC7794C5C087B2B26A
FDB1B5E75BACF169128194A648C42049D69A59FEF5447DE9D8D4DBE27460F06E
683DBC80CE204B1AB46B9CABA4D166D9721ADCC309AA5997B95BB0BC623F91A3
15024E6F218991959D281E104E7C93298D654D337CCEE6F26760A0DE5B7481B7
0C1E686727C7EF358E139EF8E33EFD761BD63CE9A7EFC7947291853C3AD8B9DB
42F1E81C42B108CF2879B9C5A99C82169FCEC9797911D43EE78A66B7BBDED558
FF3381F35658D25C3FCB9C4FF8D41AA291064E9EFDD63F79701AD21387D8F889
AA4D4BE9A7B77CCEFC6B5B563D78A08C52BA94D852C2993D9235708FAFE02144
E77CDB6F08D2E3773FD8B7D529F4B45382F3E6E6B701E1BA31FBF29C71674E10
94242E4486024D3F85ED159ABD20D9DF06296084EEFD45273DC14FF5F14377D7
5506A96D881AD3F6D51DD868484A5DE3B0D8C18390B2A2FC7F7449D981043EB8
B55EE334C43027A8AC3EAA504105262ACBBE5AE88661FD1B3271FBD5FAF64989
03C8C790205A24CD4ABDFE7FF0F8627D44C9FE708212EA9105B035660B8EEE4A
82CF630DA9E1B6F0EE1833E6EF8B6C6D64FBF5A8C5CBFD0C90535249C1B22F93
087A83DB67552D8894B1ADCD0E6BBB8BB098F261397DE4C57B6DFD5761150BFE
9E36365D0136B519C62FBC9B73AB192FCA1C60DB323B350C702BB9EEA5B79DE0
4D9B18DC063A86016673EFC96D59457696B9A5DE9ECE8C05B6C173F356AC3B43
9B20B1A6AAC3488CAE62EA0A010526D41BE9A45EE220FA266C644D063507FD92
1F96CAE76E3A6962A390C403A317D332FB6B2F9830E678A4046C8055E0A8CECD
FF28370B5B8B98000C8DDB8357D5F057D6C2EB040587D85F3F1116A297AC9FB2
A9C09CA4A26F4FD17563F5554E0F4AAED1691908E757FD3C147E5E59CF7C91D7
FB41F1F8E0A965D338D140FCD78D1EE8FA8000DFFD35C2A3DBAA1848AB88EBBE
C03310DF30EADB374B9DFA808BDF3D1411C87DB839C96F0A77BC1454A0D2CAF1
0B61C79EE93F1EBC52FF979B1125074C9DF3D0B098462BB93E6D21BD15DB685F
9503BE922BF390D86D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: XYATIP-Medium
%!PS-AdobeFont-1.0: XYATIP-Medium 001.389
%%Title: XYATIP-Medium
%Version: 001.389
%%CreationDate: Sat Oct 5 21:14:27 2013
%%Creator: Kristoffer Rose,,,
%Copyright: Font converted to Type 1 by mf2pt1, written by Scott Pakin.
% Generated by FontForge 20110222 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /XYATIP-Medium def
/FontBBox {-543 -543 543 543 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (001.389) readonly def
/Notice (Font converted to Type 1 by mf2pt1, written by Scott Pakin.) readonly def
/FullName (XYATIP) readonly def
/FamilyName (XYATIP) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 35 /d35 put
dup 37 /d37 put
dup 39 /d39 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE373DCBE8503A9C1BDDCDE3976B9A
FF31FADC784CD99E8D913C26819A4962BC428320D924CB0D4BE15E2EA33CD98F
3A3090D3A2B1C56F2D8E679576FAF3FC1A79261690287D7B9444B1B4E36B6E78
13E34916336239067A606618EB045356D480135F7C325841F7B5598118DE9F10
DC40B14F98881CE9249D25473504F621ACEEFEEC415938B11B1EA0DB33CD14DD
BF0F9224FBD2D8BDC80385967061093CBA04EF9F2CC7611612A7B40A88C5F557
0EA7B75CAEE65197D76E2EAFF968FAFF7C1105A090C077A7C79DDAEA9DFB06FB
D5FCEB8E0AD1BE960FAF302828BD4FCBDF6D83C15C670BA0C633C1848C9E83EB
8BC4A503624130F2632568342D516987E84088FEC7D823F0719B19EAC26EF619
6C4DEA4F593450E106FD3234BE1307FB0D93D305C419CAED51F295549FDBA441
5EA8D965CFF4CC48C0567333129B1781CDD7473FE9F231006E32433B94B6E4EE
7A6B010DE67402C3861DB9FFC57EFC00625BB337DCA4D54887DDC159E071059C
795D614DC19F65DAB6AA9F3C1649BD0AA3F1A941820229AED5887D23EFC80D9F
7CE6C0A60CB4E3B5DCFF3671C7722C2E115303C0B37028E584F11A091773C86F
DC03F457EC33A987A275963D9316AF4302101DC71ABC50904C23B5540F5EB3E4
4659FEBFDA7118DEA4F5653BBE4E09A43F8D6BB9AAB31D72EF202E1990E00763
63E5FC804136E6500EA8E454C1B45ABE01C39F83B614F3665FD18A53F2A8D88C
5DC2703EF4A5E6BD6CD87BA32F6ABCB96A75D769B74E0E0361FE54966AA0FA78
456937DFFFDA2ED807FF3CEEBA4D8635BC8BB3C9826C42D5A61AFB527E2346FB
9A0DEB66787284C96B6BD54110ABEDC6F5CB25496F2D7D7FF103602DBC2134A6
AD96357B2ED001DD02FB7DB2E80CDEC6F52F15548C2AB8430AC8907D7B3A9C9F
0B13907073BA09B096642F3E4CCC309B07D8EFE86A2949F304B999960E621450
C64D3DFBCFDE020F7511AD9145E0762B75EAE1ECC42E60CA8E05E9B0B9A98473
8B4877E4A4499426BED9C6B86120F28ABC64A2C0F0B9F8348946364AD469E75C
3923B20AA27F071081416DB3F0F9C09137FFB6617F2FC2BB60E3AB70FBF4B6FB
BD728B866307DCA478EC288F33E6EED97FF91EA2A00DA14002E454BEFE44D396
C0F4CACD46D0025426B350AAA724D57D88736C8B93AFA3239BF83BB80BF46372
19A6E21E24FF349C42B4F9426844965DC4EC23F23D806650592ADB01686BC090
4CE7F5C5D1DEBFA341FAEA32B772B7FD7110CC40DF0EB51BA0C52C0B0106C8C0
7E88F9F8706078AB0AD3D3EEFBABC07D909846D4131564F8EBC0A938B789F8D7
EF92C30CAA95D2DBC97B0009F0521F1C25B5CDCB953A4443AFA8C91DB30EF39F
30D29236762A53EA15ED2A691916C44FBCD4BB2F492AAF24A7F6CE71AC23B4B9
4ECE2724E9171988591D6374071603F3E8B4A01FABB30169D079DF1C3F38A62F
BEDB6CD837264D8FD12E97986CC732760739932108FA27E4CF07F0B7C3D2F60D
4962EE3355EB934959AAAF81260FD275C3BA022A42AD35C5B3769598402A0F83
99F58BBE1207BB92E73E6FF36A7983A197F76478E863178D8136F47B89FC375A
110D8CD7E1F03EEB71843C6DF62F3C6DD38A2847908BA3880BE69340A778BBEE
DAAFAC5B9F1CE4970F865A120BDBA4E6EAB2B82E4ED475C601B80CF3B9EDCD76
D865FB0FC7EA564EF02982F2C39F940B32D3BB74B44A6131AE0269B8D83EA7DC
B011FDB0360BCC2BBF2D9252E1B54BB5E92587253180DC2EDBDC37651A003E5D
A7DA387F5A27E2AD94B2B3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: fourier-orns
%!PS-AdobeFont-1.0: fourier-orns %%CreationDate: Sun Nov 17 13:24:04 2019
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (000.001) readonly def
/Notice (\(C\) 2004,GUTENBERG) readonly def
/FamilyName (fourier-orns) readonly def
/FullName (fourier-orns) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Regular) readonly def
end readonly def
/FontName /fourier-orns def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 34 /beware put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000000 0 0 0.0010000000 0 0 ] readonly def
/FontBBox {0 -249 6428 977} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA3140A8A4C9F386
12495A6338DDAA084A46BB317BFBE8CCE3013A703B40F8CC6F564E77222A2AA6
45E14C9708A301F6768C4E0636CDB9EEDF721814B5DA591A498F6CC5A2F8A555
991C0B6FAA133EAB2A3F8E014E03FFEEBC26618666C174C7A6C21071D9D8665F
643EB8C344FC6EBBD91238A12DD034C4B73F6564BDDDC24B51C57159ABB39740
2F004B35223E7F65463B9772233CA3618739B0259A4F6D9AE2BC7CC63F115F31
D7598D70EF03F4467E20F76C0809A88B61251B5716B7BC1165846525F370689F
AC516E0BCFD3403D153B408820898B91CB0872F1A5187C1F8A3AB51611F9E27E
96734A11F628956FFA7F8D3DCB5D5FA35281704ADFED55A95730D1E9D32A8784
6356592CF741B08CFF32EEE67729B55D5AD35FE34E27507152F8F87C7FC28CBF
6DD5294E7A8D98A41C15E8E0330B5069D63A0056D66C6D83C49CC2143FDBDDBA
C4F831C15183EC9DD40CE983F95B4608162DC57A4492469AABE2560529390A7C
7A51F993E6EDA94B24BBBBABE04E46945CD48B276A6943BB18AD0AC663665BD9
C36C16684AE251D8105F14A4452343C63949EA3BB7EC87AEA3372B79BC118851
ABA0FB8A63E7E27D2B8E7C3C4C8E101C8B393FAE7F75103FD74A6F3C857AEAC6
5ADAD72C47102879DD9AD554BEDAB8A6254C71305B3949595FE17AAA5F551614
5AEDA129F32921747D9348F4DAB0E83A38884F18FF6E07A55C169FFED3C89A03
D84BBAB9C1D0E839ED727F763E1220B1C12BD2CFB2CEB4EFBD46E459E75D8904
B08C259999D20A92D972DAC0F158BB42FF02CB82C9FDC3EF6E26067973309758
18ED225F3DCA3C045DE3569B1FD9AE12E70A40343C7AE637D2A0671AA06881D0
B13A22CF3FD9B880B366CF377DFF4CFD62CC85031F225389F65283321D211FCD
A0D8C3F3148295B173244EAAE3CD80B0B133A1A4614732C69D5B1C36B43C4E8B
622289EF6405417DBB2D756DAFCDDF71ED7EE361B21198D525B58738AED0A4B1
8DB21BAE1C2C959D24E35ACF19AA0428411CF32B1A8DF7684A58D5A61F29D108
BDAA369902FBE694CBFAA9A6A43A61D651048AC7681A496EA0C3DEF778C37080
42ABAE0FE59269570A833E3D0B7FFA27824FE2897013DF23B383E39712D02151
B8F7F6B0E45E7A048E8F86584A0FEA4FFA4E230AE401CBEB5E485C555A41FA7B
703E0E0D7424120B9664FF6F578B37A63264BA6D308EF6130A2799E79A7AA23C
B6B7175CE49F0688B3F79EA3DBC898217EEBB2C883E3DA1AEDE8301A537ED683
7CE7A6C3DDB7746B3EF08067D301F57250F93AA633E6A97C631773A42B0D57EF
0E62F599D76936247EE945007524BA4F8C50956ADCEBDFD16C0A2F3F019C13AD
674A18523248F9C6C8E76C14177410534E2F51794D81E5439B5D3A76DCA8CEFA
CC74D8008B7852E13013B74ECC828D47B9A8B2EC17DF57003B19B66B8DE3EB86
39D40F2BF606F04FF1F612FB14AC2CFAF8546FCFDF7958F4C598536320992DE0
D4A01590C5A162CC9AD07C4801AF4AE64B8C18F257C1C2F1D1E26E2CD82BB68F
FB96E1121AE159353CF776031126FA1BD9FE8ABAE22FF36016F53C0F276BBFB6
40564F7CE21A19E94C54544E901241CBD2564F0238FA8D2A4574B9A291FD87A6
9D8556E472DD963F7CC64F4B638F7B24CBEBE49D59CF267AE8EDD60C66
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /circlecopyrt put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D47BE08ED6CE96278050BA67680A3B973613647
A93FAEC756FC253B3693FA2D6491B276EF45751EFB306961788E7C15297A5822
AFC5A2DABD0DBBFF0BE135267EA6B9D1B4E4760ED14895FFE1F8C3F564830001
EFA901B8442BD2D98561BAB9A0FD939E0F856E4D2EB04A9A4496704109B8A84C
EA06AB0999427B3B1BE776004AE906D0F22159C051D88CF573A0255D99B56781
CF326CD11919AA40B096769CD6D0ADF3ACEC7957621084ACF21AF1F265416628
86B67FCBDE9370D4F5C6F5CC67EBB0A2727E074090DBCA459AFA1A4778AED4C9
AE5400775223E684BFCB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.001
%%Title: wasy10
%Version: 001.001
%%CreationDate: Wed Jan 15 15:09:25 2020
%%Creator: Michael Sharpe
%Copyright: Glyph unchanged from version 2.0 were copied from the
%Copyright: wasy-ps fonts, copyright (c) 1998 by Taco Hoekwater.
%Copyright: Glyphs that are new or changed are copyright (c) 2019--2020
%Copyright: by Michael Sharpe using mftrace as the starting point.
% Generated by FontForge 20190801 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /wasy10 def
/FontBBox {-23 -1667 1720 752 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Glyph unchanged from version 2.0 were copied from the wasy-ps fonts, copyright \050c\051 1998 by Taco Hoekwater. \012Glyphs that are new or changed are copyright \050c\051 2019--2020 by Michael Sharpe using mftrace as the starting point. ) readonly def
% Glyph unchanged from version 2.0 were copied from the wasy-ps fonts, copyright (c) 1998 by Taco Hoekwater.
% Glyphs that are new or changed are copyright (c) 2019--2020 by Michael Sharpe using mftrace as the starting point.
/FullName (wasy10) readonly def
/FamilyName (wasy) readonly def
/Weight (Regular) readonly def
/FSType 0 def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /Euro put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE30585F628C5960F4BA7A0E78D80B
EA23A0384400281199F7528220D2F21D031A35321A044226094B6ED6DB52413E
0BC02D4EAA6BB6C3D02F5D5E4983DFAE1209911A8DDC998656E07B4EEAEF13DE
50FAB8A7D9346FDBBBF1EAF791BE7E3B4BBA8D381C5C32DCB4436D5834A17B60
26188D4C558BC1ED012EA8DED9DF22A29EAE8673C46D0CFF7F5EB4080882EF91
2FF746A93A7B15CFC25341DED2CC7041F5D2FFCE348F17C86124EDBD259F3D7A
A299B032DF19B1C8C6EF386EE2B3655A09E37996670E1878051E7B77C73B0250
EFA23B7014FD87F1D8F38F07EC2ACAF188606F724E436A3D5B001AF774C0BBB2
3B48D49C1D59D3FB5768719967A1086B0C955D8E90D69C2C18593A7EF0CE7A9B
A82AFC9604DDF32B61B5220CEA41E570BF9F9BF018876411E06807D45AEBD705
125665794E0C88DFCBBC57A43A8F7747B4A09C3941DCC35D91F9E238DEE5F56F
4D6E6032FC16C459482F4E32286E48F60DA55F2B5B1B86F3C934052B798067D0
254ECF5D61EDF99B3A6D86DB44265F4545D81B7A002D62C32A22D311876DC636
1CDE6DEFB5164BC751EAFF248E4D6CAB3FCA084FF2565070A0129CAA66035751
8A94EC45A9827D8398C0CAA83B3D4B032C75896D666161D5FB3F6C8F13B692A8
ED5B89F4654956A01FCF6295D4EFF3C7269DD46C0D06362CF44C087C14B0F984
A6CC760D2E439EFC1EFCE34DAAE9C0B017F709E18F64E7762F92A2723CD0728E
11ADE47D1A7AD0B9B75624B220C906D34D1FDB479E312B51DA3721CEF9576B50
F00CE281CC5AC9CA854C150636E2A4BBF26C0CB72843B7E8978C6923B20DF073
7D15F9069ED5C3CE92F4C2AB437BCEAC02473A6E023091F026B8AF8FDE54045D
BA32607DAB9EBE64BB05DDA506E90BDC38D7A94015DBF365B3F727D14E612395
6675298F00239CAB003959FE119E726D4B10B063CE62B1E648DDE9E995ADE22B
AED269BC6481FAC38C9D66CBFB5FA8CC6840F18F49FCA60F6E8D93CD2FE35A98
CB61C80B2F424A61789815DA278578DE6755411E3159852E8A76A43932A489B5
A8C48972C22CBE66C9DAA6EC7F3C70760DC4384C7D5E552E41C9969113FE9B41
4C792F58801331862721CC920D6060DB63D12BBDDDE58C2B1CFC0D1CFCB7EADF
9D0AB31059712DFECD2A616D70DD0EE5E53514B474FFAA0B184BB85B618303E7
DA826C2B7D1CBAFD1645C06F9A00BC1FF1222F94937A87EE04C4684B0A121DA3
E26BD7272D71E93BF96376F11C750E53E6AE7E9915809A21512969ED830C6395
1395B0E6790CE19FF4896550A040821442A2EA1CD3AC4DC9A0B90419882F45C0
598E040B77E600BEC9FF9AC627A92638BDC359317492BA4BAB8B1F2CC6A5AFBF
E81F9CE51A6BA62D5CE57EFC9607693B47AFE3EA791B97EF8B73C7C234FCDFC9
70357D3E9B4D8D8F475BC7448C1B25929B019FDED75169DE66513CCC23D034A2
7EBF6E2D44E394667EF8D57924D4D1F874B89EDA39976CAB94B3D58EA6551D10
3F4DF6E795D36E5C468ACD33C7B78CDCAD0B29ED5145EF4D2CCC59706188D10C
712973EABECD7A3FF3EAA14767ACB0551E39C831ED5452E0088D4F1A826548B9
726B84209947D4BB01DCA1E29FD478879E7F845E833C3AD2E29A83260A53F64C
BD36FC42E14A07FAFEC1B14C54A53A5E2D852263D358E675B62F9E30FDDD384A
56440941B4C437D4418A7898667D111FD994ED002E2E9C6DD47FE9D3C7F1D6A8
E5040A87A39A0509FFE4884E63CA3C0434F07185D8026E5B93B8A50AF015C796
033F05AEC49175ADDD337E2C1E9CFE41838999960D874AE74B8EA0FA61DA9497
58AFFB7A98DBB36FF2693F4EA3B83C6331BE4677D1F5D8150F9A66002C4E37E8
4DD52CEDD41ED9B724D09B3E562CD93B50414D87AD378B7D0523536041FE0EC3
3A5C2343D7DD645BF1A70B6AF3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CACDD72C726E008744
F8383B33D234761DEA8497856BDA04DD10EEE7043BEB84C62D7B46A094EB3699
CDB1A9406679EAE94F1F933DE269C7AC15CFFBE660FC1E5A4758EA23EF14001D
4F6FC6FB27FFFD254B345C3C32CD7F70DAF4D48F9516794CA4BAF0827AB41309
AD1CAE4940E093970991AD11C5A830E17A51EE27F727EBBD0411E3DB595FEF8C
2501BDAF0235FDDC02683334FF508FD924B568EAF96E7344A56505D616F0F3B2
0F3DBCE8698ABD5DFCCE5B0C401638E89429249EF111164E99A03A35925BA293
6AFB113BA123BC143E5E15BAF95BE6873697845E184DDDB6760709182967543D
7D8C43583DFE4D3F80627CFCD3E8BE1D7656C518666BA45A27055C773B16ECB6
511E2A60E0B185CFB488D118D74E8BF9637F0AC7E1C1D9184DACA06F816B12B6
478FC7ED76D24953253E0B2337E08EF790CA36DC8904E2CA4560AC14AD4E54AF
2FF89B894540D6E0A9F764AF34F4177CD3A56B5A2FA274AA4CEBF07EE63D15C1
3C7ADB781EE1DC4172B238CECB15B80F50EC2065DA9EC95D30D39DB92D17AF71
76E6FA7F2E68B3BBB010086EBBB075A72D0624084021887EB5284FAF73E72CCB
C15C7AECF1CB17416CF2BBD8BA7F054894F66DE1613AEFDF6D2C77AC001102A0
94A99CE647DF4C4C6CE1A7277FC848B39681531D3F8FECD47FF1EDD5B3CF4321
2B32FE804A11F6D76801BD5F2DC59354F4AA227006F97D796A5982FFAB3B471F
1187318913D940B5B7DAD2172DF1816D46A9FFAF8C077A7B727E6E7B9E427C94
EA7EACB0E431EB4276D6883579A7ED352738AD7E57BD11B89D67C4A1BCCDF08D
F33908E6BED58BE4EF071A9F8F8639682E6E7F043BCF250FC5195E02D81FD4EF
1EC67464E6D2CE3F3F75742A06D66C9E72D7CFFC32061D63D174B1A293460051
DA59D0708FB5E6F400469FE2227D126AA8317DA3CC28FAE21C4D4A60AE55C853
71FC39C8BCA5DCCFA45FB25783332BA57551CD78D79C802ED86245B0AEF9EE79
FE4AD5DDBC8AC5E400BC65AA5098854899BDB132956B7B058EBA3281B1DA0261
F7DDFCCCE244EF6E8C8D251E849321FE2DC55C542923370614897C30B247E1C1
91AF30B9E16ECFE5819E4FB0F6F593CEAABC2C85B02B37A8FF505BE1FAEA0CF0
B00E35685EC3AA0E606A89C7E6362AA22FEDA49B3BD0B0B7F71EA793E0C15C2F
92202040F95E97DD9B83E8797F8BBC480FA9D314650F4A4D5E2B983D5ADDEF8B
291C386143E6FECDE716FC5117135342E68D09CD435E392A6A2823657831DB12
A5D815080FE0674008A0AD0FF9FED8154DE4A72A6314E54395BBF726F0909442
73E1C2F5FF05D498C124BF0A962E290E4F1586B625B53B7C5CDAF36399A49A6F
4FF5BC5F996904E36279CAB17562096C255C63987A621C04C7860A4DA6654A84
BBFC50F15A9C99C0EFE948C58576081F34410F29457C455A6A32B6A302235825
1E86CC0CD96FC5E7819E44DE8716A2EA5394485C96847D1128DFB53BB2E2FC1A
2E9C72A308BA02F330BAFF42FCB3579CB6CFB106386C07DA3375D1408E68585A
B5F218ABF992520938055DECBFEBB843D296E77612FD181EE78688186743DB0A
6F90ADEAF899B491DC15C17FCB6BA97BDCA72C7652A89C04F95623C5108D98F8
6CC15D58F72275B9BB9ACBB87F796D86AA5E2CC5ED343F1BD91519C333540AC4
1D8A6728E403BD8C4E416B5B54D16105E69CE7288CC0E69FAC766B996FDA5D25
8A6A2295E900D7205D45EA4698F5482ABDDBCC456226080703D8749FC9F705D0
FE0F50B11CFEDA10526CD295555248E4454E88BE455017CC1C18813D74FC9F68
C106D0A804AE3DA845EA4A33511B47CC671E07791446F9E9E350A8AA982FBDA4
14A0648449BF594E3789E35E8AB95B06B81BDE74A62031812FD8660143EC63ED
EB70D4F7E864F897FEC13F6F4F920D5C808A5C99F19898AD5D77B66F45D98DD8
5AEBF789C9A3EDF62F8D188F20809FF23AC4B95AC1256B7DCCA0D750080FC0DB
D2A65BA72074BD65666143963E60399FE0041E7E81C90C34CD64453CB6087D65
343CA79088451E0260FEF706074446CE2FC494D2B867BF1D21A728BDD2FB6294
8EECDF3FCC1E589098EFFD75DA0DD648A764BEC82508222F0EE3CD323B86F7C0
22A92E7F1118BBCFE386CB2E941DFCE60C71E20321F93E7B747BD0F6FE9D645B
05468179AC6BA24261224F728990E3DC28EA61B8403198354DC5C16A97FDFD3D
AC5A6BF5F852DBF73EDA1BFCBC00ECC3D0E9E5FC8771BA038D736FF8C79D2C98
83689CF3026E90AA685A766C1433139D75F5892DE53E6410EB7F10A75017F34F
B850F26A5FE9015B470881549A38F403B6D8D0296ED00DF564E3B93CE18C17D7
8EB5D08ABD958E11F2DA633FBA91D9F208AD872216C209F9AB5B594958908F54
85DAB874D73B37437BD5441005321C699AC0A7A4DB5B62B1A74B7DB4EC2B55EC
21B9DFD06AE7C7DF31797A6F4C3F2D7E78999E218C70ABAA0E4B4D3DA15BFE8B
2061655520CFEFC456872DCFEA9A23DEC2DF8D68589B541EE02DB78D99D66F0F
50B55270E344F95B464D1201CF14357CBDA0443347D3BE9D35C97869D590777F
0DB3914B4BC224F6CB127AAC70CF96C0F72E9717B692652ACDE3A03E80133E2D
2432EE94D79A84C2050088FB77D2B5F5C2C8B487DB19775CBA4110CBD2BF6E12
CA1387AC2CACF43C47BFBFACE209705DAB52C47A089656CE15382390F1073F1B
61EB1502D64929BFB106181AC4AE735247443C7CA02789340D72F80E132FDD56
63895FA7EF605075EE1F68B6C6D9F7389E48968EC723C6ECED524A95C0C39E20
7FED583B1F84BD428DC3C92F99CB8EADEC06C2B70F128D6A4DABDFCB2969304C
409F6C5B15158C970A38634C54961BA2CABA9FBD2EA3D5A9AFB56EB18DD3BE91
59E567D1112B25F7E8138058B5A0E0963D0CD6B8FC4A449627C32643342AA024
9A6BB3824E930EA733E735A5E7C441BE9B41E54758ECDD0650073776D1EFE941
5A19E78E69505DD83EA858CDC79F9742058E8BBCBE9E9408EC43F9471B4B6678
A13A0DBB058C293BB4A1D1D9161B43C8C6741D805FE0D16382E94590CFF1D46F
A7AC9373D28BBE3339D7CF54F8E35FB2A3EAE667C941D0C4879D925B30EEF427
D26BA6B6754C2BB959F9270F77DDBC2BEB20710F727786A512E806CAB0779389
3F4B84A13F11425D158C40DEB7E0C94CAF9E0E605ABD0F73C1DDC59FE67B0EB8
7709727629C1AAD24FC217718DAB725672FF8DF4BFF1A7B0EC1A5ADF9E9E06F2
8A90E019C2FD3BA07154D1F83D82454A83734429C4C210A5B8BE0779DF12CAB0
53F3A82E4CAF7B184A429747ABA09AC81B6CA6306D03DB9E68B80534BF712A9B
07EDE637D6BC79BD595632905CD8B42F008E2C896BB88B0A8F0D83768FFFE676
5000BCE9A1A628102304F2F59A51809E106E6065F59E7F3AF5AFFEA1138F01FB
4737B89D23A93F4E276F3A8F40FC28A8CA329F6CC3FF5B108844F0C3C8435972
36A903ED359C0C635B437AEC8C29ACEC6A570C974DEDC6612AB65C1CD41798C7
6408CFEE4F016755D8DCE17FB1C4101D92E78065FD64BC056B6C6E7140733E56
DC109D35D454521E715BEC8F8C5BF6FC0B379F31D79095F8A0E1B6EF5562BF5C
5ABF51315628026C9B262C5BAF4AE40855E052CE13A6777AA3826435CFB2CD64
CDB2EFD7E802FE062ADAA2BFCD12B76397D56023EEDC6A1D084930052FCEEF97
E42F06062A929AC8B6930AE574EF0D3C96BFF9009628397E82CE6C2C40771F14
75B92B1E413DDEC854682E2E0788313E46C18AF378060BB39E499346B2E37CB7
56EB629FDD35736EA7255D81F62E47AADCB32BF788F7953F3E9AF473A7FB099D
3D6349F4F52DE538CCDFCF4BF223465975965843EE8BC8621836C0823239DA0D
CFF5FA6F6EE3FEB641B33A0B25A5ACCD0185ED8679A9B64DAD461652E3B2D6B3
8E8C5A324D31B9E9DA0FE7470CACB03E1B344E3B299B49B5A65638BC3F8B5152
FD312C2339F566E12D0783A7BEF609DC613AE1FE33E73AC45E7402C711D4CC35
763C2B61D2B29F0CE6897801B20AB2905B986C113C338E7B485BDA3DB4A41A1F
A667E7328E735DB9743B83CCC1B4DC56DBD9E080DE6ED387CBEFE56A4BA18D1A
F32C0D836DF5EC9AF8F12A09BE6393730E9182953C575C363FAE272E7701F26F
B3BD6EFBE783A69ADED472E963C4FB594F46A4DFD58143D7E93FD4820B84C8FB
725763040082383A5C8E404E5CF6BDD0638402D602A9644C80857D68F63A8FE0
29244AF2BC2908169D105E4738D64D62C7E4B3E06EA6FBE9F3002E56D88C433C
5CA5E618D61E60E2252303D8BACE0102ACA9C88F882E29F7513574BEA00E20AA
D0147814BF27FAF12A603AA2DF749FA1C113C5ADCC3340C7BC2658AAD8BDB89D
ADA5541D85FE964AAFB8B3A886423D1095B3676EE853A7D7754583639A1BCD32
5C78530B4675B669723240EF425736274052F301446379D93A84E87D22B2B8E4
8DD25F9E3F60F10CAB24A584DCC97AA2A1D7463ED69CAF062F90D3FDB1BB581F
F57DDBFF4A170C35D1CB9986F46EBEF1B1FEC4867AFCC7CF8CFBFB16FBEDE6EF
A3364E0CAA21E75E4E4259D1B6F287E72FF971C3640FE57CC518EF03DD0A4632
BBD84EEEF97F87C59290CBD78B9126A2243036B85F30B1D15B78C53B26867AAA
C218F7D297158E0BF374472B5C499E29AEB79355F8F3705152418BA6F4F7DE78
99B7C34A62A593FC18CF46CF304AFD3B91179FD995E5023DF38C6954DA65F162
A105CD4E367FAE47F5A0448E9D5A39141AAF70D238A20704AEF8CD37058F1CC0
903D76CEFB2BCA14A8319F302BA4F4C5709F6D806CFFCFC4E6EFA07A8A6DA352
4C88A9E3D1FAB6CD1B21B744CD55A2E1DAE2DE84BEB87CFB60A8DF8CF7B4AF6B
C2076434721451DC687839C5A8A658C9B86656C5F1FA3166ADDB5CB20693B029
E6942CC123CA62478537949FFAFFC5B4D2D81883A21AFCC8EC389FACADA30893
D24365A1D19CAA6D91259BDBFE8580A7EF7997464E57BE1B7BFB1475E6D22D97
C40FF5EA8280325F2A21B065600DBB29116D90EA1754B0F0A92C00DC7C725D0B
33DBB24BA46385F53FD965998C2C3FE8B27F5559C0B2FE8FF49E753051038033
03CD3CE2799F40F541FF2DC295AE9F340D5E4700AD99E61704AE2558AFA79FE6
AD8F3C7E4B3D8D636C58654C0D32CF8FBB2C8A2EDB25F39494094E398D816EE7
3DC17331388226B5C052756DB6D6B122BAB6D1FE57C3E9B70C39DF8F351E1509
B8BD6276ADADE8BAC470FFC12FB17F5FA640732510AC23802A8039FD3BE978BD
8B129AEF4A850A8F551940448715CC39D48C67443C4C5AF52902A5B6843748AC
5EC0B4DC2BA0FFFB8D48AF134F684D275FEF10D34491C8A266218502336A2F95
97E461E5A2EF03007432A6D7971824A4B1833CA14AB91B1027FDA86CF65CDAC3
4AC084B6A91223F1D52116B1697DCE7759EF0C24CE0D3D63D6A249814E1F8EFC
7B1F9E2579D68D3E938C8C15B9712494B0F84FC470E07AD608D1092A6928536D
D4FA06D1D00E822201763A1B45E8AECB82A793AD55F1D27FC5F16DF76A5DD43F
D062A50C0E368AF9ED2ED65CE2F5B15F8A61F20E2DCAECAF285C3FBF1A53CB33
8FE331B44E83D0F523312D89212889A061EAFD87E0B808857F24A3FF4883488D
476D4E7CF43DE8F3300A8A8B95375633D7D1377C0D013CCE0631663E230D0A9A
6DE669A80F6AB050CB3E74C7CE0C6918C7EF5B7A7233F62EE27B88F9818F791A
70802250D294379B638B8652673D451B160EA1277E25966075AB8D36BC6DD378
460E71C37928BA15AF41660910B48FAB5422C5A56CB6DF8524FD750AA124D171
C22295884677488AADC0E322925621D30115B6F54E3B94EDA0A940DA3730FA73
9F117C063DA2B21F5E97F57D5097A0915AD56CDE8071BA6DB857FAE57CF0E7EE
B0C14B3245C688EFD4D944DD8BBD09258A14A05A7CBCF9D74B72CB30302C9DFD
C77AF97A4F4A20164C48032236E5C8B8A9DDBFF8AAF0B89A98202A2087CC39A4
D98AE7F80E84757AEF97576EC7FC91FDB4F0A407E679147A7476DAE2FC80A9A1
DB2E339944CA758059FA024562C44C451D338E7E47A2EB2A05C799FD07482666
C61F054D8C429DA7974739AE99002116A593A43A2556A0D4E648240D872C0BE6
1544C2326BD2EDE7655C5BFD32FA1257A3E128E4B775E36C219531226ED166AF
E8AE202EEC55EDD26171F394D0A1E4D3E727B168BD31695A11CC691CE9632E97
B54E9B4DEF9D348B8C38A1B75DD571F6C2E21795634D70CDBF7D3D9E9D6B6704
310B269840592EA7361A8DB1AA2D11DEAA3714E2044F38542BBC5DB5A1080BA7
38D65EEBA914A5158CD4849962B1841F3E2E12BB91CB428012077754BA0AE6C3
8D5C2B084C2F596AC1A28D9AC50950FE544F4E52D1446648C6033025ADF6FC3A
B68C507C4C5DB9D1ECB790793CA2CC4037BCAD5E6A7BE320021EC11018CF238C
F8C95B02202F950CEB157992DC7BC4F5D033F3201D2A494B4A60C4B6AA0931F1
F17FE0D882FB8C6330A30AFEA399BB2E9B04862B4D2709B24E10F69A1D69BD45
5268F74187293D953BD70AF44BB32F9C2F750FC0A519E41A017ABBD99764199F
43CBA720C342540277D26CC3EB0E9F22433159BD52E079F0C21F4A4BF83492D1
676096F4960460CBB676F5234572A143531F4A3F9C4CEF188D73063F6ACB34A3
6947D272CB99AB85167527333748AC553712A3AE147AEBDDBADE226432BFD941
B3351F128C0632BB310B4D67130AD5D81C62943378B3975A654B28AF0A42BAB4
4E62225ABB4BA02B72FBDB9209162C84B62ABF7760B6EB83F15AF366220D2B6B
8877F7D65B1E3D3133C7200962256B85AA8408E2274F811DD9C51C35BBD4C1D7
EF7B8FE9F8697B41DEED474CE34BF7BD4F2E7C3CCABAAE0F68AE093CF80C19A7
3DE9B59D53B7BE5CB0BD793CC19807E21A6FE1A22EDC1BCC641E9CC8B89441B6
74DE079EE97EAD789E542253C0F9C07BDCC02101AFF3B90397E5EF69920365F3
21990C9F7124E291CB27BF223D7358A6A00E5AEFF157A69EF65E4111CBB13CC3
99AC152FA12A6FE2E4797BF8C2D534E669A162E422811A9046778ECB41B65240
C636DB8B2B892C457338A018B965C3EBB8EBB3586AEF5F4A2EF3158A09F3E26A
AC09689487F5D27B234163E66B9B5A0C8D10A6C3C2DDCF5DA974B234E6232BC7
98A170066E992C02C69EC148AF4245BFD547734D938D1804FDDF8F652C970D1F
53B0BC5F23DF3CB3392FF62B0E1E0C191B44E57647DC06D8D63F5802B8487616
6C8D2029E64605DF0564329854A9219F16E9BE170AD87D86CBA0A22A251ED1BE
CB87935862069141B1C0E6DDB815FD3D35E39A0EF6E7C69F1C0CE4000F3EC50C
9819A7490E99D75F55E041452C09A870D0F0889F77AA9337C25522EC3ABD5036
FF737A0D361D6FE24A5A456A11331C2FD7513F32F05EC5AF89F2DD165F4A03CD
56C00B890203ED6C1FC893294F84690F26999D6C3B175DF8D62C40F32C788ED1
DAD91DEA1C59E9A14E6A2AE2304D109A3ADDD70CB109D8018C4E198457CD2573
F5FC6D51A86C4610D4902351FADCEB23F38AB010CE0D596D2265A7C5C62972F1
B174C52E211A92B71D6DCE3774B6BE30324BC56D2C9200C5AA06D9ED1DA53DAC
2D1E354118C14F4D27F1890A7406C6FB1DB2166BBCC8585426A2E0B94F45A55A
7C6494195C06F09AD55960D1149905264A3BC46BB34D6EBB96B5021481D8908F
EC9886F99EB1FF3D51063F0B293D12E5797D3B3CC1AFCDF3D6D2F4DC26442C92
440B7E5DB06444DD85710693DE51B0D5E04C17D740BA9F13A263FE331CA64E35
DCE8FEF8A5F42473708C0957A97A173020D49598FCCCC6146E7B4808ACC2B41B
ED193C8AB345EB9B17B14B881DB3A7B975EA4762354A57CBA88A723EA32D237E
6ED8D23C3D92508FEF1D22D80C2CA4ADFCD3F5368420EF654A19018C5811D11D
1658CC398B89A932CF6586BF3E5D501EBA9E2DF0413547027AD40E05A24078F8
FA919F23A2F2CF48FF0CA96215E57C50D5DAABBC7C845487B8EDB0C04BBAA442
ADE2BB44DCE8622607B2BA3AAF130034D981AAF6D1583ED0BC88F4DEEFF7DB37
31D582786431FD05E330D0ACD7BD544B9A78FA0A1EDEC79949F5337EF82F1C41
61165E574298E63B56D20FECC97D620A208FBB70137448A679D75CB0F5716D80
4BE5590ADB5C73ABB97DDE04945D49836B6EA21CFAFA3C5603B4A299A174873D
6D8B5FC17038F55983732D56BED2F6CFC5344C1CB5971687E391AFCBC02B5E65
6614F3BBB07477C84311925B87D967F33FCF0AE6ABA98FCC778535767AC5DEBF
ADAD66E571CC0653F0C344DD52EBCA506B56B21C94594116E0ED70D4542350EC
3C94C649C19E6AF261C900070138E8C73B0B87D0FA405B2F289EDAC0A495CB3A
C168FB5811093E2C416E64196AAAFAD6A4E78DAE9264B058D39A0682C8252EAA
882042B8022157417E938F4D2320282D5A05E8056E1725B0D92691052F60B397
8F8A08429A2EED1F7F2086377AFD7EB570524209330F952E0666AF9AB3E83B51
837E57FCE14F0F474779B1B105F609F2D5D2420AEA3FA457A2B5292867A13234
E97B0AA1C672E2023E1F52279AE364E7FAFDDA92802CA43279E02760F34CF923
79560417F3D0E6CA78E8E3871417BA3CB379727B8F72CD960E0A227BCC8194EB
5809FF71BEE68AC17E42721DA4937B83C6F9803CB930CB22A9C04C96CD130C3C
83AC082C2C9BDB67AB6426322A046ABB565E2EC6364DF6E218EE5C8C232E9B1C
B309FCC36A7F2EFC8585C9272079E1DDC9F5E1BB3521EAF0A65F51A4A78FC2B5
0A224E057E2C203CA65BC233823665085CA1895F2FAAB9D83E1A457316D96EA9
4927D7A893731B17E2476F99BC485D1CC9167C7F909DCEF162734BC085913F0F
02C8B60F4D7C40D7B712298B4CFB83F121196637A87358C6C1A929FF87ED7468
BA8331768CE24E293DAF89CB20359AA3E136CE9BF1FB3D3775DA9B982227E3C3
E853E2FEAB14642F6EE9391A64AD9C7AB786BB027602CC252BACE70B526E18BD
B4EAEC427757048AEE68E5C4E64CBA520A027E216E1D84AF7649C3FA87917010
50A1DB9BCCD0CC4ABF16396A586610F633944D5267D9FFC192568EE43A9632DD
C321504EFA0E51ACAE7F5CFB6E2DFF264280ADF80961D71E2CA93C19B45F4865
BE3E3889CB14818E19DE76FDC3CD9831BE459BCEED8D80A4BA78B4262676EC35
197A7BA67F9C42F07C38BA3E68376992183BF6B996A877CFF424F9A7525B2562
91CA3F52F8702FA3D5FB28A8A1103B073569C89F1833DED4FAD150B44C3DD4E2
33478800B706C6445B955B0DE398A0FD2A3D2090A746FBD485BAEC75587B797B
F749EA844B4BF05EBAC592B8FCE8FC585E146B9CFE6C566DE91910F18DA30AD1
BC97D92B75E2802B6764B6E0CA20D59274928D5481ABD1C1D18CA5C5DCCFB814
A935A34B1FC9BCEA550E86185D7276A04C9BC4D8DB9EA0959B288EB4E436170B
AAC1542094E8A78937BC7CC677985B71F6282A8A17FD7CABE7F841CE9CE41F9D
586E0FBDB6E79358A8CE7B00A2E8B33E4404291E17DE655749E26E60949B0459
DA43B1A2A5CF912298968FBA2BF9FAF909E5D946231081D823FDE8A137F3FB56
AEE0A27C9A77B1647311C2A4AF759481F319AA50F05759E92FD3CD82346B95C1
D9042C749D715C965FCB65E4A4C5514F6DB7581D97491823882B73913843D925
C11D46E75E8AE7CFFE59F18F689842FE797BA4473720F58F80DCDDC04356ECBF
3317A2B5866BF2DF4275BA9A84C6A6255B044301093085443E2438288BAED26B
9D870CFCD99983A485C989B65370CC2FBC6057E28EE3348C0A9B4C146E164A73
A94366ABE12AB189072BEBB498D8F7098BC76CA1F25E0DD69315EE00BAC69265
CF4D86D91CAA01D15F539FC31CA7707EDED071F8FAF12394DF7EE2575E926B66
32224BE4537DA0FA7E03FD9353EAA3604E86F4C180EAA5FDB588D2612B015623
C9D9BD348C9B523591390D5AB4BF0E141D474CC7D5B0C78F21C722C0318582EF
AEAE9D9B03B2BD10E06159250B165F1EB6E4C1FF39E2804DBF9F6E2DB3441084
AA36C860609A5DEC2B5353AB2F02311548A337B7D1EE596E98104060043017B3
ED923F661E1071BA8483F29699EFB0CAB810D6DB590C626E61257B9CA29149E6
1DF4C75ADA3F1A5811E92B41EE3495E6BC048E44755B21D513D091BDA5AA5E6E
A005E5251150D4ADAFF7B26EF4C31958D58F53AAAF796B9FFA2AB4B6665DCB01
1595FB83586DACB628F3C6FE847954D298DCADB9D19C7961635089F5ED726D42
502E67A2A96662DF0BB982DE2C8C985456765A2E398720823182FFD95A51744B
DD8BBC5FF6F6B4E6B176F4413F9B9FA48D4DA0747B9A864EB1F6512A32C11F93
E76FCC5C42CAE9F1CE123DC8A3301485FD03CAED4D962218383EBED208AA9A84
2E441070DE2A827B641CD1B3B8E5EA269932442EDAB4BCA4BB45C49782EB6C88
467D82474484ED76327F50A5C7935303AD6D3FD56A5142B2E6999A3E906F6F84
386A0DC2B658C26AD39134D41DFD72E8AC2DD9A19DAB8DDA1DFDE5EB127CF6FE
C0A285D354207EB12980F70646162157C99B48A864EA103C3C80C4674698836D
50D265A34DAE1DDF8E867B6C8F778E8EFDCD06640CCB4B10E9E14AE1E34F34BC
CDD5EAC17A078C2205226026543291A5941FF5A10E985C06CAA73CB2E240110A
2FD0D45CA4B588B72720FFD143B221A5E9CC27B516C81FBF3D4D3ED20D7262AB
1F0677B49D02AA08ABFA2BAB2A1AD8F4364B8C7A630F0D3DF021BE0D84FF7712
1C250F9B6C1E2599554DA1578FBCB49FD0B1A273C1DFA62F55D62CB37E99A989
CA6ADCFEE6A980304B1300222A02DF36EF40F5C3D55A169EBE06A8E462A9334D
8DCF4CB7FC03E6135209E596C5727ED81446B5F93C238C29ACA64E3053703332
B1164850BD5128456B6AA311D5E9443C005CEF516B4535D34E950BEE93FCCD46
CD6181C42659C20EF060DF100588A5792495B722A652A14D28937B31239CF3A1
66C3C3B81C63F41A271DACCCC742D048E391D95453A1FA4D74B7CBD601429453
64ED2E391F08E5F4AA217A5B8C1AB7CF41D060A5C6E75A63F139A8BF47C4A047
E253DEFFF62C2B25E731770A883D5D0AD260F335E7F39CDA32AB6FEC1B5DCED2
94E8B18C7B8C412F4F99C58A198E425D06959A7011E842505F3BD5D216453C6A
9CF46174834EAF468188F85935EAF72CFA8252FF94FB12377860BEBE7D6133E5
7F76C474F06F684E18B5311403AA3A4643B5FAF6AB9A7BA2C24E1142CA1F9075
A77FF054297188F25F79DB414EF33945502AA4AD0CFE9A46FE995C0FEF9B8FD4
5B0085040DB56A316EBFA80D111FF6BB8C19EA47FF59E3D7134971D4D2D74077
076E1A98720B490F30D6124895565CD121B83862F77DC388167AFBB4B3132196
F8F476030C01C6D753284B57EF7E58F7B02743BCC8CB2022653A7782B50E2A43
CE36626AAEBB91209D00A11F505BA7170F75843B5C12C6EEFAE55D8C92413106
681D124DE7E4C85213255B58811DE1D8B7D1071528F4F8926EB5755EE74191A2
63568D6F1B90356C4C9FBD2E9A827CDB53E233A79C4895EDF8644CD5D9F01F2B
87C2BCEB9B05C3BFD2CAD440FA7AA367955FD349C3CCE8B508793BA9DEE5FCB1
5A1D517CF2721443019E70534CDA342B14BE2BB8934B2F6F93AB77DAF483C9F8
3F4965A0071252884AECD2F5E20A7C00FF38CE19598F89C5DF7E3134EBE5B398
4E8FF845CA03234AD49B9764494C29E0F192AED1FE697BB38187081121DADFA7
7977FD935DD52FEA157078FD3DE4E6F5E4B18D8E52CA247669F6392B86CB84AB
1225A2B813E2A1EADC398AAEE5697501FCF73EF3CE0C1736DCE0651BC5889E16
C206FC306E671A4F418FE20528D6B9C3A06D1EF1BE20651434792FEEA798BE81
193A97EAD2323771F7A3AB41BE31F50CF7B86083FE2DFB965A61D7320109962C
F596FD49BA85A5EADE775EC595BE7D3C89326EEF6EAB66DA9979CA0BFD48587D
6F7560E28AF0A4533C7354C85EEF3059F8E4BC40BA7DA097019D0697C28F349C
42E6E09DE9509721C683A7EE679BF67347D16B9C431D61219278BEEFE2633DDE
6A94D70B4324B6143FA5D4B15E5C0714659BE1E3F6B3C95F99C856D4D240E2EA
767CFBD1D90A82EEFE32B7E49346DD403BFE127340C9D148609AC80C3396BE86
082C0953C598A01FEED959932273B2EA177C96CA135BAA2236F84EA255DBCEDD
7AA9DD5AE1044880D04A826622DA9E2148C86C5B946E21D0F5954F244D365B74
02294953A573DD4E1025AF7AEB09204BCEC83697718935444F9736E0E9199398
E14834BF8900C6D45399D185231DA4E9FFE66A1DA38F17FDDC1A25905EFC11A1
52F71DC4B81F43101155C63897173A4732D1402B8183D60D9B4F60C431A35760
7468868492EC25726617393F40676CA76BD865A11F5E530234E56CC6382C91EF
B6671CDEFE57F71804DDB51FE720B16BC9FA49CABF39201BF95FC7197DAFBF5D
E4D0637913EE5C29D55D9FA528CA71EDF2CADFE62C3225FA6E393C55EC983D8D
F8465A3132D1B30ACC69EB036B3BFEB3F21A12F89228B2298288C43C179312DF
037473065B503CFA6F892AF2BE36244C993E7BAEF5E0C236401C2E9D739C5770
5B098053748FF1ADF62916E7E33D5E05965456D7BF8D816CF3F139C6238D4691
0539801393C4A3F63B533DE2ACE9D26C2BC9D1878EEE969998D186076AB0A6B4
C905B2BF5B9FD1817A7869EBA1B7CBDE80A62F77CC05FCB34613B9DD870FED8B
D7D43F33BBF0FB0D9F6D17EECFFDCB75DA4C7ACFFD9C16129F82CA34251C99D7
9DC5F2BD840E733E664CD26055E8C35A91CE7EB136FA13B24F447537EE80C43A
6B22A56CED39E51F586B73527FF24B531283100A7477F05928B7EA8A00B2A371
DC24410EC7DA18B924E38BDF618177382DFF49098917E040B096BB175316E6E2
ECB78F95EF6E1C8A6D3AD35FD5385C6B588563850206DADD2547FE7AE4142B4D
6CBFBE76C875B5810A472811ED42BBD6D1FA7BA2B603FB6F28D64C3B58990427
5BC5CA56F19E724FC44F0F99E759791C1E93D6C8958554B4F5A964B3581AF7AA
A8C44296FF0D996CC2560DE06AED173A390003DE472E51A17BD76D04978EF48A
ADC31DA5E16868A62BB57941317D83421014AA4485B8CCD2D8D841EFA6AEA65D
FD4708D636254820A2798F30F82330C8BBDB4A1880D12BB35C3EE9C2840D5122
014F979641ED5C7A82A63D212B18CBCA0560DF356CB51EDC58EC97F4217FD3DC
31A06A29C46AE4E22EB712E71092C3610F00FDC91ECA890A19C6087BA9C06220
6C0879F2410C4CE3FAF919C09DA4322F66657F6CD1B58388F719465EC31B18FC
7EED3D08C3E85E341FE6290863459D33FA6ED06123F841B08B605B4450C33FCC
8A4C68E36F2FC23D41A814672986F158BA34063A45F78995B7EF8C45158B1095
16A62321973D48DE0636C22838FFA940F519AB7ECAAFBA5121304EA3541EECC9
0566C955A757FBBCEE85DB14E1580586135E4E6DFA7096B34B261E535FDD3230
027D241525AFD67DA82834CD9D9A3DC761F7B7257A37BAE36255665F7E155A9B
373AD447E4152A85F2743058119698110842E688A1442F67BD7B3F8FDBF98FC4
55BCF83FCD7E350CB7E0592A5D8EA32910F5C5ED629D88FFE6535835141267E6
AB5BDD0FF7230F42B9C63677284B98C12A3B71E62CA67C1F4C1DF8F587CADBCB
ED4CBA46909C6789F56C7C4D85B0DD96F6BDEE19382B6210B3C9F236320BEA6A
576915723E686D04773129A5A1F9DCF8F3A1C9D524D1240167A40D3173BEFCE5
DE8DC01DC3FA1D7DF80A981367A67B52FCB26C26FD7730A3E098F598CF822D15
4EEB17C4DC70F452F5050359C2D0A36F4D6844D72A018489BC6F7C387C9689FB
4E9309DB9B23C1740821FFADBEE2163B8FEA68C1D37E58904EC0E8E1D6D12F20
FEF7AB03684463039F40B5ECD0CF7A7125DF414F7320F210EB72BDD0383FDE52
BF232382DC6E96195EA1F47F9D7743837B5871141A424A95D9B8C5BB9BF32130
1D2BA6F7518F0D0A0AF552F8DFABF8514548EE2B97130EBEB924DDF4F12BC576
65733B611857D20DABF28C15BA55380E9E374F5B16B51E219A118FB7B675D48D
9F8579392C2F96766897493D8D66F6AEB6AE1EF5A2EA5BC7B8CF60614403CFB6
527B36E81E898FC267FC99060A0E95DC82EF399565BCD68581C5E9C1A26D52E6
0688F5D00E25CE19502EE3B93AACDE61532929F87094610462A79D6AC8BA6B60
74BD148AC28A1BADF1DF46A176D319A57A0E1F06A6919FA03FADFFD13468F6BC
8E52AF4A6674A48AE46B65BC1421DD6D27BE192119249BE6B6D9C9309A263AD0
785D378CDA109BCB869BE46DF8DEA2F6BD26515F79936B78B2C34C7CF9F89C39
2268537208039C99BF4DF39C29E429C8F7A6BF6FF6C67C0AA39E667B7C1FFB3A
95710A9961F5566804A3BCCB669878FEC7AFB90D0591997F8E36904B0A327FE2
92387F43552C15770C063B2EA6771103776A72A5A9A5748718F095B39836516D
1224EAE7679E59F669CF6FF2BC1AF2069ED6B3AFB2B279D472F55847F383C8B3
15D5E3B672FA32BD9868B3628BAE892D71973843A3BD007E32EB68960ABA15B4
0BC23CB9CE7C85A8E8BFE035F0E6C367C5F472CE97CC9E9AF4429BF5C66C72A6
D00FA70FCB6943192180FAC55F0C1ED9BF051CC97A2DCF66F157992AC37A6F35
AE03C3BCEFCC80BCF80F3BD213174ECD0101BD746987F6DA435EDE25D475679A
3E7FE445641241A4E65B2F6FAB17205657DBE0804659BA032FC731572B94E41B
A598D8AFE62766AA9FEEBE811B045511906758425A263BEFEA553543D6768806
30C2BA5CC24AC574B7CD7CBA0D794EF0E9A25B311A75FC0D6F3F14C46BFE9CB1
8F7FF97A63A1071C7C0F910DB8AEE84ECDE21648F065A97BF500AB9D3772ACC1
05AF7C0438C92D3E0DB27085239D0D8633E169A2490FDBCAC953467A6B787701
682A1AD1C3DD5FA75E8F5E590F725CFFE5EF21284DA85404D6CE293470FE93DC
A60CD99BF2C43F1D963C065D7961A3E21F32C582AAD947DEADB9A3CDDE110B3B
A9511864914D0E21D06D3BF6D31805E2FF76AA973BB36D7589D630B24BAC3295
5224503C48FAFACC108DB2AB7F6C899F652C342A764815824AF3593BAD12B862
FA685F094F84FE2EBFF1FD30030749BBF96A9746E6FA6A14C17FC29B4328A6AB
072C132E9459D974A27FDE36A48A81AF4CD8F9619E71A4C6DEE974BB7B0CF7AC
73ABE547EFCDCB739DB315F11E976ABA2ADA9053276993E05C1EA395C84F320F
D6686945B13AEC1E989401DB93247AEFEA2FB67A2463747D3F87EF5F108BB01B
1D7A29043F5D6DDD1C072B3726A6C97CD780FD19BAA16EEB2EBE17DE132F4109
D955F9E53F04141372DE6706057786E1CEC80DBF1B226349E02A797C34A59227
7B5BCB840F4A4069F321211E9581897E780D4308507C312654ECB78089609E35
2BEC86296142BFDF57EDA11AB19286C6CDE5AF0909480BA86C746C2BDCAB8D1D
71C944052A5FD9697FB149B682C8469B44097262449839175496950D1060E690
0E6E82B60AAF48B52AB6DB38A54195A927BA5ADB3F80277327A74A2A370AF93B
D22DB10CF479D07FD851FFFF5F502EF32491FB6CE289548F32C7E17FE407C0BF
3C505B078632C2B96DAA009FB0F824C97EFA339A6ED9F2A7372E48BE5A3B5A3B
0D51C908CE0C5A3A520199FFCE7FF5061DC173BC08607623BDC7591F24547B34
0C2B984C04CE34683E7228A7F9D2E9EA8A135104D9B8BF0B59EC259DEE7170D9
31F7ECF2E8708E629AE6548A4323D92D6B77DE3FBFBCED6E6E44BFC0FE3DD5E3
7236DE461A69AB2B69FAB971165E7954CB156DBD2607EB4B4B3365EC14B925DD
F19BA7F7180E31422A74B33D8AC26C77B712EC72A08BA367419E2001CB39B879
061A328E0AB996E805E57B9D89290905740D05EE994E7F775205D7608E587700
CC0720C58DC217B9F25FC896143CF4D485EB20E0D2EA43F6800B313138589132
1F089F5EE69D64978EB6057A526BEA40FEE7785B941DE03580A427D3D15DEA25
EE5A5F7234F4EDEE39204E67244B8770F399FDFEB032DC0B38759FBBCCA0DB5D
347BA455F1E5E078A7E4EC69C1033CAFADB3C916B90DDE6EDA3FCFFE4715D59E
BE94B97A229F8C537FCE63D8CC5A9B3DEEC5B700ECEAB326C0DC2E6CDBF0AC50
8629CF15B86A5B59E353126D2A24CE028FD0144A202D43FAF88CCDD752EE3BB6
BC5884D29450D42DA6EA3613002B70331E8909DE27CFEE84EACACD099AFE1E5B
C0628711E3B4D1A12A2A2B11A3F20442FC7B802CA5BD9417BC34CD64F3EDDF6E
4E9EAEF60ECC845685B81F8AA1D4C4D723B1EC4F9985D82A7FC218FD9CAED73D
CC5466EC654D228AD8237CF8D9F959CFA300AA023349BBBFB9725AB9BEE4C668
40789071DAE8FE500094BC05949315B4EA0A47D8CC49963B8E8274950547E5BF
15721ABEE13C8926FA26BF06A9666BD55EBE0FBBDF8752946AEA9BCF1B648D30
32C8E333267EA90E7DB5BF5030E77D331330A5B558D2E8753034998A1973A68E
BBB49A96E8658F6DDA2F96BD0D925C4E4E9EB6DEAA3D7A5B878FF067A9C03659
1B41C7A0543CDFD92E58E11A9A577E74C2496DF477B40E5DAC8F8B4D69330F49
9B2AEEA20AC26A314E9465EC25C282A561C6ECE0F4EB3E0376BE13C76AE72163
107739552A4C6BE721582A64B84A19EF9E14CA89A7C6EA39FB36E0940F2C885A
C885D385438E5B2F158636758AB6FBF6B5421E65B8E9BA15E3EB9FACCFFA34F7
DA6A9DCEF7BD393DD2A4EE045CCB1225370B70B016BCD81123A0D11B93E4E508
0B5C7F7326A79E3BF88D07056ACC0B1F0E2E2BF8615B71D33C324BEF22FCA559
09AEA91B9464B857C46C95DC09A3F16582DF08AEE5AA4373424B5588B426F59E
8643E49CF3CBF13D1E045E074A96718E1F4F52FBD71208EF504FC6382F3798D4
0C87D6EF906B40BBD704F2040526FA839297274141A2041757FA9B4C3782BD13
762409E5CC8634F37DB9BCC3FEC0EAF6781669C031DFAA680EEF571A9B3BBC00
2E4F54A415CECB0327290BD87C783C1816EABCCEEBB0056A38A7F0BCADF2BD8F
40FDD5AC8955FAD391C8B5AF1147BE7A79098381EE18ADFECA1B9572E358924B
0DE357C94F4B48F8C8581116973288A0533C4479FDC2E963E73E5D70BFE3D995
62137F794BCF241DB4DB3043153B20468F592B2F771039EEC2C9FB74E002A2FE
36B07F78CE5FBCF618B986F4A11B938EF4DD6696704AF8B46078AA82B3879BA5
F9C6EE4711E5EA6A27930B2176EFF78740BCDBF4AFC7977618CE66364A95F310
D1844F48FE7722FEA924B836322B9BFE8C9AFB9ACB2BCDDC0690294CEF88EF26
5518A92D42656A82C926F117184E661FACD2A7AF8B4132C502A4862AF0F2C8F0
0FBDB45A7C50D88F5A443EEF3AFEDA082D9251765C230185754E50C49BA820C7
C7753CD34C76AB214F3D1149B2143B748D33B8ED1FFDDCEF433CF8BE387DA756
D5682AA21AB93C28A51CB84626C98C783FD310BEBF5FD1DF00E681FBAC25089E
3F5F40E9892D0E0F7572053F79182060FA7A86F0D8C32EED23B6F65622AE9E67
15A806F46A2C24362942CFA2AC452F46D1327A1C8D1DA48986EC5871C8D5CFA1
B54C877501C9737045F4372B95E68C2A294333D35BF76CDD48CBBFF2205A8158
81FB345E1713CEE28C5598FE0822BCB4280B7A27C741733BFA3BB7B46BCED80E
5B6DA536DECC15B9DBCCDF452F4A0079268AA28ECB252541B78FBD3984A81B9A
7C112A822C2DCB181B3009A434E87781A3649A9E5DC5A7752F2C49C4F8151698
AD0A42C4A4E578BC7B6047889EE4089E3DE998655EA407803807D5582E1B161E
3B3BC8A2BF95B7E2000FA1E0C40650AF06041D4B402EA155615CA992CC435A16
98AF412565A03C89A40D7282F9B5A67AE6EB1954EBBB93B14EB98C12E0ACA01C
9DBD1E0BB110CCF6C139196741097A9CE51182E021E9A2607B8DB153AD2FA1DF
7520AC84D07CD5BE6D699A1AEFACA43F36498BE6261B5C86701CA4D5E6DAB7A8
4460EB061148D0CDC058CE48C07A861881229770CDBDACF6D433DDCC4465BBFD
9B644E5B6B86398479FCCE6532D84B131393826E3191273305041BA441FEE0A0
DCE2C6306D3463C71EB135544E7C5D000902238144F4EFA9D513E01E5BF1FE3A
9531AFDCC1BDF4269D796CE1B35225D3B247E8FD578A855244450D18EF699D5D
D8F439809C8AE42901A2482B2F11319190A4B51F2DEE7770112CFEEA42B2D1EC
F79BBA995E36B3533D62494E756D9595FE1F2837167509B31D3F57319899A3F3
FBBCF7609D6F9CE95613E9EA28FB705E522BF8FE54638BA7EB273F555E98F68E
2671162827950D7622B3FD916581D5CEDD8825E67515458F50E516315B2A9D52
2948ADFB9787975850EA14886BB90665CD1B7A78B8AEFAEA27B224FA96F103A0
1BE74E036978ED53D4375AB8A5E94AA0FCCD8F0171FAC2CEC72E4A6DF689E9F5
BAE70C87F018C6A0FF602037E45300DC9474A5CE724A0AAD7B89702B626C914F
CAF77CD9A77F375C3201F85A1E68E4386731674C7E3E84BDD36F59B043C054DE
087E88B6EDCC388091DF0C47E1DFD380FECFE89F48A10EFB0A368565F371DA23
FEF24B959C61DFFE81E79987509E323FB4C31B0C30456C7D2FFAC21009056FE1
CC9CC7CFFDB5033ABAFA00A6302B174649F59DE093BD2E16D64E41085D433464
7A07F66A76760460C4D8DE29AF57072AD9D33BDE607063BA56FB041DD3BADB61
BF804B7056BDF7AED24266F678BAFAC8F8A2C0D3D40A01B248DA7FD3B68152BF
73EC6766281DCADDDA93769F78322A07F3F6D0AC7D56AFDBE7B504F4BFFBCA9A
C2F4C4C869044915F51533415E8DEEAC1F2C87EC022CA58B5326A394B2F8B352
218CD651C0C6D077816E6D857F2861E6A96B58A5748A515A1C65E72B636AA027
8A9ACC092341861AD2BEE13876A42C236A4769AD663614023AEF28D8B3AFD7D6
AD2345DAAF66AE1C3AA4A97E1FFA687EE79D251730CCE18210406E238F766E4E
22A91DF2B9F65D18A98A4EC0F0FEAE4D6E82FCA108C76CD13F508059D0670B9F
E398CB2E51B9B32B602718EC8D0E0099C2CA0FE973515C21F9F0A3E56900DABD
9344CD298E9536C4E44C8F06338498AFE4C4197B597EDA37D818336CC1D15FCD
BC0FE9A90E3D3420C9BF87A352B682DAFFF8FAEF3A43027F30CF479341CCACA6
8CE713C8B73FC52D63E3467629DFE1CF62922D08670B0A73A5786D4036670BC3
6D559B1978FCFEDA381D0F14EEFFB124355F635E015660C58C9A64AE9F12AC63
6A463DE3D10EA041A8681B575D480E7F61CBA6FB7FAA9B7F58CA4BE89FB1F9F3
F7D3E3D8F0A8FD9D791C0E17A0FA5E623FFCE30EB9D4EBE88B622A1CE58C5E83
C127399591D43D5710C118716BAAB441367111AEC553D9FCE3B4611F18252813
505AD2EDA5B4A34DFF7E0B388B097B055AD1267DEBB30E2E7DC6CDB93876B1D8
708A893D1477BD375B542B592030D5CD5DD8E0A7C908040C5CC2F3C8FE945B40
14DD687CDCCE808D368A68044404B010CAA3003A2DA99EB133A11C3D175F64AD
F8955EA648B73C1C01084CADDABA5489AB0F8C77FDD53EE85D56ACBE2FB98F65
7234F2BC56C29BC853936BF8CCD3EC9715650BAF4D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (CorrigesTechno.dvi)
@start /Fa 182[65 73[{}1 83.022 /MSAM10 rf /Fb 140[48
3[63 1[102 3[32 50[58 54[{ TeXBase1Encoding ReEncodeFont }5
109.987 /Utopia-Regular rf /Fc 138[32 1[23 3[31 33 1[15
2[16 32 28 1[27 3[28 29[37 35 10[28 1[28 28 28 28 28
28 48[{ TeXBase1Encoding ReEncodeFont }19 53.4661 /Utopia-Regular
rf /Fd 57[44 44 197[{}2 61.1042 /Fourier-Math-Symbols
rf /Fe 135[32 120[{ TeXBase1Encoding ReEncodeFont }1
61.1042 /Utopia-Italic rf /Fg 75[31 31 53[34 34 34 34
122[{}6 76.3801 /Fourier-Math-Extension rf /Fh 216[0
1[0 1[0 35[{}3 83.022 /XYBTIP-Medium rf /Fi 216[0 1[0
1[0 35[{}3 83.022 /XYATIP-Medium rf /Fj 58[42 33[42 1[42
161[{}3 58.049 /Fourier-Math-Symbols rf /Fk 141[19 12[26
101[{ TeXBase1Encoding ReEncodeFont }2 49.6466 /Utopia-Regular
rf /Fl 221[90 34[{}1 76.3802 /fourier-orns rf /Fm 135[30
5[23 3[36 23[37 14[41 3[38 67[{ TeXBase1Encoding ReEncodeFont }6
58.049 /Utopia-Italic rf /Fo 21[31 31 31 44[27 15[27
14[54 35[30 1[31 37 21 27 24 36 37 35 38 56 17 1[17 18
37 32 19 31 37 30 37 32 17[47 2[35 2[21 13[16 3[32 1[32
32 32 32 32 32 1[16 1[16 4[17 36[37 2[{ TeXBase1Encoding ReEncodeFont }
43 61.1042 /Utopia-Regular rf /Fp 139[20 25 23 4[54 7[30
43[31 31 31 31 31 31 31 31 31 31 48[{ TeXBase1Encoding ReEncodeFont }15
58.049 /Utopia-Regular rf /Fq 242[83 13[{}1 83.022 /CMSY10
rf /Fr 205[36 36 49[{ TeXBase1Encoding ReEncodeFont }2
68.7422 /Utopia-Regular rf /Fs 177[58 78[{}1 83.022 /wasy10
rf /Ft 134[36 39 2[47 2[31 2[41 47 7[24 35 1[34 43 43
10[49 2[41 2[47 1[58 4[26 1[54 1[46 58 50 48 7[20 58[{
 TeXBase1Encoding ReEncodeFont }22 76.3802 /Utopia-Italic
rf /Fu 159[44 96[{}1 76.3802 /Fourier-Math-Letters-Italic
rf /Fv 57[55 55 8[55 22[55 1[55 21 55 68[55 55 91[{}9
76.3802 /Fourier-Math-Symbols rf /Fw 4[46 1[46 14[39
39 39 38 4[40 1[40 22[46 8[49 4[34 15[34 14[67 5[38 31
8[78 17[37 39 37 1[38 46 26 33 30 45 46 44 47 70 21 40
21 22 46 40 24 39 46 38 46 40 3[25 1[25 47 3[48 60 47
41 49 1[46 58 60 72 43 50 27 27 1[56 44 46 60 52 49 49
1[30 1[44 1[20 20 40 40 40 40 40 40 40 40 40 40 35 20
30 20 44 1[27 27 21 54 64 3[18 29[47 47 2[{
 TeXBase1Encoding ReEncodeFont }91 76.3802 /Utopia-Regular
rf /Fx 22[40 40 30[48 80[40 1[40 48 28 34 34 46 47 45
49 72 24 2[24 48 41 26 40 46 38 46 42 12[48 1[52 1[50
1[56 6[55 45 48 59 1[52 7[21 43 43 43 43 43 43 43 43
43 43 1[21 6[19 39[{ TeXBase1Encoding ReEncodeFont }46
76.3802 /Utopia-Bold rf /Fy 22[57 57 30[69 80[57 2[69
41 49 48 1[68 64 70 104 34 2[35 2[38 57 67 54 67 60 12[69
3[71 11[85 15[62 62 62 62 9[28 39[{ TeXBase1Encoding ReEncodeFont }28
109.987 /Utopia-Bold rf /Fz 22[47 112[45 4[40 36 2[53
5[27 1[48 1[47 55 45 31[63 67[{ TeXBase1Encoding ReEncodeFont }11
91.6562 /Utopia-Regular rf /FA 22[68 68 81[66 32[80 45
58 51 78 1[76 82 122 37 2[38 80 69 1[68 1[65 1[69 16[79
2[125 77[{ TeXBase1Encoding ReEncodeFont }20 131.985
/Utopia-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -254 -561 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-246 -246 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246
-246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246 -246
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Proportionnalit\351)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (Droites et suites de nombres)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/Count -0/Dest (section.3) cvn/Title (\311tudes de fonctions)
/OUT pdfmark end
 -246
-246 a -246 -246 a
SDict begin [/Count -0/Dest (section.4) cvn/Title (Tableaux d'effectifs et probabilit\351s conditionnelles)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -246 -246
a -246 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin H.S end
 -246 -246 a -246
-246 a
SDict begin 12 H.A end
 -246 -246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray
0 TeXcolorgray 700 166 a FA(M)n(ath\351matiques)30 b(\226)g(P)n(r)m
(emi\350r)m(e)h(technologique)1496 577 y Fz(C)o(orr)q(ig\351s)18
b(des)j(exer)n(cices)-246 937 y
SDict begin H.S end
 -246 937 a -246 937 a
SDict begin 18 H.A end

-246 937 a -246 937 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -246 937 a Fy(T)-10 b(able)22 b(des)h(mati\350r)n
(es)p 0 0 1 TeXcolorrgb -246 1120 a
SDict begin H.S end
 -246 1120 a Fx(1)67
b(P)o(ropor)q(tionnalit\351)472 1120 y
SDict begin 12 H.L end
 472 1120 a 472
1120 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 472 1120 a 0 TeXcolorgray 3631 w Fx(2)p 0 0 1
TeXcolorrgb -246 1293 a
SDict begin H.S end
 -246 1293 a Fx(2)g(D)o(roites)15
b(et)h(suites)g(de)g(nombr)o(es)871 1293 y
SDict begin 12 H.L end
 871 1293 a
871 1293 a
SDict begin [/Subtype /Link/Dest (section.2) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 871 1293 a 0 TeXcolorgray 3232 w Fx(4)p 0 0 1
TeXcolorrgb -246 1466 a
SDict begin H.S end
 -246 1466 a Fx(3)67 b(\311)o(tudes)16
b(de)g(fonctions)563 1466 y
SDict begin 12 H.L end
 563 1466 a 563 1466 a
SDict begin [/Subtype /Link/Dest (section.3) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 563
1466 a 0 TeXcolorgray 3540 w Fx(9)p 0 0 1 TeXcolorrgb
-246 1639 a
SDict begin H.S end
 -246 1639 a Fx(4)67 b(T)-7 b(ableaux)14 b(d)n('effectifs)j
(et)e(probabilit\351s)g(conditionnelles)1654 1639 y
SDict begin 12 H.L end
 1654
1639 a 1654 1639 a
SDict begin [/Subtype /Link/Dest (section.4) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1654 1639 a 0 TeXcolorgray 2406 w
Fx(16)p 0 TeXcolorgray 1930 5895 a Fw(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -246 -246 a 83 x Fy(1)105 b(P)o(r)o(opor)q(tionnalit\351)-246
-54 y
SDict begin H.S end
 -246 -54 a -246 -54 a
SDict begin 12 H.A end
 -246 -54 a -246 -54 a
SDict begin [/View [/XYZ H.V]/Dest (exo.1) cvn /DEST pdfmark end
 -246
-54 a -246 -69 a
SDict begin H.S end
 -246 -69 a -246 -69 a
SDict begin 12 H.A end
 -246 -69 a -246
-69 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -246 -69 a 0 TeXcolorgray 90 x Fx(Ex)o(er)o(cice)14
b(1)p 0 TeXcolorgray 0 TeXcolorgray 147 w Fw(1.)p 0 TeXcolorgray
42 w(On)j(compl\350te)i(un)f(tableau)g(de)f(propor)q(tionnalit\351)i(:)
p 0 TeXcolorgray 0 TeXcolorgray 1425 108 1258 4 v 1425
208 4 100 v 1478 178 a(\311l\350ves)p 2001 208 V 360
w(40)p 2340 208 V 268 w(?)p 2679 208 V 1425 211 1258
4 v 1425 311 4 100 v 1478 281 a(P)n(our)o(centage)p 2001
311 V 144 w(100)p 2340 311 V 219 w(70)p 2679 311 V 1425
314 1258 4 v -38 437 a(Il)e(y)f(a)i(40)10 b Fv(\243)g
Fw(70)g Fv(\245)g Fw(100)18 b Fv(\306)c Fw(28)k(gar)o(\347ons)f(dans)g
(la)h(classe)o(.)-246 471 y
SDict begin H.S end
 -246 471 a -246 471 a
SDict begin 12 H.A end
 -246
471 a -246 471 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -246 471 a 0 TeXcolorgray -141 566 a
Fw(2.)p 0 TeXcolorgray 43 w(On)f(compl\350te)i(un)f(tableau)g(de)f
(propor)q(tionnalit\351)i(:)p 0 TeXcolorgray 0 TeXcolorgray
1425 653 1258 4 v 1425 753 4 100 v 1478 723 a(M)o(ar)q(ins)p
2001 753 V 332 w(1)12 b(760)p 2340 753 V 167 w(1)g(046)p
2679 753 V 1425 756 1258 4 v 1425 856 4 100 v 1478 826
a(P)n(our)o(centage)p 2001 856 V 144 w(100)p 2340 856
V 228 w(?)p 2679 856 V 1425 859 1258 4 v -38 983 a(1)c(046)i
Fv(\243)g Fw(100)g Fv(\245)g Fw(1)e(760)20 b Fv(\274)15
b Fw(59,)8 b(43,)20 b(donc)d(environ)h(59,43)h(\045)e(des)h(mar)q(ins)f
(sont)h(tomb\351s)h(malades)o(.)-38 1147 y Fx(N.B.)f
Fw(On)e(fait)h(le)g(calcul)f(et,)h(seulement)i(apr\350s)o(,)f(on)e
(\351cr)q(it)g(la)h(r\351ponse)g(avec)g(le)f(symbole)h(\045.)g(R)o
(appelons)h(\340)e(cette)i(occasion)e(la)h(signi\002cation)-38
1246 y(de)g(59,43)j(\045)d(:)1604 1373 y(59,)8 b(43)19
b(\045)c Fv(\306)1969 1316 y Fw(59,)8 b(43)p 1969 1353
191 5 v 2003 1430 a(100)2183 1373 y Fv(\306)15 b Fw(0,)8
b(5943.)-38 1595 y(Donc)17 b(dir)o(e)f(que)i(59,43)i(\045)d(des)g(mar)q
(ins)h(sont)g(tomb\351s)g(malades)o(,)h(c)n('est)f(dir)o(e)f(que)g(la)h
(propor)q(tion)f(de)h(malades)g(est)3401 1539 y(59,)8
b(43)p 3401 1576 V 3435 1652 a(100)3601 1595 y(.)-246
1667 y
SDict begin H.S end
 -246 1667 a -246 1667 a
SDict begin 12 H.A end
 -246 1667 a -246 1667
a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -246 1667 a 0 TeXcolorgray -141 1747 a Fw(3.)p 0 TeXcolorgray
43 w(Le)22 b(fait)h(que)f(la)h(bouteille)g(soit)g(titr\351e)g(\340)e
(12)i(\045)f(vol.)h(signi\002e)f(qu)n('elle)h(contient)h(12)e(\045)g(d)
n('alcool)h(pur)-5 b(.)23 b(On)e(compl\350te)j(donc)e(un)g(tableau)h
(de)-38 1847 y(propor)q(tionnalit\351)c(:)p 0 TeXcolorgray
0 TeXcolorgray 1366 1934 1376 4 v 1366 2033 4 100 v 1419
2004 a(V)-5 b(olume)19 b(\(en)f(mL\))p 2060 2033 V 141
w(500)p 2399 2033 V 228 w(?)p 2738 2033 V 1366 2037 1376
4 v 1366 2136 4 100 v 1419 2106 a(P)n(our)o(centage)p
2060 2136 V 262 w(100)p 2399 2136 V 219 w(12)p 2738 2136
V 1366 2140 1376 4 v -38 2263 a(La)f(bouteille)i(contient)g(500)10
b Fv(\243)g Fw(12)g Fv(\245)g Fw(100)19 b Fv(\306)14
b Fw(60)k(mL)g(d)n('alcool)g(pur)-5 b(.)-246 2295 y
SDict begin H.S end
 -246
2295 a -246 2295 a
SDict begin 12 H.A end
 -246 2295 a -246 2295 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -246 2295
a 0 TeXcolorgray -141 2392 a Fw(4.)p 0 TeXcolorgray 43
w(S)n(ur)18 b(100)g(personnes)h(de)e(l)o('entr)o(epr)q(ise)o(,)i(il)f
(y)f(a)g(56)h(hommes)o(.)-38 2506 y(25)g(\045)f(d)n('entr)o(e)h(eux)g
(fument,)h(ce)e(qui)h(r)o(epr\351sente)1566 2689 y(25)10
b Fv(\243)g Fw(56)g Fv(\245)g Fw(100)18 b Fv(\306)d Fw(14)j(personnes)
-38 2871 y(\(on)f(peut)i(bien)e(s\373r)h(fair)o(e)f(un)h(tableau)g(de)f
(propor)q(tionnalit\351)h(pour)g(obtenir)g(cette)g(r\351ponse\).)-38
2985 y(C)o(onclusion)h(:)f(les)g(hommes)h(fumeurs)g(r)o(epr\351sentent)
g(14)f(\045)f(du)g(personnel)i(de)e(l)o('entr)o(epr)q(ise)o(.)-246
3069 y
SDict begin H.S end
 -246 3069 a -246 3069 a
SDict begin 12 H.A end
 -246 3069 a -246 3069
a
SDict begin [/View [/XYZ H.V]/Dest (exo.2) cvn /DEST pdfmark end
 -246 3069 a -246 3087 a
SDict begin H.S end
 -246 3087 a -246 3087 a
SDict begin 12 H.A end
 -246
3087 a -246 3087 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -246 3087 a 0 TeXcolorgray 97 x Fx(Ex)o(er)o(cice)d
(2)p 0 TeXcolorgray 0 TeXcolorgray 147 w Fw(1.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1435 3240 1239 4 v 1435
3340 4 100 v 1488 3310 a(N)n(ombr)o(e)i(de)h(personnes)p
2302 3340 V 145 w(4)p 2526 3340 V 144 w(6)p 2670 3340
V 1435 3343 1239 4 v 1435 3443 4 100 v 1653 3413 a(F)l(ar)q(ine)h(\(en)
f(g\))p 2302 3443 V 268 w(250)p 2526 3443 V 114 w(?)p
2670 3443 V 1435 3446 1239 4 v 1435 3546 4 100 v 1660
3516 a(Lait)h(\(en)f(mL\))p 2302 3546 V 276 w(500)p 2526
3546 V 114 w(?)p 2670 3546 V 1435 3549 1239 4 v 1435
3649 4 100 v 1779 3619 a(\214ufs)p 2302 3649 V 435 w(4)p
2526 3649 V 144 w(6)p 2670 3649 V 1435 3652 1239 4 v
-38 3761 a(P)n(our)g(6)g(personnes)o(,)j(il)e(faut)g(250)10
b Fv(\243)g Fw(6)g Fv(\245)g Fw(4)17 b Fv(\306)d Fw(375)19
b(g)e(de)g(far)q(ine)o(,)g(500)10 b Fv(\243)g Fw(6)g
Fv(\245)g Fw(4)17 b Fv(\306)e Fw(750)j(mL)g(de)g(lait)f(et,)h(bien)g
(s\373r)-5 b(,)18 b(6)g(\234ufs)o(.)-246 3794 y
SDict begin H.S end
 -246
3794 a -246 3794 a
SDict begin 12 H.A end
 -246 3794 a -246 3794 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -246 3794
a 0 TeXcolorgray -141 3890 a Fw(2.)p 0 TeXcolorgray 43
w(Les)g(6)g(yaour)q(ts)f(p\350sent)i(6)10 b Fv(\243)g
Fw(125)16 b Fv(\306)e Fw(750)19 b(g.)p 0 TeXcolorgray
0 TeXcolorgray 1541 3978 1027 4 v 1541 4078 4 100 v 1594
4048 a(masse)f(\(en)g(g\))p 2074 4078 V 102 w(1000)p
2339 4078 V 105 w(750)p 2563 4078 V 1541 4081 1027 4
v 1541 4181 4 100 v 1625 4151 a(pr)q(ix)f(\(en)h Fs(N)p
Fw(\))p 2074 4181 V 194 w(2)p 2339 4181 V 214 w(?)p 2563
4181 V 1541 4184 1027 4 v -38 4308 a(J)n(e)f(payer)o(ai)g(750)10
b Fv(\243)g Fw(2)g Fv(\245)g Fw(1)e(000)19 b Fv(\306)14
b Fw(1,)8 b(5)19 b Fs(N)o Fw(.)-246 4393 y
SDict begin H.S end
 -246 4393
a -246 4393 a
SDict begin 12 H.A end
 -246 4393 a -246 4393 a
SDict begin [/View [/XYZ H.V]/Dest (exo.3) cvn /DEST pdfmark end
 -246 4393 a 0 TeXcolorgray
114 x Fx(Ex)o(er)o(cice)14 b(3)p 0 TeXcolorgray 42 w
Fw(L)-10 b('\351nonc\351)18 b(donne)g(les)g(infor)q(mations)h(r)o
(ecens\351es)f(dans)g(le)f(tableau)h(ci-dessous)h(et)e(demande)h(de)f
(compl\351ter)i(la)e(case)3744 4504 y Fr(1)3721 4507
y Fq(\015)p Fw(.)p 0 TeXcolorgray 0 TeXcolorgray 1525
4619 850 4 v 1525 4718 4 100 v 1593 4688 a(F)o(lor)q(ins)p
1898 4718 V 118 w(7)p 2042 4718 V 113 w(?)p 2185 4718
V 2262 4685 a Fr(1)2238 4688 y Fq(\015)p 2371 4718 V
1525 4722 850 4 v 1525 4821 4 100 v 1581 4791 a Fw(Pistoles)p
1898 4821 V 107 w(6)p 2042 4821 V 1 0 0 TeXcolorrgb 103
w(4)p 0 TeXcolorgray 2185 4821 V 0 TeXcolorgray 2262
4788 a Fr(2)p 0 TeXcolorgray 2238 4791 a Fq(\015)p 2371
4821 V 1525 4825 850 4 v 1525 4924 4 100 v 1579 4894
a Fw(Deniers)p 1898 4924 V 112 w(?)p 2042 4924 V 1 0 0
TeXcolorrgb 104 w(5)p 0 TeXcolorgray 2185 4924 V 1 0 0
TeXcolorrgb 104 w(30)p 0 TeXcolorgray 2371 4924 V 1525
4927 850 4 v -246 5076 a(On)h(compl\350te)h(d)n('abor)o(d)d(la)h(case)
774 5073 y Fr(2)751 5076 y Fq(\015)g Fw(:)g(en)h(\351change)g(de)f(30)h
(deniers)o(,)g(on)g(a)f(4)10 b Fv(\243)g Fw(30)g Fv(\245)g
Fw(5)17 b Fv(\306)d Fw(24)k(pistoles)h(:)p 0 TeXcolorgray
0 TeXcolorgray 1525 5189 V 1525 5288 4 100 v 1593 5259
a(F)o(lor)q(ins)p 1898 5288 V 1 0 0 TeXcolorrgb 118 w(7)p
0 TeXcolorgray 2042 5288 V 113 w(?)p 2185 5288 V 0 TeXcolorgray
2262 5256 a Fr(1)p 0 TeXcolorgray 2238 5259 a Fq(\015)p
2371 5288 V 1525 5292 850 4 v 1525 5391 4 100 v 1581
5361 a Fw(Pistoles)p 1898 5391 V 1 0 0 TeXcolorrgb 107
w(6)p 0 TeXcolorgray 2042 5391 V 103 w(4)p 2185 5391
V 1 0 0 TeXcolorrgb 104 w(24)p 0 TeXcolorgray 2371 5391
V 1525 5395 850 4 v 1525 5494 4 100 v 1579 5464 a(Deniers)p
1898 5494 V 112 w(?)p 2042 5494 V 104 w(5)p 2185 5494
V 104 w(30)p 2371 5494 V 1525 5498 850 4 v -246 5646
a(On)f(peut)g(alors)g(compl\351ter)g(la)g(case)879 5643
y Fr(1)855 5646 y Fq(\015)g Fw(:)f(en)h(\351change)f(de)h(30)g(deniers)
o(,)g(on)g(a)f(7)10 b Fv(\243)g Fw(24)g Fv(\245)g Fw(6)17
b Fv(\306)d Fw(28)k(\003or)q(ins)o(.)-246 5731 y
SDict begin H.S end
 -246
5731 a -246 5731 a
SDict begin 12 H.A end
 -246 5731 a -246 5731 a
SDict begin [/View [/XYZ H.V]/Dest (exo.4) cvn /DEST pdfmark end
 -246 5731
a 0 TeXcolorgray 1930 5895 a Fw(2)p 0 TeXcolorgray eop
end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 83 x Fx(Ex)o(er)o(cice)14
b(4)p 0 TeXcolorgray 0 TeXcolorgray 147 w Fw(1.)p 0 TeXcolorgray
42 w(G\351n\351r)o(alement,)20 b(dans)d(ce)h(type)f(de)h(question,)h
(il)f(vaut)f(mieux)i(conver)q(tir)e(en)h(minutes)p 0 0 1
TeXcolorrgb 2973 -163 a
SDict begin H.S end
 2973 -163 a -30 x Fp(1)3010 -163
y
SDict begin 12 H.L end
 3010 -163 a 3010 -163 a
SDict begin [/Subtype /Link/Dest (Hfootnote.1) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3010 -163 a 0 TeXcolorgray
Fw(.)p 0 TeXcolorgray 0 TeXcolorgray 1528 -86 1051 4
v 1528 13 4 100 v 1605 -17 a(temps)h(\(en)e(min\))p 2208
13 V 127 w(60)p 2392 13 V 134 w(?)p 2576 13 V 1528 17
1051 4 v 1528 116 4 100 v 1582 86 a(distance)g(\(en)h(km\))p
2208 116 V 103 w(20)p 2392 116 V 104 w(45)p 2576 116
V 1528 119 1051 4 v -38 230 a(On)f(mettr)o(a)h(60)10
b Fv(\243)g Fw(45)g Fv(\245)g Fw(20)18 b Fv(\306)c Fw(135)19
b(min,)g(soit)f(2)f(h)h(15)g(min)g(\(puisque)h(135)d
Fv(\306)e Fw(120)c Fv(\305)g Fw(15\).)-246 259 y
SDict begin H.S end
 -246
259 a -246 259 a
SDict begin 12 H.A end
 -246 259 a -246 259 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -246 259 a 0 TeXcolorgray
-141 353 a Fw(2.)p 0 TeXcolorgray 43 w(On)17 b(peut)i(se)e(passer)h(d)n
('un)g(tableau)g(de)f(propor)q(tionnalit\351)i(:)e(1)h(h)d
Fv(\306)f Fw(60)k(min)q(,)f(donc)g(0,)8 b(6)19 b(h)c
Fv(\306)f Fw(0,)8 b(6)i Fv(\243)g Fw(60)20 b(min)15 b
Fv(\306)f Fw(36)k(min)q(.)-246 382 y
SDict begin H.S end
 -246 382 a -246
382 a
SDict begin 12 H.A end
 -246 382 a -246 382 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -246 382 a -246 382 a
SDict begin H.S end
 -246
382 a -246 382 a
SDict begin 12 H.A end
 -246 382 a -246 382 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -246 382 a 0 TeXcolorgray
-141 476 a Fw(3.)p 0 TeXcolorgray 0 TeXcolorgray 91 w(\(a\))p
0 TeXcolorgray 41 w(On)f(compl\350te)i(deux)e(tableaux)h(de)g(propor)q
(tionnalit\351)g(\(on)g(tr)o(availle)g(en)g(min)g(et)g(en)f(km\))h(:)p
0 TeXcolorgray 0 TeXcolorgray 589 584 1072 4 v 589 684
4 100 v 665 654 a(temps)h(\(en)e(min\))p 1268 684 V 127
w(60)p 1452 684 V 144 w(?)p 1656 684 V 589 687 1072 4
v 589 787 4 100 v 642 757 a(distance)h(\(en)f(km\))p
1268 787 V 123 w(3)p 1452 787 V 124 w(0,5)p 1656 787
V 589 790 1072 4 v 0 TeXcolorgray 0 TeXcolorgray 2661
584 1011 4 v 2661 684 4 100 v 2737 654 a(temps)i(\(en)f(min\))p
3341 684 V 127 w(60)p 3525 684 V 113 w(?)p 3668 684 V
2661 687 1011 4 v 2661 787 4 100 v 2714 757 a(distance)g(\(en)f(km\))p
3341 787 V 104 w(15)p 3525 787 V 104 w(5)p 3668 787 V
2661 790 1011 4 v 145 949 a(S)n(t\351phane)i(nage)e(60)10
b Fv(\243)g Fw(0,)e(5)i Fv(\245)g Fw(3)18 b Fv(\306)c
Fw(10)k(min,)h(puis)f(il)g(cour)q(t)f(60)10 b Fv(\243)g
Fw(5)g Fv(\245)g Fw(15)17 b Fv(\306)d Fw(20)19 b(min.)-246
979 y
SDict begin H.S end
 -246 979 a -246 979 a
SDict begin 12 H.A end
 -246 979 a -246 979 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -246
979 a 0 TeXcolorgray 4 1071 a Fw(\(b\))p 0 TeXcolorgray
41 w(S)n(t\351phane)g(a)e(par)o(cour)q(u)g(un)g(total)h(de)g(5)10
b Fv(\305)g Fw(0,)e(5)16 b Fv(\306)e Fw(5,)8 b(5)19 b(km,)f(en)f(10)10
b Fv(\305)g Fw(20)17 b Fv(\306)d Fw(30)k(min.)p 0 TeXcolorgray
0 TeXcolorgray 1610 1146 1072 4 v 1610 1245 4 100 v 1686
1215 a(temps)h(\(en)e(min\))p 2289 1245 V 137 w(30)p
2493 1245 V 114 w(60)p 2677 1245 V 1610 1249 1072 4 v
1610 1348 4 100 v 1663 1318 a(distance)h(\(en)f(km\))p
2289 1348 V 103 w(5,5)p 2493 1348 V 134 w(?)p 2677 1348
V 1610 1351 1072 4 v 145 1462 a(La)g(vitesse)i(mo)n(yenne)f(de)f(S)n
(t\351phane)j(sur)d(l)o('ensemble)j(de)d(son)h(par)o(cours)f(est)h
(donc)f(60)10 b Fv(\243)g Fw(5,)e(5)i Fv(\245)g Fw(30)18
b Fv(\306)c Fw(11)k(km/h.)-246 1542 y
SDict begin H.S end
 -246 1542 a -246
1542 a
SDict begin 12 H.A end
 -246 1542 a -246 1542 a
SDict begin [/View [/XYZ H.V]/Dest (exo.5) cvn /DEST pdfmark end
 -246 1542 a 0 TeXcolorgray
109 x Fx(Ex)o(er)o(cice)c(5)p 0 TeXcolorgray 42 w Fw(A)-5
b(vant)23 b(de)f(commencer)-5 b(,)25 b(il)e(est)h(utile)g(de)f(se)g(r)o
(appeler)h(que)g(10)g(cm=1)f(dm)9 b(;)23 b(et)g(que)g(1)h
Fu(`)19 b Fv(\306)h Fw(1)j(dm)3079 1618 y Fp(3)3114 1651
y Fw(.)g(A)n(utr)o(ement)h(dit,)f(un)g(litr)o(e)g(est)h(le)-246
1751 y(volume)d(d)n('un)f(cube)f(qui)h(mesur)o(e)f(1)h(dm)f(sur)h(1)f
(dm)g(sur)h(1)f(dm,)h(ou)f(encor)o(e)g(10)h(cm)g(sur)f(10)h(cm)f(sur)h
(10)g(cm)f(\(la)g(\002gur)o(e)f(ci-dessous)j(n)-6 b('est)20
b(bien)f(s\373r)-246 1850 y(pas)f(\340)f(l)o('\351chelle\).)p
0 TeXcolorgray 0 TeXcolorgray 1260 3032 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 166.1639 a add def
/d 0.0 a add neg def /h 131.45152 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1260 3032 a
1596 2767 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 56.90549 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 56.90549 56.90549 56.90549   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 0.0 0.0 56.90549   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 85.35823 0.0 56.90549   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 28.45274 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 56.90549 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 28.45274 56.90549 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 28.45274 85.35823 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1596 2767 a
tx@Dict begin { 16.50264 -4.55254 } PutCoor PutBegin  end
 1596 2767 a 57 x Fw(1)g(dm)1596 2767 y
tx@Dict begin  PutEnd  end
 1596
2767 a 1596 2767 a
tx@Dict begin { -28.45274 32.4361 } PutCoor PutBegin  end
 1596 2767 a 57 x Fw(1)g(dm)1596 2767
y
tx@Dict begin  PutEnd  end
 1596 2767 a 1596 2767 a
tx@Dict begin { 76.82231 14.79555 } PutCoor PutBegin  end
 1596 2767 a 57 x Fw(1)g(dm)1596
2767 y
tx@Dict begin  PutEnd  end
 1596 2767 a 1596 2767 a
tx@Dict begin { 26.17647 35.28156 } PutCoor PutBegin  end
 1596 2767 a 57 x Fw(1)g
Fu(`)1596 2767 y
tx@Dict begin  PutEnd  end
 1596 2767 a 2640 3032 a
currentpoint initclip moveto
 2640 3032 a
-246 3239 a Fw(On)g(r)o(emplit)h(d)n('eau)g(un)f(aquar)q(ium)h(r)o
(ectangulair)o(e)e(dont)h(la)h(largeur)e(est)i(80)f(cm,)h(la)f
(profondeur)g(30)h(cm)f(et)h(la)f(hauteur)h(40)g(cm.)f(On)g(dispose)h
(d)n('un)-246 3339 y(robinet)f(dont)h(le)g(d\351bit)f(est)h(de)f(6)h
(litr)o(es)g(par)f(minute)o(.)-246 3379 y
SDict begin H.S end
 -246 3379 a
-246 3379 a
SDict begin 12 H.A end
 -246 3379 a -246 3379 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -246 3379 a 0 TeXcolorgray
-141 3473 a Fw(1.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
994 4699 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 255.20395 a add def
/d 0.0 a add neg def /h 141.11893 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 994 4699 a 910 4719 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.39554 21.33955 42.67911 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.39554 106.69777 213.39554 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.67911 106.69777 42.67911 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.39554 106.69777 42.67911 106.69777
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35822 128.03732 42.67911 106.69777
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 128.03732 85.35822 128.03732
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 128.03732 213.39554 106.69777
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 42.67911 213.39554 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 128.03732 256.07465 42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35822 42.67911 85.35822 128.03732
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35822 42.67911 42.67911 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 42.67911 85.35822 42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 910 4719 a
tx@Dict begin { 122.08083 17.51845 } PutCoor PutBegin  end
 910 4719 a 57 x Fw(8)h(dm)910
4719 y
tx@Dict begin  PutEnd  end
 910 4719 a 910 4719 a
tx@Dict begin { 19.8912 68.34283 } PutCoor PutBegin  end
 910 4719 a 57 x Fw(4)g(dm)910
4719 y
tx@Dict begin  PutEnd  end
 910 4719 a 910 4719 a
tx@Dict begin { 236.70636 31.57625 } PutCoor PutBegin  end
 910 4719 a 57 x Fw(3)g(dm)910
4719 y
tx@Dict begin  PutEnd  end
 910 4719 a 3113 4699 a
currentpoint initclip moveto
 3113 4699 a -246 4733 a
SDict begin H.S end

-246 4733 a -246 4733 a
SDict begin 12 H.A end
 -246 4733 a -246 4733 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -246
4733 a 0 TeXcolorgray -141 4844 a Fw(2.)p 0 TeXcolorgray
43 w(Les)g(dimensions)h(de)e(l)o('aquar)q(ium)i(sont)f(:)1025
5009 y(largeur)c Fv(\306)g Fw(8)k(dm,)155 b(profondeur)14
b Fv(\306)g Fw(3)k(dm,)155 b(hauteur)15 b Fv(\306)f Fw(4)k(dm,)-38
5174 y(donc)f(son)h(volume)h(est)1795 5273 y(8)10 b Fv(\243)g
Fw(3)g Fv(\243)g Fw(4)16 b Fv(\306)e Fw(96)19 b Fu(`)p
Fw(.)-246 5313 y
SDict begin H.S end
 -246 5313 a -246 5313 a
SDict begin 12 H.A end
 -246 5313 a
-246 5313 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -246 5313 a 0 TeXcolorgray -141 5423 a Fw(3.)p
0 TeXcolorgray 43 w(On)h(peut)i(se)f(passer)g(d)n('un)g(tableau)g(de)f
(propor)q(tionnalit\351)i(:)e(le)h(d\351bit)g(du)f(robinet)g(est)h(de)f
(6)h Fu(`)p Fw(/min,)h(donc)e(il)h(faut)g(96)11 b Fv(\245)g
Fw(6)19 b Fv(\306)f Fw(16)j(min)g(pour)-38 5523 y(r)o(emplir)d(les)g
(96)g Fu(`)f Fw(de)g(l)o('aquar)q(ium.)p 0 TeXcolorgray
-246 5569 1757 4 v -154 5646 a Fo(1)q(.)p 0 TeXcolorgray
-76 5646 a
SDict begin H.S end
 -76 5646 a -76 5646 a
SDict begin H.R end
 -76 5646 a -76 5646
a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.1) cvn /DEST pdfmark
end
 -76 5646 a 0 TeXcolorgray Fo(Les)d(calculs)g(ne)g(sont)f(pas)h
(toujours)g(plus)f(faciles)i(en)f(minutes)f(qu)n('en)i(heur)o(es)o(,)f
(mais)g(c)n('est)g(g\351n\351r)o(alement)h(le)g(cas)o(.)p
0 TeXcolorgray 0 TeXcolorgray 1930 5895 a Fw(3)p 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 -246 -246 a 83 x Fy(2)105 b(D)o(r)o(oites)24 b(et)f(suites)f(de)
h(nombr)n(es)-246 -78 y
SDict begin H.S end
 -246 -78 a -246 -78 a
SDict begin 12 H.A end
 -246 -78
a -246 -78 a
SDict begin [/View [/XYZ H.V]/Dest (exo.6) cvn /DEST pdfmark end
 -246 -78 a 0 TeXcolorgray 99 x Fx(Ex)o(er)o(cice)14
b(6)p 0 TeXcolorgray 42 w Fw(Le)21 b(tableau)h(suivant)g(donne)f(l)o
('\351volution)j(du)d(tir)o(age)g(jour)q(nalier)h(\(en)g(millions)h(d)n
('exemplair)o(es\))f(de)f(la)g(pr)o(esse)h(quotidienne)h(d)n('in-)-246
121 y(for)q(mation)18 b(g\351n\351r)o(ale)h(et)e(politique)j(en)e(F)o
(r)o(ance)o(.)p 0 TeXcolorgray 0 TeXcolorgray -246 217
4392 4 v -246 317 4 100 v -193 287 a(Ann\351e)p 330 317
V 604 w(2010)p 1092 317 V 602 w(2011)p 1855 317 V 603
w(2012)p 2617 317 V 602 w(2013)p 3380 317 V 603 w(2014)p
4142 317 V -246 320 4392 4 v -246 520 4 200 v -193 390
a(N)n(um\351ro)-193 490 y(ann\351e)h(:)e Ft(n)p 330 520
V 692 440 a Fw(0)p 1092 520 V 723 w(1)p 1855 520 V 722
w(2)p 2617 520 V 723 w(3)p 3380 520 V 722 w(4)p 4142
520 V -246 523 4392 4 v -246 622 4 100 v -193 593 a(T)m(ir)o(age)i(:)e
Ft(u)126 605 y Fm(n)p 330 622 V 642 593 a Fw(1,80)p 1092
622 V 622 w(1,73)p 1855 622 V 623 w(1,60)p 2617 622 V
622 w(1,47)p 3380 622 V 623 w(1,36)p 4142 622 V -246
626 4392 4 v 3593 696 a Ft(Sour)o(ce)f(:)i(INSEE)-246
857 y Fw(On)g(note)g Ft(u)100 869 y Fm(n)161 857 y Fw(le)f(tir)o(age)h
(jour)q(nalier)g(en)g(millions)h(d)n('exemplair)o(es)g(pour)f(l)o
('ann\351e)h(num\351ro)f Ft(n)t Fw(.)g(On)f(a)g(donc)g(:)p
0 TeXcolorgray -76 1000 a(\225)p 0 TeXcolorgray 42 w
Ft(u)46 1012 y Fp(0)96 1000 y Fv(\306)d Fw(tir)o(age)j(jour)q(nalier)h
(l)o('ann\351e)h(0)c Fv(\306)f Fw(1,)8 b(80)19 b(;)p
0 TeXcolorgray -76 1099 a(\225)p 0 TeXcolorgray 42 w
Ft(u)46 1111 y Fp(1)96 1099 y Fv(\306)14 b Fw(tir)o(age)j(jour)q
(nalier)h(l)o('ann\351e)h(1)c Fv(\306)f Fw(1,)8 b(73)19
b(;)p 0 TeXcolorgray -76 1199 a(\225)p 0 TeXcolorgray
42 w Ft(u)46 1211 y Fp(4)96 1199 y Fv(\306)14 b Fw(tir)o(age)j(jour)q
(nalier)h(l)o('ann\351e)h(4)c Fv(\306)f Fw(1,)8 b(36.)-246
1279 y
SDict begin H.S end
 -246 1279 a -246 1279 a
SDict begin 12 H.A end
 -246 1279 a -246 1279
a
SDict begin [/View [/XYZ H.V]/Dest (exo.7) cvn /DEST pdfmark end
 -246 1279 a 0 TeXcolorgray 109 x Fx(Ex)o(er)o(cice)14
b(7)p 0 TeXcolorgray 42 w Ft(u)21 b Fw(est)d(la)g(suite)g(des)f
(multiples)k(de)c(4,)h(en)f(par)q(tant)h(de)f Ft(u)1788
1400 y Fp(0)1838 1388 y Fv(\306)d Fw(4)c Fv(\243)g Fw(0)16
b Fv(\306)e Fw(0.)-246 1429 y
SDict begin H.S end
 -246 1429 a -246 1429 a
SDict begin 12 H.A end

-246 1429 a -246 1429 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -246 1429 a 0 TeXcolorgray -141
1523 a Fw(1.)p 0 TeXcolorgray 0 TeXcolorgray 88 w(\225)p
0 TeXcolorgray 42 w Ft(u)129 1535 y Fp(1)179 1523 y Fv(\306)g
Fw(4)c Fv(\243)g Fw(1)15 b Fv(\306)f Fw(4)k(;)p 0 TeXcolorgray
7 1622 a(\225)p 0 TeXcolorgray 42 w Ft(u)129 1634 y Fp(2)179
1622 y Fv(\306)c Fw(4)c Fv(\243)g Fw(2)15 b Fv(\306)f
Fw(8)k(;)p 0 TeXcolorgray 7 1722 a(\225)p 0 TeXcolorgray
42 w Ft(u)129 1734 y Fp(3)179 1722 y Fv(\306)c Fw(4)c
Fv(\243)g Fw(3)15 b Fv(\306)f Fw(12.)-246 1747 y
SDict begin H.S end
 -246
1747 a -246 1747 a
SDict begin 12 H.A end
 -246 1747 a -246 1747 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -246 1747
a 0 TeXcolorgray -141 1845 a Fw(2.)p 0 TeXcolorgray 43
w Ft(u)11 1857 y Fp(20)92 1845 y Fv(\306)g Fw(4)c Fv(\243)g
Fw(20)16 b Fv(\306)e Fw(80.)-246 1919 y
SDict begin H.S end
 -246 1919 a -246
1919 a
SDict begin 12 H.A end
 -246 1919 a -246 1919 a
SDict begin [/View [/XYZ H.V]/Dest (exo.8) cvn /DEST pdfmark end
 -246 1919 a 0 TeXcolorgray
115 x Fx(Ex)o(er)o(cice)g(8)p 0 TeXcolorgray 42 w Ft(u)21
b Fw(est)d(une)g(suite)h(telle)f(que)g(:)p 0 TeXcolorgray
-76 2134 a(\225)p 0 TeXcolorgray 42 w Ft(u)46 2146 y
Fp(0)96 2134 y Fv(\306)c Fw(2,)p 0 TeXcolorgray -76 2234
a(\225)p 0 TeXcolorgray 42 w(tout)k(ter)q(me)g(de)f(la)g(suite)i(se)e
(d\351duit)h(du)f(pr\351c\351dent)h(en)g(ajoutant)h(3.)-246
2276 y
SDict begin H.S end
 -246 2276 a -246 2276 a
SDict begin 12 H.A end
 -246 2276 a -246 2276
a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -246 2276 a 0 TeXcolorgray -141 2368 a Fw(1.)p 0 TeXcolorgray
0 TeXcolorgray 88 w(\225)p 0 TeXcolorgray 42 w Ft(u)129
2380 y Fp(1)179 2368 y Fv(\306)14 b Fw(3)c Fv(\305)g
Fw(2)15 b Fv(\306)f Fw(5)k(;)p 0 TeXcolorgray 7 2468
a(\225)p 0 TeXcolorgray 42 w Ft(u)129 2480 y Fp(2)179
2468 y Fv(\306)c Fw(5)c Fv(\305)g Fw(3)15 b Fv(\306)f
Fw(8)k(;)p 0 TeXcolorgray 7 2567 a(\225)p 0 TeXcolorgray
42 w Ft(u)129 2579 y Fp(3)179 2567 y Fv(\306)c Fw(8)c
Fv(\305)g Fw(3)15 b Fv(\306)f Fw(11)19 b(;)p 0 TeXcolorgray
7 2667 a(\225)p 0 TeXcolorgray 42 w Ft(u)129 2679 y Fp(4)179
2667 y Fv(\306)14 b Fw(11)c Fv(\305)g Fw(3)16 b Fv(\306)e
Fw(14.)-246 2691 y
SDict begin H.S end
 -246 2691 a -246 2691 a
SDict begin 12 H.A end
 -246 2691
a -246 2691 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -246 2691 a 0 TeXcolorgray -141 2790 a
Fw(2.)p 0 TeXcolorgray 43 w(P)n(our)j(obtenir)g(le)h(tableau)g(avec)f
(un)h(tableur)-5 b(,)18 b(on)g(entr)o(e)f(la)h(for)q(mule)1945
2956 y(=B1+1)-38 3122 y(dans)f(la)h(cellule)h(C1,)f(et)f(la)h(for)q
(mule)1945 3221 y(=B2+3)-38 3361 y(dans)f(la)h(cellule)h(C2.)f(Ensuite)
h(on)e(\351tir)o(e)g(vers)h(la)g(droite)o(.)p 0 TeXcolorgray
0 TeXcolorgray -38 3464 4184 4 v -38 3563 4 100 v 105
3563 V 419 3534 a(A)p 778 3563 V 624 w(B)p 1451 3563
V 622 w(C)p 2124 3563 V 617 w(D)p 2797 3563 V 620 w(E)p
3470 3563 V 627 w(F)p 4142 3563 V -38 3567 4184 4 v -38
3666 4 100 v 15 3637 a(1)p 105 3666 V 363 w Ft(n)p 778
3666 V 631 w Fw(0)p 1451 3666 V 544 w(=B1+1)p 2124 3666
V 521 w Fv(\242)8 b(\242)g(\242)p 2797 3666 V 594 w(\242)g(\242)g(\242)
p 3470 3666 V 594 w(\242)g(\242)g(\242)p 4142 3666 V
-38 3670 4184 4 v -38 3769 4 100 v 15 3739 a Fw(2)p 105
3769 V 342 w Ft(u)446 3751 y Fm(n)p 778 3769 V 1096 3739
a Fw(2)p 1451 3769 V 544 w(=B2+3)p 2124 3769 V 521 w
Fv(\242)g(\242)g(\242)p 2797 3769 V 594 w(\242)g(\242)g(\242)p
3470 3769 V 594 w(\242)g(\242)g(\242)p 4142 3769 V -38
3773 4184 4 v -246 3834 a
SDict begin H.S end
 -246 3834 a -246 3834 a
SDict begin 12 H.A end
 -246
3834 a -246 3834 a
SDict begin [/View [/XYZ H.V]/Dest (exo.9) cvn /DEST pdfmark end
 -246 3834 a 0 TeXcolorgray 94 x Fx(Ex)o(er)o(cice)14
b(9)p 0 TeXcolorgray 42 w Fw(N)n(otr)o(e)i(objet)i(tombe)g(de)f(:)p
0 TeXcolorgray -76 4027 a(\225)p 0 TeXcolorgray 42 w(5)g(m)h(pendant)g
(la)g(1)570 4003 y Fk(r)o(e)631 4027 y Fw(seconde)9 b(;)p
0 TeXcolorgray -76 4127 a(\225)p 0 TeXcolorgray 42 w(15)18
b(m)g(pendant)g(la)f(2)610 4103 y Fk(e)653 4127 y Fw(seconde)9
b(;)p 0 TeXcolorgray -76 4226 a(\225)p 0 TeXcolorgray
42 w(25)18 b(m)g(pendant)g(la)f(3)610 4203 y Fk(e)653
4226 y Fw(seconde)9 b(;)p 0 TeXcolorgray -76 4326 a(\225)p
0 TeXcolorgray 42 w(35)18 b(m)g(pendant)g(la)f(4)610
4302 y Fk(e)653 4326 y Fw(seconde)9 b(;)p 0 TeXcolorgray
-76 4426 a(\225)p 0 TeXcolorgray 42 w(45)18 b(m)g(pendant)g(la)f(5)610
4402 y Fk(e)653 4426 y Fw(seconde)o(.)-246 4568 y(C)o(onclusion)j(:)d
(pendant)h(les)g(5)g(pr)o(emi\350r)o(es)g(secondes)o(,)g(l)o('objet)h
(est)f(tomb\351)g(de)1461 4734 y(5)10 b Fv(\305)g Fw(15)g
Fv(\305)g Fw(25)g Fv(\305)g Fw(35)g Fv(\305)g Fw(45)20
b Fv(\306)14 b Fw(125)19 b(m.)-246 4943 y Fx(R)o(emarque)e(:)j
Fw(Les)h(infor)q(mations)h(de)e(l)o('\351nonc\351)i(sont)f
(impr\351cises)h(:)e(si)h(l)o('on)g(n\351glige)g(la)f(r\351sistance)h
(de)f(l)o('air)h(\(frottements\),)h(un)e(objet)h(soumis)h(\340)-246
5043 y(son)c(propr)o(e)f(poids)h(tombe)g(de)f(4,9)h(m)g(pendant)g(la)f
(1)1334 5019 y Fk(r)o(e)1396 5043 y Fw(seconde)o(,)g(4,)8
b(9)i Fv(\243)g Fw(3)16 b Fv(\306)f Fw(14,)8 b(7)19 b(m)e(pendant)h(la)
g(2)2709 5019 y Fk(e)2735 5043 y Fw(,)f(4,)8 b(9)i Fv(\243)g
Fw(5)16 b Fv(\306)f Fw(24,)8 b(5)19 b(m)e(pendant)h(la)g(3)3763
5019 y Fk(e)3789 5043 y Fw(,)f(etc)o(.)h(Dans)-246 5143
y(l)o('exer)o(cice)o(,)g(nous)g(avons)g(r)o(emplac\351)g(4,9)h(par)e(5)
h(pour)f(simpli\002er)i(les)f(calculs)o(.)-246 5285 y(N)n(otons)c(par)g
(ailleurs)i(que)e(ces)h(r\351sultats)g(doivent)g(\352tr)o(e)f(for)q
(tement)h(corr)q(ig\351s)f(si)g(l)o('on)h(veut)g(tenir)f(compte)i(de)e
(la)g(r\351sistance)h(de)f(l)o('air)-5 b(.)15 b(P)m(ar)f(exemple)o(,)
-246 5385 y(un)24 b(adulte)g(en)f(chute)h(libr)o(e)f(qui)h(par)q(vient)
h(\340)e(se)h(mettr)o(e)f(\253)16 b(\340)23 b(plat)16
b(\273)46 b(devr)o(ait)24 b(arr\352ter)f(d)n('acc\351l\351r)o(er)g
(apr\350s)g(une)h(dizaine)g(de)f(secondes)h(de)f(chute)-246
5485 y(environ,)k(sans)g(d\351passer)f(60)h(m/s)9 b(;)26
b(tandis)h(qu)n('un)f(chat)g(ne)h(d\351passer)o(a)f(pas)h(les)f(20)h
(m/s)f(et)h(pourr)o(a)f(sur)q(vivr)o(e)h(\340)f(une)g(chute)h(d)n('une)
g(hauteur)-246 5584 y(impor)q(tante)o(.)19 b(La)e(vid\351o)p
0 1 0 0 TeXcolorcmyk 490 5586 a
SDict begin H.S end
 490 5586 a 0 1 0 0 TeXcolorcmyk
-2 x Fw(KEZ)q(AK)m(O)h(:)f(chute)h(libr)o(e)p 0 1 0 0
TeXcolorcmyk 1213 5527 a
SDict begin H.R end
 1213 5527 a 1213 5584 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.youtube.com/watch?v=RFbmabdbBC0)>>/Subtype
/Link H.B /ANN pdfmark end
 1213
5584 a 0 TeXcolorgray 17 w Fw(explique)i(ce)d(probl\350me)h(en)g
(d\351tail.)p 0 TeXcolorgray 1930 5895 a(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (exo.10) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 83 x Fx(Ex)o(er)o(cice)14
b(10)p 0 TeXcolorgray 41 w Fw(On)j(tr)o(ace)h(les)g(droites)f
Ft(D)938 -151 y Fp(1)988 -163 y Fw(:)h Ft(y)j Fv(\306)16
b Ft(x)f Fv(\241)10 b Fw(4,)19 b Ft(D)1415 -151 y Fp(2)1464
-163 y Fw(:)g Ft(y)i Fv(\306)14 b Fw(2)r Ft(x)5 b Fw(,)19
b Ft(D)1817 -151 y Fp(3)1866 -163 y Fw(:)f Ft(y)j Fv(\306)15
b(\241)p Fw(2)r Ft(x)g Fv(\305)10 b Fw(3)18 b(et)g Ft(D)2451
-151 y Fp(4)2501 -163 y Fw(:)g Ft(y)j Fv(\306)14 b(\241)p
Fw(2)k(\340)f(par)q(tir)g(de)g(quatr)o(e)h(tableaux)g(de)f(valeurs)h(:)
-246 37 y(T)-6 b(r)o(ac\351)18 b(de)f Ft(D)124 49 y Fp(1)159
37 y Fw(.)p -246 67 425 5 v 0 TeXcolorgray 0 TeXcolorgray
-3 119 551 4 v -3 218 4 100 v 52 188 a Ft(x)p 147 218
V 137 w Fw(0)p 345 218 V 158 w(2)p 544 218 V -3 222 551
4 v -3 321 4 100 v 54 291 a Ft(y)p 147 321 V 110 w Fv(\241)p
Fw(4)p 345 321 V 104 w Fv(\241)p Fw(2)p 544 321 V -3
325 551 4 v 105 521 a(0)10 b Fv(\241)g Fw(4)15 b Fv(\306)f(\241)p
Fw(4)105 646 y(2)c Fv(\241)g Fw(4)15 b Fv(\306)f(\241)p
Fw(2)p 0 TeXcolorgray 827 663 9 710 v 0 TeXcolorgray
873 37 a(T)-6 b(r)o(ac\351)17 b(de)g Ft(D)1242 49 y Fp(2)1278
37 y Fw(.)p 873 67 425 5 v 0 TeXcolorgray 0 TeXcolorgray
1171 119 441 4 v 1171 218 4 100 v 1226 188 a Ft(x)p 1321
218 V 109 w Fw(0)p 1464 218 V 103 w(2)p 1607 218 V 1171
222 441 4 v 1171 321 4 100 v 1228 291 a Ft(y)p 1321 321
V 110 w Fw(0)p 1464 321 V 103 w(4)p 1607 321 V 1171 325
441 4 v 1251 521 a(2)10 b Fv(\243)g Fw(0)15 b Fv(\306)f
Fw(2)1251 646 y(2)c Fv(\243)g Fw(2)15 b Fv(\306)f Fw(4)p
0 TeXcolorgray 1946 663 9 710 v 0 TeXcolorgray 1992 37
a(T)-6 b(r)o(ac\351)17 b(de)g Ft(D)2361 49 y Fp(3)2396
37 y Fw(.)p 1992 67 425 5 v 0 TeXcolorgray 0 TeXcolorgray
2262 119 496 4 v 2262 218 4 100 v 2317 189 a Ft(x)p 2412
218 V 109 w Fw(0)p 2555 218 V 131 w(2)p 2754 218 V 2262
222 496 4 v 2262 321 4 100 v 2319 292 a Ft(y)p 2412 321
V 110 w Fw(3)p 2555 321 V 103 w Fv(\241)p Fw(1)p 2754
321 V 2262 325 496 4 v 2256 521 a Fv(\241)10 b Fw(2)g
Fv(\243)g Fw(0)g Fv(\305)g Fw(3)17 b Fv(\306)d Fw(3)2256
646 y Fv(\241)c Fw(2)g Fv(\243)g Fw(2)g Fv(\305)g Fw(3)17
b Fv(\306)d(\241)p Fw(1)p 0 TeXcolorgray 3064 663 9 710
v 0 TeXcolorgray 3110 37 a(T)-6 b(r)o(ac\351)18 b(de)f
Ft(D)3480 49 y Fp(4)3515 37 y Fw(.)p 3110 67 425 5 v
0 TeXcolorgray 0 TeXcolorgray 3353 149 551 4 v 3353 249
4 100 v 3408 219 a Ft(x)p 3503 249 V 136 w Fw(0)p 3701
249 V 159 w(2)p 3900 249 V 3353 252 551 4 v 3353 352
4 100 v 3410 322 a Ft(y)p 3503 352 V 110 w Fv(\241)p
Fw(2)p 3701 352 V 103 w Fv(\241)p Fw(2)p 3900 352 V 3353
355 551 4 v -246 845 a(On)h(place)g(\340)f(chaque)h(fois)g(les)g(deux)f
(points)i(en)f(gr)q(is)o(,)f(puis)i(on)e(tr)o(ace)h(les)g(droites)f(en)
h(couleur)g(:)p 0 TeXcolorgray 0 TeXcolorgray 973 2633
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 235.4022 a add def
/d 0.0 a add neg def /h 202.12918 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 973 2633 a 1565 1768 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -91.04913 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 164.04189 0.0 -71.36032 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 22.76228 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -68.28685 0.0 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 97.87788 0.0 -104.2513   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 22.76228 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 164.04189  0 -71.36032  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -71.36032
 164.04189  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-104.2513  def /maxTickline 97.87788  def /dT 1491749 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 22.76228  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 22.76228
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 97.87788
0.0 -104.2513   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 164.04189
0.0 -71.36032 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 97.87788  0 -104.2513  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -104.2513
 97.87788  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-71.36032  def /maxTickline 164.04189  def /dT 1491749 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 22.76228  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 22.76228  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 97.87788
0.0 -104.2513   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 164.04189
0.0 -71.36032 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1550 1865 a Fp(0)158
b(1)g(2)g(3)g(4)g(5)g(6)-1375 b Fj(\241)p Fp(1)-262 b
Fj(\241)p Fp(2)g Fj(\241)p Fp(3)1476 1787 y(0)1435 1976
y Fj(\241)p Fp(1)1435 2165 y Fj(\241)p Fp(2)1435 2354
y Fj(\241)p Fp(3)1435 2543 y Fj(\241)p Fp(4)1476 1598
y(1)1476 1409 y(2)1476 1220 y(3)1565 1768 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0.49803 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.135027624309382
def /x1 7.206740331491703 def /dx x1 x sub 49 div def /F@pstplot ((-4.--1.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 22.76228 mul F@pstplot
22.76228 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30 22.76228
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 22.76228 mul gt { moveto } {
dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 1 0.49803 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1565 1768 a
tx@Dict begin { 101.38412 37.78546 } PutCoor PutBegin  end
 1565 1768 a 1 0.49803 0
TeXcolorrgb 53 x Ft(D)1628 1833 y Fp(1)p 0 TeXcolorgray
1565 1768 a
tx@Dict begin  PutEnd  end
 1565 1768 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.135027624309382
def /x1 7.206740331491703 def /dx x1 x sub 49 div def /F@pstplot ((-0.--2.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 22.76228 mul F@pstplot
22.76228 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30 22.76228
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 22.76228 mul gt { moveto } {
dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1565 1768 a
tx@Dict begin { 31.32904 60.54774 } PutCoor PutBegin  end
 1565 1768 a 0.49803 0 1 TeXcolorrgb 53 x
Ft(D)1628 1833 y Fp(2)p 0 TeXcolorgray 1565 1768 a
tx@Dict begin  PutEnd  end
 1565
1768 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.135027624309382
def /x1 7.206740331491703 def /dx x1 x sub 49 div def /F@pstplot ((--3.-2.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 22.76228 mul F@pstplot
22.76228 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30 22.76228
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 22.76228 mul gt { moveto } {
dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1565 1768
a
tx@Dict begin { 79.19249 -79.66798 } PutCoor PutBegin  end
 1565 1768 a 0 1 0 TeXcolorrgb 53 x Ft(D)1628 1833 y
Fp(3)p 0 TeXcolorgray 1565 1768 a
tx@Dict begin  PutEnd  end
 1565 1768 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.135027624309382
def /x1 7.206740331491703 def /dx x1 x sub 49 div def /F@pstplot ((-2.-0.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 22.76228 mul F@pstplot
22.76228 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30 22.76228
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 22.76228 mul gt { moveto } {
dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1565 1768 a
tx@Dict begin { 91.04913 -34.14342 } PutCoor PutBegin  end
 1565 1768 a 0 0 1
TeXcolorrgb 53 x Ft(D)1628 1833 y Fp(4)p 0 TeXcolorgray
1565 1768 a
tx@Dict begin  PutEnd  end
 1565 1768 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 0.0 0.0   false
NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 45.52457 91.04913
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 0.0 68.28685  
false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 45.52457 -22.76228
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 0.0 -91.04913 
 false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 45.52457 -45.52457
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 0.0 -45.52457 
 false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
2927 2633 a
currentpoint initclip moveto
 2927 2633 a -246 2816 a Fx(R)o(emarque)14
b(:)k Fw(La)f(droite)g Ft(D)567 2828 y Fp(4)619 2816
y Fw(est)h(hor)q(izontale)o(.)g(C'\351tait)g(pr\351visible)o(,)h
(puisque)g(la)f(valeur)g(de)j Ft(y)41 b Fw(\()p Fv(\241)p
Fw(2\))17 b(est)h(ind\351pendante)h(de)g Ft(x)5 b Fw(.)-246
2783 y
SDict begin H.S end
 -246 2783 a -246 2783 a
SDict begin 12 H.A end
 -246 2783 a -246 2783
a
SDict begin [/View [/XYZ H.V]/Dest (exo.11) cvn /DEST pdfmark end
 -246 2783 a 0 TeXcolorgray 180 x Fx(Ex)o(er)o(cice)14
b(11)p 0 TeXcolorgray 41 w Fw(On)j(lit)h(gr)o(aphiquement)i(les)e(or)o
(donn\351es)g(\340)f(l)o('or)q(igine)h(et)g(les)g(coef\002cients)g(dir)
o(ecteurs)g(des)f(droites)g(:)p 0 TeXcolorgray 0 TeXcolorgray
-246 5184 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 266.31767 a add def
/d 0.0 a add neg def /h 242.41748 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 -246 5184 a 392 4579 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -56.90549 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 189.49536 0.0 -76.82231 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 169.57854 0.0 -72.83894   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 189.49536  0 -76.82231  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -76.82231
 189.49536  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.83894  def /maxTickline 169.57854  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 169.57854
0.0 -72.83894   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.49536
0.0 -76.82231 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 169.57854  0 -72.83894  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -72.83894
 169.57854  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-76.82231  def /maxTickline 189.49536  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 169.57854
0.0 -72.83894   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.49536
0.0 -76.82231 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 377 4676 a Fp(0)205
b(1)g(2)g(3)h(4)f(5)g(6)-1705 b Fj(\241)p Fp(1)-310 b
Fj(\241)p Fp(2)303 4598 y(0)261 4835 y Fj(\241)p Fp(1)261
5071 y Fj(\241)p Fp(2)303 4362 y(1)303 4126 y(2)303 3889
y(3)303 3653 y(4)303 3417 y(5)392 4579 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -1 def /x1 5 def /dx
x1 x sub 49 div def /F@pstplot ((-1.--2.*x)/1.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 1 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
-28.45274 0.0 -28.45274   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 28.45274 28.45274 -28.45274   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 56.90549
28.45274 28.45274 28.45274   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 85.35823 56.90549 28.45274   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
85.35823 56.90549 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
85.35823 142.26372 85.35823 85.35823   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 392 4579 a
tx@Dict begin { 71.13185 158.76636 } PutCoor PutBegin  end
 392 4579 a 0 1 0
TeXcolorrgb 53 x Ft(D)455 4644 y Fp(1)p 0 TeXcolorgray
392 4579 a
tx@Dict begin  PutEnd  end
 392 4579 a 392 4579 a
tx@Dict begin { 30.15984 -9.67383 } PutCoor PutBegin  end
 392 4579 a 0.49803 0 1
TeXcolorrgb 51 x Fv(\305)p Fw(2)p 0 TeXcolorgray 392
4579 a
tx@Dict begin  PutEnd  end
 392 4579 a 392 4579 a
tx@Dict begin { 58.61258 58.0434 } PutCoor PutBegin  end
 392 4579 a 0.49803 0 1 TeXcolorrgb
51 x Fv(\305)p Fw(2)p 0 TeXcolorgray 392 4579 a
tx@Dict begin  PutEnd  end
 392 4579
a 392 4579 a
tx@Dict begin { 87.06532 115.51807 } PutCoor PutBegin  end
 392 4579 a 0.49803 0 1 TeXcolorrgb 51 x
Fv(\305)p Fw(2)p 0 TeXcolorgray 392 4579 a
tx@Dict begin  PutEnd  end
 392 4579 a
392 4579 a
tx@Dict begin { -53.49129 -24.185 } PutCoor PutBegin  end
 392 4579 a 1 0.49803 0 TeXcolorrgb 420 4664
a Ft(b)18 b Fv(\306)d(\241)p Fw(1)p 392 4582 283 4 v
392 4691 4 111 v 671 4691 V 392 4693 283 4 v 0 TeXcolorgray
392 4579 a
tx@Dict begin  PutEnd  end
 392 4579 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 109.25842
108.68968 134.29698 77.96066   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
392 4579 a
tx@Dict begin { 120.0706 76.82231 } PutCoor PutBegin  end
 392 4579 a 0.49803 0 1 TeXcolorrgb 422 4658
a Ft(a)j Fv(\306)d Fw(2)p 392 4582 230 4 v 392 4685 4
105 v 618 4685 V 392 4687 230 4 v 0 TeXcolorgray 392
4579 a
tx@Dict begin  PutEnd  end
 392 4579 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0.49803 0  setrgbcolor  [ 0.0
-28.45274   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1965 5184 a
currentpoint initclip moveto
 1965 5184 a 0 1 0 TeXcolorrgb 591 5521 a
Ft(D)654 5533 y Fp(1)704 5521 y Fw(:)j Ft(y)j Fv(\306)p
0.49803 0 1 TeXcolorrgb 15 w Fw(2)p 0 1 0 TeXcolorrgb
2 w Ft(x)p 1 0.49803 0 TeXcolorrgb 5 w Fv(\241)p Fw(1)p
0 1 0 TeXcolorrgb 0 TeXcolorgray 591 5646 a Ft(D)654
5658 y Fp(1)704 5646 y Fw(:)d Ft(y)j Fv(\306)15 b Fw(2)r
Ft(x)g Fv(\241)10 b Fw(1)p 0 TeXcolorgray 1946 5676 9
2596 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1992
5184 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 266.31767 a add def
/d 0.0 a add neg def /h 242.41748 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1992 5184 a 2629 4579 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -56.90549 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 189.49536 0.0 -76.82231 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 169.57854 0.0 -72.83894   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 189.49536  0 -76.82231  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -76.82231
 189.49536  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.83894  def /maxTickline 169.57854  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 169.57854
0.0 -72.83894   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.49536
0.0 -76.82231 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 169.57854  0 -72.83894  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -72.83894
 169.57854  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-76.82231  def /maxTickline 189.49536  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 169.57854
0.0 -72.83894   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.49536
0.0 -76.82231 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2614 4676 a Fp(0)205
b(1)g(2)h(3)f(4)g(5)g(6)-1705 b Fj(\241)p Fp(1)-309 b
Fj(\241)p Fp(2)2540 4598 y(0)2499 4835 y Fj(\241)p Fp(1)2499
5071 y Fj(\241)p Fp(2)2540 4362 y(1)2540 4126 y(2)2540
3889 y(3)2540 3653 y(4)2540 3417 y(5)2629 4579 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -1 def /x1 5 def /dx
x1 x sub 49 div def /F@pstplot ((--4.-1.*x)/1.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 1 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 2629 4579 a
tx@Dict begin { 113.81097 15.93346 } PutCoor PutBegin  end
 2629 4579 a 0 1 0
TeXcolorrgb 53 x Ft(D)2692 4644 y Fp(2)p 0 TeXcolorgray
2629 4579 a
tx@Dict begin  PutEnd  end
 2629 4579 a 2629 4579 a
tx@Dict begin { 30.15984 101.29169 } PutCoor PutBegin  end
 2629 4579 a 0.49803 0 1
TeXcolorrgb 51 x Fv(\241)p Fw(1)p 0 TeXcolorgray 2629
4579 a
tx@Dict begin  PutEnd  end
 2629 4579 a 2629 4579 a
tx@Dict begin { -50.64584 127.46815 } PutCoor PutBegin  end
 2629 4579 a 1 0.49803 0
TeXcolorrgb 2658 4664 a Ft(b)18 b Fv(\306)c Fw(4)p 2629
4582 228 4 v 2629 4691 4 111 v 2853 4691 V 2629 4693
228 4 v 0 TeXcolorgray 2629 4579 a
tx@Dict begin  PutEnd  end
 2629 4579 a 2629 4579
a
tx@Dict begin { 102.99878 104.13713 } PutCoor PutBegin  end
 2629 4579 a 0.49803 0 1 TeXcolorrgb 2660 4658 a Ft(a)k
Fv(\306)c(\241)p Fw(1)p 2629 4582 285 4 v 2629 4685 4
105 v 2910 4685 V 2629 4687 285 4 v 0 TeXcolorgray 2629
4579 a
tx@Dict begin  PutEnd  end
 2629 4579 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
113.81097 0.0 113.81097   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 85.35823 28.45274 113.81097   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 56.90549
85.35823 28.45274 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 56.90549 56.90549 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
56.90549 56.90549 56.90549   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
85.35823 28.45274 85.35823 56.90549   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 2629 4579 a
tx@Dict begin { 58.61258 72.83894 } PutCoor PutBegin  end
 2629 4579 a 0.49803 0 1
TeXcolorrgb 51 x Fv(\241)p Fw(1)p 0 TeXcolorgray 2629
4579 a
tx@Dict begin  PutEnd  end
 2629 4579 a 2629 4579 a
tx@Dict begin { 87.06532 44.3862 } PutCoor PutBegin  end
 2629 4579 a 0.49803 0 1
TeXcolorrgb 51 x Fv(\241)p Fw(1)p 0 TeXcolorgray 2629
4579 a
tx@Dict begin  PutEnd  end
 2629 4579 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 78.5294
70.56267 107.55133 87.06532   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0.49803 0  setrgbcolor  [ 0.0
113.81097   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 4203 5184 a
currentpoint initclip moveto
 4203
5184 a 0 1 0 TeXcolorrgb 2811 5521 a Ft(D)2874 5533 y
Fp(2)2924 5521 y Fw(:)k Ft(y)j Fv(\306)p 0.49803 0 1
TeXcolorrgb 14 w(\241)p Fw(1)p 0 1 0 TeXcolorrgb 3 w
Ft(x)p 1 0.49803 0 TeXcolorrgb 5 w Fv(\305)p Fw(4)p 0 1 0
TeXcolorrgb 0 TeXcolorgray 2811 5646 a Ft(D)2874 5658
y Fp(2)2924 5646 y Fw(:)d Ft(y)j Fv(\306)14 b(\241)r
Ft(x)h Fv(\305)10 b Fw(4)p 0 TeXcolorgray 1930 5895 a(5)p
0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -232 1213 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 256.11636 a add def
/d 0.0 a add neg def /h 175.66972 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 -232 1213 a
172 215 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -113.81097 T 7
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 207.4672 0.0 -48.64917 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -28.45274 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 55.52097 0.0 -120.14876   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 207.4672  0 -48.64917  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -48.64917
 207.4672  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-120.14876  def /maxTickline 55.52097  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 55.52097
0.0 -120.14876   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 207.4672
0.0 -48.64917 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 55.52097  0 -120.14876  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -120.14876
 55.52097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-48.64917  def /maxTickline 207.4672  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 55.52097
0.0 -120.14876   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 207.4672
0.0 -48.64917 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 157 312 a Fp(0)205 b(1)g(2)g(3)h(4)f(5)g(6)
-1705 b Fj(\241)p Fp(1)83 235 y(0)41 471 y Fj(\241)p
Fp(1)41 707 y Fj(\241)p Fp(2)41 943 y Fj(\241)p Fp(3)41
1180 y Fj(\241)p Fp(4)83 -2 y(1)172 215 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -1 def /x1 5 def /dx
x1 x sub 49 div def /F@pstplot ((-2.--0.5*x)/1.)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 1 0
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 172 215 a
tx@Dict begin { 120.45352 25.96893 } PutCoor PutBegin  end
 172 215 a 0 1 0 TeXcolorrgb
54 x Ft(D)235 281 y Fp(3)p 0 TeXcolorgray 172 215 a
tx@Dict begin  PutEnd  end
 172
215 a 172 215 a
tx@Dict begin { -42.67911 -40.79662 } PutCoor PutBegin  end
 172 215 a 1 0.49803 0 TeXcolorrgb 200
301 a Ft(b)18 b Fv(\306)d(\241)p Fw(2)p 172 219 283 4
v 172 328 4 111 v 451 328 V 172 330 283 4 v 0 TeXcolorgray
172 215 a
tx@Dict begin  PutEnd  end
 172 215 a 172 215 a
tx@Dict begin { 110.05553 -65.44139 } PutCoor PutBegin  end
 172 215 a 0.49803 0 1 TeXcolorrgb
202 295 a Ft(a)j Fv(\306)d Fw(0,)8 b(5)p 172 219 299
4 v 172 332 4 116 v 467 332 V 172 334 299 4 v 0 TeXcolorgray
172 215 a
tx@Dict begin  PutEnd  end
 172 215 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
-56.90549 0.0 -56.90549   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 -42.67911 28.45274 -56.90549   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 56.90549
-42.67911 28.45274 -42.67911   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 -28.45274 56.90549 -42.67911   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
-28.45274 56.90549 -28.45274   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
85.35823 -14.22636 85.35823 -28.45274   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 172 215 a
tx@Dict begin { 31.86693 -48.36957 } PutCoor PutBegin  end
 172 215 a 0.49803 0 1
TeXcolorrgb 51 x Fv(\305)p Fw(0,)g(5)p 0 TeXcolorgray
172 215 a
tx@Dict begin  PutEnd  end
 172 215 a 172 215 a
tx@Dict begin { 60.31967 -34.1432 } PutCoor PutBegin  end
 172 215 a 0.49803 0 1 TeXcolorrgb
51 x Fv(\305)p Fw(0,)g(5)p 0 TeXcolorgray 172 215 a
tx@Dict begin  PutEnd  end
 172
215 a 172 215 a
tx@Dict begin { 88.77242 -19.91682 } PutCoor PutBegin  end
 172 215 a 0.49803 0 1 TeXcolorrgb 51
x Fv(\305)p Fw(0,)g(5)p 0 TeXcolorgray 172 215 a
tx@Dict begin  PutEnd  end
 172
215 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.43004
-30.15984 119.90607 -59.75093   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0.49803 0  setrgbcolor  [ 0.0
-56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1895 1213 a
currentpoint initclip moveto
 1895 1213 a 0 1 0
TeXcolorrgb 557 2209 a Ft(D)620 2221 y Fp(3)669 2209
y Fw(:)19 b Ft(y)i Fv(\306)p 0.49803 0 1 TeXcolorrgb
14 w Fw(0,)8 b(5)p 0 1 0 TeXcolorrgb 4 w Ft(x)p 1 0.49803 0
TeXcolorrgb 5 w Fv(\241)p Fw(2)p 0 1 0 TeXcolorrgb 0
TeXcolorgray 557 2334 a Ft(D)620 2346 y Fp(3)669 2334
y Fw(:)19 b Ft(y)i Fv(\306)14 b Fw(0,)8 b(5)r Ft(x)15
b Fv(\241)10 b Fw(2)p 0 TeXcolorgray 1946 2363 9 2610
v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1992 1841
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 262.1333 a add def
/d 0.0 a add neg def /h 240.28926 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1992 1841 a 2545 878 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 195.47107 0.0 -66.66223 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 124.31186 0.0 -115.9774   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 195.47107  0 -66.66223  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -66.66223
 195.47107  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-115.9774  def /maxTickline 124.31186  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.31186
0.0 -115.9774   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 195.47107
0.0 -66.66223 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 124.31186  0 -115.9774  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -115.9774
 124.31186  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-66.66223  def /maxTickline 195.47107  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.31186
0.0 -115.9774   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 195.47107
0.0 -66.66223 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2530 975 a Fp(0)205
b(1)g(2)g(3)g(4)h(5)f(6)-1706 b Fj(\241)p Fp(1)-309 b
Fj(\241)p Fp(2)2456 897 y(0)2414 1133 y Fj(\241)p Fp(1)2414
1370 y Fj(\241)p Fp(2)2414 1606 y Fj(\241)p Fp(3)2414
1842 y Fj(\241)p Fp(4)2456 661 y(1)2456 425 y(2)2456
188 y(3)2545 878 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -1 def /x1 5 def /dx
x1 x sub 49 div def /F@pstplot ((--3.-1.5*x)/1.)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 1 0
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
2545 878 a
tx@Dict begin { 89.62596 -71.16832 } PutCoor PutBegin  end
 2545 878 a 0 1 0 TeXcolorrgb 53 x Ft(D)2608
943 y Fp(4)p 0 TeXcolorgray 2545 878 a
tx@Dict begin  PutEnd  end
 2545 878 a 2545
878 a
tx@Dict begin { -54.90012 103.02744 } PutCoor PutBegin  end
 2545 878 a 1 0.49803 0 TeXcolorrgb 2573 963 a Ft(b)18
b Fv(\306)c Fw(3)p 2545 881 228 4 v 2545 990 4 111 v
2769 990 V 2545 992 228 4 v 0 TeXcolorgray 2545 878 a
tx@Dict begin  PutEnd  end

2545 878 a 2545 878 a
tx@Dict begin { 112.014 -55.48492 } PutCoor PutBegin  end
 2545 878 a 0.49803 0 1 TeXcolorrgb
2575 957 a Ft(a)k Fv(\306)c(\241)p Fw(1,)8 b(5)p 2545
881 354 4 v 2545 994 4 116 v 2895 994 V 2545 996 354
4 v 0 TeXcolorgray 2545 878 a
tx@Dict begin  PutEnd  end
 2545 878 a 2545 878 a
tx@Dict begin { 29.67749 66.86412 } PutCoor PutBegin  end
 2545
878 a 0.49803 0 1 TeXcolorrgb 51 x Fv(\241)p Fw(1,)g(5)p
0 TeXcolorgray 2545 878 a
tx@Dict begin  PutEnd  end
 2545 878 a 2545 878 a
tx@Dict begin { 58.80316 24.185 } PutCoor PutBegin  end
 2545
878 a 0.49803 0 1 TeXcolorrgb 51 x Fv(\241)p Fw(1,)g(5)p
0 TeXcolorgray 2545 878 a
tx@Dict begin  PutEnd  end
 2545 878 a 2545 878 a
tx@Dict begin { 87.36923 -18.4941 } PutCoor PutBegin  end
 2545
878 a 0.49803 0 1 TeXcolorrgb 51 x Fv(\241)p Fw(1,)g(5)p
0 TeXcolorgray 2545 878 a
tx@Dict begin  PutEnd  end
 2545 878 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 107.86653
-30.39862 119.90607 -53.93065   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
85.35823 0.0 85.35823   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 42.67911 28.45274 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 56.90549
42.67911 28.45274 42.67911   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 0.0 56.90549 42.67911   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 56.90549 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
85.35823 -42.67911 85.35823 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0.49803 0  setrgbcolor  [ 0.0
85.35823   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 4168 1841 a
currentpoint initclip moveto
 4168
1841 a 0 1 0 TeXcolorrgb 2767 2209 a Ft(D)2830 2221 y
Fp(4)2879 2209 y Fw(:)19 b Ft(y)i Fv(\306)p 0.49803 0 1
TeXcolorrgb 14 w(\241)p Fw(1,)8 b(5)p 0 1 0 TeXcolorrgb
3 w Ft(x)p 1 0.49803 0 TeXcolorrgb 5 w Fv(\305)p Fw(3)p
0 1 0 TeXcolorrgb 0 TeXcolorgray 2767 2334 a Ft(D)2830
2346 y Fp(4)2879 2334 y Fw(:)19 b Ft(y)i Fv(\306)14 b(\241)p
Fw(1,)8 b(5)r Ft(x)15 b Fv(\305)10 b Fw(3)-246 2426 y
SDict begin H.S end

-246 2426 a -246 2426 a
SDict begin 12 H.A end
 -246 2426 a -246 2426 a
SDict begin [/View [/XYZ H.V]/Dest (exo.12) cvn /DEST pdfmark end
 -246
2426 a 0 TeXcolorgray 100 x Fx(Ex)o(er)o(cice)k(12)p
0 TeXcolorgray 41 w Fw(Le)k(gr)o(aphique)h(suivant)f(donne)g(le)g(pr)q
(ix)f(pay\351)g(dans)h(une)g(pompe)h(\340)e(essence)h(en)g(fonction)h
(de)e(la)g(quantit\351)i(de)e(gazole)g(achet\351e)o(.)p
0 TeXcolorgray 0 TeXcolorgray 1094 4290 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 206.11479 a add def
/d 0.0 a add neg def /h 200.7048 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1094 4290 a
1274 4141 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 184.50043 0.0 -21.61436 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 182.79463 0.0 -17.91017   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 184.50043  0 -21.61436  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -21.61436
 184.50043  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-17.91017  def /maxTickline 182.79463  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.79463
0.0 -17.91017   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 184.50043
0.0 -21.61436 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 182.79463  0 -17.91017  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -17.91017
 182.79463  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-21.61436  def /maxTickline 184.50043  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.79463
0.0 -17.91017   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 184.50043
0.0 -21.61436 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1259 4238 a Fp(0)205 b(1)g(2)g(3)g(4)h(5)f(6)
1185 3925 y(1)1185 3688 y(2)1185 3452 y(3)1185 3216 y(4)1185
2980 y(5)1185 2743 y(6)1274 4141 y
tx@Dict begin { 146.53145 22.76227 } PutCoor PutBegin  end
 1274 4141 a 57 x Fw(gazole)1274
4298 y(\(en)17 b Fu(`)p Fw(\))1274 4141 y
tx@Dict begin  PutEnd  end
 1274 4141 a
1274 4141 a
tx@Dict begin { 3.41418 150.87689 } PutCoor PutBegin  end
 1274 4141 a 54 x Fw(pr)q(ix)1274 4295 y(\(en)g
Fs(N)p Fw(\))1274 4141 y
tx@Dict begin  PutEnd  end
 1274 4141 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0. def /x1 6.484452736237389 def
/dx x1 x sub 49 div def /F@pstplot (1.5*x)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.81097 170.71646 113.81097
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0.0 170.71646 113.81097
170.71646   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 42.67911 28.45274 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1274 4141 a
tx@Dict begin { 30.15984 24.46938 } PutCoor PutBegin  end
 1274
4141 a 0.49803 0 1 TeXcolorrgb 52 x Fv(\305)p Fw(1,)8
b(5)p 0 TeXcolorgray 1274 4141 a
tx@Dict begin  PutEnd  end
 1274 4141 a 2806 4290
a
currentpoint initclip moveto
 2806 4290 a -246 4461 a Fw(Il)17 b(y)g(a)g(deux)h(m\351thodes)g
(possibles)h(pour)f(r\351pondr)o(e)f(\340)g(la)h(question)h(:)p
0 TeXcolorgray -76 4560 a(\225)p 0 TeXcolorgray 42 w
Fx(P)m(ointill\351s)14 b(rouges)h(:)i Fw(4)h(litr)o(es)g(de)f(gazole)g
(co\373tent)h(6)g Fs(N)p Fw(,)f(donc)g(le)h(litr)o(e)f(co\373te)h(6)10
b Fv(\245)g Fw(4)16 b Fv(\306)e Fw(1,)8 b(5)18 b Fs(N)p
Fw(.)p 0 TeXcolorgray -76 4660 a(\225)p 0 TeXcolorgray
42 w Fx(F)o(l\350ches)d(violettes)g(:)i Fw(chaque)h(litr)o(e)g
(co\373te)g(1,5)g Fs(N)p Fw(.)-246 4740 y
SDict begin H.S end
 -246 4740 a
-246 4740 a
SDict begin 12 H.A end
 -246 4740 a -246 4740 a
SDict begin [/View [/XYZ H.V]/Dest (exo.13) cvn /DEST pdfmark end
 -246 4740 a 0 TeXcolorgray
112 x Fx(Ex)o(er)o(cice)c(13)p 0 TeXcolorgray 41 w Fw(Dans)j(chaque)h
(question,)h Ft(u)j Fw(est)c(une)g(suite)g(ar)q(ithm\351tique)i(de)d(r)
o(aison)h Ft(r)r Fw(.)-246 4894 y
SDict begin H.S end
 -246 4894 a -246 4894
a
SDict begin 12 H.A end
 -246 4894 a -246 4894 a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 -246 4894 a 0 TeXcolorgray
-141 4989 a Fw(1.)p 0 TeXcolorgray 43 w Ft(u)11 5001
y Fp(0)61 4989 y Fv(\306)c Fw(2)k(et)f Ft(r)25 b Fv(\306)14
b Fw(4.)1779 5272 y Ft(u)1828 5284 y Fp(1)1878 5272 y
Fv(\306)g Fw(2)c Fv(\305)g Fw(4)16 b Fv(\306)e Fw(6)1779
5397 y Ft(u)1828 5409 y Fp(2)1878 5397 y Fv(\306)g Fw(6)c
Fv(\305)g Fw(4)16 b Fv(\306)e Fw(10)1779 5521 y Ft(u)1828
5533 y Fp(3)1878 5521 y Fv(\306)g Fw(10)c Fv(\305)g Fw(4)16
b Fv(\306)e Fw(14.)p 0 TeXcolorgray 1930 5895 a(6)p 0
TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163 a Fw(2.)p
0 TeXcolorgray 43 w Ft(u)11 -151 y Fp(0)61 -163 y Fv(\306)14
b Fw(5)k(et)f Ft(r)25 b Fv(\306)14 b(\241)p Fw(2.)1792
134 y Ft(u)1841 146 y Fp(1)1891 134 y Fv(\306)g Fw(5)c
Fv(\241)g Fw(2)16 b Fv(\306)e Fw(3)1792 259 y Ft(u)1841
271 y Fp(2)1891 259 y Fv(\306)g Fw(3)c Fv(\241)g Fw(2)16
b Fv(\306)e Fw(1)1792 383 y Ft(u)1841 395 y Fp(3)1891
383 y Fv(\306)g Fw(1)c Fv(\241)g Fw(2)16 b Fv(\306)e(\241)p
Fw(1.)-246 621 y
SDict begin H.S end
 -246 621 a -246 621 a
SDict begin 12 H.A end
 -246 621 a -246
621 a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 -246 621 a 0 TeXcolorgray -141 705 a Fw(3.)p 0
TeXcolorgray 43 w Ft(u)11 717 y Fp(0)61 705 y Fv(\306)g
Fw(10)k(et)g Ft(r)25 b Fv(\306)14 b Fw(1,)8 b(5.)-38
819 y(P)n(our)17 b(obtenir)g Ft(u)463 831 y Fp(6)499
819 y Fw(,)g(on)h(par)q(t)f(de)g Ft(u)956 831 y Fp(0)1006
819 y Fv(\306)d Fw(10)k(et)g(on)g(r)o(ajoute)g(6)g(fois)g(1,)8
b(5.)19 b(Donc)1547 1002 y Ft(u)1596 1014 y Fp(6)1645
1002 y Fv(\306)c Fw(10)10 b Fv(\305)g Fw(6)g Fv(\243)g
Fw(1,)e(5)17 b Fv(\306)d Fw(10)c Fv(\305)g Fw(9)16 b
Fv(\306)f Fw(19.)-246 1098 y
SDict begin H.S end
 -246 1098 a -246 1098 a
SDict begin 12 H.A end

-246 1098 a -246 1098 a
SDict begin [/View [/XYZ H.V]/Dest (Item.22) cvn /DEST pdfmark end
 -246 1098 a 0 TeXcolorgray -141
1199 a Fw(4.)p 0 TeXcolorgray 43 w Ft(u)11 1211 y Fp(0)61
1199 y Fv(\306)f Fw(4)k(et)f Ft(u)319 1211 y Fp(2)369
1199 y Fv(\306)d Fw(10.)p 0 TeXcolorgray 0 TeXcolorgray
1524 1364 2 2 v 1526 1365 88 4 v 1614 1364 2 2 v 1523
1464 4 100 v 1615 1464 V 1524 1467 2 2 v 1526 1468 88
4 v 1614 1467 2 2 v 1550 1439 a(4)p 1 0 0 TeXcolorrgb
1765 1312 a Fj(\305)p Fm(r)p 0 TeXcolorgray 1639 1354
4 4 v 1641 1353 V 1643 1352 V 1645 1350 V 1646 1349 V
1648 1348 V 1650 1347 V 1652 1346 V 1654 1344 V 1655
1343 V 1657 1342 V 1659 1341 V 1661 1340 V 1663 1339
V 1664 1338 V 1666 1337 V 1668 1335 V 1670 1334 V 1672
1333 V 1673 1332 V 1675 1331 V 1677 1330 V 1679 1329
V 1681 1328 V 1683 1328 V 1684 1327 V 1686 1326 V 1688
1325 V 1690 1324 V 1692 1323 V 1693 1322 V 1695 1321
V 1697 1321 V 1699 1320 V 1701 1319 V 1702 1318 V 1704
1317 V 1706 1317 V 1708 1316 V 1710 1315 V 1712 1314
V 1713 1314 V 1715 1313 V 1717 1312 V 1719 1312 V 1721
1311 V 1722 1310 V 1724 1310 V 1726 1309 V 1728 1309
V 1730 1308 V 1731 1307 V 1733 1307 V 1735 1306 V 1737
1306 V 1739 1305 V 1740 1305 V 1742 1304 V 1744 1304
V 1746 1304 V 1748 1303 V 1750 1303 V 1751 1302 V 1753
1302 V 1755 1302 V 1757 1301 V 1759 1301 V 1760 1301
V 1762 1300 V 1939 1337 a Fi(\045)p Fh(\045)p 1838 1300
V 1840 1301 V 1842 1301 V 1844 1301 V 1845 1302 V 1847
1302 V 1849 1302 V 1851 1303 V 1853 1303 V 1854 1304
V 1856 1304 V 1858 1304 V 1860 1305 V 1862 1305 V 1864
1306 V 1865 1306 V 1867 1307 V 1869 1307 V 1871 1308
V 1873 1309 V 1874 1309 V 1876 1310 V 1878 1310 V 1880
1311 V 1882 1312 V 1883 1312 V 1885 1313 V 1887 1314
V 1889 1314 V 1891 1315 V 1892 1316 V 1894 1317 V 1896
1317 V 1898 1318 V 1900 1319 V 1902 1320 V 1903 1321
V 1905 1321 V 1907 1322 V 1909 1323 V 1911 1324 V 1912
1325 V 1914 1326 V 1916 1327 V 1918 1328 V 1920 1328
V 1921 1329 V 1923 1330 V 1925 1331 V 1927 1332 V 1929
1333 V 1931 1334 V 1932 1335 V 1934 1337 V 1936 1338
V 1963 1362 2 2 v 1965 1363 136 4 v 2101 1362 2 2 v 1962
1466 4 103 v 2103 1466 V 1963 1469 2 2 v 1965 1470 136
4 v 2101 1469 2 2 v 1989 1440 a Fw(???)p 1 0 0 TeXcolorrgb
2239 1312 a Fj(\305)p Fm(r)p 0 TeXcolorgray 2126 1341
4 4 v 2128 1340 V 2130 1339 V 2132 1338 V 2134 1337 V
2136 1335 V 2138 1334 V 2140 1333 V 2141 1332 V 2143
1331 V 2145 1330 V 2147 1329 V 2149 1328 V 2151 1328
V 2153 1327 V 2155 1326 V 2157 1325 V 2158 1324 V 2160
1323 V 2162 1322 V 2164 1321 V 2166 1321 V 2168 1320
V 2170 1319 V 2172 1318 V 2174 1317 V 2175 1317 V 2177
1316 V 2179 1315 V 2181 1314 V 2183 1314 V 2185 1313
V 2187 1312 V 2189 1312 V 2191 1311 V 2192 1310 V 2194
1310 V 2196 1309 V 2198 1309 V 2200 1308 V 2202 1307
V 2204 1307 V 2206 1306 V 2208 1306 V 2209 1305 V 2211
1305 V 2213 1304 V 2215 1304 V 2217 1304 V 2219 1303
V 2221 1303 V 2223 1302 V 2225 1302 V 2226 1302 V 2228
1301 V 2230 1301 V 2232 1301 V 2234 1300 V 2236 1300
V 2427 1342 a Fi(\045)p Fh(\045)p 2311 1300 V 2313 1300
V 2315 1301 V 2317 1301 V 2319 1301 V 2321 1302 V 2323
1302 V 2325 1302 V 2327 1303 V 2328 1303 V 2330 1304
V 2332 1304 V 2334 1304 V 2336 1305 V 2338 1305 V 2340
1306 V 2342 1306 V 2344 1307 V 2345 1307 V 2347 1308
V 2349 1309 V 2351 1309 V 2353 1310 V 2355 1310 V 2357
1311 V 2359 1312 V 2361 1312 V 2362 1313 V 2364 1314
V 2366 1314 V 2368 1315 V 2370 1316 V 2372 1317 V 2374
1317 V 2376 1318 V 2378 1319 V 2379 1320 V 2381 1321
V 2383 1321 V 2385 1322 V 2387 1323 V 2389 1324 V 2391
1325 V 2393 1326 V 2395 1327 V 2396 1328 V 2398 1328
V 2400 1329 V 2402 1330 V 2404 1331 V 2406 1332 V 2408
1333 V 2410 1334 V 2412 1335 V 2413 1337 V 2415 1338
V 2417 1339 V 2419 1340 V 2421 1341 V 2423 1342 V 2425
1343 V 2451 1364 2 2 v 2453 1365 128 4 v 2581 1364 2
2 v 2450 1464 4 100 v 2583 1464 V 2451 1467 2 2 v 2453
1468 128 4 v 2581 1467 2 2 v 2477 1439 a Fw(10)p 0 0 1
TeXcolorrgb 1528 1625 a Ft(u)1577 1637 y Fp(0)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 1991 1625 a Ft(u)2040 1637 y Fp(1)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 2475 1625 a Ft(u)2524
1637 y Fp(2)p 0 TeXcolorgray -38 1786 a Fw(D)o('apr\350s)j(le)h
(sch\351ma)g(ci-dessus)h(:)1616 1886 y Ft(r)25 b Fv(\306)14
b Fw(\(10)c Fv(\241)g Fw(4\))g Fv(\245)g Fw(2)17 b Fv(\306)d
Fw(6)c Fv(\245)g Fw(2)15 b Fv(\306)f Fw(3.)-38 2035 y(On)j(obtient)h
(donc)f(le)h(sch\351ma)g(compl\351t\351)i(:)p 0 TeXcolorgray
0 TeXcolorgray 1069 2207 V 1071 2208 88 4 v 1159 2207
2 2 v 1068 2307 4 100 v 1160 2307 V 1069 2310 2 2 v 1071
2311 88 4 v 1159 2310 2 2 v 1095 2282 a(4)p 1 0 0 TeXcolorrgb
1298 2158 a Fj(\305)p Fp(3)p 0 TeXcolorgray 1184 2195
4 4 v 1185 2193 V 1187 2192 V 1189 2191 V 1190 2190 V
1192 2189 V 1194 2187 V 1196 2186 V 1197 2185 V 1199
2184 V 1201 2183 V 1202 2182 V 1204 2181 V 1206 2180
V 1208 2179 V 1209 2178 V 1211 2177 V 1213 2176 V 1214
2175 V 1216 2174 V 1218 2173 V 1220 2172 V 1221 2171
V 1223 2170 V 1225 2169 V 1226 2168 V 1228 2167 V 1230
2166 V 1232 2165 V 1233 2164 V 1235 2164 V 1237 2163
V 1238 2162 V 1240 2161 V 1242 2160 V 1244 2160 V 1245
2159 V 1247 2158 V 1249 2157 V 1250 2157 V 1252 2156
V 1254 2155 V 1256 2155 V 1257 2154 V 1259 2154 V 1261
2153 V 1263 2152 V 1264 2152 V 1266 2151 V 1268 2151
V 1269 2150 V 1271 2150 V 1273 2149 V 1275 2149 V 1276
2148 V 1278 2148 V 1280 2147 V 1281 2147 V 1283 2146
V 1285 2146 V 1287 2145 V 1288 2145 V 1290 2145 V 1292
2144 V 1293 2144 V 1295 2144 V 1484 2193 a Fi(#)p Fh(#)p
1371 2144 V 1372 2144 V 1374 2144 V 1376 2145 V 1377
2145 V 1379 2145 V 1381 2146 V 1383 2146 V 1384 2147
V 1386 2147 V 1388 2148 V 1389 2148 V 1391 2149 V 1393
2149 V 1395 2150 V 1396 2150 V 1398 2151 V 1400 2151
V 1401 2152 V 1403 2152 V 1405 2153 V 1407 2154 V 1408
2154 V 1410 2155 V 1412 2155 V 1413 2156 V 1415 2157
V 1417 2157 V 1419 2158 V 1420 2159 V 1422 2160 V 1424
2160 V 1425 2161 V 1427 2162 V 1429 2163 V 1431 2164
V 1432 2164 V 1434 2165 V 1436 2166 V 1437 2167 V 1439
2168 V 1441 2169 V 1443 2170 V 1444 2171 V 1446 2172
V 1448 2173 V 1449 2174 V 1451 2175 V 1453 2176 V 1455
2177 V 1456 2178 V 1458 2179 V 1460 2180 V 1461 2181
V 1463 2182 V 1465 2183 V 1467 2184 V 1468 2185 V 1470
2186 V 1472 2187 V 1473 2189 V 1475 2190 V 1477 2191
V 1479 2192 V 1480 2193 V 1482 2195 V 1508 2207 2 2 v
1510 2208 88 4 v 1598 2207 2 2 v 1507 2307 4 100 v 1599
2307 V 1508 2310 2 2 v 1510 2311 88 4 v 1598 2310 2 2
v 1534 2282 a Fw(7)p 1 0 0 TeXcolorrgb 1747 2158 a Fj(\305)p
Fp(3)p 0 TeXcolorgray 1624 2196 4 4 v 1626 2195 V 1628
2193 V 1629 2192 V 1631 2191 V 1633 2190 V 1635 2189
V 1637 2187 V 1638 2186 V 1640 2185 V 1642 2184 V 1644
2183 V 1646 2182 V 1647 2181 V 1649 2180 V 1651 2179
V 1653 2178 V 1655 2177 V 1656 2176 V 1658 2175 V 1660
2174 V 1662 2173 V 1664 2172 V 1665 2171 V 1667 2170
V 1669 2169 V 1671 2168 V 1673 2167 V 1674 2166 V 1676
2165 V 1678 2164 V 1680 2164 V 1681 2163 V 1683 2162
V 1685 2161 V 1687 2160 V 1689 2160 V 1690 2159 V 1692
2158 V 1694 2157 V 1696 2157 V 1698 2156 V 1699 2155
V 1701 2155 V 1703 2154 V 1705 2154 V 1707 2153 V 1708
2152 V 1710 2152 V 1712 2151 V 1714 2151 V 1716 2150
V 1717 2150 V 1719 2149 V 1721 2149 V 1723 2148 V 1725
2148 V 1726 2147 V 1728 2147 V 1730 2146 V 1732 2146
V 1734 2145 V 1735 2145 V 1737 2145 V 1739 2144 V 1741
2144 V 1742 2144 V 1744 2143 V 1923 2182 a Fi(\045)p
Fh(\045)p 1820 2143 V 1821 2144 V 1823 2144 V 1825 2144
V 1827 2145 V 1829 2145 V 1830 2145 V 1832 2146 V 1834
2146 V 1836 2147 V 1838 2147 V 1839 2148 V 1841 2148
V 1843 2149 V 1845 2149 V 1847 2150 V 1848 2150 V 1850
2151 V 1852 2151 V 1854 2152 V 1856 2152 V 1857 2153
V 1859 2154 V 1861 2154 V 1863 2155 V 1864 2155 V 1866
2156 V 1868 2157 V 1870 2157 V 1872 2158 V 1873 2159
V 1875 2160 V 1877 2160 V 1879 2161 V 1881 2162 V 1882
2163 V 1884 2164 V 1886 2164 V 1888 2165 V 1890 2166
V 1891 2167 V 1893 2168 V 1895 2169 V 1897 2170 V 1899
2171 V 1900 2172 V 1902 2173 V 1904 2174 V 1906 2175
V 1908 2176 V 1909 2177 V 1911 2178 V 1913 2179 V 1915
2180 V 1917 2181 V 1918 2182 V 1920 2183 V 1947 2207
2 2 v 1949 2208 128 4 v 2077 2207 2 2 v 1946 2307 4 100
v 2079 2307 V 1947 2310 2 2 v 1949 2311 128 4 v 2077
2310 2 2 v 1973 2282 a Fw(10)p 1 0 0 TeXcolorrgb 2217
2158 a Fj(\305)p Fp(3)p 0 TeXcolorgray 2103 2185 4 4
v 2105 2184 V 2107 2183 V 2109 2182 V 2111 2181 V 2113
2180 V 2115 2179 V 2117 2178 V 2118 2177 V 2120 2176
V 2122 2175 V 2124 2174 V 2126 2173 V 2128 2172 V 2130
2171 V 2131 2170 V 2133 2169 V 2135 2168 V 2137 2167
V 2139 2166 V 2141 2165 V 2143 2164 V 2145 2164 V 2146
2163 V 2148 2162 V 2150 2161 V 2152 2160 V 2154 2160
V 2156 2159 V 2158 2158 V 2160 2157 V 2161 2157 V 2163
2156 V 2165 2155 V 2167 2155 V 2169 2154 V 2171 2154
V 2173 2153 V 2175 2152 V 2176 2152 V 2178 2151 V 2180
2151 V 2182 2150 V 2184 2150 V 2186 2149 V 2188 2149
V 2190 2148 V 2191 2148 V 2193 2147 V 2195 2147 V 2197
2146 V 2199 2146 V 2201 2145 V 2203 2145 V 2205 2145
V 2206 2144 V 2208 2144 V 2210 2144 V 2212 2143 V 2214
2143 V 2402 2184 a Fi(\045)p Fh(\045)p 2289 2143 V 2291
2143 V 2293 2144 V 2294 2144 V 2296 2144 V 2298 2145
V 2300 2145 V 2302 2145 V 2304 2146 V 2306 2146 V 2308
2147 V 2309 2147 V 2311 2148 V 2313 2148 V 2315 2149
V 2317 2149 V 2319 2150 V 2321 2150 V 2323 2151 V 2324
2151 V 2326 2152 V 2328 2152 V 2330 2153 V 2332 2154
V 2334 2154 V 2336 2155 V 2338 2155 V 2339 2156 V 2341
2157 V 2343 2157 V 2345 2158 V 2347 2159 V 2349 2160
V 2351 2160 V 2353 2161 V 2354 2162 V 2356 2163 V 2358
2164 V 2360 2164 V 2362 2165 V 2364 2166 V 2366 2167
V 2368 2168 V 2369 2169 V 2371 2170 V 2373 2171 V 2375
2172 V 2377 2173 V 2379 2174 V 2381 2175 V 2382 2176
V 2384 2177 V 2386 2178 V 2388 2179 V 2390 2180 V 2392
2181 V 2394 2182 V 2396 2183 V 2397 2184 V 2399 2185
V 2427 2207 2 2 v 2428 2208 128 4 v 2556 2207 2 2 v 2426
2307 4 100 v 2558 2307 V 2427 2310 2 2 v 2428 2311 128
4 v 2556 2310 2 2 v 2452 2282 a Fw(13)p 1 0 0 TeXcolorrgb
2696 2158 a Fj(\305)p Fp(3)p 0 TeXcolorgray 2583 2185
4 4 v 2585 2184 V 2587 2183 V 2589 2182 V 2590 2181 V
2592 2180 V 2594 2179 V 2596 2178 V 2598 2177 V 2600
2176 V 2602 2175 V 2604 2174 V 2605 2173 V 2607 2172
V 2609 2171 V 2611 2170 V 2613 2169 V 2615 2168 V 2617
2167 V 2619 2166 V 2620 2165 V 2622 2164 V 2624 2164
V 2626 2163 V 2628 2162 V 2630 2161 V 2632 2160 V 2633
2160 V 2635 2159 V 2637 2158 V 2639 2157 V 2641 2157
V 2643 2156 V 2645 2155 V 2647 2155 V 2648 2154 V 2650
2154 V 2652 2153 V 2654 2152 V 2656 2152 V 2658 2151
V 2660 2151 V 2662 2150 V 2663 2150 V 2665 2149 V 2667
2149 V 2669 2148 V 2671 2148 V 2673 2147 V 2675 2147
V 2677 2146 V 2678 2146 V 2680 2145 V 2682 2145 V 2684
2145 V 2686 2144 V 2688 2144 V 2690 2144 V 2692 2143
V 2693 2143 V 2882 2184 a Fi(\045)p Fh(\045)p 2768 2143
V 2770 2143 V 2772 2144 V 2774 2144 V 2776 2144 V 2778
2145 V 2780 2145 V 2781 2145 V 2783 2146 V 2785 2146
V 2787 2147 V 2789 2147 V 2791 2148 V 2793 2148 V 2795
2149 V 2796 2149 V 2798 2150 V 2800 2150 V 2802 2151
V 2804 2151 V 2806 2152 V 2808 2152 V 2810 2153 V 2811
2154 V 2813 2154 V 2815 2155 V 2817 2155 V 2819 2156
V 2821 2157 V 2823 2157 V 2825 2158 V 2826 2159 V 2828
2160 V 2830 2160 V 2832 2161 V 2834 2162 V 2836 2163
V 2838 2164 V 2840 2164 V 2841 2165 V 2843 2166 V 2845
2167 V 2847 2168 V 2849 2169 V 2851 2170 V 2853 2171
V 2855 2172 V 2856 2173 V 2858 2174 V 2860 2175 V 2862
2176 V 2864 2177 V 2866 2178 V 2868 2179 V 2870 2180
V 2871 2181 V 2873 2182 V 2875 2183 V 2877 2184 V 2879
2185 V 2906 2207 2 2 v 2908 2208 128 4 v 3036 2207 2
2 v 2905 2307 4 100 v 3038 2307 V 2906 2310 2 2 v 2908
2311 128 4 v 3036 2310 2 2 v 2932 2282 a Fw(16)p 0 0 1
TeXcolorrgb 1073 2466 a Ft(u)1122 2478 y Fp(0)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 1512 2466 a Ft(u)1561 2478 y Fp(1)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 1971 2466 a Ft(u)2020
2478 y Fp(2)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 2450 2466
a Ft(u)2499 2478 y Fp(3)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
2930 2466 a Ft(u)2979 2478 y Fp(4)p 0 TeXcolorgray -38
2628 a Fw(\(On)d(peut)h(aussi)h(obtenir)e Ft(u)799 2640
y Fp(4)852 2628 y Fw(avec)g(le)h(calcul)g(:)f Ft(u)1410
2640 y Fp(4)1460 2628 y Fv(\306)e Fw(4)10 b Fv(\305)g
Fw(4)g Fv(\243)g Fw(3)16 b Fv(\306)e Fw(4)c Fv(\305)g
Fw(12)16 b Fv(\306)e Fw(16.\))-246 2659 y
SDict begin H.S end
 -246 2659 a
-246 2659 a
SDict begin 12 H.A end
 -246 2659 a -246 2659 a
SDict begin [/View [/XYZ H.V]/Dest (Item.23) cvn /DEST pdfmark end
 -246 2659 a 0 TeXcolorgray
-141 2756 a Fw(5.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1246 2894 2 2 v 1248 2895 88 4 v 1336 2894 2 2 v 1245
2995 4 100 v 1337 2995 V 1246 2998 2 2 v 1248 2999 88
4 v 1336 2998 2 2 v 1272 2969 a(5)p 1 0 0 TeXcolorrgb
1487 2842 a Fj(\305)p Fm(r)p 0 TeXcolorgray 1361 2884
4 4 v 1363 2883 V 1364 2882 V 1366 2881 V 1368 2879 V
1370 2878 V 1372 2877 V 1373 2876 V 1375 2875 V 1377
2873 V 1379 2872 V 1381 2871 V 1383 2870 V 1384 2869
V 1386 2868 V 1388 2867 V 1390 2866 V 1392 2865 V 1393
2864 V 1395 2863 V 1397 2862 V 1399 2861 V 1401 2860
V 1402 2859 V 1404 2858 V 1406 2857 V 1408 2856 V 1410
2855 V 1412 2854 V 1413 2853 V 1415 2852 V 1417 2852
V 1419 2851 V 1421 2850 V 1422 2849 V 1424 2848 V 1426
2848 V 1428 2847 V 1430 2846 V 1431 2845 V 1433 2845
V 1435 2844 V 1437 2843 V 1439 2843 V 1440 2842 V 1442
2841 V 1444 2841 V 1446 2840 V 1448 2839 V 1450 2839
V 1451 2838 V 1453 2838 V 1455 2837 V 1457 2837 V 1459
2836 V 1460 2836 V 1462 2835 V 1464 2835 V 1466 2834
V 1468 2834 V 1469 2833 V 1471 2833 V 1473 2833 V 1475
2832 V 1477 2832 V 1478 2831 V 1480 2831 V 1482 2831
V 1484 2830 V 1661 2867 a Fi(\045)p Fh(\045)p 1560 2830
V 1562 2831 V 1564 2831 V 1565 2831 V 1567 2832 V 1569
2832 V 1571 2833 V 1573 2833 V 1574 2833 V 1576 2834
V 1578 2834 V 1580 2835 V 1582 2835 V 1583 2836 V 1585
2836 V 1587 2837 V 1589 2837 V 1591 2838 V 1592 2838
V 1594 2839 V 1596 2839 V 1598 2840 V 1600 2841 V 1602
2841 V 1603 2842 V 1605 2843 V 1607 2843 V 1609 2844
V 1611 2845 V 1612 2845 V 1614 2846 V 1616 2847 V 1618
2848 V 1620 2848 V 1621 2849 V 1623 2850 V 1625 2851
V 1627 2852 V 1629 2852 V 1631 2853 V 1632 2854 V 1634
2855 V 1636 2856 V 1638 2857 V 1640 2858 V 1641 2859
V 1643 2860 V 1645 2861 V 1647 2862 V 1649 2863 V 1650
2864 V 1652 2865 V 1654 2866 V 1656 2867 V 1658 2868
V 1685 2893 2 2 v 1687 2894 136 4 v 1823 2893 2 2 v 1684
2996 4 103 v 1825 2996 V 1685 2999 2 2 v 1687 3000 136
4 v 1823 2999 2 2 v 1711 2970 a Fw(???)p 1 0 0 TeXcolorrgb
1962 2842 a Fj(\305)p Fm(r)p 0 TeXcolorgray 1849 2871
4 4 v 1851 2870 V 1853 2869 V 1855 2868 V 1856 2867 V
1858 2866 V 1860 2865 V 1862 2864 V 1864 2863 V 1866
2862 V 1868 2861 V 1870 2860 V 1872 2859 V 1874 2858
V 1875 2857 V 1877 2856 V 1879 2855 V 1881 2854 V 1883
2853 V 1885 2852 V 1887 2852 V 1889 2851 V 1891 2850
V 1893 2849 V 1895 2848 V 1896 2848 V 1898 2847 V 1900
2846 V 1902 2845 V 1904 2845 V 1906 2844 V 1908 2843
V 1910 2843 V 1912 2842 V 1914 2841 V 1916 2841 V 1917
2840 V 1919 2839 V 1921 2839 V 1923 2838 V 1925 2838
V 1927 2837 V 1929 2837 V 1931 2836 V 1933 2836 V 1935
2835 V 1936 2835 V 1938 2834 V 1940 2834 V 1942 2833
V 1944 2833 V 1946 2833 V 1948 2832 V 1950 2832 V 1952
2831 V 1954 2831 V 1956 2831 V 1957 2830 V 1959 2830
V 2148 2870 a Fi(\045)p Fh(\045)p 2036 2830 V 2037 2830
V 2039 2831 V 2041 2831 V 2043 2831 V 2045 2832 V 2047
2832 V 2049 2833 V 2051 2833 V 2053 2833 V 2055 2834
V 2056 2834 V 2058 2835 V 2060 2835 V 2062 2836 V 2064
2836 V 2066 2837 V 2068 2837 V 2070 2838 V 2072 2838
V 2074 2839 V 2076 2839 V 2077 2840 V 2079 2841 V 2081
2841 V 2083 2842 V 2085 2843 V 2087 2843 V 2089 2844
V 2091 2845 V 2093 2845 V 2095 2846 V 2096 2847 V 2098
2848 V 2100 2848 V 2102 2849 V 2104 2850 V 2106 2851
V 2108 2852 V 2110 2852 V 2112 2853 V 2114 2854 V 2116
2855 V 2117 2856 V 2119 2857 V 2121 2858 V 2123 2859
V 2125 2860 V 2127 2861 V 2129 2862 V 2131 2863 V 2133
2864 V 2135 2865 V 2136 2866 V 2138 2867 V 2140 2868
V 2142 2869 V 2144 2870 V 2146 2871 V 2173 2893 2 2 v
2174 2894 136 4 v 2310 2893 2 2 v 2172 2996 4 103 v 2312
2996 V 2173 2999 2 2 v 2174 3000 136 4 v 2310 2999 2
2 v 2198 2970 a Fw(???)p 1 0 0 TeXcolorrgb 2465 2842
a Fj(\305)p Fm(r)p 0 TeXcolorgray 2336 2875 4 4 v 2338
2873 V 2340 2872 V 2342 2871 V 2344 2870 V 2346 2869
V 2349 2868 V 2351 2867 V 2353 2866 V 2355 2865 V 2357
2864 V 2359 2863 V 2361 2862 V 2363 2861 V 2365 2860
V 2367 2859 V 2369 2858 V 2371 2857 V 2373 2856 V 2375
2855 V 2377 2854 V 2379 2853 V 2381 2852 V 2383 2852
V 2385 2851 V 2387 2850 V 2389 2849 V 2391 2848 V 2393
2848 V 2395 2847 V 2397 2846 V 2399 2845 V 2401 2845
V 2403 2844 V 2405 2843 V 2407 2843 V 2409 2842 V 2411
2841 V 2413 2841 V 2415 2840 V 2417 2839 V 2419 2839
V 2421 2838 V 2423 2838 V 2425 2837 V 2427 2837 V 2429
2836 V 2431 2836 V 2433 2835 V 2436 2835 V 2438 2834
V 2440 2834 V 2442 2833 V 2444 2833 V 2446 2833 V 2448
2832 V 2450 2832 V 2452 2831 V 2454 2831 V 2456 2831
V 2458 2830 V 2460 2830 V 2462 2830 V 2648 2863 a Fi(')p
Fh(')p 2539 2830 V 2541 2830 V 2543 2830 V 2545 2831
V 2547 2831 V 2549 2831 V 2551 2832 V 2553 2832 V 2555
2833 V 2557 2833 V 2559 2833 V 2561 2834 V 2563 2834
V 2565 2835 V 2567 2835 V 2569 2836 V 2571 2836 V 2573
2837 V 2575 2837 V 2577 2838 V 2579 2838 V 2581 2839
V 2583 2839 V 2585 2840 V 2587 2841 V 2589 2841 V 2591
2842 V 2593 2843 V 2595 2843 V 2597 2844 V 2599 2845
V 2601 2845 V 2603 2846 V 2606 2847 V 2608 2848 V 2610
2848 V 2612 2849 V 2614 2850 V 2616 2851 V 2618 2852
V 2620 2852 V 2622 2853 V 2624 2854 V 2626 2855 V 2628
2856 V 2630 2857 V 2632 2858 V 2634 2859 V 2636 2860
V 2638 2861 V 2640 2862 V 2642 2863 V 2644 2864 V 2660
2889 2 2 v 2662 2890 197 4 v 2859 2889 2 2 v 2659 3000
4 111 v 2861 3000 V 2660 3003 2 2 v 2662 3004 197 4 v
2859 3003 2 2 v 2686 2964 a Fw(12,)8 b(5)p 0 0 1 TeXcolorrgb
1250 3159 a Ft(u)1299 3171 y Fp(0)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 1713 3159 a Ft(u)1762 3171 y Fp(1)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 2201 3159 a Ft(u)2250 3171 y Fp(2)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 2719 3159 a Ft(u)2768
3171 y Fp(3)p 0 TeXcolorgray -38 3305 a Fw(D)o('apr\350s)17
b(le)h(sch\351ma)g(ci-dessus)h(:)1513 3405 y Ft(r)25
b Fv(\306)14 b Fw(\(12,)8 b(5)i Fv(\241)g Fw(5\))g Fv(\245)g
Fw(3)17 b Fv(\306)d Fw(7,)8 b(5)i Fv(\245)g Fw(3)17 b
Fv(\306)d Fw(2,)8 b(5.)-246 3482 y
SDict begin H.S end
 -246 3482 a -246 3482
a
SDict begin 12 H.A end
 -246 3482 a -246 3482 a
SDict begin [/View [/XYZ H.V]/Dest (exo.14) cvn /DEST pdfmark end
 -246 3482 a 0 TeXcolorgray
122 x Fx(Ex)o(er)o(cice)14 b(14)p 0 TeXcolorgray 41 w
Fw(Le)h(01/01/2019,)k(on)c(d\351pose)g(300)h Fs(N)28
b Fw(sur)14 b(un)h(compte)h(en)f(banque)o(.)f(T)-8 b(ous)16
b(les)f(mois)g(\340)g(par)q(tir)f(de)g(cette)h(date)o(,)f(on)h
(d\351poser)o(a)g(75)g Fs(N)28 b Fw(sur)-246 3704 y(ce)18
b(compte)o(.)-246 3803 y(On)g(note)g Ft(u)100 3815 y
Fm(n)161 3803 y Fw(la)f(somme)i(sur)e(le)h(compte)h(apr\350s)f
Ft(n)j Fw(mois)d(\226)g(on)f(a)g(donc)g(en)h(par)q(ticulier)g
Ft(u)2406 3815 y Fp(0)2456 3803 y Fv(\306)c Fw(300.)-246
3850 y
SDict begin H.S end
 -246 3850 a -246 3850 a
SDict begin 12 H.A end
 -246 3850 a -246 3850
a
SDict begin [/View [/XYZ H.V]/Dest (Item.24) cvn /DEST pdfmark end
 -246 3850 a 0 TeXcolorgray -141 3947 a Fw(1.)p 0 TeXcolorgray
43 w Ft(u)11 3959 y Fp(1)61 3947 y Fv(\306)g Fw(300)c
Fv(\305)g Fw(75)17 b Fv(\306)d Fw(375,)19 b Ft(u)699
3959 y Fp(2)749 3947 y Fv(\306)14 b Fw(375)c Fv(\305)g
Fw(75)17 b Fv(\306)d Fw(450.)-38 4061 y(On)j(aur)o(a)g(375)i
Fs(N)34 b Fw(le)18 b(1)605 4037 y Fk(er)668 4061 y Fw(f\351vr)q(ier)f
(et)h(450)h Fs(N)34 b Fw(le)18 b(1)1340 4037 y Fk(er)1402
4061 y Fw(mars)o(.)-246 4077 y
SDict begin H.S end
 -246 4077 a -246 4077
a
SDict begin 12 H.A end
 -246 4077 a -246 4077 a
SDict begin [/View [/XYZ H.V]/Dest (Item.25) cvn /DEST pdfmark end
 -246 4077 a 0 TeXcolorgray
-141 4190 a Fw(2.)p 0 TeXcolorgray 43 w(La)f(suite)i
Ft(u)j Fw(est)c(ar)q(ithm\351tique)h(de)e(r)o(aison)h
Ft(r)25 b Fv(\306)14 b Fw(75.)-246 4222 y
SDict begin H.S end
 -246 4222 a
-246 4222 a
SDict begin 12 H.A end
 -246 4222 a -246 4222 a
SDict begin [/View [/XYZ H.V]/Dest (Item.26) cvn /DEST pdfmark end
 -246 4222 a 0 TeXcolorgray
-141 4319 a Fw(3.)p 0 TeXcolorgray 43 w(La)j(for)q(mule)i(\340)e(entr)o
(er)g(dans)g(la)h(cellule)h(C2)f(est)1925 4418 y(=B2+75)-246
4469 y
SDict begin H.S end
 -246 4469 a -246 4469 a
SDict begin 12 H.A end
 -246 4469 a -246 4469
a
SDict begin [/View [/XYZ H.V]/Dest (Item.27) cvn /DEST pdfmark end
 -246 4469 a 0 TeXcolorgray -141 4583 a Fw(4.)p 0 TeXcolorgray
0 TeXcolorgray 1930 5895 a(7)p 0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 986 1542 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 257.2422 a add def
/d 0.0 a add neg def /h 215.30507 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 986 1542 a 1527
1291 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 13 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 192.05591 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 14.2395
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 14 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.11353 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 14.22636
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 192.05591  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 192.05591  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 185.11353  def /dT 932339 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 14.22636  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 14.22636  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.11353
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 192.05591
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.11353  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 185.11353  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 192.05591  def /dT 933200 abs 65536 div viceversa
{ neg } if def /DT 100. abs viceversa { neg } if def /subTNo 2 def
subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0
0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 0.1424  mul cntTick add def x abs MaxValue abs le { false { x minTickline
exch moveto x maxTickline exch lineto } { x tickstart STsize mul exch
moveto x tickend STsize mul exch lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul exch
moveto cntsubTick maxTickline STsize mul exch lineto } { cntsubTick
tickstart STsize mul exch moveto cntsubTick tickend STsize mul exch
lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave false { cntTick minTickline exch moveto cntTick maxTickline
exch lineto } { cntTick tickstart exch moveto cntTick tickend exch
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 0.1424  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.11353
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 192.05591
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1512 1388 a Fp(0)87 b(1)g(2)g(3)g(4)g(5)g(6)h
(7)f(8)g(9)71 b(10)57 b(11)f(12)1438 1310 y(0)1377 1192
y(100)1377 1074 y(200)1377 956 y(300)1377 838 y(400)1377
719 y(500)1377 601 y(600)1377 483 y(700)1377 365 y(800)1377
246 y(900)1346 128 y(1000)1346 10 y(1100)1346 -108 y(1200)1527
1291 y
tx@Dict begin { 105.8431 -14.2395 } PutCoor PutBegin  end
 1527 1291 a 57 x Ft(n)22 b Fw(\(nombr)o(e)17 b(de)g(mois\))1527
1291 y
tx@Dict begin  PutEnd  end
 1527 1291 a 1527 1291 a
tx@Dict begin { -64.01863 176.56982 } PutCoor PutBegin  end
 1527 1291 a 38 x Ft(u)1576
1341 y Fm(n)1527 1291 y
tx@Dict begin  PutEnd  end
 1527 1291 a 1527 1291 a
tx@Dict begin { -64.01863 166.60217 } PutCoor PutBegin  end
 1527
1291 a 54 x Fw(\(somme)1527 1291 y
tx@Dict begin  PutEnd  end
 1527 1291 a 1527 1291
a
tx@Dict begin { -64.01863 156.63452 } PutCoor PutBegin  end
 1527 1291 a 57 x Fw(en)h Fs(N)p Fw(\))1527 1291 y
tx@Dict begin  PutEnd  end
 1527
1291 a 1527 1291 a
tx@Dict begin { 18.49431 49.83826 } PutCoor PutBegin  end
 1527 1291 a 0.49803 0 1 TeXcolorrgb
51 x Fv(\305)p Fw(75)p 0 TeXcolorgray 1527 1291 a
tx@Dict begin  PutEnd  end
 1527
1291 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.2
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 14.22636
42.7185 0.0 42.7185   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.2
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
14.22636 53.39813 14.22636 42.7185   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.71637 170.87402 0.0
42.7185   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.71637 170.87402 170.71637
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.71637 170.87402 0.0
170.87402   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.30196 0.30196 1  setrgbcolor
 [ 0.0 42.7185   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.30196 0.30196 1  setrgbcolor
 [ 14.22636 53.39813   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.30196 0.30196 1  setrgbcolor
 [ 28.45273 64.07776   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.30196 0.30196 1  setrgbcolor
 [ 42.6791 74.75739   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
3122 1542 a
currentpoint initclip moveto
 3122 1542 a -246 1586 a
SDict begin H.S end
 -246 1586 a -246
1586 a
SDict begin 12 H.A end
 -246 1586 a -246 1586 a
SDict begin [/View [/XYZ H.V]/Dest (Item.28) cvn /DEST pdfmark end
 -246 1586 a 0 TeXcolorgray
-141 1700 a Fw(5.)p 0 TeXcolorgray 43 w(L)-10 b('\351quation)19
b(de)e(la)h(droite)f(qui)h(passe)g(par)f(tous)h(les)h(points)f(est)1831
1883 y Ft(y)j Fv(\306)14 b Fw(75)r Ft(x)h Fv(\305)10
b Fw(300)-38 2065 y(\(75)18 b(corr)o(espond)f(\340)g
Ft(r)r Fw(,)h(et)f(300)i(\340)e Ft(u)955 2077 y Fp(0)991
2065 y Fw(\).)-246 2097 y
SDict begin H.S end
 -246 2097 a -246 2097 a
SDict begin 12 H.A end
 -246
2097 a -246 2097 a
SDict begin [/View [/XYZ H.V]/Dest (Item.29) cvn /DEST pdfmark end
 -246 2097 a 0 TeXcolorgray -141 2194
a Fw(6.)p 0 TeXcolorgray 43 w(Le)h(01/01/2020)j(\(donc)c(au)h(bout)f
(de)g(12)h(mois\),)h(on)e(aur)o(a)1662 2377 y(75)10 b
Fv(\243)g Fw(12)g Fv(\305)g Fw(300)19 b Fv(\306)14 b
Fw(1)8 b(200)19 b Fs(N)p Fw(.)-38 2574 y(La)e(r\351ponse)i(est)f
(con\002r)q(m\351e)f(par)g(la)h(constr)q(uction)g(en)g(pointill\351s)i
(rouges)d(du)g(gr)o(aphique)o(.)-246 2659 y
SDict begin H.S end
 -246 2659
a -246 2659 a
SDict begin 12 H.A end
 -246 2659 a -246 2659 a
SDict begin [/View [/XYZ H.V]/Dest (exo.15) cvn /DEST pdfmark end
 -246 2659 a -246
2678 a
SDict begin H.S end
 -246 2678 a -246 2678 a
SDict begin 12 H.A end
 -246 2678 a -246 2678
a
SDict begin [/View [/XYZ H.V]/Dest (Item.30) cvn /DEST pdfmark end
 -246 2678 a 0 TeXcolorgray 95 x Fx(Ex)o(er)o(cice)d(15)p
0 TeXcolorgray 0 TeXcolorgray 146 w Fw(1.)p 0 TeXcolorgray
43 w Ft(u)452 2785 y Fp(1)502 2773 y Fv(\306)g Fw(600)c
Fv(\241)g Fw(50)17 b Fv(\306)d Fw(550,)19 b Ft(u)1140
2785 y Fp(2)1190 2773 y Fv(\306)14 b Fw(550)c Fv(\241)g
Fw(50)17 b Fv(\306)d Fw(500.)-246 2800 y
SDict begin H.S end
 -246 2800 a
-246 2800 a
SDict begin 12 H.A end
 -246 2800 a -246 2800 a
SDict begin [/View [/XYZ H.V]/Dest (Item.31) cvn /DEST pdfmark end
 -246 2800 a 0 TeXcolorgray
-141 2902 a Fw(2.)p 0 TeXcolorgray 43 w(La)j(suite)i
Ft(u)j Fw(est)c(ar)q(ithm\351tique)h(de)e(r)o(aison)h
Ft(r)25 b Fv(\306)14 b(\241)p Fw(50.)-246 2934 y
SDict begin H.S end
 -246
2934 a -246 2934 a
SDict begin 12 H.A end
 -246 2934 a -246 2934 a
SDict begin [/View [/XYZ H.V]/Dest (Item.32) cvn /DEST pdfmark end
 -246 2934
a 0 TeXcolorgray -141 3031 a Fw(3.)p 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 880 4498 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 282.77002 a add def
/d 0.0 a add neg def /h 168.67453 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 880 4498 a 1273
4306 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 235.3772 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 22.74933
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 11 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 145.46414 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 22.76228
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 235.3772  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 235.3772  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 145.46414  def /dT 1491749 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 22.76228  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 22.76228  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 145.46414
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 235.3772
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 145.46414  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 145.46414  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 235.3772  def /dT 1490900 abs 65536 div viceversa
{ neg } if def /DT 100. abs viceversa { neg } if def /subTNo 2 def
subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0
0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 0.2275  mul cntTick add def x abs MaxValue abs le { false { x minTickline
exch moveto x maxTickline exch lineto } { x tickstart STsize mul exch
moveto x tickend STsize mul exch lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul exch
moveto cntsubTick maxTickline STsize mul exch lineto } { cntsubTick
tickstart STsize mul exch moveto cntsubTick tickend STsize mul exch
lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave false { cntTick minTickline exch moveto cntTick maxTickline
exch lineto } { cntTick tickstart exch moveto cntTick tickend exch
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 0.2275  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 145.46414
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 235.3772
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1258 4403 a Fp(0)158 b(1)g(2)g(3)g(4)g(5)g(6)g
(7)g(8)g(9)1185 4325 y(0)1123 4136 y(100)1123 3947 y(200)1123
3758 y(300)1123 3570 y(400)1123 3381 y(500)1273 4306
y
tx@Dict begin { 146.58742 -15.92453 } PutCoor PutBegin  end
 1273 4306 a 57 x Ft(n)22 b Fw(\(nombr)o(e)17 b(d)n('ann\351es\))1273
4306 y
tx@Dict begin  PutEnd  end
 1273 4306 a 1273 4306 a
tx@Dict begin { -45.07512 122.84637 } PutCoor PutBegin  end
 1273 4306 a 38 x Ft(u)1322
4356 y Fm(n)1273 4306 y
tx@Dict begin  PutEnd  end
 1273 4306 a 1273 4306 a
tx@Dict begin { -45.07512 113.74664 } PutCoor PutBegin  end
 1273
4306 a 54 x Fw(\(quota)1273 4306 y
tx@Dict begin  PutEnd  end
 1273 4306 a 1273 4306
a
tx@Dict begin { -45.07512 104.64691 } PutCoor PutBegin  end
 1273 4306 a 57 x Fw(de)h(p\352che\))1273 4306 y
tx@Dict begin  PutEnd  end
 1273
4306 a 1273 4306 a
tx@Dict begin { 29.59103 131.9461 } PutCoor PutBegin  end
 1273 4306 a 0.49803 0 1 TeXcolorrgb
51 x Fv(\241)p Fw(50)p 0 TeXcolorgray 1273 4306 a
tx@Dict begin  PutEnd  end
 1273
4306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.2
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 22.76228
136.49597 0.0 136.49597   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.2
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
22.76228 125.1213 22.76228 136.49597   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 1.2 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 227.62283 22.74933 0.0
136.49597   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 227.62283 22.74933 227.62283
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 227.62283 22.74933 0.0
22.74933   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0
0 add  DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.30196 0.30196 1  setrgbcolor
 [ 0.0 136.49597   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.30196 0.30196 1  setrgbcolor
 [ 22.76228 125.1213   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.30196 0.30196 1  setrgbcolor
 [ 45.52457 113.74664   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.30196 0.30196 1  setrgbcolor
 [ 68.28685 102.37198   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
3228 4498 a
currentpoint initclip moveto
 3228 4498 a -246 4542 a
SDict begin H.S end
 -246 4542 a -246
4542 a
SDict begin 12 H.A end
 -246 4542 a -246 4542 a
SDict begin [/View [/XYZ H.V]/Dest (Item.33) cvn /DEST pdfmark end
 -246 4542 a 0 TeXcolorgray
-141 4657 a Fw(4.)p 0 TeXcolorgray 43 w(L)-10 b('\351quation)19
b(de)e(la)h(droite)f(qui)h(passe)g(par)f(tous)h(les)h(points)f(est)1803
4839 y Ft(y)j Fv(\306)14 b(\241)p Fw(50)r Ft(x)h Fv(\305)10
b Fw(600)-38 5022 y(\()p Fv(\241)p Fw(50)18 b(corr)o(espond)f(\340)g
Ft(r)r Fw(,)h(et)f(600)i(\340)e Ft(u)1010 5034 y Fp(0)1046
5022 y Fw(\).)-246 5054 y
SDict begin H.S end
 -246 5054 a -246 5054 a
SDict begin 12 H.A end
 -246
5054 a -246 5054 a
SDict begin [/View [/XYZ H.V]/Dest (Item.34) cvn /DEST pdfmark end
 -246 5054 a 0 TeXcolorgray -141 5151
a Fw(5.)p 0 TeXcolorgray 43 w(Le)h(quota)g(de)f(p\352che)h(en)g(2025)h
(\(donc)e(au)g(bout)h(de)f(10)h(ans\))f(est)1563 5333
y Fv(\241)p Fw(50)10 b Fv(\243)g Fw(10)g Fv(\305)g Fw(600)18
b Fv(\306)c Fw(100)19 b(T)-8 b(onnes)r(.)-38 5531 y(La)17
b(r\351ponse)i(est)f(con\002r)q(m\351e)f(par)g(la)h(constr)q(uction)g
(en)g(pointill\351s)i(rouges)d(du)g(gr)o(aphique)o(.)-246
5616 y
SDict begin H.S end
 -246 5616 a -246 5616 a
SDict begin 12 H.A end
 -246 5616 a -246 5616
a
SDict begin [/View [/XYZ H.V]/Dest (exo.16) cvn /DEST pdfmark end
 -246 5616 a 0 TeXcolorgray 1930 5895 a Fw(8)p 0 TeXcolorgray
eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.9) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -246 -163 a Fx(Ex)o(er)o(cice)14 b(16)p
0 TeXcolorgray 41 w Fw(On)j(note)h Ft(S)k Fw(la)c(somme)g(\340)g
(calculer)-5 b(,)18 b(que)g(l)o('on)g(\351cr)q(it)f(\340)h(l)o
('endroit,)g(puis)g(\340)f(l)o('envers)i(:)1336 6 y Ft(S)g
Fv(\306)p 1 0 0 TeXcolorrgb 14 w Fw(1)p 0 TeXcolorgray
92 w Fv(\305)p 0 0 1 TeXcolorrgb 10 w Fw(2)p 0 TeXcolorgray
51 w Fv(\305)p 0 1 0 TeXcolorrgb 10 w Fw(3)p 0 TeXcolorgray
51 w Fv(\305)10 b(\242)e(\242)g(\242)k(\305)p 1 0.5 0
TeXcolorrgb 10 w Fw(98)p 0 TeXcolorgray 11 w Fv(\305)p
0.5 0 0.5 TeXcolorrgb 10 w Fw(99)p 0 TeXcolorgray 11
w Fv(\305)p 0.75 0.5 0.25 TeXcolorrgb 10 w Fw(100)p 0
TeXcolorgray 1336 130 a Ft(S)19 b Fv(\306)p 1 0 0 TeXcolorrgb
14 w Fw(100)p 0 TeXcolorgray 12 w Fv(\305)p 0 0 1 TeXcolorrgb
10 w Fw(99)p 0 TeXcolorgray 11 w Fv(\305)p 0 1 0 TeXcolorrgb
10 w Fw(98)p 0 TeXcolorgray 11 w Fv(\305)10 b(\242)e(\242)g(\242)k
(\305)p 1 0.5 0 TeXcolorrgb 10 w Fw(3)p 0 TeXcolorgray
51 w Fv(\305)p 0.5 0 0.5 TeXcolorrgb 10 w Fw(2)p 0 TeXcolorgray
51 w Fv(\305)p 0.75 0.5 0.25 TeXcolorrgb 10 w Fw(1)p
0 TeXcolorgray -246 299 a(On)19 b(ajoute)g(membr)o(e)g(\340)f(membr)o
(e)h(les)g(deux)g(lignes)o(.)g(On)f(r)o(emarque)g(que)i(la)e(somme)i
(de)e(chaque)h(couple)h(d)n('une)f(m\352me)h(couleur)f(vaut)g(toujours)
-246 398 y(101)33 b(:)1181 597 y Ft(S)15 b Fv(\305)10
b Ft(S)18 b Fv(\306)p 1 0 0 TeXcolorrgb 14 w Fw(101)p
0 TeXcolorgray 12 w Fv(\305)p 0 0 1 TeXcolorrgb 10 w
Fw(101)p 0 TeXcolorgray 12 w Fv(\305)p 0 1 0 TeXcolorrgb
10 w Fw(101)p 0 TeXcolorgray 11 w Fv(\305)10 b(\242)e(\242)g(\242)k
(\305)p 1 0.5 0 TeXcolorrgb 10 w Fw(101)p 0 TeXcolorgray
11 w Fv(\305)p 0.5 0 0.5 TeXcolorrgb 10 w Fw(101)p 0
TeXcolorgray 12 w Fv(\305)p 0.75 0.5 0.25 TeXcolorrgb
10 w Fw(101)p 0 TeXcolorgray 1430 632 a Fg(|)p 1464 632
562 10 v 562 w({z)p 2094 632 V 562 w(})1915 709 y Fp(100)17
b(termes)2699 597 y Fw(.)-246 823 y(On)h(a)f(donc)1099
940 y(2)p Ft(S)j Fv(\306)14 b Fw(100)c Fv(\243)g Fw(101)476
b Ft(S)18 b Fv(\306)2198 884 y Fw(100)10 b Fv(\243)g
Fw(101)p 2198 921 319 5 v 2337 997 a(2)2541 940 y Fv(\306)k
Fw(5)8 b(050.)-246 1059 y
SDict begin H.S end
 -246 1059 a -246 1059 a
SDict begin 12 H.A end
 -246
1059 a -246 1059 a
SDict begin [/View [/XYZ H.V]/Dest (exo.17) cvn /DEST pdfmark end
 -246 1059 a 0 TeXcolorgray 94 x Fx(Ex)o(er)o(cice)14
b(17)p 0 TeXcolorgray 41 w Fw(On)j(constr)q(uit)h(une)f(p)n(yr)o(amide)
h(en)f(superposant)i(des)e(carr\351s)f(:)h(tout)h(en)f(haut,)h(on)f(a)g
Ft(u)2767 1165 y Fp(0)2816 1153 y Fv(\306)e Fw(1)i(carr\351,)f(en)i
(dessous)f Ft(u)3600 1165 y Fp(1)3650 1153 y Fv(\306)e
Fw(3)i(carr\351s)o(,)g(etc)o(.)p 0 TeXcolorgray 0 TeXcolorgray
1270 2260 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 163.88763 a add def
/d 0.0 a add neg def /h 121.77771 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1270 2260 a 2059 2582 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  [ -28.45274 113.81097 0.0
113.81097 0.0 142.26372 -28.45274 142.26372  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 1 0.75 0.75  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  [ -56.90549 85.35823 -28.45274
85.35823 -28.45274 113.81097 -56.90549 113.81097  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0 1  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  [ -28.45274 85.35823 0.0
85.35823 0.0 113.81097 -28.45274 113.81097  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0 1  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  [ 0.0 85.35823 28.45274 85.35823
28.45274 113.81097 0.0 113.81097  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0 0 1  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  [ -85.35823 56.90549 -56.90549
56.90549 -56.90549 85.35823 -85.35823 85.35823  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 1 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  [ -56.90549 56.90549 -28.45274
56.90549 -28.45274 85.35823 -56.90549 85.35823  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 1 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  [ -28.45274 56.90549 0.0
56.90549 0.0 85.35823 -28.45274 85.35823  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 1 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  [ 0.0 56.90549 28.45274 56.90549
28.45274 85.35823 0.0 85.35823  /Lineto /lineto load def 0  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0 1 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  [ 28.45274 56.90549 56.90549
56.90549 56.90549 85.35823 28.45274 85.35823  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 1 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 2630 2260 a
currentpoint initclip moveto
 2630 2260 a -246
2317 a
SDict begin H.S end
 -246 2317 a -246 2317 a
SDict begin 12 H.A end
 -246 2317 a -246 2317
a
SDict begin [/View [/XYZ H.V]/Dest (Item.35) cvn /DEST pdfmark end
 -246 2317 a 0 TeXcolorgray -141 2429 a Fw(1.)p 0 TeXcolorgray
43 w(\300)g(chaque)h(\351tage)f(de)g(la)h(p)n(yr)o(amide)o(,)f(on)h
(ajoute)g(deux)g(carr\351s)o(,)f(donc)h Ft(u)j Fw(est)d(ar)q
(ithm\351tique)h(de)e(r)o(aison)h Ft(r)25 b Fv(\306)14
b Fw(2.)-246 2460 y
SDict begin H.S end
 -246 2460 a -246 2460 a
SDict begin 12 H.A end
 -246 2460
a -246 2460 a
SDict begin [/View [/XYZ H.V]/Dest (Item.36) cvn /DEST pdfmark end
 -246 2460 a 0 TeXcolorgray -141 2552 a
Fw(2.)p 0 TeXcolorgray 0 TeXcolorgray 88 w(\225)p 0 TeXcolorgray
42 w(Le)k(nombr)o(e)f(de)g(carr\351s)g(de)g(la)g(1)1021
2529 y Fk(r)o(e)1083 2552 y Fw(r)o(ang\351e)h(est)g Ft(u)1500
2564 y Fp(0)1549 2552 y Fv(\306)d Fw(1.)p 0 TeXcolorgray
7 2652 a(\225)p 0 TeXcolorgray 42 w(Le)j(nombr)o(e)f(de)g(carr\351s)g
(de)g(la)g(2)1021 2628 y Fk(e)1065 2652 y Fw(r)o(ang\351e)g(est)h
Ft(u)1481 2664 y Fp(1)1531 2652 y Fv(\306)c Fw(3.)p 0
TeXcolorgray 7 2752 a(\225)p 0 TeXcolorgray 42 w(Le)k(nombr)o(e)f(de)g
(carr\351s)g(de)g(la)g(3)1021 2728 y Fk(e)1065 2752 y
Fw(r)o(ang\351e)g(est)h Ft(u)1481 2764 y Fp(2)1531 2752
y Fv(\306)c Fw(5.)p 0 TeXcolorgray 7 2851 a(\225)p 0
TeXcolorgray 42 w Fv(\242)8 b(\242)g(\242)p 0 TeXcolorgray
7 2951 a Fw(\225)p 0 TeXcolorgray 42 w(Le)18 b(nombr)o(e)f(de)g
(carr\351s)g(de)g(la)g(100)1101 2927 y Fk(e)1146 2951
y Fw(r)o(ang\351e)g(est)h Ft(u)1562 2963 y Fp(99)1643
2951 y Fv(\306)c Fw(1)c Fv(\305)g Fw(99)g Fv(\243)g Fw(2)17
b Fv(\306)d Fw(199.)-38 3107 y Fl(")p Fw(Il)j(y)g(a)g(un)h(d\351calage)
f(:)g(le)h(nombr)o(e)f(de)g(carr\351s)g(de)g(la)h(100)1698
3083 y Fk(e)1742 3107 y Fw(r)o(ang\351e)g(est)g Ft(u)2159
3119 y Fp(99)2225 3107 y Fw(.)-246 3138 y
SDict begin H.S end
 -246 3138 a
-246 3138 a
SDict begin 12 H.A end
 -246 3138 a -246 3138 a
SDict begin [/View [/XYZ H.V]/Dest (Item.37) cvn /DEST pdfmark end
 -246 3138 a 0 TeXcolorgray
-141 3231 a Fw(3.)p 0 TeXcolorgray 43 w(Le)g(nombr)o(e)f(total)h(de)f
(carr\351s)g(de)g(la)h(1)1079 3207 y Fk(r)o(e)1140 3231
y Fw(\340)f(la)h(100)1396 3207 y Fk(e)1440 3231 y Fw(r)o(ang\351e)g
(est)1732 3399 y(1)10 b Fv(\305)g Fw(3)g Fv(\305)g Fw(5)g
Fv(\305)g(\242)e(\242)g(\242)13 b(\305)d Fw(199.)-38
3579 y(On)17 b(calcule)h(cette)g(somme)h(comme)f(dans)g(l)o('exer)o
(cice)g(pr\351c\351dent)g(:)f(on)h(note)1480 3748 y Ft(S)h
Fv(\306)14 b Fw(1)c Fv(\305)g Fw(3)g Fv(\305)g Fw(5)g
Fv(\305)g(\242)e(\242)g(\242)14 b(\305)c Fw(195)g Fv(\305)g
Fw(197)g Fv(\305)g Fw(199)-38 3916 y(et)18 b(on)f(\351cr)q(it)g
Ft(S)22 b Fw(\340)17 b(l)o('endroit)h(et)g(\340)f(l)o('envers)i(:)1359
4196 y Ft(S)g Fv(\306)p 1 0 0 TeXcolorrgb 14 w Fw(1)p
0 TeXcolorgray 92 w Fv(\305)p 0 0 1 TeXcolorrgb 10 w
Fw(3)p 0 TeXcolorgray 91 w Fv(\305)p 0 1 0 TeXcolorrgb
10 w Fw(5)p 0 TeXcolorgray 92 w Fv(\305)10 b(\242)e(\242)g(\242)j(\305)
p 1 0.5 0 TeXcolorrgb 10 w Fw(195)p 0 TeXcolorgray 12
w Fv(\305)p 0.5 0 0.5 TeXcolorrgb 10 w Fw(197)p 0 TeXcolorgray
12 w Fv(\305)p 0.75 0.5 0.25 TeXcolorrgb 10 w Fw(199)p
0 TeXcolorgray 1359 4321 a Ft(S)19 b Fv(\306)p 1 0 0
TeXcolorrgb 14 w Fw(199)p 0 TeXcolorgray 12 w Fv(\305)p
0 0 1 TeXcolorrgb 10 w Fw(197)p 0 TeXcolorgray 11 w Fv(\305)p
0 1 0 TeXcolorrgb 10 w Fw(195)p 0 TeXcolorgray 12 w Fv(\305)10
b(\242)e(\242)g(\242)j(\305)p 1 0.5 0 TeXcolorrgb 10
w Fw(5)p 0 TeXcolorgray 92 w Fv(\305)p 0.5 0 0.5 TeXcolorrgb
10 w Fw(3)p 0 TeXcolorgray 92 w Fv(\305)p 0.75 0.5 0.25
TeXcolorrgb 10 w Fw(1)p 0 TeXcolorgray -38 4501 a(La)18
b(somme)h(des)f(ter)q(mes)g(d)n('une)h(m\352me)g(couleur)g(est)f
(toujours)h(\351gale)f(\340)g(200)h(et)f(il)g(y)g(a)f(100)i(ter)q(mes)g
(\(autant)f(que)h(le)f(nombr)o(e)f(de)h(r)o(ang\351es\).)-38
4601 y(On)f(a)g(donc)g(:)1183 4828 y(2)p Ft(S)i Fv(\306)14
b Fw(100)c Fv(\243)g Fw(200)476 b Ft(S)19 b Fv(\306)2282
4772 y Fw(100)10 b Fv(\243)g Fw(200)p 2282 4809 319 5
v 2421 4885 a(2)2624 4828 y Fv(\306)15 b Fw(10)8 b(000.)-246
5010 y
SDict begin H.S end
 -246 5010 a -246 5010 a
SDict begin 12 H.A end
 -246 5010 a -246 5010
a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 -246 5010 a 109 x Fy(3)105 b(\311)n(tudes)23 b(de)g(fonctions)-246
5203 y
SDict begin H.S end
 -246 5203 a -246 5203 a
SDict begin 12 H.A end
 -246 5203 a -246 5203
a
SDict begin [/View [/XYZ H.V]/Dest (exo.18) cvn /DEST pdfmark end
 -246 5203 a 0 TeXcolorgray 100 x Fx(Ex)o(er)o(cice)14
b(18)p 0 TeXcolorgray 41 w Fw(U)m(n)27 b(vo)n(yageur)e(de)h(commer)o
(ce)g(\()p Fv(\306)g Fw(un)g(r)o(epr\351sentant\))h(fait)g(une)f(note)h
(de)f(fr)o(ais)g(pour)h(chaque)f(jour)h(de)e(tr)o(avail)i(o\371)f(il)h
(utilise)g(sa)-246 5402 y(voitur)o(e)o(.)18 b(Il)e(r)o(e\347oit)i(une)g
(par)q(t)f(\002xe)g(de)g(30)h Fs(N)p Fw(,)f(et)h(une)g(indemnit\351)h
(de)e(0,5)i Fs(N)p Fw(/km.)-246 5546 y Fx(R)o(emarque)f(:)j
Fw(On)h(peut)g(penser)g(que)g(l)o('indemnit\351)i(kilom\351tr)q(ique)f
(ser)q(t)f(\340)f(r)o(embourser)g(les)h(fr)o(ais)g(de)f(d\351placement)
i(\(par)e(exemple)i(si)f(le)g(r)o(epr\351-)-246 5646
y(sentant)d(utilise)g(sa)f(propr)o(e)e(voitur)o(e\))9
b(;)18 b(et)f(que)h(la)g(par)q(t)f(\002xe)g(ser)q(t)g(\340)g(payer)g
(les)h(r)o(epas)o(.)p 0 TeXcolorgray 1930 5895 a(9)p
0 TeXcolorgray eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.10) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.38) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163 a Fw(1.)p
0 TeXcolorgray 43 w(S)o('il)19 b(fait)e(120)i(km)f(dans)f(la)h(jour)q
(n\351e)o(,)f(le)h(montant)h(de)e(la)g(note)h(de)g(fr)o(ais)g(est)g(de)
1532 20 y(30)10 b Fv(\305)g Fw(120)g Fv(\243)g Fw(0,)e(5)19
b Fv(\306)14 b Fw(30)c Fv(\305)g Fw(60)17 b Fv(\306)d
Fw(90)k Fs(N)p Fw(.)-246 114 y
SDict begin H.S end
 -246 114 a -246 114 a
SDict begin 12 H.A end

-246 114 a -246 114 a
SDict begin [/View [/XYZ H.V]/Dest (Item.39) cvn /DEST pdfmark end
 -246 114 a 0 TeXcolorgray -141
217 a Fw(2.)p 0 TeXcolorgray 43 w(On)f(note)j Ft(x)j
Fw(le)17 b(nombr)o(e)h(de)f(km)g(par)o(cour)q(us)g(par)h(le)f(vo)n
(yageur)g(de)g(commer)o(ce)o(,)h(et)25 b Ft(f)19 b Fw(\()r
Ft(x)5 b Fw(\))17 b(le)h(montant)h(de)e(la)g(note)h(de)g(fr)o(ais)o(.)f
(On)h(a)f(alors)1543 400 y Ft(f)i Fw(\()r Ft(x)5 b Fw(\))14
b Fv(\306)g Fw(30)c Fv(\305)i Ft(x)j Fv(\243)10 b Fw(0,)e(5)18
b Fv(\306)c Fw(0,)8 b(5)r Ft(x)15 b Fv(\305)10 b Fw(30.)-246
502 y
SDict begin H.S end
 -246 502 a -246 502 a
SDict begin 12 H.A end
 -246 502 a -246 502 a
SDict begin [/View [/XYZ H.V]/Dest (Item.40) cvn /DEST pdfmark end
 -246
502 a 0 TeXcolorgray -141 597 a Fw(3.)p 0 TeXcolorgray
43 w(La)k(fonction)22 b Ft(f)34 b Fw(est)14 b(af\002ne)o(,)g(puisque)22
b Ft(f)f Fw(\()r Ft(x)5 b Fw(\))14 b Fv(\306)g Fw(0,)8
b(5)r Ft(x)f Fv(\305)r Fw(30)14 b(\(c)n('est)g(bien)g(une)g(fonction)g
(de)g(la)g(for)q(me)22 b Ft(f)i Fw(\()r Ft(x)5 b Fw(\))14
b Fv(\306)i Ft(a)6 b(x)h Fv(\305)r Ft(b)q Fw(,)14 b(avec)i
Ft(a)i Fv(\306)c Fw(0,)8 b(5)14 b(et)g Ft(b)20 b Fv(\306)14
b Fw(30\).)g(S)o(a)-38 697 y(courbe)j(r)o(epr\351sentative)i(est)f
(donc)f(une)h(droite)o(,)f(que)h(l)o('on)g(tr)o(ace)f(\340)g(par)q(tir)
h(d)n('un)f(tableau)h(de)f(valeurs)h(avec)g(deux)f(valeurs)9
b(;)18 b(par)g(exemple)h(:)p 0 TeXcolorgray 0 TeXcolorgray
654 816 666 4 v 654 916 4 100 v 762 886 a Ft(x)p 908
916 V 180 w Fw(0)p 1092 916 V 124 w(120)p 1317 916 V
654 919 666 4 v 654 1019 4 100 v 715 989 a Ft(f)g Fw(\()r
Ft(x)5 b Fw(\))p 908 1019 V 103 w(30)p 1092 1019 V 124
w(90)p 1317 1019 V 654 1022 666 4 v 608 1217 a Ft(f)19
b Fw(\(0\))14 b Fv(\306)g Fw(0,)8 b(5)i Fv(\243)g Fw(0)g
Fv(\305)g Fw(30)18 b Fv(\306)c Fw(30)527 1341 y Ft(f)19
b Fw(\(120\))c Fv(\306)f Fw(0,)8 b(5)i Fv(\243)g Fw(120)g
Fv(\305)g Fw(30)19 b Fv(\306)14 b Fw(90)p 0 TeXcolorgray
2050 1388 9 576 v 0 TeXcolorgray 2095 896 a(On)21 b(place)h(les)g
(points)h(de)e(coor)o(donn\351es)g(\(0;)8 b(30\))23 b(et)f(\(120;)8
b(90\),)23 b(puis)2095 996 y(on)18 b(tr)o(ace)g(la)g(droite)g(\226)g
(en)g(r\351alit\351)h(un)f(segment,)i(puisqu)n('on)g(va)d(de)h(0)2095
1095 y(\340)f(200)i(en)f(abscisse)o(.)-38 1635 y Fx(R)o(emarque)e(:)j
Fw(On)h(a)f(choisi)h(les)g(valeurs)h(0)f(et)f(120,)i(mais)g(on)e(peut)i
(pr)o(endr)o(e)e(n)-6 b('impor)q(te)20 b(quelles)h(valeurs)g(\226)e(l)o
('avantage)i(de)e(0,)h(c)n('est)g(que)g(le)-38 1734 y(calcul)e(est)g
(facile)9 b(;)18 b(et)f(l)o('avantage)i(de)e(120,)i(c)n('est)f(qu)n
('on)g(a)f(d\351j\340)g(fait)h(le)g(calcul)g(dans)f(la)h(question)h(1.)
p 0 TeXcolorgray 0 TeXcolorgray 1331 3543 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 174.20155 a add def
/d 0.0 a add neg def /h 207.61046 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1331 3543
a 1482 3443 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 15 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 156.01645 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 14.22714
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 13 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 195.5174 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 14.22272
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 156.01645  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 156.01645  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 195.5174  def /dT 932100 abs 65536 div viceversa
{ neg } if def /DT 20. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 0.71114  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 0.71114  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 195.5174
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 156.01645
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 195.5174  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 195.5174  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 156.01645  def /dT 932390 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 1.42271  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 195.5174
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 156.01645
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1467 3540 a Fp(0)71
b(20)56 b(40)g(60)g(80)41 b(100)25 b(120)g(140)g(160)g(180)1393
3462 y(0)1362 3344 y(10)1362 3226 y(20)1362 3108 y(30)1362
2990 y(40)1362 2872 y(50)1362 2754 y(60)1362 2635 y(70)1362
2517 y(80)1362 2399 y(90)1331 2281 y(100)1331 2163 y(110)1331
2045 y(120)1482 3443 y
tx@Dict begin { 92.44766 11.51305 } PutCoor PutBegin  end
 1482 3443 a 57 x Fw(km)17 b(par)o(cour)q(us)1482
3443 y
tx@Dict begin  PutEnd  end
 1482 3443 a 1482 3443 a
tx@Dict begin { 4.1484 180.28 } PutCoor PutBegin  end
 1482 3443 a 57 x Fw(montant)h(de)f(la)
1482 3600 y(note)h(de)f(fr)o(ais)1482 3443 y
tx@Dict begin  PutEnd  end
 1482 3443
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 142.22717 184.95285
0.0 42.68143   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 64.00223 106.70357 0.0
106.70357   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 64.00223 0.0 64.00223
106.70357   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 0.0 42.68143   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 85.3363 128.04428   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 2777 3543 a
currentpoint initclip moveto
 2777 3543 a -246
3587 a
SDict begin H.S end
 -246 3587 a -246 3587 a
SDict begin 12 H.A end
 -246 3587 a -246 3587
a
SDict begin [/View [/XYZ H.V]/Dest (Item.41) cvn /DEST pdfmark end
 -246 3587 a 0 TeXcolorgray -141 3701 a Fw(4.)p 0 TeXcolorgray
43 w(Le)j(vo)n(yageur)e(de)h(commer)o(ce)g(a)g(une)h(note)g(de)f(fr)o
(ais)g(de)g(75)h Fs(N)p Fw(.)f(P)n(our)g(d\351ter)q(miner)g(le)h(nombr)
o(e)f(de)g(km)g(par)o(cour)q(us)g(dans)g(la)g(jour)q(n\351e)o(,)h(il)f
(y)g(a)-38 3801 y(deux)e(m\351thodes)i(:)p 0 TeXcolorgray
7 3915 a(\225)p 0 TeXcolorgray 42 w Fx(G)o(raphiquement)q(.)d
Fw(On)i(voit)f(qu)n('il)i(a)e(par)o(cour)q(u)f(90)j(km)e
(\(pointill\351s)j(rouges\))p 0 0 1 TeXcolorrgb 2390
3915 a
SDict begin H.S end
 2390 3915 a -30 x Fp(2)2425 3915 y
SDict begin 12 H.L end
 2425 3915 a
2425 3915 a
SDict begin [/Subtype /Link/Dest (Hfootnote.2) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2425 3915 a 0 TeXcolorgray Fw(.)p 0 TeXcolorgray
7 4015 a(\225)p 0 TeXcolorgray 42 w Fx(P)m(ar)d(le)h(calcul.)h
Fw(On)h(r)o(etir)o(e)f(les)i(fr)o(ais)g(\002xes)f(:)g(75)11
b Fv(\241)g Fw(30)20 b Fv(\306)d Fw(45)k Fs(N)e Fw(d)n('indemnit\351)j
(kilom\351tr)q(ique)o(.)g(P)o(uis)o(,)f(comme)g(chaque)g(km)g(compte)g
(pour)80 4115 y(0,)8 b(5)18 b Fs(N)p Fw(,)f(on)h(divise)g(:)g(45)10
b Fv(\245)g Fw(0,)e(5)17 b Fv(\306)d Fw(45)c Fv(\243)g
Fw(2)16 b Fv(\306)e Fw(90)k(km)q(.)p 0 0 1 TeXcolorrgb
1536 4115 a
SDict begin H.S end
 1536 4115 a -31 x Fp(3)1571 4115 y
SDict begin 12 H.L end
 1571 4115
a 1571 4115 a
SDict begin [/Subtype /Link/Dest (Hfootnote.3) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1571 4115 a 0 TeXcolorgray -246 4192 a
SDict begin H.S end

-246 4192 a -246 4192 a
SDict begin 12 H.A end
 -246 4192 a -246 4192 a
SDict begin [/View [/XYZ H.V]/Dest (exo.19) cvn /DEST pdfmark end
 -246
4192 a -246 4210 a
SDict begin H.S end
 -246 4210 a -246 4210 a
SDict begin 12 H.A end
 -246 4210
a -246 4210 a
SDict begin [/View [/XYZ H.V]/Dest (Item.42) cvn /DEST pdfmark end
 -246 4210 a 0 TeXcolorgray 104 x Fx(Ex)o(er)o(cice)c(19)p
0 TeXcolorgray 0 TeXcolorgray 146 w Fw(1.)p 0 TeXcolorgray
0 TeXcolorgray 88 w(\225)p 0 TeXcolorgray 42 w(Lorsqu)n('on)k
(t\351l\351charge)g(50)g(M)n(o)m(,)f(on)h(paye)f(3)g
Fs(N)p Fw(.)p 0 TeXcolorgray 7 4413 a(\225)p 0 TeXcolorgray
42 w(Lorsqu)n('on)i(t\351l\351charge)f(150)h(M)n(o)m(,)e(les)i(100)g
(pr)o(emiers)f(co\373tent)h(3)f Fs(N)9 b Fw(;)17 b(et)h(les)h(50)f
(suivants)h(co\373tent)g(50)10 b Fv(\243)g Fw(0,)e(04)18
b Fv(\306)d Fw(2)j Fs(N)p Fw(.)f(On)h(paye)f(donc)g(au)80
4513 y(total)h(3)10 b Fv(\305)g Fw(2)15 b Fv(\306)f Fw(5)k
Fs(N)p Fw(.)-246 4528 y
SDict begin H.S end
 -246 4528 a -246 4528 a
SDict begin 12 H.A end
 -246
4528 a -246 4528 a
SDict begin [/View [/XYZ H.V]/Dest (Item.43) cvn /DEST pdfmark end
 -246 4528 a 0 TeXcolorgray -141 4642
a Fw(2.)p 0 TeXcolorgray 43 w(On)f(compl\350te)i(le)f(tableau)g(de)f
(valeurs)h(:)p 0 TeXcolorgray 0 TeXcolorgray 1241 4754
1626 4 v 1241 4854 4 100 v 1294 4824 a(N)n(ombr)o(e)e(de)i(M)n(o)p
1862 4854 V 102 w(0)p 2006 4854 V 104 w(50)p 2190 4854
V 104 w(100)p 2414 4854 V 104 w(150)p 2639 4854 V 105
w(200)p 2863 4854 V 1241 4857 1626 4 v 1241 4957 4 100
v 1294 4927 a(P)o(r)q(ix)f(\340)g(payer)p 1862 4957 V
218 w(3)p 2006 4957 V 124 w(3)p 2190 4957 V 164 w(3)p
2414 4957 V 185 w(5)p 2639 4957 V 184 w(7)p 2863 4957
V 1241 4960 1626 4 v -38 5084 a Fx(R)o(emarque)d(:)j
Fw(jusqu)n('\340)i(100)g(M)n(o)m(,)e(on)g(paye)g(3)h
Fs(N)p Fw(.)f(Ensuite)o(,)i(chaque)f(nouvelle)h(tr)o(anche)f(de)f(50)h
(M)n(o)f(est)h(factur\351e)g(2)g Fs(N)p Fw(.)-246 5117
y
SDict begin H.S end
 -246 5117 a -246 5117 a
SDict begin 12 H.A end
 -246 5117 a -246 5117 a
SDict begin [/View [/XYZ H.V]/Dest (Item.44) cvn /DEST pdfmark end
 -246
5117 a 0 TeXcolorgray -141 5213 a Fw(3.)p 0 TeXcolorgray
43 w(On)g(constr)q(uit)h(la)f(courbe)g(qui)h(donne)f(le)h(pr)q(ix)f
(pay\351)g(en)h(fonction)g(du)f(nombr)o(e)g(de)g(M)n(o)g
(t\351l\351charg\351s)o(.)h(Elle)g(est)g(constante)g(sur)g(l)o('inter)q
(valle)-38 5313 y([)-13 5312 y(0;)8 b(100)175 5313 y(])211
5312 y(,)17 b(puis)i(af\002ne)e(sur)h(l)o('inter)q(valle)1140
5313 y([)1165 5312 y(100;)8 b(200)1433 5313 y(])1470
5312 y(.)17 b(Il)g(faut)h(donc)f(utiliser)i(une)f(r\350gle)f(pour)h
(effectuer)h(le)f(tr)o(ac\351)p 0 0 1 TeXcolorrgb 3282
5312 a
SDict begin H.S end
 3282 5312 a -30 x Fp(4)3317 5312 y
SDict begin 12 H.L end
 3317 5312 a
3317 5312 a
SDict begin [/Subtype /Link/Dest (Hfootnote.4) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3317 5312 a 0 TeXcolorgray Fw(.)p 0 TeXcolorgray
-246 5384 1757 4 v -154 5461 a Fo(2)q(.)p 0 TeXcolorgray
-76 5461 a
SDict begin H.S end
 -76 5461 a -76 5461 a
SDict begin H.R end
 -76 5461 a -76 5461
a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.2) cvn /DEST pdfmark
end
 -76 5461 a 0 TeXcolorgray Fo(La)c(m\351thode)h(gr)o(aphique)f(est)g
(simple)o(,)g(mais)f(la)h(r\351ponse)g(pourr)o(ait)g(\352tr)o(e)g
(impr\351cise)o(.)-154 5540 y(3)q(.)p 0 TeXcolorgray
-76 5540 a
SDict begin H.S end
 -76 5540 a -76 5540 a
SDict begin H.R end
 -76 5540 a -76 5540
a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.3) cvn /DEST pdfmark
end
 -76 5540 a 0 TeXcolorgray Fo(On)f(peut)h(aussi)f(r\351soudr)o(e)h(l)o
('\351quation)g(0,)6 b(5)q Fe(x)12 b Fd(\305)c Fo(30)14
b Fd(\306)e Fo(75.)-154 5619 y(4)q(.)p 0 TeXcolorgray
-76 5619 a
SDict begin H.S end
 -76 5619 a -76 5619 a
SDict begin H.R end
 -76 5619 a -76 5619
a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.4) cvn /DEST pdfmark
end
 -76 5619 a 0 TeXcolorgray Fo(On)h(parle)h(de)g(fonction)g(\253)d
(af\002ne)k(par)e(mor)o(ceaux)e(\273.)p 0 TeXcolorgray
0 TeXcolorgray 1909 5895 a Fw(10)p 0 TeXcolorgray eop
end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.11) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1212 1227
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.76924 a add def
/d 0.0 a add neg def /h 177.37851 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1212 1227 a 1381 1082 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 9 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 182.46393 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 21.33955
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 10 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 159.95384 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 21.33865
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 182.46393  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 182.46393  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 159.95384  def /dT 1398450 abs 65536 div viceversa
{ neg } if def /DT 50. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 0.42677  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 0.42677  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 159.95384
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 182.46393
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 159.95384  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 159.95384  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 182.46393  def /dT 1398509 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 21.33955  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 159.95384
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 182.46393
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1366 1179 a Fp(0)130
b(50)100 b(100)84 b(150)g(200)g(250)g(300)h(350)1292
1102 y(0)1292 925 y(1)1292 747 y(2)1292 570 y(3)1292
393 y(4)1292 216 y(5)1292 39 y(6)1381 1082 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 42.6773 64.01866
0.0 64.01866   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 85.35461 149.37688
42.6773 64.01866   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 59.74823 98.16206 0.0
98.16206   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 59.74823 0.0 59.74823
98.16206   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 1381 1082 a
tx@Dict begin { 87.53294 11.3057 } PutCoor PutBegin  end
 1381 1082 a 57 x
Fw(N)n(ombr)o(e)16 b(de)h(M)n(o)1381 1082 y
tx@Dict begin  PutEnd  end
 1381 1082
a 1381 1082 a
tx@Dict begin { 1.34561 146.62965 } PutCoor PutBegin  end
 1381 1082 a 54 x Fw(P)o(r)q(ix)1381 1082
y
tx@Dict begin  PutEnd  end
 1381 1082 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 0.0 64.01866   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 21.33865 64.01866   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 42.6773 64.01866   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 64.01596 106.69777   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 85.35461 149.37688   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 2895 1227 a
currentpoint initclip moveto
 2895
1227 a -246 1268 a
SDict begin H.S end
 -246 1268 a -246 1268 a
SDict begin 12 H.A end
 -246 1268
a -246 1268 a
SDict begin [/View [/XYZ H.V]/Dest (Item.45) cvn /DEST pdfmark end
 -246 1268 a 0 TeXcolorgray -141 1381 a
Fw(4.)p 0 TeXcolorgray 43 w(Il)g(y)f(a)i(deux)f(m\351thodes)i(:)p
0 TeXcolorgray 7 1494 a(\225)p 0 TeXcolorgray 42 w Fx(G)o(raphiquement)
q(.)d Fw(On)i(voit)f(qu)n('on)h(a)f(t\351l\351charg\351)h(140)h(M)n(o)e
(\(pointill\351s)i(rouges\).)p 0 TeXcolorgray 7 1594
a(\225)p 0 TeXcolorgray 42 w Fx(P)m(ar)c(le)h(calcul.)g
Fw(J'ai)h(pay\351)h(4,60)i Fs(N)p Fw(,)d(donc)g(3)10
b Fv(\305)g Fw(1,)e(60)21 b Fs(N)p Fw(.)c(J'ai)h(donc)f
(t\351l\351charg\351)h(1,)8 b(60)i Fv(\245)g Fw(0,)e(04)19
b Fv(\306)c Fw(40)j(M)n(o)g(au-del\340)g(du)f(100)3579
1570 y Fk(e)3606 1594 y Fw(.)h(A)n(utr)o(ement)g(dit,)80
1694 y(j)o('ai)f(t\351l\351charg\351)h(140)h(M)n(o)m(.)-246
1777 y
SDict begin H.S end
 -246 1777 a -246 1777 a
SDict begin 12 H.A end
 -246 1777 a -246 1777
a
SDict begin [/View [/XYZ H.V]/Dest (exo.20) cvn /DEST pdfmark end
 -246 1777 a 0 TeXcolorgray 112 x Fx(Ex)o(er)o(cice)14
b(20)p 0 TeXcolorgray 41 w Fw(P)n(our)j(louer)h(une)g(voitur)o(e)g(je)g
(dois)f(payer)g(:)p 0 TeXcolorgray -76 1989 a(\225)p
0 TeXcolorgray 42 w(une)h(par)q(t)f(\002xe)g(de)g(20)h
Fs(N)p Fw(.)p 0 TeXcolorgray -76 2089 a(\225)p 0 TeXcolorgray
42 w(0,6)g Fs(N)34 b Fw(par)18 b(km)f(par)o(cour)q(u.)-246
2181 y
SDict begin H.S end
 -246 2181 a -246 2181 a
SDict begin 12 H.A end
 -246 2181 a -246 2181
a
SDict begin [/View [/XYZ H.V]/Dest (Item.46) cvn /DEST pdfmark end
 -246 2181 a 0 TeXcolorgray -141 2277 a Fw(1.)p 0 TeXcolorgray
43 w(P)n(our)g(100)h(km,)g(je)g(payer)o(ai)1527 2376
y Ft(P)8 b Fw(\(100\))16 b Fv(\306)e Fw(20)c Fv(\305)g
Fw(100)g Fv(\243)g Fw(0,)e(6)19 b Fv(\306)14 b Fw(80)k
Fs(N)f Fw(;)-38 2522 y(et)h(pour)f(50)i(km,)e(je)h(payer)o(ai)1577
2622 y Ft(P)8 b Fw(\(50\))14 b Fv(\306)h Fw(20)10 b Fv(\305)g
Fw(50)g Fv(\243)g Fw(0,)e(6)18 b Fv(\306)c Fw(50)k Fs(N)p
Fw(.)-246 2679 y
SDict begin H.S end
 -246 2679 a -246 2679 a
SDict begin 12 H.A end
 -246 2679 a
-246 2679 a
SDict begin [/View [/XYZ H.V]/Dest (Item.47) cvn /DEST pdfmark end
 -246 2679 a 0 TeXcolorgray -141 2782 a Fw(2.)p
0 TeXcolorgray 43 w(D)o('une)f(mani\350r)o(e)h(g\351n\351r)o(ale)o(,)g
(pour)i Ft(x)i Fw(km)c(par)o(cour)q(us)f(je)h(payer)o(ai)1813
2959 y(20)10 b Fv(\305)i Ft(x)j Fv(\243)10 b Fw(0,)e(6)20
b Fs(N)p Fw(.)-38 3136 y(A)-5 b(vec)17 b(les)h(notations)h(de)e(l)o
('\351nonc\351,)i(cela)f(donne)1768 3235 y Ft(P)8 b Fw(\()r
Ft(x)d Fw(\))15 b Fv(\306)f Fw(0,)8 b(6)r Ft(x)15 b Fv(\305)10
b Fw(20.)-246 3311 y
SDict begin H.S end
 -246 3311 a -246 3311 a
SDict begin 12 H.A end
 -246 3311
a -246 3311 a
SDict begin [/View [/XYZ H.V]/Dest (exo.21) cvn /DEST pdfmark end
 -246 3311 a -246 3329 a
SDict begin H.S end
 -246 3329 a -246
3329 a
SDict begin 12 H.A end
 -246 3329 a -246 3329 a
SDict begin [/View [/XYZ H.V]/Dest (Item.48) cvn /DEST pdfmark end
 -246 3329 a 0 TeXcolorgray
102 x Fx(Ex)o(er)o(cice)k(21)p 0 TeXcolorgray 0 TeXcolorgray
146 w Fw(1.)p 0 TeXcolorgray 43 w(C)o(omme)19 b(120)c
Fv(\306)g Fw(60)10 b Fv(\305)g Fw(60)16 b Fv(\306)e Fw(60)c
Fv(\305)g Fw(6)g Fv(\243)g Fw(10,)21 b(le)d(co\373t)f(pour)h(120)h
(minutes)g(de)e(location)h(est)1768 3608 y(15)10 b Fv(\305)g
Fw(6)g Fv(\243)g Fw(5)17 b Fv(\306)d Fw(45)k Fs(N)p Fw(.)-246
3686 y
SDict begin H.S end
 -246 3686 a -246 3686 a
SDict begin 12 H.A end
 -246 3686 a -246 3686
a
SDict begin [/View [/XYZ H.V]/Dest (Item.49) cvn /DEST pdfmark end
 -246 3686 a 0 TeXcolorgray -141 3799 a Fw(2.)p 0 TeXcolorgray
43 w(On)f(compl\350te)i(le)f(tableau)g(de)f(valeurs)h(:)p
0 TeXcolorgray 0 TeXcolorgray 1210 3906 1689 4 v 1210
4006 4 100 v 1263 3976 a(D)o(ur\351e)p 1526 4006 V 123
w(0)p 1710 4006 V 124 w(20)p 1894 4006 V 104 w(40)p 2078
4006 V 104 w(60)p 2262 4006 V 104 w(80)p 2446 4006 V
104 w(100)p 2670 4006 V 104 w(120)p 2895 4006 V 1210
4009 1689 4 v 1210 4108 4 100 v 1263 4079 a(P)o(r)q(ix)p
1526 4108 V 181 w(15)p 1710 4108 V 104 w(15)p 1894 4108
V 104 w(15)p 2078 4108 V 104 w(15)p 2262 4108 V 104 w(25)p
2446 4108 V 124 w(35)p 2670 4108 V 145 w(45)p 2895 4108
V 1210 4112 1689 4 v -246 4190 a
SDict begin H.S end
 -246 4190 a -246 4190
a
SDict begin 12 H.A end
 -246 4190 a -246 4190 a
SDict begin [/View [/XYZ H.V]/Dest (Item.50) cvn /DEST pdfmark end
 -246 4190 a 0 TeXcolorgray
-141 4269 a Fw(3.)p 0 TeXcolorgray 43 w(On)f(constr)q(uit)h(le)g(gr)o
(aphique)g(:)p 0 TeXcolorgray 0 TeXcolorgray 1210 5646
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 203.2079 a add def
/d 0.0 a add neg def /h 156.0013 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1210 5646 a 1387 5539 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 11 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 181.86719 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 14.22722
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 14 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 143.19681 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 14.22714
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 181.86719  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 181.86719  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 143.19681  def /dT 932390 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 1.42271  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 1.42271  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 143.19681
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 181.86719
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 143.19681  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 143.19681  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 181.86719  def /dT 932395 abs 65536 div viceversa
{ neg } if def /DT 5. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 2.84544  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 2.84544  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 143.19681
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 181.86719
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1372 5636 a Fp(0)72
b(10)56 b(20)g(30)g(40)g(50)g(60)g(70)h(80)f(90)40 b(100)26
b(110)1299 5559 y(0)1299 5441 y(5)1268 5322 y(10)1268
5204 y(15)1268 5086 y(20)1268 4968 y(25)1268 4850 y(30)1268
4732 y(35)1268 4614 y(40)1268 4496 y(45)1387 5539 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.08235 0.39607 0.75294  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 85.36285
42.68166 0.0 42.68166   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.08235 0.39607 0.75294  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.08235 0.39607 0.75294  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def  [ 170.72571
128.04497 85.36285 42.68166   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.08235 0.39607 0.75294  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1387 5539 a
tx@Dict begin { 99.59 14.48624 } PutCoor PutBegin  end
 1387 5539 a 54 x Fw(temps)19 b(\(en)f(min\))1387
5539 y
tx@Dict begin  PutEnd  end
 1387 5539 a 1387 5539 a
tx@Dict begin { 5.69086 131.62585 } PutCoor PutBegin  end
 1387 5539 a 54 x Fw(pr)q(ix)g(\(en)f
(euros\))1387 5539 y
tx@Dict begin  PutEnd  end
 1387 5539 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.08235 0.39607 0.75294  setrgbcolor
 [ 0.0 42.68166   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.08235 0.39607 0.75294  setrgbcolor
 [ 28.45428 42.68166   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.08235 0.39607 0.75294  setrgbcolor
 [ 56.90857 42.68166   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.08235 0.39607 0.75294  setrgbcolor
 [ 85.36285 42.68166   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.08235 0.39607 0.75294  setrgbcolor
 [ 113.81714 71.1361   false NArray  /DS 5.0 0. CLW mul add 2 div def
/PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.08235 0.39607 0.75294  setrgbcolor
 [ 142.27142 99.59053   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0.08235 0.39607 0.75294  setrgbcolor
 [ 170.72571 128.04497   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
2897 5646 a
currentpoint initclip moveto
 2897 5646 a -246 5710 a
SDict begin H.S end
 -246 5710 a -246
5710 a
SDict begin 12 H.A end
 -246 5710 a -246 5710 a
SDict begin [/View [/XYZ H.V]/Dest (exo.22) cvn /DEST pdfmark end
 -246 5710 a 0 TeXcolorgray
1909 5895 a Fw(11)p 0 TeXcolorgray eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.12) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -246 -163 a Fx(Ex)o(er)o(cice)14
b(22)p 0 TeXcolorgray 41 w Fw(Les)22 b(gar)o(es)f(de)g(C)o(alais)h(et)g
(de)f(Boulogne-sur)o(-mer)h(sont)g(distantes)h(de)e(30)h(km.)g(U)m(n)f
(tr)o(ain)h(par)q(t)f(\340)g(12)h(h)g(de)f(Boulogne-sur)o(-mer)h(en)
-246 -63 y(dir)o(ection)f(de)g(C)o(alais)h(et)f(roule)g(\340)g(la)g
(vitesse)i(de)e(40)h(km/h.)g(U)m(n)f(tr)o(ain)h(par)q(t)e(de)h(C)o
(alais)h(\340)f(12)h(h)f(15)h(et)f(fait)h(route)f(en)g(sens)h(inverse)g
(\340)f(la)g(vitesse)i(de)-246 37 y(60)c(km/h.)-246 66
y
SDict begin H.S end
 -246 66 a -246 66 a
SDict begin 12 H.A end
 -246 66 a -246 66 a
SDict begin [/View [/XYZ H.V]/Dest (Item.51) cvn /DEST pdfmark end
 -246 66 a 0
TeXcolorgray -141 178 a Fw(1.)p 0 TeXcolorgray 43 w(Le)h(tr)o(ain)g
(qui)h(par)q(t)e(\340)h(12)g(h)g(de)g(Boulogne-sur)o(-mer)g(roule)g
(\340)g(la)g(vitesse)h(de)f(40)g(km/h,)h(donc)f(il)g(par)o(cour)q(t)f
(40)h(km)h(en)f(60)g(min.)h(P)n(our)e(savoir)-38 278
y(quand)e(il)h(arr)q(ive)f(\340)g(C)o(alais)o(,)i(on)e(compl\350te)i
(un)f(tableau)g(de)f(propor)q(tionnalit\351)i(:)p 0 TeXcolorgray
0 TeXcolorgray 1528 363 1051 4 v 1528 462 4 100 v 1605
432 a(temps)g(\(en)e(min\))p 2208 462 V 127 w(60)p 2392
462 V 134 w(?)p 2576 462 V 1528 466 1051 4 v 1528 565
4 100 v 1582 535 a(distance)g(\(en)h(km\))p 2208 565
V 103 w(40)p 2392 565 V 104 w(30)p 2576 565 V 1528 569
1051 4 v -38 705 a(Le)g(tr)o(ain)g(mettr)o(a)502 672
y Fp(60)p Fj(\243)p Fp(30)p 502 685 165 5 v 554 733 a(40)691
705 y Fv(\306)770 672 y Fp(1)6 b(800)p 770 685 130 5
v 804 733 a(40)924 705 y Fv(\306)14 b Fw(45)k(min)g(pour)g(arr)q(iver)e
(\340)h(C)o(alais)o(,)i(donc)e(il)h(y)f(ser)o(a)h(\340)f(12)h(h)f(45.)
-38 867 y(P)n(our)h(le)i(tr)o(ain)f(qui)h(par)q(t)f(de)f(C)o(alais)o(,)
j(le)e(calcul)h(est)g(plus)g(facile)g(:)f(il)g(roule)g(\340)g(60)h
(km/h,)g(donc)f(par)o(cour)q(t)f(60)i(km)f(en)h(60)f(min)9
b(;)20 b(et)f(ainsi)h(30)g(km)-38 966 y(en)e(30)g(min.)g(C)o(omme)h(il)
f(par)q(t)f(\340)g(12)h(h)g(15,)g(il)g(arr)q(ive)f(\340)g(12)h(h)g(45)g
(lui)g(aussi.)-38 1128 y(On)f(peut)i(ainsi)f(r)o(epr\351senter)g(la)f
(mar)o(che)h(des)f(deux)g(tr)o(ains)i(:)p 0 TeXcolorgray
0 TeXcolorgray 769 2532 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 309.42352 a add def
/d 0.0 a add neg def /h 159.1932 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 769 2532 a 1389 2361 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 213.39554 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 21.33955
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 11 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 128.03732 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 21.33955
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 234.73509  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 234.73509  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 138.70709  def /dT 1398509 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 21.33955  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 21.33955  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 138.70709
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 234.73509
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 138.70709  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 138.70709  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 234.73509  def /dT 1398509 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 21.33955  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 138.70709
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 234.73509
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1389 2361 a
tx@Dict begin { -8.53569 -7.25536 } PutCoor PutBegin  end
 1389 2361 a 40 x Fc(12h)1389 2361 y
tx@Dict begin  PutEnd  end
 1389
2361 a 1389 2361 a
tx@Dict begin { 29.87524 -7.25536 } PutCoor PutBegin  end
 1389 2361 a 40 x Fc(12h10)1389 2361
y
tx@Dict begin  PutEnd  end
 1389 2361 a 1389 2361 a
tx@Dict begin { 72.55435 -7.25536 } PutCoor PutBegin  end
 1389 2361 a 40 x Fc(12h20)1389
2361 y
tx@Dict begin  PutEnd  end
 1389 2361 a 1389 2361 a
tx@Dict begin { 115.23346 -7.25536 } PutCoor PutBegin  end
 1389 2361 a 40 x Fc(12h30)1389
2361 y
tx@Dict begin  PutEnd  end
 1389 2361 a 1389 2361 a
tx@Dict begin { 157.91257 -7.25536 } PutCoor PutBegin  end
 1389 2361 a 40 x Fc(12h40)1389
2361 y
tx@Dict begin  PutEnd  end
 1389 2361 a 1389 2361 a
tx@Dict begin { 200.59167 -7.25536 } PutCoor PutBegin  end
 1389 2361 a 40 x Fc(12h50)1389
2361 y
tx@Dict begin  PutEnd  end
 1389 2361 a 1389 2361 a
tx@Dict begin { -6.40192 3.84096 } PutCoor PutBegin  end
 1389 2361 a 36 x Fc(0)1389
2361 y
tx@Dict begin  PutEnd  end
 1389 2361 a 1389 2361 a
tx@Dict begin { -12.80385 45.23975 } PutCoor PutBegin  end
 1389 2361 a 36 x Fc(10)1389
2361 y
tx@Dict begin  PutEnd  end
 1389 2361 a 1389 2361 a
tx@Dict begin { -12.80385 88.34573 } PutCoor PutBegin  end
 1389 2361 a 36 x Fc(20)1389
2361 y
tx@Dict begin  PutEnd  end
 1389 2361 a 1389 2361 a
tx@Dict begin { -44.81319 8.53569 } PutCoor PutBegin  end
 1389 2361 a 1418 2430
a Fc(Boulogne)p 1389 2365 289 4 v 1389 2469 4 107 v 1674
2469 V 1389 2471 289 4 v 1389 2361 a
tx@Dict begin  PutEnd  end
 1389 2361 a 1389
2361 a
tx@Dict begin { -44.81319 136.57301 } PutCoor PutBegin  end
 1389 2361 a 1418 2430 a Fc(C)o(alais)p 1389 2365
203 4 v 1389 2457 4 95 v 1588 2457 V 1389 2459 203 4
v 1389 2361 a
tx@Dict begin  PutEnd  end
 1389 2361 a 1389 2361 a
tx@Dict begin { -12.80385 131.87828 } PutCoor PutBegin  end
 1389 2361 a 36
x Fc(30)1389 2361 y
tx@Dict begin  PutEnd  end
 1389 2361 a 1389 2361 a
tx@Dict begin { 96.02798 -7.25536 } PutCoor PutBegin  end
 1389 2361
a 0 1 0 TeXcolorrgb 40 x Fc(12h27)p 0 TeXcolorgray 1389
2361 a
tx@Dict begin  PutEnd  end
 1389 2361 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 192.05598 128.03732 0.0
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 64.01866 128.03732 0.0
128.03732   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 192.05598 0.0 64.01866
128.03732   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 115.23346 0.0 115.23346
76.82251   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
3338 2532 a
currentpoint initclip moveto
 3338 2532 a -246 2574 a
SDict begin H.S end
 -246 2574 a -246
2574 a
SDict begin 12 H.A end
 -246 2574 a -246 2574 a
SDict begin [/View [/XYZ H.V]/Dest (Item.52) cvn /DEST pdfmark end
 -246 2574 a 0 TeXcolorgray
-140 2687 a Fw(2.)p 0 TeXcolorgray 42 w(N)n(ous)25 b(allons)i(d\351ter)
q(miner)f(l)o('heur)o(e)h(de)e(croisement)h(des)g(tr)o(ains)g(par)g(le)
g(calcul.)g(Gr)o(aphiquement,)i(cela)e(corr)o(espond)f(\340)h(l)o
('abscisse)h(du)-38 2787 y(point)18 b(d)n('intersection)i(des)d
(courbes)o(.)-38 2949 y(\300)24 b(12h15,)k(le)d(tr)o(ain)h(qui)g(par)q
(t)e(de)h(Boulogne-sur)o(-mer)h(a)f(par)o(cour)q(u)g(10)h(km)f
(\(facile)h(\340)f(v\351r)q(i\002er\),)f(il)i(est)g(donc)e(\340)h(20)h
(km)g(de)f(C)o(alais)o(.)g(C'est)-38 3049 y(l)o('heur)o(e)19
b(\340)e(laquelle)i(le)f(deuxi\350me)h(tr)o(ain)f(par)q(t.)g(C)o(omme)h
(l)o('un)f(roule)g(\340)f(40)i(km/h)f(et)g(l)o('autr)o(e)g(\340)f(60)i
(km/h,)f(tout)h(se)f(passe)g(comme)h(si)f(un)f(seul)-38
3148 y(tr)o(ain)h(devait)f(par)o(cour)q(ir)g(20)h(km)f(\340)h(la)f
(vitesse)i(de)e(40)10 b Fv(\305)g Fw(60)17 b Fv(\306)d
Fw(100)19 b(km/h.)f(On)f(compl\350te)j(un)d(tableau)h(de)f(propor)q
(tionnalit\351)i(:)p 0 TeXcolorgray 0 TeXcolorgray 1508
3233 1092 4 v 1508 3333 4 100 v 1585 3303 a(temps)f(\(en)g(min\))p
2188 3333 V 147 w(60)p 2412 3333 V 154 w(?)p 2596 3333
V 1508 3336 1092 4 v 1508 3436 4 100 v 1561 3406 a(distance)g(\(en)g
(km\))p 2188 3436 V 103 w(100)p 2412 3436 V 104 w(20)p
2596 3436 V 1508 3439 1092 4 v -28 3542 a Fp(60)p Fj(\243)p
Fp(20)p -28 3555 165 5 v 8 3603 a(100)161 3575 y Fv(\306)240
3542 y Fp(1)6 b(200)p 240 3555 130 5 v 259 3603 a(100)394
3575 y Fv(\306)14 b Fw(12,)k(donc)f(il)h(faudr)o(ait)g(12)g(min)g(\340)
f(ce)h(tr)o(ain)f(pour)h(par)o(cour)q(ir)e(20)j(km.)f(Ainsi,)g(les)g
(deux)f(tr)o(ains)h(se)g(croiseront-ils)g(\340)1445 3754
y(12)h(h)e(15)h(min)11 b Fv(\305)f Fw(12)19 b(min)c Fv(\306)f
Fw(12)k(h)g(27)g(min)q(.)-246 3848 y
SDict begin H.S end
 -246 3848 a -246
3848 a
SDict begin 12 H.A end
 -246 3848 a -246 3848 a
SDict begin [/View [/XYZ H.V]/Dest (exo.23) cvn /DEST pdfmark end
 -246 3848 a 0 TeXcolorgray
103 x Fx(Ex)o(er)o(cice)c(23)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 887 5339 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 256.07468 a add def
/d 0.0 a add neg def /h 156.49008 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 887 5339 a 1444 4885 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -28.45274 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 188.9262 0.0 -67.14848 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 101.86087 0.0 -54.62921   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 188.9262  0 -67.14848  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -67.14848
 188.9262  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-54.62921  def /maxTickline 101.86087  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 101.86087
0.0 -54.62921   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 188.9262
0.0 -67.14848 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 101.86087  0 -54.62921  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -54.62921
 101.86087  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-67.14848  def /maxTickline 188.9262  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 101.86087
0.0 -54.62921   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 188.9262
0.0 -67.14848 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1429 4982 a Fp(0)205 b(1)h(2)f(3)g(4)g(5)g(6)-1705 b
Fj(\241)p Fp(1)-309 b Fj(\241)p Fp(2)1356 4904 y(0)1314
5141 y Fj(\241)p Fp(1)1356 4668 y(1)1356 4432 y(2)1356
4196 y(3)1444 4885 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 -28.45274 -56.90549 28.45274  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 28.45274 0.0 -28.45274  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 85.35823 113.81097 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 28.45274 142.26372 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 85.35823 14.22636 0.0
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 85.35823 0.0 85.35823
14.22636   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.71646 28.45274 -56.90549
28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.71646 28.45274 170.71646
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.81097 28.45274 113.81097
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -56.90549 28.45274 -56.90549
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
1444 4885 a
tx@Dict begin { -18.4941 17.64055 } PutCoor PutBegin  end
 1444 4885 a 0 1 0 TeXcolorrgb 51 x Fw(0,)8
b(5)p 0 TeXcolorgray 1444 4885 a
tx@Dict begin  PutEnd  end
 1444 4885 a 1444 4885
a
tx@Dict begin { 133.7278 -8.5359 } PutCoor PutBegin  end
 1444 4885 a 1 0 0 TeXcolorrgb 51 x Fw(5)p 0 TeXcolorgray
1444 4885 a
tx@Dict begin  PutEnd  end
 1444 4885 a 1444 4885 a
tx@Dict begin { 162.18054 -8.5359 } PutCoor PutBegin  end
 1444 4885 a 1 0 0
TeXcolorrgb 51 x Fw(6)p 0 TeXcolorgray 1444 4885 a
tx@Dict begin  PutEnd  end
 1444
4885 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0 0  setrgbcolor  [ 113.81097
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0 0  setrgbcolor  [ -56.90549
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0 0  setrgbcolor  [ 170.71646
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 0 1  setrgbcolor  [ 0.0 -28.45274
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 0 1  setrgbcolor  [ 142.26372
85.35823   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 3013 5339 a
currentpoint initclip moveto
 3013 5339 a -246
5404 a
SDict begin H.S end
 -246 5404 a -246 5404 a
SDict begin 12 H.A end
 -246 5404 a -246 5404
a
SDict begin [/View [/XYZ H.V]/Dest (Item.53) cvn /DEST pdfmark end
 -246 5404 a 0 TeXcolorgray -141 5518 a Fw(1.)p 0 TeXcolorgray
43 w(L)-10 b('image)18 b(de)g(3)f(par)25 b Ft(f)37 b
Fw(est)18 b(0,)8 b(5)18 b(\(pointill\351s)i(ver)q(ts\).)-246
5551 y
SDict begin H.S end
 -246 5551 a -246 5551 a
SDict begin 12 H.A end
 -246 5551 a -246 5551
a
SDict begin [/View [/XYZ H.V]/Dest (Item.54) cvn /DEST pdfmark end
 -246 5551 a 0 TeXcolorgray -141 5646 a Fw(2.)p 0 TeXcolorgray
43 w(Les)e(solutions)h(de)e(l)o('\351quation)28 b Ft(f)19
b Fw(\()r Ft(x)5 b Fw(\))14 b Fv(\306)g Fw(1)k(sont)g
Fv(\241)p Fw(2)g(;)f(4)h(et)f(6)h(\(pointill\351s)i(rouges\).)p
0 TeXcolorgray 1909 5895 a(12)p 0 TeXcolorgray eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.13) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246
-246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.55) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163
a Fw(3.)p 0 TeXcolorgray 43 w(T)-8 b(ableau)18 b(de)f(signe)h(de)25
b Ft(f)51 b Fw(:)p 0 TeXcolorgray 0 TeXcolorgray 1073
-75 a

 1073 -75 a 1073 -75 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -12.14816 ] concat

 pgfs


 1073 -75 a
 0 setgray
 1073 -75 a 167
w Ft(x)1073 -75 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.8345 -41.98499 ] concat

 pgfs


 1073 -75 a
 0 setgray
 1073 -75 a 117 w Ft(f)1241
-74 y Fw(\()1270 -75 y Ft(x)1314 -74 y Fw(\))1073 -75
y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -19.84302 moveto

 238.11656 -19.84302 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -59.52911 moveto

 238.11656 -59.52911 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -59.52911 lineto

 238.11656 -59.52911 lineto

 238.11656 0.0 lineto

 closepath

 238.11656 -59.52911 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 39.68607 0.0 moveto

 39.68607 -59.52911 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 43.87846 -12.99 ] concat

 pgfs


 1073 -75 a
 0 setgray
 1073 -75 a Fv(\241)p Fw(2)1073 -75 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 103.40654 -12.99 ] concat

 pgfs


 1073
-75 a
 0 setgray
 1073 -75 a Fv(\241)p Fw(1)1073 -75 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 166.23227 -12.99 ] concat

 pgfs


 1073 -75 a
 0 setgray

1073 -75 a Fw(2)1073 -75 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 225.76035 -12.9651 ] concat

 pgfs


 1073 -75 a
 0 setgray
 1073 -75 a Fw(6)1073
-75 y


 pgfr

 restore

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 76.0774 -42.24297 ] concat

 pgfs


 1073 -75 a
 0 setgray
 1073 -75 a Fv(\305)1073 -75 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 109.13673 -19.84302 moveto

 109.13673 -59.52911 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 106.70782 -42.7304 ] concat

 pgfs


 1073 -75
a
 0 setgray
 1073 -75 a Fw(0)1073 -75 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 135.60873 -41.11218 ] concat

 pgfs


 1073 -75 a
 0 setgray
 1073 -75 a Fv(\241)1073
-75 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 168.66588 -19.84302 moveto

 168.66588 -59.52911 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 166.2381 -42.7304 ] concat

 pgfs


 1073 -75 a
 0 setgray
 1073 -75 a Fw(0)1073 -75 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 195.14009 -42.24297 ] concat

 pgfs


 1073 -75
a
 0 setgray
 1073 -75 a Fv(\305)1073 -75 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -246 466 a
SDict begin H.S end
 -246 466 a
-246 466 a
SDict begin 12 H.A end
 -246 466 a -246 466 a
SDict begin [/View [/XYZ H.V]/Dest (Item.56) cvn /DEST pdfmark end
 -246 466 a 0 TeXcolorgray
-141 580 a Fw(4.)p 0 TeXcolorgray 43 w(Le)18 b(maximum)h(de)25
b Ft(f)36 b Fw(est)18 b(3,)g(son)g(minimum)i(est)e Fv(\241)p
Fw(1)f(\(points)i(bleus\).)-246 614 y
SDict begin H.S end
 -246 614 a -246
614 a
SDict begin 12 H.A end
 -246 614 a -246 614 a
SDict begin [/View [/XYZ H.V]/Dest (Item.57) cvn /DEST pdfmark end
 -246 614 a 0 TeXcolorgray
-141 709 a Fw(5.)p 0 TeXcolorgray 43 w(T)-8 b(ableau)18
b(de)f(var)q(iations)h(de)25 b Ft(f)51 b Fw(:)p 0 TeXcolorgray
0 TeXcolorgray 636 796 a

 636 796 a 636 796 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -16.40007 ] concat

 pgfs


 636 796
a
 0 setgray
 636 796 a 168 w Ft(x)636 796 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -58.99254 ] concat

 pgfs


 636 796 a
 0 setgray
 636 796 a
118 w Ft(f)805 797 y Fw(\()834 796 y Ft(x)878 797 y Fw(\))636
796 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -28.3468 moveto

 340.16171 -28.3468 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -85.04042 moveto

 340.16171 -85.04042 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -85.04042 lineto

 340.16171 -85.04042 lineto

 340.16171 0.0 lineto

 closepath

 340.16171 -85.04042 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 56.69362 0.0 moveto

 56.69362 -85.04042 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 65.13844 -17.24191 ] concat

 pgfs


 636 796 a
 0 setgray
 636 796 a Fv(\241)p Fw(2)636 796 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 153.4766 -17.21701 ] concat

 pgfs


 636
796 a
 0 setgray
 636 796 a Fw(0)636 796 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 238.51706 -17.21701 ] concat

 pgfs


 636 796 a
 0 setgray
 636 796 a Fw(5)636
796 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 323.55753 -17.21701 ] concat

 pgfs


 636 796 a
 0 setgray
 636 796 a Fw(6)636 796 y


 pgfr

 restore

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 66.44356 -42.45406 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 68.43611 -40.4615 ] concat

 pgfs


 636 796 a
 /pgfsc{}def/pgffc{}def
 636
796 a 636 796 a
 0 setgray
 636 796 a Fw(1)636 796 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 66.44356 -42.45406 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 68.43611 -40.4615 ] concat

 pgfs


 636 796 a
 /pgfsc{}def/pgffc{}def
 636
796 a 636 796 a
 0 setgray
 636 796 a Fw(1)636 796 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 15.44226 148.18631 -81.05531 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 150.17886 -79.06276 ] concat

 pgfs


 636 796 a
 /pgfsc{}def/pgffc{}def
 636
796 a 636 796 a
 0 setgray
 636 796 a Fv(\241)p Fw(1)636 796 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 15.44226 148.18631 -81.05531 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 150.17886 -79.06276 ] concat

 pgfs


 636
796 a
 /pgfsc{}def/pgffc{}def
 636 796 a 636 796 a
 0 setgray
 636 796 a Fv(\241)p Fw(1)636
796 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 79.09723 -41.12665 moveto

 142.20247 -69.77762 lineto

 pgfstr

 save

 [0.9105 -0.41336 0.41336 0.9105 142.20247 -69.77762 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 8.84691 236.52441 -42.50386 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 238.51697 -40.4615 ] concat

 pgfs


 636 796 a
 /pgfsc{}def/pgffc{}def
 636 796
a 636 796 a
 0 setgray
 636 796 a Fw(3)636 796 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 8.84691 236.52441 -42.50386 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 238.51697 -40.4615 ] concat

 pgfs


 636 796 a
 /pgfsc{}def/pgffc{}def
 636 796
a 636 796 a
 0 setgray
 636 796 a Fw(3)636 796 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 167.43555 -70.76674 moveto

 230.5401 -42.13632 lineto

 pgfstr

 save

 [0.91061 0.41313 -0.41313 0.91061 230.5401 -42.13632 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0
TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 321.56483 -81.05531 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 323.55739 -79.06276 ] concat

 pgfs


 636 796 a
 /pgfsc{}def/pgffc{}def
 636 796 a 636 796 a
 0 setgray
 636 796 a
Fw(1)636 796 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 8.84691 321.56483 -81.05531 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 323.55739 -79.06276 ] concat

 pgfs


 636 796 a
 /pgfsc{}def/pgffc{}def
 636 796 a 636 796 a
 0 setgray
 636 796
a Fw(1)636 796 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 249.17833 -41.15018 moveto

 315.58054 -71.2758 lineto

 pgfstr

 save

 [0.91061 -0.41313 0.41313 0.91061 315.58054 -71.2758 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 -246 1573
a
SDict begin H.S end
 -246 1573 a -246 1573 a
SDict begin 12 H.A end
 -246 1573 a -246 1573 a
SDict begin [/View [/XYZ H.V]/Dest (exo.24) cvn /DEST pdfmark end
 -246
1573 a 0 TeXcolorgray 133 x Fx(Ex)o(er)o(cice)14 b(24)p
0 TeXcolorgray 41 w Fw(La)k(fonction)26 b Ft(f)36 b Fw(est)18
b(d\351\002nie)g(sur)f(l)o('inter)q(valle)1559 1707 y([)1585
1706 y(1;)8 b(5)1693 1707 y(])1737 1706 y(par)25 b Ft(f)1929
1707 y Fw(\()1958 1706 y Ft(x)2002 1707 y Fw(\))2043
1706 y Fv(\306)14 b Fw(2)r Ft(x)h Fv(\305)2287 1673 y
Fp(8)p 2284 1686 36 5 v 2285 1735 a Fm(x)2340 1706 y
Fv(\241)10 b Fw(10.)-246 1764 y
SDict begin H.S end
 -246 1764 a -246 1764
a
SDict begin 12 H.A end
 -246 1764 a -246 1764 a
SDict begin [/View [/XYZ H.V]/Dest (Item.58) cvn /DEST pdfmark end
 -246 1764 a 0 TeXcolorgray
-141 1849 a Fw(1.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
855 1920 2399 4 v 855 2020 4 100 v 962 1990 a Ft(x)p
1108 2020 V 160 w Fw(1)p 1252 2020 V 152 w(1,)e(5)p 1560
2020 V 179 w(2)p 1758 2020 V 159 w(2,)g(5)p 2025 2020
V 214 w(3)p 2333 2020 V 233 w(3,)g(5)p 2641 2020 V 152
w(4)p 2784 2020 V 124 w(4,)g(5)p 3037 2020 V 159 w(5)p
3250 2020 V 855 2023 2399 4 v 855 2122 4 100 v 916 2093
a Ft(f)19 b Fw(\()r Ft(x)5 b Fw(\))p 1108 2122 V 102
w(0)p 1252 2122 V 104 w Fv(\241)p Fw(1,)j(67)p 1560 2122
V 105 w Fv(\241)p Fw(2)p 1758 2122 V 103 w Fv(\241)p
Fw(1,)g(8)p 2025 2122 V 104 w Fv(\241)p Fw(1,)g(33)p
2333 2122 V 105 w Fv(\241)p Fw(0,)g(71)p 2641 2122 V
105 w(0)p 2784 2122 V 104 w(0,)g(78)p 3037 2122 V 104
w(1,)g(6)p 3250 2122 V 855 2126 2399 4 v -38 2299 a(D\351tail)18
b(de)f(deux)g(calculs)h(:)1453 2498 y Ft(f)h Fw(\(1\))c
Fv(\306)f Fw(2)c Fv(\243)g Fw(1)g Fv(\305)1915 2442 y
Fw(8)p 1915 2479 41 5 v 1915 2555 a(1)1976 2498 y Fv(\241)g
Fw(10)15 b Fv(\306)f Fw(2)c Fv(\305)g Fw(8)g Fv(\241)g
Fw(10)17 b Fv(\306)d Fw(0)1453 2696 y Ft(f)19 b Fw(\(4\))c
Fv(\306)f Fw(2)c Fv(\243)g Fw(4)g Fv(\305)1915 2640 y
Fw(8)p 1915 2677 V 1915 2753 a(4)1976 2696 y Fv(\241)g
Fw(10)15 b Fv(\306)f Fw(8)c Fv(\305)g Fw(2)g Fv(\241)g
Fw(10)17 b Fv(\306)d Fw(0.)-246 2836 y
SDict begin H.S end
 -246 2836 a -246
2836 a
SDict begin 12 H.A end
 -246 2836 a -246 2836 a
SDict begin [/View [/XYZ H.V]/Dest (Item.59) cvn /DEST pdfmark end
 -246 2836 a 0 TeXcolorgray
-141 2916 a Fw(2.)p 0 TeXcolorgray 43 w(C)o(ourbe)j(r)o
(epr\351sentative)i(:)p 0 TeXcolorgray 0 TeXcolorgray
1279 4252 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 186.65034 a add def
/d 0.0 a add neg def /h 150.79962 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1279 4252 a 1473 3642 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 163.3189 0.0 -23.33145 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 77.3915 0.0 -73.40813   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 163.3189  0 -23.33145  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -23.33145
 163.3189  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-73.40813  def /maxTickline 77.3915  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.3915
0.0 -73.40813   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 163.3189
0.0 -23.33145 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.3915  0 -73.40813  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -73.40813
 77.3915  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.33145  def /maxTickline 163.3189  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.3915
0.0 -73.40813   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 163.3189
0.0 -23.33145 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1458 3739 a Fp(0)205
b(1)g(2)g(3)g(4)g(5)1384 3661 y(0)1342 3898 y Fj(\241)p
Fp(1)1342 4134 y Fj(\241)p Fp(2)1384 3425 y(1)1384 3189
y(2)1473 3642 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x 1 def /x1 5 def /dx
x1 x sub 199 div def /F@pstplot ((x+4.0/x-5.0)*2.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 0 1
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 93.34709 -28.45274 0.0
-28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 34.69023 0.0 34.69023
-28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 93.34709 0.0 93.34709
-28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
2829 4252 a
currentpoint initclip moveto
 2829 4252 a -246 4295 a
SDict begin H.S end
 -246 4295 a -246
4295 a
SDict begin 12 H.A end
 -246 4295 a -246 4295 a
SDict begin [/View [/XYZ H.V]/Dest (Item.60) cvn /DEST pdfmark end
 -246 4295 a 0 TeXcolorgray
-141 4410 a Fw(3.)p 0 TeXcolorgray 43 w(Les)18 b(ant\351c\351dents)h
(de)e Fv(\241)p Fw(1)h(par)25 b Ft(f)36 b Fw(sont)18
b(1,)8 b(25)19 b(et)f(3,)8 b(25)19 b(environ)f(\(pointill\351s)h
(rouges\).)-246 4443 y
SDict begin H.S end
 -246 4443 a -246 4443 a
SDict begin 12 H.A end
 -246 4443
a -246 4443 a
SDict begin [/View [/XYZ H.V]/Dest (Item.61) cvn /DEST pdfmark end
 -246 4443 a 0 TeXcolorgray -141 4539 a
Fw(4.)p 0 TeXcolorgray 43 w(T)-8 b(ableau)18 b(de)f(var)q(iations)h(:)p
0 TeXcolorgray 0 TeXcolorgray 991 4593 a

 991 4593 a 991
4593 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -16.40007 ] concat

 pgfs


 991 4593 a
 0 setgray
 991 4593 a 168 w Ft(x)991 4593 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -58.99254 ] concat

 pgfs


 991
4593 a
 0 setgray
 991 4593 a 117 w Ft(f)1159 4594 y Fw(\()1188 4593
y Ft(x)1232 4594 y Fw(\))991 4593 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -28.3468 moveto

 255.12128 -28.3468 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -85.04042 moveto

 255.12128 -85.04042 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -85.04042 lineto

 255.12128 -85.04042 lineto

 255.12128 0.0 lineto

 closepath

 255.12128 -85.04042 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 56.69362 0.0 moveto

 56.69362 -85.04042 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 68.43613 -17.24191 ] concat

 pgfs


 991 4593 a
 0 setgray
 991 4593
a Fw(1)991 4593 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 153.4766 -17.24191 ] concat

 pgfs


 991 4593 a
 0 setgray
 991 4593 a Fw(2)991 4593
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 238.51706 -17.21701 ] concat

 pgfs


 991 4593 a
 0 setgray
 991 4593 a Fw(5)991 4593 y


 pgfr

 restore

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 8.84691 66.44356 -42.50386 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 68.43611 -40.4615 ] concat

 pgfs


 991 4593 a
 /pgfsc{}def/pgffc{}def
 991
4593 a 991 4593 a
 0 setgray
 991 4593 a Fw(0)991 4593 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 8.84691 66.44356 -42.50386 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 68.43611 -40.4615 ] concat

 pgfs


 991 4593
a
 /pgfsc{}def/pgffc{}def
 991 4593 a 991 4593 a
 0 setgray
 991 4593 a Fw(0)991 4593 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 15.44226 148.18631 -81.05531 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 150.17886 -79.06276 ] concat

 pgfs


 991
4593 a
 /pgfsc{}def/pgffc{}def
 991 4593 a 991 4593 a
 0 setgray
 991 4593 a Fv(\241)p Fw(2)991
4593 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 15.44226 148.18631 -81.05531 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 150.17886 -79.06276 ] concat

 pgfs


 991 4593 a
 /pgfsc{}def/pgffc{}def
 991 4593 a 991 4593 a
 0 setgray
 991 4593 a Fv(\241)p
Fw(2)991 4593 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 79.09744 -41.14923 moveto

 142.20209 -69.78137 lineto

 pgfstr

 save

 [0.9106 -0.41315 0.41315 0.9106 142.20207 -69.78136 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 16.13966 232.87804 -42.53374 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 234.87059 -40.4615 ] concat

 pgfs


 991 4593
a
 /pgfsc{}def/pgffc{}def
 991 4593 a 991 4593 a
 0 setgray
 991 4593 a Fw(1.6)991 4593 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 16.13966 232.87804 -42.53374 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 234.87059 -40.4615 ] concat

 pgfs



991 4593 a
 /pgfsc{}def/pgffc{}def
 991 4593 a 991 4593 a
 0 setgray
 991 4593 a Fw(1.6)991
4593 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 167.43564 -70.77017 moveto

 226.89362 -43.80154 lineto

 pgfstr

 save

 [0.91064 0.41304 -0.41304 0.91064 226.8936 -43.80156 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 -246 5332 a
SDict begin H.S end
 -246
5332 a -246 5332 a
SDict begin 12 H.A end
 -246 5332 a -246 5332 a
SDict begin [/View [/XYZ H.V]/Dest (Item.62) cvn /DEST pdfmark end
 -246 5332
a 0 TeXcolorgray -141 5446 a Fw(5.)p 0 TeXcolorgray 43
w(T)-8 b(ableau)18 b(de)f(signe)h(:)p 0 TeXcolorgray
1909 5895 a(13)p 0 TeXcolorgray eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.14) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 991 -244
a

 991 -244 a 991 -244 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -16.40007 ] concat

 pgfs


 991 -244 a
 0 setgray
 991 -244 a 168 w Ft(x)991
-244 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -44.81912 ] concat

 pgfs


 991 -244 a
 0 setgray
 991 -244 a 117 w Ft(f)1159 -243 y Fw(\()1188
-244 y Ft(x)1232 -243 y Fw(\))991 -244 y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -28.3468 moveto

 255.12128 -28.3468 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -56.69362 moveto

 255.12128 -56.69362 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -56.69362 lineto

 255.12128 -56.69362 lineto

 255.12128 0.0 lineto

 closepath

 255.12128 -56.69362 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 56.69362 0.0 moveto

 56.69362 -56.69362 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 68.43613 -17.24191 ] concat

 pgfs


 991 -244 a
 0 setgray
 991
-244 a Fw(1)991 -244 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 153.4766 -17.24191 ] concat

 pgfs


 991 -244 a
 0 setgray
 991 -244 a Fw(4)991
-244 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 238.51706 -17.21701 ] concat

 pgfs


 991 -244 a
 0 setgray
 991 -244 a Fw(5)991 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 70.867 -28.3468 moveto

 70.867 -56.69362 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 68.43611 -45.56381 ] concat

 pgfs


 991 -244
a
 0 setgray
 991 -244 a Fw(0)991 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 110.08954 -43.94487 ] concat

 pgfs


 991 -244 a
 0 setgray
 991 -244 a Fv(\241)991
-244 y


 pgfr

 restore

 restore

 save

 restore

 save

 0.3985 pgfw

 [ 0.3985 1.99255 ] 0.0 setdash

 /pgfsc{0 setgray}def

 155.90744 -28.3468 moveto

 155.90744 -56.69362 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 153.47653 -45.56381 ] concat

 pgfs


 991 -244 a
 0 setgray
 991 -244 a Fw(0)991 -244 y


 pgfr

 restore

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 195.12997 -45.07565 ] concat

 pgfs


 991 -244
a
 0 setgray
 991 -244 a Fv(\305)991 -244 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -246 297 a
SDict begin H.S end
 -246 297 a
-246 297 a
SDict begin 12 H.A end
 -246 297 a -246 297 a
SDict begin [/View [/XYZ H.V]/Dest (exo.25) cvn /DEST pdfmark end
 -246 297 a 0 TeXcolorgray
132 x Fx(Ex)o(er)o(cice)14 b(25)p 0 TeXcolorgray 41 w
Fw(On)21 b(suppose)h(que)f(le)g(pour)o(centage)g(de)f(femmes)j(fumant)f
(du)e(tabac)g(quotidiennement)j(en)e(fonction)h(de)e(l)o('\342ge)j
Ft(x)j Fw(\(en)20 b(ann\351es\),)-246 529 y(depuis)f(15)f(ans)g(jusqu)n
('\340)g(40)g(ans)o(,)h(est)f(le)f(nombr)o(e)25 b Ft(f)19
b Fw(\()r Ft(x)5 b Fw(\))18 b(donn\351)f(par)g(la)h(for)q(mule)g
(suivante)h(:)1528 728 y Ft(f)g Fw(\()r Ft(x)5 b Fw(\))14
b Fv(\306)h(\241)p Fw(0,)8 b(05)r Ft(x)2004 694 y Fp(2)2051
728 y Fv(\305)i Fw(3)r Ft(x)15 b Fv(\241)10 b Fw(10.)-246
782 y
SDict begin H.S end
 -246 782 a -246 782 a
SDict begin 12 H.A end
 -246 782 a -246 782 a
SDict begin [/View [/XYZ H.V]/Dest (Item.63) cvn /DEST pdfmark end
 -246
782 a 0 TeXcolorgray -141 878 a Fw(1.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1209 948 1690 4 v 1209
1048 4 100 v 1317 1018 a Ft(x)p 1463 1048 V 215 w Fw(15)p
1756 1048 V 158 w(20)p 1940 1048 V 159 w(25)p 2234 1048
V 159 w(30)p 2418 1048 V 159 w(35)p 2711 1048 V 158 w(40)p
2895 1048 V 1209 1051 1690 4 v 1209 1151 4 100 v 1270
1121 a Ft(f)19 b Fw(\()r Ft(x)5 b Fw(\))p 1463 1151 V
103 w(23,)j(75)p 1756 1151 V 105 w(30)p 1940 1151 V 104
w(33,)g(75)p 2234 1151 V 106 w(35)p 2418 1151 V 104 w(33,)g(75)p
2711 1151 V 105 w(30)p 2895 1151 V 1209 1154 1690 4 v
-38 1328 a(D\351tail)18 b(de)f(deux)g(calculs)h(:)1378
1510 y Ft(f)h Fw(\(15\))c Fv(\306)f(\241)p Fw(0,)8 b(05)i
Fv(\243)g Fw(15)1997 1476 y Fp(2)2045 1510 y Fv(\305)g
Fw(3)g Fv(\243)g Fw(15)g Fv(\241)g Fw(10)18 b Fv(\306)c
Fw(23,)8 b(75)1378 1646 y Ft(f)19 b Fw(\(40\))c Fv(\306)f(\241)p
Fw(0,)8 b(05)i Fv(\243)g Fw(40)1997 1612 y Fp(2)2045
1646 y Fv(\305)g Fw(3)g Fv(\243)g Fw(40)g Fv(\241)g Fw(10)18
b Fv(\306)c Fw(30.)-246 1759 y
SDict begin H.S end
 -246 1759 a -246 1759
a
SDict begin 12 H.A end
 -246 1759 a -246 1759 a
SDict begin [/View [/XYZ H.V]/Dest (Item.64) cvn /DEST pdfmark end
 -246 1759 a 0 TeXcolorgray
-141 1844 a Fw(2.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
682 4015 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 330.51694 a add def
/d 0.0 a add neg def /h 253.41519 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 682 4015 a 1350 3783 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 9 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 250.05663 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.4523
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 225.48006 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.4523
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 250.05663  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 250.05663  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 225.48006  def /dT 1864650 abs 65536 div viceversa
{ neg } if def /DT 5. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 5.69046  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 5.69046  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 225.48006
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 250.05663
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 225.48006  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 225.48006  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 250.05663  def /dT 1864650 abs 65536 div viceversa
{ neg } if def /DT 5. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 5.69046  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 5.69046  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 225.48006
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 250.05663
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1335 3880 a Fp(0)205
b(5)189 b(10)175 b(15)f(20)g(25)g(30)g(35)h(40)1261 3802
y(0)1261 3566 y(5)1230 3330 y(10)1230 3093 y(15)1230
2857 y(20)1230 2621 y(25)1230 2385 y(30)1230 2149 y(35)1350
3783 y
tx@Dict begin  gsave STV CP T /ps@rot -180. def grestore  end
 1350 3783 a 1350 3783 a
tx@Dict begin { 170.7138 199.1661 } PutCoor PutBegin  end
 1350 3783 a 1350 3783
a
tx@Dict begin ps@rot  RotBegin  end
 1350 3783 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -10. def /x1 15. def
/dx x1 x sub 49 div def /F@pstplot (x^2/2/10.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 5.69046 mul F@pstplot 5.69046 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 5.69046
mul gt { moveto } { dup -1.e30 5.69046 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 5.69046 mul gt { moveto } { dup -1.e30 5.69046 mul lt { moveto
} { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 0 1  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1350 3783 a
tx@Dict begin RotEnd  end
 1350 3783 a 1350 3783 a
tx@Dict begin  PutEnd  end
 1350 3783 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 170.7138 0.0 170.7138
199.1661   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  12.0  12.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 227.61841 170.7138 0.0
170.7138   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  12.0  12.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.8092 0.0 113.8092
170.7138   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  12.0  12.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 1350 3783 a
tx@Dict begin { 209.23807 -18.36105 } PutCoor PutBegin  end
 1350
3783 a 54 x Fw(\342ge)1350 3783 y
tx@Dict begin  PutEnd  end
 1350 3783 a 1350 3783
a
tx@Dict begin { -71.3895 214.7085 } PutCoor PutBegin  end
 1350 3783 a 57 x Fw(\045)17 b(de)g(fumeuses)1350 3783
y
tx@Dict begin  PutEnd  end
 1350 3783 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0 1 0  setrgbcolor  [ 170.7138
199.1661   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
3426 4015 a
currentpoint initclip moveto
 3426 4015 a -246 4059 a
SDict begin H.S end
 -246 4059 a -246
4059 a
SDict begin 12 H.A end
 -246 4059 a -246 4059 a
SDict begin [/View [/XYZ H.V]/Dest (Item.65) cvn /DEST pdfmark end
 -246 4059 a 0 TeXcolorgray
-141 4173 a Fw(3.)p 0 TeXcolorgray 43 w(T)-8 b(ableau)18
b(de)f(var)q(iations)h(:)p 0 TeXcolorgray 0 TeXcolorgray
991 4227 a

 991 4227 a 991 4227 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -16.40007 ] concat

 pgfs


 991 4227 a
 0 setgray
 991 4227
a 168 w Ft(x)991 4227 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -58.99254 ] concat

 pgfs


 991 4227 a
 0 setgray
 991 4227 a 117 w Ft(f)1159
4228 y Fw(\()1188 4227 y Ft(x)1232 4228 y Fw(\))991 4227
y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -28.3468 moveto

 255.12128 -28.3468 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -85.04042 moveto

 255.12128 -85.04042 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -85.04042 lineto

 255.12128 -85.04042 lineto

 255.12128 0.0 lineto

 closepath

 255.12128 -85.04042 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 56.69362 0.0 moveto

 56.69362 -85.04042 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 66.0052 -17.21701 ] concat

 pgfs


 991 4227 a
 0 setgray
 991 4227 a Fw(15)991 4227 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 151.04568 -17.21701 ] concat

 pgfs


 991 4227 a
 0 setgray
 991
4227 a Fw(30)991 4227 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 236.08614 -17.21701 ] concat

 pgfs


 991 4227 a
 0 setgray
 991 4227 a Fw(40)991
4227 y


 pgfr

 restore

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 25.8633 57.93535 -81.05531 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 59.9279 -78.98308 ] concat

 pgfs


 991 4227 a
 /pgfsc{}def/pgffc{}def
 991 4227 a 991 4227 a
 0 setgray
 991 4227 a Fw(23.75)991
4227 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 25.8633 57.93535 -81.05531 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 59.9279 -78.98308 ] concat

 pgfs


 991 4227 a
 /pgfsc{}def/pgffc{}def
 991 4227 a 991 4227 a
 0 setgray
 991 4227 a Fw(23.75)991
4227 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 13.70874 149.05307 -42.50386 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 151.04562 -40.4615 ] concat

 pgfs


 991 4227 a
 /pgfsc{}def/pgffc{}def
 991 4227 a 991 4227 a
 0 setgray
 991 4227 a Fw(35)991
4227 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 13.70874 149.05307 -42.50386 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 151.04562 -40.4615 ] concat

 pgfs


 991 4227 a
 /pgfsc{}def/pgffc{}def
 991 4227 a 991 4227 a
 0 setgray
 991 4227 a Fw(35)991
4227 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 87.60588 -68.37538 moveto

 143.0683 -43.2325 lineto

 pgfstr

 save

 [0.91072 0.41286 -0.41286 0.91072 143.06828 -43.23251 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 13.70874 234.09349 -81.05531 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 236.08604 -79.01295 ] concat

 pgfs


 991 4227 a
 /pgfsc{}def/pgffc{}def
 991 4227
a 991 4227 a
 0 setgray
 991 4227 a Fw(30)991 4227 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.17194 13.70874 234.09349 -81.05531 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 236.08604 -79.01295 ] concat

 pgfs


 991 4227 a
 /pgfsc{}def/pgffc{}def
 991
4227 a 991 4227 a
 0 setgray
 991 4227 a Fw(30)991 4227 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 166.56897 -42.24744 moveto

 228.10886 -70.15268 lineto

 pgfstr

 save

 [0.91069 -0.41295 0.41295 0.91069 228.10886 -70.15268 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore

0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 -246 4967 a
SDict begin H.S end
 -246 4967 a -246 4967 a
SDict begin 12 H.A end
 -246
4967 a -246 4967 a
SDict begin [/View [/XYZ H.V]/Dest (Item.66) cvn /DEST pdfmark end
 -246 4967 a 0 TeXcolorgray -141 5081
a Fw(4.)p 0 TeXcolorgray 43 w(Le)g(pour)o(centage)f(de)h(fumeuses)h
(est)f(maximal)h(\340)e(30)h(ans)g(\(pointill\351s)i(ver)q(ts\).)-246
5114 y
SDict begin H.S end
 -246 5114 a -246 5114 a
SDict begin 12 H.A end
 -246 5114 a -246 5114
a
SDict begin [/View [/XYZ H.V]/Dest (Item.67) cvn /DEST pdfmark end
 -246 5114 a 0 TeXcolorgray -141 5210 a Fw(5.)p 0 TeXcolorgray
43 w(C'est)e(\340)f(par)q(tir)g(de)h(20)g(ans)f(que)h(plus)h(de)e(30)h
(\045)g(des)f(femmes)i(fument)g(quotidiennement)i(\(pointill\351s)e
(rouges\).)-246 5295 y
SDict begin H.S end
 -246 5295 a -246 5295 a
SDict begin 12 H.A end
 -246 5295
a -246 5295 a
SDict begin [/View [/XYZ H.V]/Dest (exo.26) cvn /DEST pdfmark end
 -246 5295 a 0 TeXcolorgray 114 x Fx(Ex)o(er)o(cice)14
b(26)p 0 TeXcolorgray 41 w Fw(S)n(ur)j(route)g(s\350che)o(,)g(la)g
(distance)g(d)n('arr\352t)g(en)g(m\350tr)o(es)g(d)n('un)g(v\351hicule)i
(roulant)e(\340)h Ft(x)k Fw(km/h)c(est)f(mod\351lis\351e)i(par)d(la)h
(fonction)26 b Ft(f)35 b Fw(d\351\002nie)-246 5509 y(sur)-119
5510 y([)-94 5509 y(0;)8 b(120)94 5510 y(])139 5509 y(par)1584
5608 y Ft(f)19 b Fw(\()r Ft(x)5 b Fw(\))14 b Fv(\306)g
Fw(0,)8 b(005)r Ft(x)d Fw(\()r Ft(x)15 b Fv(\305)10 b
Fw(56\).)p 0 TeXcolorgray 1909 5895 a(14)p 0 TeXcolorgray
eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.15) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246
-246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.68) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163
a Fw(1.)p 0 TeXcolorgray 51 w Ft(f)19 b Fw(\(100\))c
Fv(\306)f Fw(0,)8 b(005)i Fv(\243)g Fw(100\(100)g Fv(\305)g
Fw(56)q(\))20 b Fv(\306)14 b Fw(78.)19 b(C)o(ela)f(signi\002e)f(que)h
(la)g(distance)g(d)n('arr\352t)f(d)n('un)h(v\351hicule)h(roulant)f
(\340)f(100)h(km/h)h(est)f(78)g(m.)-246 -129 y
SDict begin H.S end
 -246 -129
a -246 -129 a
SDict begin 12 H.A end
 -246 -129 a -246 -129 a
SDict begin [/View [/XYZ H.V]/Dest (Item.69) cvn /DEST pdfmark end
 -246 -129 a 0 TeXcolorgray
-141 -34 a Fw(2.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1109 37 1890 4 v 1109 136 4 100 v 1216 106 a Ft(x)p 1363
136 V 161 w Fw(0)p 1506 136 V 118 w(20)p 1719 136 V 152
w(40)p 1972 136 V 173 w(60)p 2224 136 V 173 w(80)p 2477
136 V 138 w(100)p 2702 136 V 139 w(120)p 2995 136 V 1109
140 1890 4 v 1109 239 4 100 v 1170 209 a Ft(f)h Fw(\()r
Ft(x)5 b Fw(\))p 1363 239 V 103 w(0)p 1506 239 V 103
w(7,)j(6)p 1719 239 V 105 w(19,)g(2)p 1972 239 V 105
w(34,)g(8)p 2224 239 V 105 w(54,)g(4)p 2477 239 V 125
w(78)p 2702 239 V 124 w(105,)g(6)p 2995 239 V 1109 243
1890 4 v -246 286 a
SDict begin H.S end
 -246 286 a -246 286 a
SDict begin 12 H.A end
 -246 286 a
-246 286 a
SDict begin [/View [/XYZ H.V]/Dest (Item.70) cvn /DEST pdfmark end
 -246 286 a 0 TeXcolorgray -141 360 a Fw(3.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1074 2215
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 236.06143 a add def
/d 0.0 a add neg def /h 215.2845 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1074 2215 a 1232 2094 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 13 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 217.01833 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 17.07092
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 14 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 200.65862 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 17.07092
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 217.01833  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 217.01833  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 200.65862  def /dT 1118760 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 1.70709  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 1.70709  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 200.65862
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 217.01833
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 200.65862  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 200.65862  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 217.01833  def /dT 1118760 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 1.70709  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.70709  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 200.65862
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 217.01833
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1217 2191 a Fp(0)95
b(10)80 b(20)f(30)h(40)g(50)g(60)f(70)h(80)g(90)64 b(100)49
b(110)1143 2113 y(0)1112 1971 y(10)1112 1829 y(20)1112
1688 y(30)1112 1546 y(40)1112 1404 y(50)1112 1262 y(60)1112
1121 y(70)1112 979 y(80)1112 837 y(90)1081 696 y(100)1232
2094 y
tx@Dict begin  gsave STV CP T /ps@rot 0. def grestore  end
 1232 2094 a 1232 2094 a
tx@Dict begin { -47.79858 -6.69179 } PutCoor PutBegin  end
 1232 2094 a 1232 2094
a
tx@Dict begin ps@rot  RotBegin  end
 1232 2094 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def    /x 28. def /x1
148. def /dx x1 x sub 49 div def /F@pstplot (x^2/2/100.)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 1.70709 mul F@pstplot 1.70709 mul
} def  /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy
 dup 1.e30 1.70709 mul gt { moveto } { dup -1.e30 1.70709 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 1.70709 mul gt { moveto } { dup -1.e30
1.70709 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
0.30196 0.30196 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1232 2094 a
tx@Dict begin RotEnd  end
 1232 2094 a 1232 2094 a
tx@Dict begin  PutEnd  end
 1232 2094 a 1232
2094 a
tx@Dict begin { 172.81204 25.60638 } PutCoor PutBegin  end
 1232 2094 a 54 x Fw(vitesse)1232 2247 y(\(en)17
b(km/h\))1232 2094 y
tx@Dict begin  PutEnd  end
 1232 2094 a 1232 2094 a
tx@Dict begin { 4.82825 190.04909 } PutCoor PutBegin  end
 1232 2094
a 56 x Fw(distance)h(d)n('arr\352t)1232 2250 y(\(en)f(m\))1232
2094 y
tx@Dict begin  PutEnd  end
 1232 2094 a 3034 2215 a
currentpoint initclip moveto
 3034 2215 a -246 2259
a
SDict begin H.S end
 -246 2259 a -246 2259 a
SDict begin 12 H.A end
 -246 2259 a -246 2259 a
SDict begin [/View [/XYZ H.V]/Dest (Item.71) cvn /DEST pdfmark end
 -246
2259 a 0 TeXcolorgray -141 2373 a Fw(4.)p 0 TeXcolorgray
51 w Ft(f)i Fw(\(90\))g Fv(\306)g Fw(65,)8 b(7)23 b(et)31
b Ft(f)19 b Fw(\(80\))g Fv(\306)g Fw(54,)8 b(4)23 b(donc)f(le)g(fait)h
(de)e(baisser)i(la)f(vitesse)i(sur)e(les)g(routes)h(de)e(90)i(km/h)g
(\340)e(80)i(km/h)g(per)q(met)g(de)e(diminuer)i(la)-38
2473 y(distance)18 b(d)n('arr\352t)f(de)1730 2572 y(65,)8
b(7)i Fv(\241)g Fw(54)17 b Fv(\306)e Fw(11,)8 b(7)19
b(m.)-38 2736 y(L)-10 b('infor)q(mation)19 b(de)e(la)h(s\351cur)q
(it\351)g(routi\350r)o(e)f(est)h(donc)f(impr\351cise)i(selon)f(les)g
(donn\351es)h(de)e(l)o('exer)o(cice)p 0 0 1 TeXcolorrgb
2946 2736 a
SDict begin H.S end
 2946 2736 a -30 x Fp(5)2982 2736 y
SDict begin 12 H.L end
 2982 2736
a 2982 2736 a
SDict begin [/Subtype /Link/Dest (Hfootnote.5) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2982 2736 a 0 TeXcolorgray 17 w Fw(.)-246
2820 y
SDict begin H.S end
 -246 2820 a -246 2820 a
SDict begin 12 H.A end
 -246 2820 a -246 2820
a
SDict begin [/View [/XYZ H.V]/Dest (exo.27) cvn /DEST pdfmark end
 -246 2820 a 0 TeXcolorgray 116 x Fx(Ex)o(er)o(cice)d(27)p
0 TeXcolorgray 41 w Fw(Le)i(taux)f(d)n('anticorps)h(\(en)f(g/l\))g
(pr\351sents)h(dans)f(le)h(sang)f(d)n('un)g(nourr)q(isson)h(en)f
(fonction)h(de)f(l)o('\342ge)g(\(en)g(mois\),)h(depuis)g(la)f
(naissance)-246 3035 y(jusqu)n('\340)k(l)o('\342ge)f(de)f(12)h(mois)o
(,)h(est)f(donn\351)g(par)f(la)g(for)q(mule)i(suivante)f(:)1542
3218 y Ft(f)h Fw(\()r Ft(x)5 b Fw(\))14 b Fv(\306)g Fw(0,)8
b(1)r Ft(x)1922 3184 y Fp(2)1969 3218 y Fv(\241)i Fw(1,)e(6)r
Ft(x)15 b Fv(\305)10 b Fw(12.)-246 3305 y
SDict begin H.S end
 -246 3305 a
-246 3305 a
SDict begin 12 H.A end
 -246 3305 a -246 3305 a
SDict begin [/View [/XYZ H.V]/Dest (Item.72) cvn /DEST pdfmark end
 -246 3305 a 0 TeXcolorgray
-141 3401 a Fw(1.)p 0 TeXcolorgray 43 w(On)17 b(fait)h(un)g(tableau)g
(de)f(valeurs)h(pour)26 b Ft(f)36 b Fw(sur)1346 3402
y([)1372 3401 y(0;)8 b(12)1520 3402 y(])1564 3401 y(avec)17
b(un)h(pas)g(de)f(2)32 b(:)p -38 3470 4184 4 v -38 3570
4 100 v 69 3540 a Ft(x)p 216 3570 V 370 w Fw(0)p 777
3570 V 521 w(2)p 1338 3570 V 520 w(4)p 1899 3570 V 521
w(6)p 2459 3570 V 521 w(8)p 3020 3570 V 501 w(10)p 3581
3570 V 481 w(12)p 4142 3570 V -38 3573 4184 4 v -38 3673
4 100 v 23 3643 a Ft(f)19 b Fw(\()r Ft(x)5 b Fw(\))p
216 3673 V 291 w(12)p 777 3673 V 467 w(9,)j(2)p 1338
3673 V 453 w(7,)g(2)p 1899 3673 V 487 w(6)p 2459 3673
V 487 w(5,)g(6)p 3020 3673 V 487 w(6)p 3581 3673 V 487
w(7,)g(2)p 4142 3673 V -38 3676 4184 4 v -38 3781 a(D\351tail)18
b(de)f(deux)g(calculs)h(:)p 0 TeXcolorgray 7 3881 a(\225)p
0 TeXcolorgray 50 w Ft(f)h Fw(\(0\))14 b Fv(\306)g Fw(0,)8
b(1)i Fv(\243)g Fw(0)531 3851 y Fp(2)578 3881 y Fv(\241)g
Fw(1,)e(6)i Fv(\243)g Fw(0)g Fv(\305)g Fw(12)18 b Fv(\306)c
Fw(12.)p 0 TeXcolorgray 7 3980 a(\225)p 0 TeXcolorgray
50 w Ft(f)19 b Fw(\(12\))14 b Fv(\306)h Fw(0,)8 b(1)i
Fv(\243)g Fw(12)612 3950 y Fp(2)659 3980 y Fv(\241)g
Fw(1,)e(6)i Fv(\243)g Fw(12)g Fv(\305)g Fw(12)19 b Fv(\306)14
b Fw(7,)8 b(2.)-246 4014 y
SDict begin H.S end
 -246 4014 a -246 4014 a
SDict begin 12 H.A end
 -246
4014 a -246 4014 a
SDict begin [/View [/XYZ H.V]/Dest (Item.73) cvn /DEST pdfmark end
 -246 4014 a 0 TeXcolorgray -141 4109
a Fw(2.)p 0 TeXcolorgray 0 TeXcolorgray -246 4163 1757
4 v -154 4240 a Fo(5)q(.)p 0 TeXcolorgray -76 4240 a
SDict begin H.S end

-76 4240 a -76 4240 a
SDict begin H.R end
 -76 4240 a -76 4240 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.5) cvn /DEST pdfmark
end
 -76 4240
a 0 TeXcolorgray Fo(Il)14 b(est)h(illusoir)o(e)e(de)h(penser)h(que)f
(tous)g(les)h(conducteurs)f(ont)g(le)h(m\352me)g(temps)g(de)f
(r\351action)g(et)h(toutes)f(les)h(voitur)o(es)e(le)i(m\352me)g
(comportement)i(en)d(termes)i(de)e(fr)o(einage)o(.)g(Les)-246
4318 y(formules)i(concernant)f(les)f(distances)f(d)o('arr\352t)g(que)i
(l)o('on)f(doit)g(appr)o(endr)o(e)f(par)h(c\234ur)g(au)g(moment)i(de)e
(passer)f(le)i(code)f(de)g(la)g(route)g(ne)h(peuvent)f(donc)g(donner)f
(que)i(des)f(or)o(dr)o(es)f(de)-246 4397 y(gr)o(andeur)7
b(;)14 b(et)g(la)g(r\351ponse)g(attendue)g(\253)d(13)j(m\350tr)o(es)d
(\273)28 b(est)14 b(en)g(r\351alit\351)g(tr\350s)g(proche)g(de)g(la)f
(r\351ponse)i(\253)c(11,7)k(m\350tr)o(es)c(\273)28 b(obtenue)14
b(avec)g(notr)o(e)g(calcul.)p 0 TeXcolorgray 0 TeXcolorgray
1909 5895 a Fw(15)p 0 TeXcolorgray eop end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.16) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 816 2259
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 298.264 a add def
/d 0.0 a add neg def /h 301.74582 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 816 2259 a 990 2024 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 13 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 260.34248 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 21.33955
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 0.0 T 13 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 260.34248 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 21.33955
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.26994  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 277.26994  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 273.3746  def /dT 1398509 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 21.33955  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 21.33955  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 273.3746
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.26994
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 273.3746  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 273.3746  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 277.26994  def /dT 1398509 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 21.33955  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 21.33955  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 273.3746
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.26994
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 975 2121 a Fp(0)146
b(1)g(2)g(3)g(4)g(5)h(6)f(7)g(8)g(9)131 b(10)115 b(11)g(12)901
2043 y(0)901 1866 y(1)901 1689 y(2)901 1512 y(3)901 1335
y(4)901 1157 y(5)901 980 y(6)901 803 y(7)901 626 y(8)901
449 y(9)870 272 y(10)870 95 y(11)870 -83 y(12)990 2024
y
tx@Dict begin { 209.3771 16.31041 } PutCoor PutBegin  end
 990 2024 a 54 x Fw(\342ge)17 b(\(en)g(mois\))990 2024
y
tx@Dict begin  PutEnd  end
 990 2024 a 990 2024 a
tx@Dict begin { 22.52675 272.21411 } PutCoor PutBegin  end
 990 2024 a 57 x Fw(T)-8 b(aux)18
b(d)n('anticorps)h(\(en)e(g/)p Fu(`)p Fw(\))990 2024
y
tx@Dict begin  PutEnd  end
 990 2024 a 990 2024 a
tx@Dict begin  gsave STV CP T /ps@rot 0. def grestore  end
 990 2024 a 990 2024 a
tx@Dict begin { 170.71643 119.50162 } PutCoor PutBegin  end
 990 2024
a 990 2024 a
tx@Dict begin ps@rot  RotBegin  end
 990 2024 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.30196 0.30196 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def    /x -8. def /x1
4. def /dx x1 x sub 49 div def /F@pstplot (x^2/2/5.)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 21.33955 mul F@pstplot 21.33955 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
21.33955 mul gt { moveto } { dup -1.e30 21.33955 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 21.33955 mul gt { moveto } { dup -1.e30 21.33955
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0.30196
0.30196 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
990 2024 a
tx@Dict begin RotEnd  end
 990 2024 a 990 2024 a
tx@Dict begin  PutEnd  end
 990 2024 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
106.69777 138.70709 170.71643 138.70709   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
234.73509 138.70709 170.71643 138.70709   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
990 2024 a
tx@Dict begin { 154.25069 152.09608 } PutCoor PutBegin  end
 990 2024 a 1 0 0 TeXcolorrgb 78 x Fb(6)25
b(mois)p 0 TeXcolorgray 990 2024 a
tx@Dict begin  PutEnd  end
 990 2024 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 106.69777 138.70709 0.0
138.70709   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 990 2024 a
tx@Dict begin { -16.35176 142.81148 } PutCoor PutBegin  end
 990 2024 a 1 0 0
TeXcolorrgb 51 x Fw(6,5)p 0 TeXcolorgray 990 2024 a
tx@Dict begin  PutEnd  end
 990
2024 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 0.0 256.07465   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 42.67911 196.32382   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 85.35822 153.64471   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 128.03732 128.03732   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 170.71643 119.50162   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 213.39554 128.03732   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 256.07465 153.64471   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.30196 0.30196 1  setrgbcolor
 [ 234.73509 138.70709   false NArray  /DS 5.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 3292 2259 a
currentpoint initclip moveto
 3292 2259 a -246
2296 a
SDict begin H.S end
 -246 2296 a -246 2296 a
SDict begin 12 H.A end
 -246 2296 a -246 2296
a
SDict begin [/View [/XYZ H.V]/Dest (Item.74) cvn /DEST pdfmark end
 -246 2296 a 0 TeXcolorgray -141 2407 a Fw(3.)p 0 TeXcolorgray
43 w(Le)18 b(taux)g(d)n('anticorps)g(\340)f(la)g(naissance)i(est)f(de)f
(12)h(g/)p Fu(`)p Fw(.)-246 2438 y
SDict begin H.S end
 -246 2438 a -246 2438
a
SDict begin 12 H.A end
 -246 2438 a -246 2438 a
SDict begin [/View [/XYZ H.V]/Dest (Item.75) cvn /DEST pdfmark end
 -246 2438 a 0 TeXcolorgray
-141 2531 a Fw(4.)p 0 TeXcolorgray 43 w(T)-8 b(ableau)18
b(de)f(var)q(iations)h(:)p 0 TeXcolorgray 0 TeXcolorgray
991 2589 a

 991 2589 a 991 2589 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -16.40007 ] concat

 pgfs


 991 2589 a
 0 setgray
 991 2589
a 168 w Ft(x)991 2589 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 5.66927 -58.99254 ] concat

 pgfs


 991 2589 a
 0 setgray
 991 2589 a 117 w Ft(f)1159
2590 y Fw(\()1188 2589 y Ft(x)1232 2590 y Fw(\))991 2589
y


 pgfr

 restore

 restore

 save

 0.3985 pgfw

 0.0 -28.3468 moveto

 255.12128 -28.3468 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 -85.04042 moveto

 255.12128 -85.04042 lineto

 pgfstr

 restore

 save

 0.3985 pgfw

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 -85.04042 lineto

 255.12128 -85.04042 lineto

 255.12128 0.0 lineto

 closepath

 255.12128 -85.04042 moveto

 pgfstr

 restore

 save

 0.3985 pgfw

 56.69362 0.0 moveto

 56.69362 -85.04042 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 68.43613 -17.21701 ] concat

 pgfs


 991 2589 a
 0 setgray
 991 2589 a Fw(0)991 2589 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 153.4766 -17.21701 ] concat

 pgfs


 991 2589 a
 0 setgray
 991
2589 a Fw(8)991 2589 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 236.08614 -17.24191 ] concat

 pgfs


 991 2589 a
 0 setgray
 991 2589 a Fw(12)991
2589 y


 pgfr

 restore

 restore

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 13.70874 64.01263 -42.45406 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 66.00519 -40.4615 ] concat

 pgfs


 991 2589 a
 /pgfsc{}def/pgffc{}def
 991 2589 a 991 2589 a
 0 setgray
 991 2589 a Fw(12)991
2589 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.12213 13.70874 64.01263 -42.45406 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 66.00519 -40.4615 ] concat

 pgfs


 991 2589 a
 /pgfsc{}def/pgffc{}def
 991 2589 a 991 2589 a
 0 setgray
 991 2589 a Fw(12)991
2589 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 16.13966 147.8376 -81.05531 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 149.83015 -78.98308 ] concat

 pgfs


 991 2589 a
 /pgfsc{}def/pgffc{}def
 991 2589 a 991 2589 a
 0 setgray
 991 2589 a Fw(5.6)991
2589 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 16.13966 147.8376 -81.05531 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 149.83015 -78.98308 ] concat

 pgfs


 991 2589 a
 /pgfsc{}def/pgffc{}def
 991 2589 a 991 2589 a
 0 setgray
 991 2589 a Fw(5.6)991
2589 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 81.52844 -42.22433 moveto

 141.85318 -69.58568 lineto

 pgfstr

 save

 [0.91064 -0.41304 0.41304 0.91064 141.85316 -69.58566 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 16.13966 232.87804 -42.53374 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 234.87059 -40.4615 ] concat

 pgfs


 991 2589 a
 /pgfsc{}def/pgffc{}def
 991 2589
a 991 2589 a
 0 setgray
 991 2589 a Fw(7.2)991 2589 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 10.20183 16.13966 232.87804 -42.53374 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 234.87059 -40.4615 ] concat

 pgfs


 991 2589 a
 /pgfsc{}def/pgffc{}def

991 2589 a 991 2589 a
 0 setgray
 991 2589 a Fw(7.2)991 2589 y


 pgfr

 restore

 restore

 save
 0
TeXcolorgray
 167.78467 -70.5778 moveto

 226.89287 -43.79526 lineto

 pgfstr

 save

 [0.91081 0.41269 -0.41269 0.91081 226.89287 -43.79527 ] concat

 save 2.39102 0.0 moveto 1.39476 0.19925 -0.3985 0.59775 -1.59401 1.49438
curveto -0.59775 0.3985 -0.59775 -0.3985 -1.59401 -1.49438 curveto
-0.3985 -0.59775 1.39476 -0.19925 2.39102 0.0 curveto closepath pgffill
restore

 restore
 0 TeXcolorgray
 restore

 restore

 restore

 newpath

 restore

 pgfc


 -38 3447 a Fw(Le)g(taux)g(d)n('anticorps)g
(est)g(minimal)h(\340)e(l)o('\342ge)h(de)f(8)h(mois)o(.)-246
3478 y
SDict begin H.S end
 -246 3478 a -246 3478 a
SDict begin 12 H.A end
 -246 3478 a -246 3478
a
SDict begin [/View [/XYZ H.V]/Dest (Item.76) cvn /DEST pdfmark end
 -246 3478 a 0 TeXcolorgray -141 3571 a Fw(5.)p 0 TeXcolorgray
43 w(D)o('apr\350s)f(le)h(gr)o(aphique)o(,)g(le)g(taux)g(d)n
('anticorps)g(est)g(inf\351r)q(ieur)g(\340)f(6,5)i(g/)p
Fu(`)d Fw(pendant)j(6)e(mois)i(\(du)e(5)2845 3547 y Fk(e)2888
3571 y Fw(au)g(11)3071 3547 y Fk(e)3115 3571 y Fw(mois\).)-246
3715 y
SDict begin H.S end
 -246 3715 a -246 3715 a
SDict begin 12 H.A end
 -246 3715 a -246 3715
a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 -246 3715 a 131 x Fy(4)105 b(T)-10 b(ableaux)23 b(d)m('effectifs)e
(et)i(pr)o(obabilit\351s)f(conditionnelles)-246 3954
y
SDict begin H.S end
 -246 3954 a -246 3954 a
SDict begin 12 H.A end
 -246 3954 a -246 3954 a
SDict begin [/View [/XYZ H.V]/Dest (exo.28) cvn /DEST pdfmark end
 -246
3954 a -246 3942 a
SDict begin H.S end
 -246 3942 a -246 3942 a
SDict begin 12 H.A end
 -246 3942
a -246 3942 a
SDict begin [/View [/XYZ H.V]/Dest (Item.77) cvn /DEST pdfmark end
 -246 3942 a 0 TeXcolorgray 87 x Fx(Ex)o(er)o(cice)14
b(28)p 0 TeXcolorgray 0 TeXcolorgray 146 w Fw(1.)p 0
TeXcolorgray 43 w(On)j(tr)o(aduit)h(les)g(donn\351es)g(de)f(l)o
('\351nonc\351)i(par)f(un)f(tableau)h(d)n('effectifs)i(:)p
0 TeXcolorgray 0 TeXcolorgray 901 4106 2305 4 v 901 4206
4 100 v 1477 4206 V 1530 4176 a(VT)q(T)p 2052 4206 V
2103 4159 149 4 v 432 w(VT)q(T)p 2628 4206 4 100 v 433
w(T)-8 b(otal)p 3203 4206 V 901 4209 2305 4 v 901 4309
4 100 v 954 4279 a(Escalade)p 1477 4309 V 273 w(3)p 2052
4309 V 535 w(7)p 2628 4309 V 536 w(10)p 3203 4309 V 901
4312 2305 4 v 901 4412 4 100 v 952 4365 84 4 v 954 4382
a(Es)p 1031 4365 82 4 v(ca)p 1109 4365 151 4 v(lade)p
1477 4412 4 100 v 273 w(13)p 2052 4412 V 495 w(9)p 2628
4412 V 536 w(22)p 3203 4412 V 901 4415 2305 4 v 901 4515
4 100 v 954 4485 a(T)g(otal)p 1477 4515 V 406 w(16)p
2052 4515 V 495 w(16)p 2628 4515 V 496 w(32)p 3203 4515
V 901 4518 2305 4 v -38 4675 a Fx(R)o(emarque)16 b(:)k
Fw(on)h(sait)f(qu)n('il)h(y)f(a)g(autant)g(d)n('\351l\350ves)i(qui)e
(pr)o(atiquent)i(le)f(VT)q(T)g(que)g(d)n('\351l\350ves)h(qui)e(ne)h(le)
f(pr)o(atiquent)i(pas)o(,)f(donc)f(16)h(\351l\350ves)g(le)-38
4775 y(pr)o(atiquent)e(et)f(16)g(ne)g(le)f(pr)o(atiquent)j(pas)o(.)-246
4804 y
SDict begin H.S end
 -246 4804 a -246 4804 a
SDict begin 12 H.A end
 -246 4804 a -246 4804
a
SDict begin [/View [/XYZ H.V]/Dest (Item.78) cvn /DEST pdfmark end
 -246 4804 a -246 4804 a
SDict begin H.S end
 -246 4804 a -246 4804 a
SDict begin 12 H.A end
 -246
4804 a -246 4804 a
SDict begin [/View [/XYZ H.V]/Dest (Item.79) cvn /DEST pdfmark end
 -246 4804 a 0 TeXcolorgray -141 4899
a Fw(2.)p 0 TeXcolorgray 0 TeXcolorgray 91 w(\(a\))p
0 TeXcolorgray 41 w(P)m(ar)c(lectur)o(e)i(du)f(tableau)h(:)g
Ft(P)8 b Fw(\()p Ft(E)g Fw(\))13 b Fv(\306)1208 4866
y Fp(10)p 1208 4879 62 5 v 1208 4927 a(32)1297 4899 y
Fw(et)k Ft(P)8 b Fw(\()n Ft(V)16 b Fw(\))e Fv(\306)1644
4866 y Fp(16)p 1644 4879 V 1644 4927 a(32)1715 4899 y
Fw(.)-246 4939 y
SDict begin H.S end
 -246 4939 a -246 4939 a
SDict begin 12 H.A end
 -246 4939 a
-246 4939 a
SDict begin [/View [/XYZ H.V]/Dest (Item.80) cvn /DEST pdfmark end
 -246 4939 a 0 TeXcolorgray 4 5035 a Fw(\(b\))p
0 TeXcolorgray 41 w(On)j(s)m('int\351r)o(esse)i(aux)e(trois)h
(\351v\351nements)p 1394 4969 63 5 v 18 w Ft(V)d Fw(,)h
Ft(V)25 b Fv(\\)10 b Ft(E)25 b Fw(et)16 b Ft(V)26 b Fv([)10
b Ft(E)39 b Fw(:)p 0 TeXcolorgray 190 5132 a(\225)p 0
TeXcolorgray 262 5066 V 39 w Ft(V)33 b Fw(:)18 b(\253)c(l)o
('\351l\350ve)k(ne)g(pr)o(atique)h(pas)f(le)f(VT)q(T)d(\273.)2007
5265 y Ft(P)2070 5178 y Fg(\263)p 2102 5198 V 2100 5265
a Ft(V)2165 5178 y Fg(\264)2210 5265 y Fv(\306)2289 5209
y Fw(16)p 2289 5246 82 5 v 2289 5322 a(32)2380 5265 y(.)p
0 TeXcolorgray 190 5429 a(\225)p 0 TeXcolorgray 39 w
Ft(V)26 b Fv(\\)10 b Ft(E)25 b Fw(:)17 b(\253)d(l)o('\351l\350ve)19
b(pr)o(atique)g(l)o('escalade)f Fx(et)f Fw(le)h(VT)q(T)c(\273.)1948
5630 y Ft(P)2011 5631 y Fw(\()2036 5630 y Ft(V)25 b Fv(\\)10
b Ft(E)2229 5631 y Fw(\))2270 5630 y Fv(\306)2369 5574
y Fw(3)p 2349 5611 V 2349 5687 a(32)2440 5630 y(.)p 0
TeXcolorgray 1909 5895 a(16)p 0 TeXcolorgray eop end
%%Page: 17 17
TeXDict begin 17 16 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray -254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254
-561 a -254 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.17) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 190 -163 a Fw(\225)p 0
TeXcolorgray 39 w Ft(V)26 b Fv([)10 b Ft(E)25 b Fw(:)17
b(\253)d(l)o('\351l\350ve)19 b(pr)o(atique)g(l)o('escalade)f
Fx(ou)f Fw(le)h(VT)q(T)c(\273.)262 -63 y(Le)k(calcul)g(de)f
Ft(P)749 -62 y Fw(\()774 -63 y Ft(V)26 b Fv([)10 b Ft(E)968
-62 y Fw(\))1011 -63 y(est)18 b(moins)h(\351vident)g(et)e(peut)i
(\352tr)o(e)e(men\351)h(de)f(plusieurs)j(fa\347ons)e(diff\351r)o(entes)
o(.)g(P)m(ar)f(exemple)i(:)p 0 TeXcolorgray 274 37 a
Fa(I)p 0 TeXcolorgray 41 w Fw(ajouter)k(ceux)f(qui)g(font)g(du)g(VT)q
(T)h(\340)e(ceux)h(qui)g(font)h(de)e(l)o('escalade)o(,)i(puis)f(r)o
(etr)o(ancher)g(les)g(\351l\350ves)h(qui)f(pr)o(atiquent)i(les)e(deux)
380 136 y(spor)q(ts)c(\(sinon)g(ils)g(sont)g(compt\351s)h(deux)f
(fois\))f(:)h(16)10 b Fv(\305)g Fw(10)g Fv(\241)g Fw(3)17
b Fv(\306)d Fw(23.)p 0 TeXcolorgray 274 236 a Fa(I)p
0 TeXcolorgray 41 w Fw(ajouter)k(ceux)e(qui)h(ne)g(font)g(que)g(du)f
(VT)q(T)-8 b(,)18 b(ceux)f(qui)g(ne)g(font)g(que)g(de)f(l)o('escalade)o
(,)h(et)g(ceux)g(qui)g(pr)o(atiquent)h(les)f(deux)g(spor)q(ts)f(:)380
335 y(13)10 b Fv(\305)g Fw(7)g Fv(\305)g Fw(3)17 b Fv(\306)d
Fw(23.)p 0 TeXcolorgray 274 435 a Fa(I)p 0 TeXcolorgray
41 w Fw(r)o(emarquer)j(que)f Ft(C)26 b Fw(est)18 b(le)g(contr)o(air)o
(e)f(de)g Ft(B)25 b Fw(et)18 b(donc)f(fair)o(e)g(le)h(calcul)g(:)f(32)
10 b Fv(\241)g Fw(9)16 b Fv(\306)f Fw(23.)145 535 y(Dans)h(tous)i(les)g
(cas)g(on)f(obtient)h Ft(P)8 b Fw(\()n Ft(V)26 b Fv([)10
b Ft(E)e Fw(\))13 b Fv(\306)1518 502 y Fp(23)p 1518 515
62 5 v 1518 563 a(32)1589 535 y Fw(.)-246 578 y
SDict begin H.S end
 -246
578 a -246 578 a
SDict begin 12 H.A end
 -246 578 a -246 578 a
SDict begin [/View [/XYZ H.V]/Dest (Item.81) cvn /DEST pdfmark end
 -246 578 a 0 TeXcolorgray
12 664 a Fw(\(c\))p 0 TeXcolorgray 41 w(P)m(ar)q(mi)18
b(les)g(16)h(\351l\350ves)h(qui)f(pr)o(atiquent)h(le)e(VT)q(T)-8
b(,)20 b(3)e(pr)o(atiquent)i(\351galement)g(l)o('escalade)o(,)f(donc)f
(la)g(probabilit\351)g(qu)n('un)h(\351l\350ve)h(qui)e(pr)o(a-)145
763 y(tique)g(le)g(VT)q(T)h(pr)o(atique)f(\351galement)h(l)o('escalade)
g(est)1769 731 y Fp(3)p 1754 744 62 5 v 1754 792 a(16)1825
763 y Fw(.)f(A)-5 b(vec)17 b(la)h(notation)g(du)f(cours)h(:)1938
991 y Ft(P)1987 1003 y Fm(V)2040 991 y Fw(\()p Ft(E)8
b Fw(\))13 b Fv(\306)2261 935 y Fw(3)p 2241 972 82 5
v 2241 1048 a(16)2332 991 y(.)-246 1131 y
SDict begin H.S end
 -246 1131 a
-246 1131 a
SDict begin 12 H.A end
 -246 1131 a -246 1131 a
SDict begin [/View [/XYZ H.V]/Dest (exo.29) cvn /DEST pdfmark end
 -246 1131 a -246
1133 a
SDict begin H.S end
 -246 1133 a -246 1133 a
SDict begin 12 H.A end
 -246 1133 a -246 1133
a
SDict begin [/View [/XYZ H.V]/Dest (Item.82) cvn /DEST pdfmark end
 -246 1133 a 0 TeXcolorgray 80 x Fx(Ex)o(er)o(cice)h(29)p
0 TeXcolorgray 0 TeXcolorgray 146 w Fw(1.)p 0 TeXcolorgray
43 w(On)j(r)o(epr\351sente)h(la)g(situation)h(par)e(un)h(tableau)g(d)n
('effectifs)o(.)p 0 TeXcolorgray 0 TeXcolorgray 1232
1300 1644 4 v 1232 1500 4 200 v 1642 1500 V 1695 1370
a(P)n(etit)24 b(for)o(-)1695 1470 y(mat)p 2052 1500 V
2105 1370 a(Gr)o(and)2105 1470 y(for)q(mat)p 2462 1500
V 2515 1420 a(T)-8 b(otal)p 2872 1500 V 1232 1503 1644
4 v 1232 1602 4 100 v 1285 1573 a(C)o(ouleur)p 1642 1602
V 133 w(7)p 2052 1602 V 370 w(18)p 2462 1602 V 330 w(25)p
2872 1602 V 1232 1606 1644 4 v 1232 1705 4 100 v 1285
1676 a(N&B)p 1642 1705 V 247 w(0)p 2052 1705 V 370 w(5)p
2462 1705 V 370 w(5)p 2872 1705 V 1232 1709 1644 4 v
1232 1808 4 100 v 1285 1778 a(T)g(otal)p 1642 1808 V
240 w(7)p 2052 1808 V 370 w(23)p 2462 1808 V 330 w(30)p
2872 1808 V 1232 1812 1644 4 v -246 1856 a
SDict begin H.S end
 -246 1856
a -246 1856 a
SDict begin 12 H.A end
 -246 1856 a -246 1856 a
SDict begin [/View [/XYZ H.V]/Dest (Item.83) cvn /DEST pdfmark end
 -246 1856 a 0 TeXcolorgray
10 1950 a Fw(\(a\))p 0 TeXcolorgray 0 TeXcolorgray 86
w(\225)p 0 TeXcolorgray 41 w Ft(P)8 b Fw(\()n Ft(G)e
Fw(\))14 b Fv(\306)522 1917 y Fp(23)p 522 1930 62 5 v
522 1979 a(30)594 1950 y Fw(.)p 0 TeXcolorgray 190 2063
a(\225)p 0 TeXcolorgray 262 1996 57 5 v 39 w Ft(C)26
b Fw(:)18 b(\253)c(la)j(BD)g(est)h(en)g(N&B)c(\273.)1938
2180 y Ft(P)2001 2092 y Fg(\263)p 2033 2113 V 2031 2180
a Ft(C)2090 2092 y Fg(\264)2136 2180 y Fv(\306)2235 2123
y Fw(5)p 2215 2160 82 5 v 2215 2237 a(30)2320 2180 y
Fv(\306)2399 2123 y Fw(1)p 2399 2160 41 5 v 2399 2237
a(6)2450 2180 y(.)-246 2287 y
SDict begin H.S end
 -246 2287 a -246 2287 a
SDict begin 12 H.A end

-246 2287 a -246 2287 a
SDict begin [/View [/XYZ H.V]/Dest (Item.84) cvn /DEST pdfmark end
 -246 2287 a 0 TeXcolorgray 4
2367 a Fw(\(b\))p 0 TeXcolorgray 0 TeXcolorgray 86 w(\225)p
0 TeXcolorgray 39 w Ft(C)19 b Fv(\\)8 b Ft(G)24 b Fw(:)17
b(\253)d(la)j(BD)g(est)h(en)g(couleur)g Fx(et)f Fw(en)h(gr)o(and)e(for)
q(mat)e(\273.)1952 2584 y Ft(P)8 b Fw(\()n Ft(C)19 b
Fv(\\)8 b Ft(G)e Fw(\))14 b Fv(\306)2344 2528 y Fw(18)p
2344 2565 82 5 v 2344 2641 a(30)2435 2584 y(.)p 0 TeXcolorgray
190 2790 a(\225)p 0 TeXcolorgray 39 w Ft(C)19 b Fv([)8
b Ft(G)24 b Fw(:)17 b(\253)d(la)j(BD)g(est)h(en)g(couleur)g
Fx(ou)f Fw(en)h(gr)o(and)e(for)q(mat)e(\273.)262 2889
y(C'est)19 b(le)f(cas)f(de)g(toutes)i(les)f(BD)f(\()9
b(!\),)17 b(car)g(il)g(n)-6 b('y)18 b(en)f(a)g(aucune)h(en)g(N&B)f(et)h
(en)g(petit)g(for)q(mat.)g(C)o(onclusion)h(:)1890 3107
y Ft(P)8 b Fw(\()n Ft(C)19 b Fv([)8 b Ft(G)e Fw(\))14
b Fv(\306)2282 3051 y Fw(30)p 2282 3088 V 2282 3164 a(30)2388
3107 y Fv(\306)g Fw(1.)-246 3247 y
SDict begin H.S end
 -246 3247 a -246 3247
a
SDict begin 12 H.A end
 -246 3247 a -246 3247 a
SDict begin [/View [/XYZ H.V]/Dest (Item.85) cvn /DEST pdfmark end
 -246 3247 a 0 TeXcolorgray
12 3327 a Fw(\(c\))p 0 TeXcolorgray 41 w(Pierr)o(e)i(a)h(choisi)i(une)f
(BD)f(en)g(couleur)-5 b(.)19 b(La)f(probabilit\351)f(qu)n('elle)i(soit)
f(en)g(gr)o(and)e(for)q(mat)i(est)1938 3545 y Ft(P)1986
3557 y Fm(C)2036 3545 y Fw(\()n Ft(G)6 b Fw(\))14 b Fv(\306)2241
3488 y Fw(18)p 2241 3525 82 5 v 2241 3602 a(25)2332 3545
y(.)-246 3685 y
SDict begin H.S end
 -246 3685 a -246 3685 a
SDict begin 12 H.A end
 -246 3685 a -246
3685 a
SDict begin [/View [/XYZ H.V]/Dest (Item.86) cvn /DEST pdfmark end
 -246 3685 a 0 TeXcolorgray 4 3765 a Fw(\(d\))p
0 TeXcolorgray 0 TeXcolorgray 86 w(\225)p 0 TeXcolorgray
41 w(La)k(BD)f(est)h(en)g(gr)o(and)e(for)q(mat.)i(La)g(probabilit\351)f
(qu)n('elle)i(soit)f(en)g(couleur)g(est)1997 3982 y Ft(P)2045
3994 y Fm(G)2096 3982 y Fw(\()n Ft(C)9 b Fw(\))k Fv(\306)2299
3926 y Fw(18)p 2299 3963 82 5 v 2299 4039 a(23)2390 3982
y(.)p 0 TeXcolorgray 190 4188 a(\225)p 0 TeXcolorgray
41 w(La)18 b(BD)f(est)h(en)g(gr)o(and)e(for)q(mat.)i(La)g
(probabilit\351)f(qu)n('elle)i Fx(ne)e Fw(soit)h Fx(pas)e
Fw(en)i(couleur)g(est)1989 4406 y Ft(P)2037 4418 y Fm(G)2095
4318 y Fg(\263)p 2127 4339 57 5 v 2125 4406 a Ft(C)2183
4318 y Fg(\264)2229 4406 y Fv(\306)2329 4349 y Fw(5)p
2308 4386 82 5 v 2308 4462 a(23)2399 4406 y(.)p 0 TeXcolorgray
1909 5895 a(17)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
