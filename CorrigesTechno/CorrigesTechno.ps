%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: CorrigesTechno.dvi
%%CreationDate: Wed Sep 18 13:13:56 2024
%%Pages: 7
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold Fourier-Math-Symbols
%%+ Fourier-Math-Letters-Italic wasy10 CMSY10 Utopia-Italic
%%+ XYATIP-Medium XYBTIP-Medium Fourier-Math-Extension
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o CorrigesTechno.ps
%+ CorrigesTechno.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2024.09.18:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Fourier-Math-Extension
%!PS-AdobeFont-1.0: Fourier-Math-Extension 001.004
%%CreationDate: Fri Dec 30 13:47:17 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Extension) readonly def
/FamilyName (Fourier-Math-Extension) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Medium) readonly def
end readonly def
/FontName /Fourier-Math-Extension def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 122 /bracehtipdownleft put
dup 123 /bracehtipdownright put
dup 124 /bracehtipupleft put
dup 125 /bracehtipupright put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-32 -2960 6882 848} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F6FC13F6
FEDF4B792B4382E1B8DD4D6B66F7698F4BD76CD673F74E2FFCF34A3EACBD4F3C
C6A935F0007CEC07779EB225FD87A32485FCF1300A8B140DF1FB601966E239B5
C97A004A4205CCDACFFC747D59C0AB62F98C58566E92367FF923A747FDE768F2
BC84EA22988D2856786B73BD956D58D8E1DE05E3B73798BA7BAE21AED1D65A51
3E8B275C326E384F909CDD630CC3B3D3A664C6BB0A43AF3EF5B681E8178A68F4
18925BF7234218D39BD091D0B241B2FB96B24A302B7A2C3648C0BEBA299B1422
B2A246F4DFA5A9BA475E9963604E772769D365D898BAE237E423E657C64198D6
C50DC4E23676D32A80D9FCC26CB7EE5882A7CD7515BB142652043EFE62BF1296
C02D6A59757DAE8B7ABECD31FB3886ECFE4C018918AA771BEE2AD4BE22C921A4
50F44C875C97D243655B17F1C1C4E4C34EF324C3BBBBE230EC9D5EC568CA45C1
F0B2F8760CDD8F8CC7A19377F15ECE29BAC75C965984E9E5C246419CAF94119D
CD396DA99EBBDCD62D4493A16F9D040A24BA632716AA2CF3E8527A11E08CD983
08E109D5F610523FC1A976251F5BDB7C51EC9559890B4E838A6B7AD783AB3E61
36A0752C1C9586BED6F91B6B2C31BB5EF83E54C2E1A67785891B6161DDC05BAF
0C11DF8939F72ED4C1CFD293B9BBE5D7BEB0835695972221F1D1BD1D197E1A3E
BF18CEA3EE0C05151741C87469C417F1331BA729FF30D6CA8AD4B25572C230F9
2E250FF7F828D5FDC41884B337483286EC37AA4563EA5AD6F28E5227E8EC3AF1
6038BEA4475B0CD36D674A344E85B43BA3F22462B286886B2FD9B2FFFE1A996E
B0F752104862EFB24394FA6D39DCDA3FB70D93E95FE58AC0B21D109900667349
5B2D43FDF1E4EE5CE4F0CA7062C6BC568A897DFD9185BD17E8FB9AFB68659C86
242E30DE8D95EB6A9E9CB42398895F1F95D5F191D6FF2E3E78E08934514C342F
45D4DD4D84EA7F29299E3CAB95D642A2CD023A1848E1121734CA2C9DBDABE605
9D2BB65CDD36BBBF12F39BE5C983F24BB65ACA13B9F7B1FF17B69D0EE8CE3972
D043EB13A26A661880550CD1863241FDB71F0A2F4F6EF2D2215DE1981AECE8E0
DDD5304F305DD920F967CE84F73AAD25CC73881E6F1C69FC61A157C6835F3ECF
64E26987F07854D2238AF6756C8822FD079BE18F6B04E5B2A467B59AA351851D
AFA8EF069D87BF2203D65F6343E2D3CFF9F0AA98B274FD40D6292074FB780742
B1217C06DDCDE7D8692D2154E4CAB0B4EFBD5BBCCE2DB651521CCBCEF5A6E903
C534BD676F926F0AD77B9A07FFC788FDB3879116715CB6A8D5CCB697BBD8E659
8856886AB0F4E8AC358C7F7E12E57590A2C7412F6E614351D5BFCA03B8259C66
53A4608D868C959EFDEC99E3F72C8C670F41D5D9A9D0DC81B507B92AA39AFA8D
60940A1A4A6A005F0623501550D2E60F5B3C7472B170C1A7D16F9BF4796B975F
70E66DEC9D7C0C26D36CE0232D94BB7769657E92C9C75EDDEF79B8B858DDA203
612FF6723C9300DD6E55E8E3A8D1462FC528DFC23545AC68ED074BDF1A5EFFEA
732A5ED64186538B15352F08EC3D02071A6EE2115781802E02CB89496A9A0E6A
C92C1C6287707AAE31C42925F5B96141
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: XYBTIP-Medium
%!PS-AdobeFont-1.0: XYBTIP-Medium 001.389
%%Title: XYBTIP-Medium
%Version: 001.389
%%CreationDate: Sat Oct 5 21:14:32 2013
%%Creator: Kristoffer Rose,,,
%Copyright: Font converted to Type 1 by mf2pt1, written by Scott Pakin.
% Generated by FontForge 20110222 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /XYBTIP-Medium def
/FontBBox {-543 -543 543 543 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (001.389) readonly def
/Notice (Font converted to Type 1 by mf2pt1, written by Scott Pakin.) readonly def
/FullName (XYBTIP) readonly def
/FamilyName (XYBTIP) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 35 /d35 put
dup 37 /d37 put
dup 39 /d39 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE373DCBE8503A9C1BDDCDE3976B9A
FF31FADC784CD99E8D913C26819A4962BC428320D924CB0D4BE15E2EA33CD98F
3A3090D3A2B1C56F2D8E679576FAF3FC1A79261690287D7B9444B1B4E36B6E78
13E34916336239067A606618EB045356D480135F7C325841F7B5598118DE9F10
DC40B14F98881CE9249D25473504F621ACEEFEEC415938B11B1EA0DB33CD14DD
BF0F9224FBD2D8BDC80385967061093CBA04EF9F2CC7611612A7B40A88C5F557
0EA7B75CAEE65197D76E2EAFF968FAFF7C1105A090C077A7C79DDAEA9DFB06FB
D5FCEB8E0AD1BE960FAF302828BD4FCBDF6D83C15C670BA0C633C68B75B8C6A2
18BEDF073A57F5212819DB38E30D9BA47521ABEBEAF35446353D5BFBD13F0FF3
5104C7E7B27F68240654E12DB59447C153C755A51AC2D8A60523ACBB0BBACF9A
605174A4E65D6320DB4B0B413999F0F132D46F188C11F9F61722C49616A2AA90
84ED72650D8EE114E75CDF80D98B0F86081110D9220DCEECAAD9E18B33AFB8C0
C81E5B7BEFD8BD70FB1666E4B0E60D68C76ABB487E9DF06F8C0854B04230C3A1
871520619EF605B65CD8EBCD33ED99BFD9AE77A5EF384F862E7F74302C0CD0B5
3D0CD2785C3898A10E23575E442E7F4E27F18C2C3EF3335AFBDCECFC630C93D2
42DB0D82F5E710E8B72F7A2C7A334BC02F848C8C796EB9B19E98407FFEC9DB8E
546FF05F254C41D701ACCD0EF56387CED4F569385655BBDC7794C5C087B2B26A
FDB1B5E75BACF169128194A648C42049D69A59FEF5447DE9D8D4DBE27460F06E
683DBC80CE204B1AB46B9CABA4D166D9721ADCC309AA5997B95BB0BC623F91A3
15024E6F218991959D281E104E7C93298D654D337CCEE6F26760A0DE5B7481B7
0C1E686727C7EF358E139EF8E33EFD761BD63CE9A7EFC7947291853C3AD8B9DB
42F1E81C42B108CF2879B9C5A99C82169FCEC9797911D43EE78A66B7BBDED558
FF3381F35658D25C3FCB9C4FF8D41AA291064E9EFDD63F79701AD21387D8F889
AA4D4BE9A7B77CCEFC6B5B563D78A08C52BA94D852C2993D9235708FAFE02144
E77CDB6F08D2E3773FD8B7D529F4B45382F3E6E6B701E1BA31FBF29C71674E10
94242E4486024D3F85ED159ABD20D9DF06296084EEFD45273DC14FF5F14377D7
5506A96D881AD3F6D51DD868484A5DE3B0D8C18390B2A2FC7F7449D981043EB8
B55EE334C43027A8AC3EAA504105262ACBBE5AE88661FD1B3271FBD5FAF64989
03C8C790205A24CD4ABDFE7FF0F8627D44C9FE708212EA9105B035660B8EEE4A
82CF630DA9E1B6F0EE1833E6EF8B6C6D64FBF5A8C5CBFD0C90535249C1B22F93
087A83DB67552D8894B1ADCD0E6BBB8BB098F261397DE4C57B6DFD5761150BFE
9E36365D0136B519C62FBC9B73AB192FCA1C60DB323B350C702BB9EEA5B79DE0
4D9B18DC063A86016673EFC96D59457696B9A5DE9ECE8C05B6C173F356AC3B43
9B20B1A6AAC3488CAE62EA0A010526D41BE9A45EE220FA266C644D063507FD92
1F96CAE76E3A6962A390C403A317D332FB6B2F9830E678A4046C8055E0A8CECD
FF28370B5B8B98000C8DDB8357D5F057D6C2EB040587D85F3F1116A297AC9FB2
A9C09CA4A26F4FD17563F5554E0F4AAED1691908E757FD3C147E5E59CF7C91D7
FB41F1F8E0A965D338D140FCD78D1EE8FA8000DFFD35C2A3DBAA1848AB88EBBE
C03310DF30EADB374B9DFA808BDF3D1411C87DB839C96F0A77BC1454A0D2CAF1
0B61C79EE93F1EBC52FF979B1125074C9DF3D0B098462BB93E6D21BD15DB685F
9503BE922BF390D86D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: XYATIP-Medium
%!PS-AdobeFont-1.0: XYATIP-Medium 001.389
%%Title: XYATIP-Medium
%Version: 001.389
%%CreationDate: Sat Oct 5 21:14:27 2013
%%Creator: Kristoffer Rose,,,
%Copyright: Font converted to Type 1 by mf2pt1, written by Scott Pakin.
% Generated by FontForge 20110222 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /XYATIP-Medium def
/FontBBox {-543 -543 543 543 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (001.389) readonly def
/Notice (Font converted to Type 1 by mf2pt1, written by Scott Pakin.) readonly def
/FullName (XYATIP) readonly def
/FamilyName (XYATIP) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 35 /d35 put
dup 37 /d37 put
dup 39 /d39 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE373DCBE8503A9C1BDDCDE3976B9A
FF31FADC784CD99E8D913C26819A4962BC428320D924CB0D4BE15E2EA33CD98F
3A3090D3A2B1C56F2D8E679576FAF3FC1A79261690287D7B9444B1B4E36B6E78
13E34916336239067A606618EB045356D480135F7C325841F7B5598118DE9F10
DC40B14F98881CE9249D25473504F621ACEEFEEC415938B11B1EA0DB33CD14DD
BF0F9224FBD2D8BDC80385967061093CBA04EF9F2CC7611612A7B40A88C5F557
0EA7B75CAEE65197D76E2EAFF968FAFF7C1105A090C077A7C79DDAEA9DFB06FB
D5FCEB8E0AD1BE960FAF302828BD4FCBDF6D83C15C670BA0C633C1848C9E83EB
8BC4A503624130F2632568342D516987E84088FEC7D823F0719B19EAC26EF619
6C4DEA4F593450E106FD3234BE1307FB0D93D305C419CAED51F295549FDBA441
5EA8D965CFF4CC48C0567333129B1781CDD7473FE9F231006E32433B94B6E4EE
7A6B010DE67402C3861DB9FFC57EFC00625BB337DCA4D54887DDC159E071059C
795D614DC19F65DAB6AA9F3C1649BD0AA3F1A941820229AED5887D23EFC80D9F
7CE6C0A60CB4E3B5DCFF3671C7722C2E115303C0B37028E584F11A091773C86F
DC03F457EC33A987A275963D9316AF4302101DC71ABC50904C23B5540F5EB3E4
4659FEBFDA7118DEA4F5653BBE4E09A43F8D6BB9AAB31D72EF202E1990E00763
63E5FC804136E6500EA8E454C1B45ABE01C39F83B614F3665FD18A53F2A8D88C
5DC2703EF4A5E6BD6CD87BA32F6ABCB96A75D769B74E0E0361FE54966AA0FA78
456937DFFFDA2ED807FF3CEEBA4D8635BC8BB3C9826C42D5A61AFB527E2346FB
9A0DEB66787284C96B6BD54110ABEDC6F5CB25496F2D7D7FF103602DBC2134A6
AD96357B2ED001DD02FB7DB2E80CDEC6F52F15548C2AB8430AC8907D7B3A9C9F
0B13907073BA09B096642F3E4CCC309B07D8EFE86A2949F304B999960E621450
C64D3DFBCFDE020F7511AD9145E0762B75EAE1ECC42E60CA8E05E9B0B9A98473
8B4877E4A4499426BED9C6B86120F28ABC64A2C0F0B9F8348946364AD469E75C
3923B20AA27F071081416DB3F0F9C09137FFB6617F2FC2BB60E3AB70FBF4B6FB
BD728B866307DCA478EC288F33E6EED97FF91EA2A00DA14002E454BEFE44D396
C0F4CACD46D0025426B350AAA724D57D88736C8B93AFA3239BF83BB80BF46372
19A6E21E24FF349C42B4F9426844965DC4EC23F23D806650592ADB01686BC090
4CE7F5C5D1DEBFA341FAEA32B772B7FD7110CC40DF0EB51BA0C52C0B0106C8C0
7E88F9F8706078AB0AD3D3EEFBABC07D909846D4131564F8EBC0A938B789F8D7
EF92C30CAA95D2DBC97B0009F0521F1C25B5CDCB953A4443AFA8C91DB30EF39F
30D29236762A53EA15ED2A691916C44FBCD4BB2F492AAF24A7F6CE71AC23B4B9
4ECE2724E9171988591D6374071603F3E8B4A01FABB30169D079DF1C3F38A62F
BEDB6CD837264D8FD12E97986CC732760739932108FA27E4CF07F0B7C3D2F60D
4962EE3355EB934959AAAF81260FD275C3BA022A42AD35C5B3769598402A0F83
99F58BBE1207BB92E73E6FF36A7983A197F76478E863178D8136F47B89FC375A
110D8CD7E1F03EEB71843C6DF62F3C6DD38A2847908BA3880BE69340A778BBEE
DAAFAC5B9F1CE4970F865A120BDBA4E6EAB2B82E4ED475C601B80CF3B9EDCD76
D865FB0FC7EA564EF02982F2C39F940B32D3BB74B44A6131AE0269B8D83EA7DC
B011FDB0360BCC2BBF2D9252E1B54BB5E92587253180DC2EDBDC37651A003E5D
A7DA387F5A27E2AD94B2B3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:50:41 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /minus put
dup 162 /periodcentered put
dup 163 /multiply put
dup 165 /divide put
dup 188 /approxequal put
dup 197 /plus put
dup 198 /equal put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F90970716B059E19D81A
B8BEAA3A9BE8B55011CB6A8C2BBE60B08B624F91399F3A94475A343A381B1BE7
FDB135FF6D94AAEB9AB5C650C9351529D811CF0AD1BC2137C4F1CAF70E7280E9
FD9C8BDB44A112F94FC68A03524EE7DCAA6B604164162F722B80EA7DDB2B7957
1CFA4CCB61CCBA386873E00F8FE7B0BD3B62620E0F9D38B147959FE9CE2A9930
EEB594DDE47EF12DA0F556B8A3499645410DDD99E58BD48E53CAA921AB9D473B
CCB5C6F4AE07E93E0ABE0160B2F18459E716CBF0FA021392E7AF19BE4EE98C75
90E210EE8208441FFF28EAC2BF3DE178DAD5CC54C4F455FED810A32CF641C81C
60671F2BD6F849339C94984F77292C9C9B3D4CAD750E0EA00C87827DE9CD94B5
2FC34A291D1C1EE2EDE73FE1E5323F3009FBAA094879A6E8155FACB2F0171791
0251052393878C2BD4ABFF5D40DF50B8A05D025F5DEF3B4CF86F099E60E9C503
1D5D4C4CE9E56E73F0901018246EE939BF6364A8760FB4C38F8D88FEAFF4E124
3B1149D4E094231B9F39098B54E046AE35CB536876653855FD6B709F0EE47C8C
5881C99582FE910336E8E1B13F9418BEB30EA472001F384B0B8141C78E75E806
BB7CB4758F2C82436B1F6B484F3F2E1A9BB3F92CA741E0E230FC424D5053F349
2EBD4E0C342DFA0F8CD75F7E40FDCA0B7C53EBE9CF040BED8BC9820560ACB210
D195614B7479092537980B07450D2852D7F9CFB86FC2381626576708999059EE
F50556FC8D7302162393AD10CF85A13C81A773A0332592A1779BCFA8CB9FB2FE
20A231F65AC11417FB54B01A4F089707CBCCF26BCB334EA4E5618A6784F03F6E
F5D3C8DA6BD3600AFEE1E194F67E58F156E9DB2749F5654445F1E2262AC3AA22
BE4DA6D5FB4A4A4CB7BE1D8E30CB44E0F1004DA290FDE470796B2F210C1AC640
EF0D6DBA486D295FA7E588BCE3C88E50694350D254F79ECFE05159BF0E1C2E53
D7BC34EC9F704540BBFE8C934D70C8E1B4AB9566B188F6B92D2C3329CC787B6E
075A2BE13B2ECDBCCC9155A296A00B3A00442A1C05E5DAE4B078D4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC7775D014891054D978CDA
2123ABEA1F56B7AE95ACBFB66602930C7FF181D407919EE24F9822ACEB90CDE2
8600399C4B6A20B9F9372AE5FF89509FC2DD0A41FF090A6554331231DF4C7487
1AE978282A9D1CD19D8BC9A2C60B4013973946C9961828EABE87D4EFA0BD65C6
86674692C0F27E9FAF66DC1195124A60A6E5F01BF2C6D78355FB7575C229866F
C1AB1434BE0F4861EC8F64AE46D40D52EAC802878FF064922470D50F2A18FE57
DE5237FB22C8424FF3CC5990A998A735C12B31FC7F5E6CE9C732AAA4AE3F2C72
C23DD8504C426F0258ADB1585D75CFE278C1CD4E699553715048D27CC0A4E0DE
FDBA01DDEF496F6DE0DD44001E2F1363A9B1A38719B53E70C814D0FC7F5D069E
C95994EA648AB4D100B6B2DA0E1594AB8CC867B772253A7C92050AEDE8F8E58E
2AF48F64A090AE8D456458835F196A930F7E51B1E22FCA52B12375B2DA1EB4C8
19A28226AFD8F3E04598F519B32EEA410CA5C653EB9FDAA0CA007F8DD54B61F0
F8DF83A7B4BD041661945091BDCE083424A47790C81D990013ACC1763260E9AC
E361D63457087101F7BF2358A06084859C632C8DE35FADC38FFCD02EC1160CAE
5A6D87E2112C48DF124951653D19B04EEA5CFD0D994059D2B412EA2767BB5867
F44610C81FFE049D199AF9F5B2786D5EB2431E778C6E8A492379CD73BD7A2E0C
CB6634DE71F20FCD1939F2A0A02FEA9FAFC4A3C788958195DB48A6EA8666FF25
4A83839F08E6B37E6E55F27832DDA15B7592C06FA60FF1C751CC1E402911CAB4
9534A03AD5A6EBF977303BE913DE8B9C0D53432D9BE087DD17AC5A8033BBE0CD
E9A55A7A09D6E4D7E801AC7DE94C740A041DA9BCF6166ADDBD0BD59BD1B6CFD4
9111F4366E4AA8FE4AEDE949D8F732F744197AB5B4EABF03CB5CAFDAED28975C
A03C9BD259A50618883E2B007C46FFFCF9F605F804513E11CEF8F542DE0C0AE3
7C73BC14806632A876B9275789B85F37B93AFB5EA3EF757F16B0236432F307E4
0C4BE3AD0B34393BFAD9B010875BA73EBD9A175259842E6DF965D4E5BFEAD394
07ABE54CE6B415AB37571F2A62FB679BC60EB0146C2B3C9FB77D5285C30EE408
E64FC6AD060AAABAD60E67A4110832F198E3EBA2BA0061D924E8B0C518B17E14
F874622C8B1A115C10E15E8E1AFDAD7C3C4BFCC7B63BE298A124A92229938268
E3FCF67EA5E16108C276AFF3C02866465883B2216368C07EAE98DA71C99F0F14
CB58B87ECB4571E98AEE8C4EA27849EDF9FC24D9C8156098979A1938788DED15
020072C76102552D003454E020E5FF5A3C613CF3BFA671718DB1E4AEE2B63420
D1CFC724D8D515C07A3637970B570A1C2C7B19722D1809D6D2C99A0888C3CFFA
343B76AE1536F52AB3DA276A717E928F4213DC5EF3E98B70C14D755D55CA286E
31ECD51E5B3FAC3F7DFBA3001911014560C630FAD0A07F6EB620DDE74E323C0E
77B32B4863BB0D630E174B622AFF5034F1417DA298826C815DD6191837BB59A6
EFDDC722FECF62CF48AFAE9826118A7842410C4684B52C6C2EBD0E6EAE48CA9A
E688028FEF7910135E70512342821C190FDFD3929CC83670EE968195C5D76179
9C5A1366F48B54A28C26E541AB95EE922122FC84A868773E686161BB319869A1
4312784F224FB8CA890BAAEC943EA33B68FE03057A26865B263620A6D219203F
9868DB049706CBECB746B77B40B0EFE4A4FFE8C12FA40E2858C489953BF1A2C1
CFF4B373765BD1F1DBD7232CE27F5B2820CD12A6CB8136C7E7711B193C2FB434
D7538395C051EB16E6536E852D7066C7730D900327E83554A4BEA206C6837FCC
60D682FC2EB4B4167CBC6F666F6836BC53AC53280AC90B81DCDCE63D8C624DA5
307A9AA98D6C5DF59F1753225095C172115E538C05D8D598A9329E45D5F1CAA9
0C756B2857EB8D5467C782560C35F5AF92103051E4D6EF5928F505187D2A99ED
9933E6C0C482A40730AA0B6E310854C9306535B049A2BA27F72B4165D9CFD34F
683F036F317645288424809317EE853BD818AEC10A09F7A57D614CD390D7A9C4
D2B579C4D4B93FA2311AF32695D1B2252367EFD9F7728A46CC68A03D2EFC01F4
C8090ECBD68E555C7AA62A53B9E02A5640E188384FD9090CC5A1727EB97A6C6B
EFA8B5A4A115FD669683760D62AACECD4A1243D26B0ED2AF2C0E9C8F18C57512
46F1657137F50756062E9A24B088A00C7FB912156FF3F36B93E173D032F1674D
B9AD8CDB5B0208BB29ADF6D2A27372E22F1CAA8B85E8A7F402E498D91B0B1696
66D3E4A18B76F49F9D6A836B08868BFC07AF195DB79441C0AEA235474A25B3EB
8FC14062F3DEFE6BA10690C92D6D52BBBD816590020448BC4939426240C4CCFB
A16DEE1DF3719A855B65AAA491E6B34886D07FB2D313480A405C503FD8ACB1E2
E1A3DB09F75788AFD624E645E2129FA6DC7FAF8C27C5AA912901F48C4A6E314B
7B441784E2343BD1D016B1F322622BD1043E43EA4B331BF4FDA23DE6C460AD41
89D026A941C3A253FE382B58952ABC0E1477785B01D947059EB6D92365D2EBD0
81BC7FF15A2B0D2916AF60DE0FCBA213F5E21184AB9DFCB30B245A2AE0CBC0AB
C67184EC1180FCAFCCCC572024A44F5DBDA4EC0E5A479B333798A27E45998060
8D24401392F4F8EACD1BC9FBF57A14289955FF8AF276BEF25C99CFE69164BD86
93E07D35080D3B51D3E3AE8D7D5A1F63F7770972FD1DD83AD47EAA9F8EF91A7E
B8E2859856A5128D9B01F519E9BF314FACB26F1D17A680387AB67B635B3386E3
62EC7ADBEB4E1135117931613E13BB89CA6944E33A32371E55D27BC14630A58A
2C721F607260523DD5EBBC3ABC404CA70C78AF07A70D115CF06A5D622D0A07E8
86325C76F875CBBE15A724C453267475D4CAA08082FC63A7F3DB40EFD19B8557
B9F5692DD366E93EE4E31F275661714EC4EA43CD30BF50D2C1D7374260E9C0D4
9537AA9B9FBCB26A66DA270BB995F3EE0D7001218A4B2C0A98F27E1EC9E80568
15C130374AD278C4CCB30F0C7E6817B50781583516F828B209A9C4FE7EDF46D8
8C2BC6D6DF576C7DD1173063AC7831616C51C1103F0CBE37ED039EA3425C4EC3
CBB17FD9D9EFED7586BEB89C511362783F6527BEC7DA9EDCD713B1FEF95C7B01
AEC9114E35BA00076874707D41E24B3E28E823EE0928D8F5B775E36C212D8F51
27B32D7468AFC24194401A0E73E3EAD9099FDDD1ECAADB0C92EB8D5ACF68EDAF
EAF708525C69FC55BAD4C122D680CF7323CBD8348DD1C4FB30ACFFD83546ECFB
A1C3F4898882FE4926FAC967E682605CE4E5D763F9625F73F8A837CD10BD8FE9
45E8DBF5BC212A0B77AB704403B7C69C773EAE57A71EC336B63248EAC701CA3C
50B5F23B73FE02101DF6C8284F5F58779952458A54C62579CAE43C48FEE46293
106612C0D2F72F11126D733F98F11723D1D64BA085AE32794E65FF22D036CA7D
224F896045EA894FFBDD0BA4426155D0AFB25F51B801222452FDBB41D1C03F7C
AFF7BDD32DBE2CE5BB288EA85EE61F5310F7C8C0EC130462F18F876C6EE62B15
D7217455AFC8C0315E00DD306D33E8D59138A53B0A146FD6AA9E6E9B3F137EFF
A817CD4241EC91235F9F1BA07A5A482C1EE8CF0D9400C5C7F06F921008B52E9A
83EC90C90673EDE4C93CA7E73EF55226B44FEEFE58A2000582EBE214606E40D7
F32D734A860EEBDB404EFC6BED2E68FF9E02C9880583F6ABB520C2769235241C
AE46CBBB95D91C42E722857664524B3FC36469AEAC60650BD6D0D1A5B9FF3737
69EE243E7565FB05F89868EC582658998FD5D707DD686757E74C40396C8E10BA
988D46126A0327E1CD1B581937930267909C4FBB011609F9C3EDC9EB169A820E
3350818A4470ACDA66E5498C209ABD49E140F4CA972DF5C76C4515DE95A29D15
BB665BDB2A56E4B15956AA2D5B790AFDDD209B70104DDD829412F9D97FC5C8D5
E39937B001BF048D62CEFE7A1BE1F55C8566649F597820D56B44779BD6DC5A6B
4D0F63A3E9A857949EE410BA4F8250E227FB05DE799C1BD44600D2AB94AC15D2
AC772C1BA775A3414CFEA58CD14FD71FBF91382972395980DAAB0F15B779C4ED
AE89A65C8401B7ABE0A6E5294D558161DE6AB95461246F9C46BF526A58DA46B0
BB09A3BF5B2ADF456453DE03ED3D90D015838F8072D767F4D533BEA62886B878
E1AB9362D7875D4582D2A574CBE1D26DA0F9D0D7ED7AF5D067444272BD8E14E2
2689D398B953B65D098F09CFCB139D0745C61023DE7A6F50AD92E062B2BC9664
DD65F3CC7111BF7606C14066A7B4D7ECCB4A43F24DF2217066183B5069313CC5
E760B8224DEF054D40B3409EBA34CC609FA53BED792DA48B78559F4E24A6D58B
4CB35AA57D1545E9EC5D5C3375E19B4D8E21A5BF462C169BDFD6C700DB2DF0DA
D79D7D74607F03181DDBBDCE8E8C3337095E21142117E65F954DA05AE9C967E6
82605CE4ECBA2840187527B57ED962708CF7AFFC5A5E4B14C74EEDC260E1A539
3669CCF8F290683574D32F41B39AF3ECED0D95C460362726C4A6606D446EBDEB
19CBF0743F7F57BC9024F8E326AF1777FD5318E97E0E6CE2CCE1AEB657E9EFCE
8D09775E7432888144686AFE62DBE3F422BCA2848A065A1560B1C2D9886336B1
00F563EAE038F1202878168633408F8A2E89D7C9A8DD908C36F20BF53172F819
4CE3B471CC2C7FE44C832B9BF0E529D8442652673CFAD49B63B96D97FC546E89
9C8BCE40EA0CDCCEFF486438C4EB99366FB6DDF44F265EF23D51EC6346E3C963
FB1BA1018B8262F1E2097510CEA33495FC5CD4F1455DBC3E902F1805B3E415E9
42C015C36D914C2A19EC75577D484B085CF2D3BD13041715795D6DB1D7F39ABA
A0D3138F6C40CD614F18E9FF184F3ED7868AF74ECE5DA88BFDB49E1B31830CBC
28680176F8BCAAFA58B287777FED983955D033876B721F0742C642094F648AAF
D00DE629FA237BDBAAB9634ED6248487CDA90B25E1B529E859D283503D108C1D
2C2FAE18D0F837F2FBC40DCC16DB66BE6275511D597F3F7834AE54BBABDE8C4E
5E6E59A7E8184B1F07081E0B050984FEAFECFF846191F4F4F6C69AD7377801BD
125505D34C751744962994578C43A710A148BB13EFEF18F34E3FCA0C68F3E680
6A2BF4EBA18FB4CD0D9FCDB85231FDCFBEE735D796E357AD910B422620203D96
14786185C0449DCC820C78968FCA40C0D865F46A2F35F70FE3D7C375A6C0B331
EFB1D7ED3831C4BCAD8D82A06DECD55295985B13E448FB954363EE04C1CA370A
9C9CC533EE8B901CFD38B6AE8519D68549CF4A443F786849F4D135580793DE6A
7CC299925F530C5ECAB9021D736A5DEA95A929C10D00EBDCF91531FCE908A5BA
C001A2AAD9B6DCAD1953A3EB3FBE7A0BBE34ED09BB1BEFA7F3AC52BD2CD52A72
9853E632808C06C928783AE7D1F2FD32C072BFB0B91C6BD4FC37D98D939516C7
55DBD34DCF21BCB6C500C4F8147C54ABDC618F6F35470E9F4027E09BFE76434E
3BCB1064B0D8F1FA962A4323F5B029E1FCEF3342B282099288D5BFA77AC3B48D
420D3E953D2F6FF0E45D64FF0AC96A411E0F9382BEAAB4A8412B180F0A545B30
E4232333E201BDF9463E19DCC6D85F357A8D8EB2B929CE53EB6FA955045A9309
0FF6D582639B94529FB8BA5F68FEE60B29DC5BFA8EDB4C261EEFD85FFA0272B6
7393DC8FB4294B006D7B9FA64F1DC9D40FC30F76ADEB12ED78235A57F0F59D2F
89F19B479799D6CD55958B3F874EC368E357E5782BD17740E017B54F286F58CF
2232FE55FBECA07BE6FC758C062585E100F24DD56743347FE3EE6D197AACAE8E
91B7DC82926481E021CB53EC0003BEDCDF05258CC5FFE245CB61DF2032E0E98C
5353D19FD21D6BF9308F48B7C2738EE52A7491F8DE642C6D89EE6E8F2E8F32E8
D10D6199565DAD1C08E4028F2F6B29B0EB5BFDCCE789852C349920CE6B42AAFB
F0F90853ACE5012BBDAC60AB0020164901F83DF3BA9466234266440913D50739
F51CF7E2D941872FF3D55B7A327DF7FC87C03F143E1A2D8720028C0019ECC8F8
0726C5DB3852D171E401724807B07AB5935CB1B8636630F31E9061C7F1C8897B
52EE6EDD81132E4412BCC326331F40C305AA140A6CFCBDE1AB7983940A589D9A
AF82C4663A3B304F9D591FAD26B2C3D294FA26CDF6613C06CC52B3D6C3AB805F
D8A8B3D0BA3DB62D5A1A3CE5CF1EC0F3EA22D097FA2052AFD27654A467CD11B0
E9D84CD20D82C137108894380F35CB7D1A9922FB399A4E977DC9B462089E84CF
E1011574D9EBBE781DA16CD63169BCD09BA3E5E5737DDA455CAE9D1D681C6043
AFE0663C368CF15E228F3988E6499808D0E9FDB17142AF047D0C60A87A81207D
F09674F324FA8A3CB9430A6E23D29B2D7C529F835EDC8B761635A26838BE79D6
939FDE88F9E2498F1FB9512C40DDC92C7A11FDDAB2E8F89BE4046A4A683EE91B
8D869C9EBCEDE0C6E328D7F2FCE78BACC0CEB7C38430DFD56AAFD887B22532E8
9339DDFD764DF2FB93BA92FCF7952A42CE1DA35C7642425AEC212BC90E9D5FDB
88F12DECA34947E30E0D1F0FDE402D4C4C477A9B49860D3EDEE1EE1EDDB0B6F7
DEA0CC5CDF6A8B3FC64E39E2DE83E407FFFFC7383FD18168A5E9F9CE271676A5
53A12CCB2032EAF44C1E4833FE530BC0441E0D0677CD16D0EB243F926513AF9A
377E0FC731808E5E52DDE2D911B8556EC31B4FF6386920012F89CF3111212085
58615B8D03F409DEB62CB6479DEB4F6A2008CC7E3AB92D00C9F6A8837A414828
563E853ACA9B23AF194E8F980867837CF7FBAAD6366551E60DBDF78DC9DFEC34
2E157E1A500DB4159F8949C5C3D753908524F6649B59B5D7FD35C2FB818EB8B6
320CC8DAA8B188CA63FEF4644BF31F27E8CBF1FB4415332B1F4D85C1B59A2A11
D2EEB18D4FA03DBA1AF666B38B72F9FBA3A854DA482D3C35939AD54025E65458
3C4ED6D9D0956AE651C2B84306176F7AB5BA95874A1620DE843BB0CD6A9AD4FD
3497EBE63302D3370A84A580411645BD3696C4B6935D4D9781A6076CF4AC23F5
F3A495E60D2DC40052E16B99FB510444D359449BBA58F8B073442BE7A1A8F78F
5959CDBAE07AC4C849CC72AC6BF8F810235FFA4B36B990180F6B2C8065D9ED2E
4C25E75CD6015C07E38A1580CC9FAC38CD272BE4AD21376E03009FCBDC9BECF5
03EA4B2FB4C886EDF3C74E1462FE9F1C24F11FA1EE28195617BC2D178C7A9F8B
8113B5B51E066AA366FDB635B6D81B981C21F73B34E3D77AEF339FB4672DDAC6
A751FE7144F3F8F952C598816588DE9C8A1ED4CEDA6CF086D2606F4FDAE7DD3D
CB7581DA0523186F9F0FE9DF94E159D685D715786514400EB47B86D02D5A568F
8A7166A1285C2598BE0414F5C000CFB115415E3709B1E691B9D0FCB6ED17C218
25F52F9F6DE2C3E9374E5D2C8F1E12BA348C9B5280EAFE1FCB031A9531C4F38A
553637928081C92987A40F5776AF97299E671D9EF6A6ADBD46DC27EBCBE11F4C
F423CB3D73285F32FC4E53A02480DEDB9CFC98C33F37E0080D8B12B256913E51
25478D6B518C25A5FBE871D8035F45D0EFAD4132CB76C2FE8FBD5E0D042D3049
867723984BB1683934B76326BB8423614ABFC42CC17B060800760C11AF007CAA
5AA38A1EDC25BAA1D9E95DDA3540E1232B7450237CC6659E3AB7A54611AAEEA7
2B792EFC2BF4CD7E2C39CB5E14B9FBA427A9147FA8438617D0FFB24E731F7E16
652C113B75D41C0FEA3951EB1E9E0436DA0F21ED3ACE2804B4966096FAFB8B28
5780E567E76E82C8EB674E4024F7A187BB70D33164E3955DC135A18D08DFF8BC
21F37F99F544F5E06B75136B84FAEFE90BB7C62324F675B2C5019FD0F006ED9A
A5997B7E5428E7D3086371649EA744DB4AED994D8D2093DB0CCD985B410FAC97
4E1B4827057078CF0D2158B50937201B296B9C1956B32E0FB0A289780F36C0D9
78EDD8969EA70C8DC4C63A7D7BA92036FBA6B329753CA2B246A68203728C9D5B
A28781C1F0E5F99EEB895CE4DD324E112D5BEB1AD63991615A2CF075ED4437C7
9640E4901E5D90F43EC083490A694DC7132FFC10FD2D158A422BA3918B398B8B
FD42B4BB51B879CCC72EDFEA64AE533D0F93A02931E754ED53ECEA581D7F61AF
C759B96CD82DF912080CC89FAC65DE6B44E5221AFE942BD503E19C5CD1271F46
C229AD7091D30542F498E69A677A3D356768743DFBC88690F17069BA98F57B7C
C30B6CE0F7C94F14EB315BF7154456EFBDEFE44963C182FB30FEE92BDA21EA4F
1CEE8F0DFCC7AB4380F4E7789EF9899EE74015C3DA4D37BD0974A676CB5D3A60
407D0059206D1080DA20573617858CBB7B22937797C0FA87B0E1E0C8EB724B8A
C82A7BFEAAF97DADF735C6B7B159694918F93F0B78BE0002D50C234928CC829F
C6FF6556E1E4A3A71B934F2A45A8A0660A6FDBB0B23808F2CD77A05B23B88A7B
FA2EEC346E0528AE2CADA4B247061A912888C230DBDD3D01234B7D0D3BAB2532
896191FAF4BDBE2E5C7FFEF624B5C048935AD5A9BC3C90871DBCD2D1E7020BC4
EF5A869DD783ACDC25907A26E70E3A3361645BC877BFF69C0EA1A9B409ED3C88
FA93FEA2F142CFAC051E6654E86649174FD11A6DCDBC9D4398BB4F1F80F49D71
83017CBC482A452CA72A1A8AFE1C6AF136D430251A144C3983941A00D1312714
7DEF123DC68CD29458F88629C9355B3D37EA6751A5636630DDBBC3D067F3995F
CF22FDF16CB8DD548160E6BE75CF7B0345268DB6B2999933D86BCCC09FEFCA8C
6EEDA13C134906569463499092C2150C1C29AFDC3FE79236579639F8D329C17E
D00398FC3A742A48E0FE6F855EC129CF819412471F291047C450AA9C3F0ABB99
33D06883364352594FD974965626AF9AB92BC3C5157D11F8A9A4147F22FF25ED
D7B19BE347B57978DBC3760AD42D7735045E0131EC014080552BA01AEE38E112
CB8F8B6686EC12288DD4F353DB146F43DEB9F4610B018CED2DF184E812E41F13
07CF5B59114ECE0E976335055046BC1EB023606D90DDBE0303120F2BBA7BE319
FE9053CB92D08B6EEFC676A790DCBA9BE649196EC3588E3AC01B8504D54F3828
F21804C3643C1542DB0CE1BA1D33170450A2F1A88CC892CA135BAA268D558AC0
495817EFF3FB6B15B27F44DAAA5F514FA550E85F2D90EFFCA8BB85A38FA70852
0CB64FF37AE7FAC8C7493AF6E3DF94C2A688474FC93E294EC9CF931CA10DD99D
AC5865E0133671E9ADFB2C1810A4C29772C5A15303089CA6D7EA691A1F35CB8E
409F2BB3FC80C9331F86CFBAF8A46B4E6305A8894B4280C08495EF319B31FDFA
7D55701A962CC05DF4DDE845DB3A91D726D44F4A9E2513868C596929D0CDB6FA
9E610DFA88B61018DF6A337C5A2AF4C68F81FF37E98BF648D893A588918216FE
757FDCB1F6F8D6F9BEDA4DC4981565C766CB0754C66B9C43ED3A01A038D92565
35E39CFFB33A5919D7A9A4D6E0BCE28B4663F5957AAF9C33D3F197E87DDE402E
8DC06C98C2554A33F8FA67C55C1348A0A6E1B618E5425F589A3BC8127D525BA7
ADB9E7EF9153005909C4934BD5492CA5A5868BC72896FA7107169E69D698122C
6A364345641207A58836B337B9277F090DE03CB62E3DE4F2FDF367511EC2AC17
07362FB7C8FC4A16840D357B1242B3D28D23D6C61D01B7464618FF703691BCF3
48D5E2A312DE388F8E152584953E527C3FDBE3E4D7CA6395335FAB0D70008BB2
ABFD6417A7461A5086163963FC3CFA53DB8CBCED4BFBD3B8CD5E52AD92638F03
B94932867C38827131CBF409196FCDD499CD0DD2C44780166846675092C0D6E0
83B7DA79CFA322B745E961348F41BDA453C0154882BB6BFDC37EB38D9960A185
1F68A18C72594CF46489A3AFC625BAD1C1C0DE366B93A6FA829729655BD745D6
7616B65AEC39EF0D9631859D85577FB496F37541D49B74356EB51EF1AEEC61BD
C427DA97D8805B90ADBF1BB9CD3DE04C8D23621F77848B7001A4A3F99C8690A4
8E486AA54A7D53A674778B741908838C1586332CE57B21B9959A1144103E6FAF
2315A5DE6DB89F61D150F78B7FB96F1B9B891E3CB0FB4C7F98F35CB3C58A372B
B7481DE83CB8B2408D35E8F09F2C8BA6FDDF9FB02FE30D138E8A738F9CDF76B2
5A4550A8FDC3693090DA94855A815E6555011860A53BD183B8A87C0939372166
D3C11D0D92D1E3A15C127E5EB950D1B6100039726F980D57FBBC9132A9037AA5
F7F949763828D5B31ADDB7ADA1F7FDA6F177D5D6608E5C7B5EFBD6B6B131E4CF
C8835C6FCCB45E676AC096795FCC39AD38245C31156D10388D3E7A30A6B4B08A
C8920891D0F79B102E357108AE46657248D12FF437E5FF77CF2B8014897CB077
A0DA316400AC3CDD391020A1F1B4CAFBE3981D267A5CA3C71EE55C26B018D6CE
771A96D261C5ECA7CD5BC9D6591B38C40C1D18D832C8597EE582525C4AFD1590
4D68F36BC4ADF8132B3F2A05D66CEB664D1B59A87DACBADC7BA6E05EC76CE13D
A8B90ED2CBC7E65D4AAA1F26A444175FDD6251C8A08E577D1E9AE29E098C6FD3
243344D659BE3D8109C473A2BAC866DB19F35D34ED3E3B0B7A0227229158747B
118C0C65FB669A9D5E45FECDDE73D0E0DF463C70DC4F5707E03751D76CA22A0B
0C5CC59B68FCD30B46B78BD05C5106F7EE2F2B5355F26CA585D2B2B39892D4E9
1FFF4277C9FF5B0DD5536764F70B9859A1E5ACF013D55A4C354BC066E48A803B
8BB13E562F1994E6E92FBB22850486AD07F295B9AFA66AC827BC327C5178A7E7
C46C39A8F0C2E67EC74E44E741A03A1E3479390C0BBE9C65A9AD5648C12F4C92
F4279D6B9DD8B52663998B92B8680D01A3E3C59C8AC803BC88841306488D2A62
BF10DE1F1D17CAFDE4EE95C35A3B5FFDA253BF15E1AD890E700B9A05B6723B57
FF68CC87B7521DBFE2A3F276FEF658CFB09BD1449253111FA9B92C5B0643E293
DC779D49B1E7559090F09C83AA38454116BDC096004C09C4D8C3D72332DA6370
C0709C1710DA053E19A16E5A1B12C048D74D7DB15EBB3DD78DAB20428AE21334
507FA04CBE962D92C3B3850A1DE2B1C827D43D22781754EDB0D004DB357B3373
88D7983862931D3D10C4427774DBCE4F75489E86ACA23B6A8E370643D37F7258
A54D9B988A37CB6E3E3711E980C518EB3566A85F6F2DB3B1E59EABF7CDEE3540
99AAF275DD427B8FC974EA819A987308CF4752ED234519B5F4FE16F43427AF29
E238AD8984C55E3DE43753F279696B81628FA157103F89532025A8CC8541D74E
CB4D0D019FE78D095885B0E66264433630F2B69417C9D7F5074F02D4E8E0A1C2
21C510B2031099528D379C8DD3F9EB36BCDB9F3BB45D5350DF6AFECA1621B8E6
2B85FDF711388604F08B7B672426554F6B314B0B2CA6E258D28D8C944ACC26A7
0880B703026442424AF699C60B5E41F0D596C658CB6B4BC661AE8CB0FEF8C37E
2CC03E32C97B9DFC020F5B8FCD8CDB2617817F05DA9AE11E0960DE6462832ACB
00E7B43675FE8E849CF8FC276BB20734CFFB33D266CEF07791D8D2B3A81C4512
FE742F4F091E2AE2CAD6DD7C7854924E47FE016066264245DE3FC0C8799BAC93
DED1B2B919CFA0BD82B13B1024D5FA614404F42AA6071DECF6AAB965C737DD70
730333DF9EA132595748E39047E2B5AE21BCB2533C4974AB799F4085E779AA4C
E5C19693D5651412307AF69D6BCA5B01747306F09B0EF64BB3DA65C73BE7A228
43BA8DB3064F4AF4BFA24AFBE34AF5918F04BAA532407575FD0243B93C6D0115
FB0197A19D31B811384DE04E7B6431A076AE324120EAB2102F74527FC0000040
C811CEADF45A74DF8E5E176D10E70C23EA38476EF11194DB2403EAB76DC7AD49
661D4349D9D480E548C76029D83A3DE4E60A4ADF6C0B27ADFFE4BE8A42473C9F
122316DD963865991F86623E2DC89AC8FEC57BA3A7E6EA61F27C3A72B168F38D
56DA47A0E6D4B2D9C57F94A9A8D266A86405CA90A59E766331B728CFD1568C4B
2107E8B4A6BC930F382EF91852E1FA44B309291292BFF6EC0A34ACE33038F5B8
BC937A322E36B82DBE00481D02F27700552C6086C577C920F1DEB49D8141816C
354616BC1FB2F221C9D4D02C0358ECD726400C1D1FD21F51F1BC921FB88F43B0
84570332F3C4E8178CDCFDAC6E016744A45C8AFA67FC4E4717B56D9EEE57C68B
E0092D15E2CAD6D25CC718FB0A6B7FBE9B5F897B954E790DA67887AFE822D379
1454D26B90706004ECB344C0F9453189A1DEF610A129AB3BB92C1EA90C5E2A87
A66A60E06D8150A33617A142295A978188BE518146A143DA36873997DDF78749
7DB78A5D206242431DCA16909099ABC73CCA88277EB3B6DCFA7CFBC809773B47
917A74DFC2508A47806800FE59CF6B5F61B253A64E7FEAEB810834C9B7DD065F
AF44F1A2869AAA1F817FF57EF4CC55048E84262D9C2BBE9B7EC2113DCBD6D3DE
8F3BC0720F23CEDC5E42A4D14D1EDBB6DA767FFF0BBA9C8701EAF0CFD1F8470F
0DDBB535193DB8FD86FA2697330379EB6F72A58BD711659D8A1CD53572CC2260
233B44991C5CFE52FDF07B55B1594B60BE1FC2ECB8499C5C56E085681F7BF933
988F5FEA5AF6530E320DF1E0A4D5FB9B323953447DD6C711E40F1F4F4AF8D700
78341B8685AC96EFC164225942D24BFDFDB3B097414856D5C79BACEBBCC336B1
78B32214CE55501C47D08047B935BF6B04437C9D0EF681F94C3E4E4F7BCF5141
CCA040C9F838929B000D999090F2537DB02D105EEF47948EC0BB97053C3309A7
E4854762CB4A92E6A941C515C88CCA32B89E260B016FEFA9EFA67229CF4B600C
4D0071E2464D25F60F15E9B0260BDD241E10AD23885DFB748076DBCC17AECC6B
9A6E116EFAC2748B66490F1169A8E4D3E434F6523CF7B634F906846AC5733EDB
25B4AAE418746FD26C3A0E6387C14E0AF699277CC144209F0A99F06C9AF18513
1BD26E921672049872ED425FC3BCE52C160BBD2F2F09B300D61D75F0437499E6
448E139EF8FFD1C00398B6253613BEE0DE3430AF9ECD7764EBF51EA441CEC089
5FC5712926AD67D822E096DF143BFE7B70EF366BC2F3F82943872FEBA04DC0D3
E84EB32530FD8142AB91FDEBE6EAE34DA0637523FE32A9C95F48F65EA3B826FD
7DD4328FC9F45EF5CBE5233B5C5DB2346E7588B9407304B8F5A6604CA5D5F3F6
F24EA15DB5CFD46703D3049725C42C642E12D3E18EF3EB7CBFE7BED6E77201B7
6F3F87A0CE167FB5D289C5D91556C3BFE5E00F081A80771FC8CE420441815E90
FF6C2C42E2A17256507D7840B4DECE024BA089F951D75323331969BC35305456
889846E440FBEBC6D76A1575F3964D2685769ECEC109600AFAA32C0D430F937F
3777161586A6D655EDCACEE53F09033FC91DB38920F978BCA9A123B31E6EFFAF
E30B1BCADACCA285D9BA634A228514CB06C212AB929A12C1C5D7D41C27BF2D76
FAE51A0B7A6103A8026AFFFEBABA69E2339BD2EC90E4F2403B05F2982F12FF1B
0D2878C84B13F48CAC1EF93C280ED7128555E7EF522619BDE936DC01D8C0C887
F047AB45E7650A4F679B9A4196A54A0EDF398982A2C7C994E513B8A10FE17269
C63610E5B534F7B0C3262D189E3BA2AB0266371F561BD4A95F53A62245D5B98B
A9CD1C9F0B7B00AFD9C334D888715F8F834D4EC4D0A74192A9B5C50B8AD80FDF
0B97EFBE01E8ECC748CC5F70504EEE4A81E5BE9EF5B0FE1E61AB1FC21CBE13D2
E957603462E25ACD04258827998948A9E428C9E8F7D7924195176EA973E58B2D
B22519F976BB5C8BB9950C05CE480536832AEA85B92681AFB514EAD5C8185DB2
A50E79111815F0EC1A429C0BB530FE96A1468548BD512E193B30DA97A0F043F0
8D14E4A3ED96CAA01BA9C76BDD341AB084BCD1D4460CDE823D1F27BDC523D03D
761AF13F050B674B2CABE15206AF0FE780F8C6148B49B1D498D32B8A1918B7DC
F4E639D9DD0DCFC01A875393E7B15CFD2FD666030F4EAFFDF3AFE4782B90379F
6477341D7433EDF4B50C65F72DD449F7F10B009FBCC2932630E38833A64085E6
55FE17716A525E92BBAF939E96D9BA7029C8E8033767C9914765198CBEACD2D4
AC6A8EF33834B8179D90772EA1F084BC767254BB687339F28589D3D91453BA86
675B17019481CCC146E0022BF8B6CE164FC16494477FDF68D35C47BFA25ED7E0
9A4BA2EC668DF690E5B7B6B74D392D22169D51642D1D9B6599360B8A97318843
B93146EC76A522D02F97B32B1514EE325CC98BA8BDD0FE33FE6370D7CDF74F6D
B1FCD83C9C34C76C6E303DEA9731322CAE91F48B7FC6E64C6810D50CF3E0E553
75C7694EC6F3F4BC661F7CEA9DA15CBD30EDBD97B1DCCABC47EEEAA703E26C8C
9F8C6B793C19FAF3C3792EC80B21279F59EFFAC39711352071C0E6E54E913CBC
C5A0047355290286B90437C71444E570E4FB2A5A7D09D9D9C621D1FE47D715C3
3632490186FE89F5CFCA3203364C0B6ACF714EC679115A415553D2574BF171EB
7B5D0B2EBCC4AF5AA40AE1B31EC926026DA25D51A3BC1277D15A6B44B44631BC
32B840610A65EDFBE121594AFC00710F137C5F61D61616FAD6FF7AC87BDAFB16
29719C99A79CD9F73207DE7D6B8C48CF558BAB5BB636158C4185E1B8C023F7E2
7D95B9817EF2D36127B419085447DD964CC5947C5AE65EA617F8935144A8492A
A5FD014FA70C13240B1D8FF62F06E192B957C41E47F39171E31760496022D50C
49AEA1895306C8D08B08959D00792F2C19A14DA46A2B49ECF95D3DDEF938C0B4
1C1687B09A69AB9FCA6C29ED39CDE4F9CD2D067C2EAB987493386610D920993A
FDF134FCE1408DB1A5B9B02DF16968942FE79F0ABAE08118545762ADBBECC58D
564A2A480D866EB363DD282E5ED2B39BD3001F698F13FD283DDDF9BDC9595D88
5D3BA5E96709E6A05912AD77C5E88350FA77E7B137B8A6F38C14A7D31F07778C
2256DD394E67DFBBCBCA9F576DF07199C03BA5745D802A12395633D95805F585
D0781BF997255D7A5CDB509D6E3456118C14CD378AFFA0B3071E8667AA7BAE2B
6BD2687A36A01100B17044A7FC61E6AD2E5ECFB199E49BBD28DB216195143EBE
FF8F7970CE5EFB380B1EA37E094923F532E28EDC2D623FD3612C7CE8E0EA6A0B
A105952B58DBF5E9DA541AA238147DE6A54B0E4259227E2C9518B39AA092B311
E89869BE33C55803F52FE11DCFB6FE7BC6B6D88AC9C28BC369FD38DF588D9552
909676B8A41D5059562C82BF4B3C0F8F9240412E977AA7486D663B0D0FC0C7C8
E92D06542129C0F4214AFCDC3378D68970C0B9428FB64D12DD4F84D65DC6656D
6F8514B8A76751B95BF3A0755EFE8AAB4E0EF7E97DA4344A9990BE9B3AB133D4
34D7195A2FBC32BA092A0D4101A33E8A80209BFE5571FB05FAB707080A32CDD7
278036D198219383BEE2370127CEFF8F3CADACD67D2BBC35AC6EFE12E11463B6
C4BB34AAC74F37B28209CC84A2F879D244E3670B5E0EF196F3D016FA1075B46B
57B8DF6C250B69DD5F98E795BAEE0A3F2ED505E4783B1536FC79F6196B63EE6C
0ABE50FCB03334DF4CDE06A25B326E44496719CF8BC6FC8203B33D594A5905EC
9726C54A5600F101C8BF414580A8BE6D26211842FF006FB0925FD865BF27380F
18F03DFD626427745CB37675BCAB8E0555FDCB3302167D51975AFB3C7900AB43
81F372F87A1D636ABEC422BCE91F8E262DFD8D4F384B3503FF0C5963FAD1F06D
6A47B767303F4771D797448FB200D7506942A27B3AE1CD3BE572CF8DB62C805D
C5ED49CCB97A49355F105B2A2C59E0D3D574C697248E245699C738CE195FFDC0
B6691A6E0CD312B6D473EF46547120F259C91D0274B4B94EEE035BAB15D5D125
0D768421E79BAD3CBD759DBB96DF931D2C38E3EA4B9BFB6842C45885D90D55DE
85E73B1F98312D6366BB8D484B42653B9DFD8EC8B1466973280E631B4B32790A
E1EBCA27688C1F2E0DFC02ED3AF7E266FBC2B62CA66EA732F3DE9B82E1FF6210
78F55281E06323AC20AD4672E0D4F48C2BCF493D309594B9084AB1D19B370492
3DF899254F420DBA099DF4ED79ED8F8940908D838259F42C116E6B60B6763759
85FD290347D28A801CE58BE3EEEFDD3227DBF1ECDB1E90079BE03D5D1B6E2DE4
50551198D4E916D631B557CDEB3E63BF5D5FD34B781929C4DCE76C2294C844EE
DF055F20095A740F956A62A4C3CA585591D2E9979CC9D52E27FCABEEF17714DE
5AED82103C4B1F086DE07C0EC2258524E12A2A929AFA471C42941FF7F44967EC
2866565DCB78A5C1FFD476334C6BC6ECF868613BCA2C95F0F425BCAD9CD88086
C9029AF47977F0A9BB4A614732C47D38776DA4409A3406F5F5611D4AE6B568FF
378016810F1745B4AF5AC9ED11E9E79D823517A4204431EC6436C6936E979AB5
975146A487F3941B37F8FDF3A046DBBFF3A35B9DCC9EFA39090B3EFFE9545E39
832A35840FB2BACE26C801920581905F9291F9FC41341E4692E8B6D65B0B3BFB
1257FD506D4AF27815144705CDBFEE9C1926CCBE56FE97B0211DE50C52C05DF8
AB780CF0963C63CEE546616117F7CA5E841CB7AA7EB51564818A8CC52EC3122B
37215B57BCC84051333C85E59E596BEE48E4155570440967D68C527D3F5A5D14
93DB57E96D8364E18E0F0A319DB5E57FD96ECE9B46A014B64886B1DE916A3246
CBE7E002C59E1D9DF27BE0B140791162E84E0648C8D90B445F4DBB5C81F40A74
B738BF88C0BFCC7D5760FE9C51A9B86224250981162ACDA630D190E22340FB0F
FBE5391E696F730019CCF591CD8519134EEECF76627DC702808E89452DA8A2F7
84B84C87825DD97FE4B9E849E11020510DA46FB570F5BC1645AEF3FB9B113462
F2B2C3153BA39434430C8401C23128BF63F9AB7D42CE0BB4AAB966BE892038CF
D90F7AE00609F8BC20D68E9396EF80DFE2BD32A349749CD16B57149576B30030
C3F5DDC69C3F45E317B9119FB9293130595DC1365967826AF254ED71D4250B0A
5818115F5934D90B607D78647B86648633CDD6342AE76D0773716628CE10AF41
7B5A28ED15D2DF37D2B2CFD8C590F6D23150D1DCBB092E9170FB4FE221925392
28DCD677DBD7C9DBA780461C8088F7DA4A580DAC0CECE5788FB75595FEFA5107
7E8F50B05EA673C872AD40D915AC0C61C21B615266C19B7022A031F2E326D706
77879205F0DFE6BAF05831C21474A042799A735412A8A5842F2788F0D1B9EB65
3FD5FF5A48C02A6BFABFCFD8E5EECB2113284BA94984275FBA65305C753CFA83
BE28A978568CD7CAC786B77BF70F9A5CEC64C3905C133AA2CD1C299686A8626D
5977EB89AA193E716C1325FF5A3A622CF3DFB73DA6452FDA2754038F27D716F0
6298C63EBAC0996CC6857C07C89B26E59E94CE1055574AE7DDF365B4EB715971
E0D9BFC393998ED646AAC3E669E81BEC471A01F025051109ECA4878E605700C3
8F6DFA13878DB01C681E11D9BBE274466CEB72FF5FE89699B70A2563696C276F
CA0E5AB893BE44DA2F9648930B5DE7978CE567127E8375C76B19E5FC97248FF2
D848E20676A446B7802A2BDB7A299143D23EDDAA65639405CC6B638680555EA1
DFDFB6B3344CDEE10E590BDBEABFF0F72380190ADA3F7B5F35FD90DECA1BE0FC
336EFD051AB25E3D0D4D7E63685E0500EE83CBD471CD5B7419565D6580A1FA0B
351130C91B5D5CD7B8E94B0C1B4A2E3F94807EBF93C66EBF24822405FA97085D
8EBB1BCEB26573B1E6596FEE24E11F9FD34ED177269BAC74E46700890BD01995
CF695A698E695354BBDAD4FEAEFB4E5F27E12D806EA3406F97340DB47B14094C
36BA54BADC9C66D88ED7E582C6FF26D252BB5F4DDA896EF90DA71DAF6DB80082
F09A16292D2F221CEF488957C0DFAC00EC2E87565768EC51D8F5223AD9599F2F
91D84F827D80FC95F26C6751BB56CF64867A7DF816909F155C7A9167B17B6783
751B22D313AD9E3D42BEA8C0F8545EDCDD579E98B0D2F7F5303EF014824F40B1
813D6E7462CCE161DF56FAE3DEDCAA3E9C6CB923DF4CF0AFD94A797F00730D5D
43BF1D9A5F9E2ADB94EBA8281A39DAE1C6592B83F246ECB371070C3AAF60FC59
457AD464876D1C1853E083198BE26BAB5FBD57044D4D8455D111F0A145AF8D4F
0915B942BF0EAA553E50B625E4EB2C577506DF4C7636578B9E743B5337AB0B8A
79FE353C512AF39A32269553FA4562D4783B0C150F952002C6428C98AD3AE4E0
8ACCAE1F2EDA2ABBD20AC06D723E77210434FD5AE73EE767A911EE2F6E6958E4
F9F0A4076396CB120724D06CE63DB26999BA1C561154D5AA76A6534339A24E92
68162C823367BA185E4478419B81B6D7EB7770452361B1361F30229416777749
A8AE58A91B54E6549CADDCFF6D1B932322C317ED1595DC1D343B5D8155786766
7000F8641FC1511A496A571EC8117F42209985E88C3AA27EE21C95A4C3DE9B3B
DD6F5C00B175ECD2F0B602002D9AC2D2517212A5810CA70F9AC2B8614B76E4B2
E28D4104C03D09DEDC5B6467DCE84844ED1A541309489EC9B07DF57033298903
653E29AED4F1E5F7D2B463CA41D5A0D0B2EC515837FAB38320F641A1B2E0E932
A84C0E0DD45CCF0A13F8ABAC147003AD0AD6DE5DB7D64E7510AFF6ABF78C60C1
CF3EC4FD37CCAC45FF0977361F2FF2B2C7978EACE392FCAC907D3A6434477E2C
83AE79F66E6953148F87237746DE0444530CD2B289B2A405735E0155A95F60E8
03DC70C6310ACD92FD5D30C87E54FB36DCCB5C6F5ACF7541DF4C7703920B0738
D054285DF115AF8A8BA409CECD915D2C43C938944FA0D94D59E32724ACC78E77
394B686C6C9043DF6804FFCD67FF9B58E1FFF8D35F399676B7C20B888D49CE10
CEF70A8ED2241FB3D6110FDDE31E760BEF5B4A6F8393287F0AB74A21F52D0751
525B1ADFD6CD98D2F53907BBF0151D8BE5B0777F3BF84A46629D9B0C39DB121A
E6F9265EF710634ECEF6374DC124978C6595954D06E7F61EA4FE59537FE88F4C
496154EEB7C3612DB25384ADD698ADB7378EC72FA18DB8FD7E78E07651DC55EE
06E976BB82249A048A9053E5AB729BD44D45228830E16574F3152A001EE81A06
EF3508DD390EBC609B97E6A30E3C8C3C238975C5A433EC37C39F349BEAECD50F
C44D875EF53A06F57C89C5F317CD407E564403E8564D286A994BB9E506F8F8A8
DB11B628813AA381225130AB704979A705B4D561A0394941DAA8E6A0F88CB98D
356B608919F28488635F7EFC1DD79CCFEFB4B97445C36AEC9C09B7D83DE66F07
BEB5AE7FAD57170F717548178172B46BF878649EB1D717AED49645B10987944A
E802AE5EC7D464D3EFBE51C99A7D69D280E21F9802181A2E4B9A07A0A7F37394
91089BE5411B4A44760BB54A8F888CE8AB40643EA29DF04FA35051D41501C72C
AF717BC1164BC3F1C5703EFBE74A8B67573A3BC0DA5695DB84B4F53E2F5629B4
BFCB21CB7AC53FF65B43A9CB81EC0AEC57006EE57147AC03F85301768EC854D2
634D11194C82BF5544ECD8C07C609487DE15F2FCB9766AABACAC156C41D010AA
DC509D38CE7BEB8424AA9307CFE6ED2E8BD9671EB8B938D5CCADACE36D8E5D00
C4BFE745219F92C2458FA2190DB74A95491AE2237CA503220FF30E252942FDD5
EB32855F32950684AC4764CDE6E2AA905A316E085A16A8ECC1F03C11BD630A65
AB4B26B35F0E8EE029EAC24A2390902EF370A3F32339EF3F8CDAD4739765121B
53D8188DAFB560716104203E34D084EADBCAF58FA697F76BA554FDCF7670AE03
9A76DB44DB7B99D5C808BF71D892EE8C894C8BC3DF16590384A1B4F12F3F7519
1A7C2F9BC5D6A1B3EFD5D81D67CF1828F5B631C5B70F1C664E07BE0AC5E3142C
5BF8D63C5115AC7E81EE21F1CB004C932A593870ABAC75F94BAEC27E1D71214F
392A8BE29DC476D73F8D205297B636C32936B07070F81A0B7208BB90247A212F
638A33111EC2A2A15D1C397AE74981FDF16EFCAC42A003F51312FD7A70875FB5
69460490EB687169D6EF3D0949EC290B8E4FF0125F70D2A2EBAC9203EE00385B
A04D2D9DB56512B292D5EB3029FC6890828F0F9ABB7D1E799B9EA008039955BE
D5104BF75EEF75489895342CE3C5F609E307B9DE947BCBB9C7B2974F3B4F606A
664318BB796A98828A54A71638C1DB7BD64F650BA0802B11253AEBAB69F2ED22
41C28BC30EFF2CB1909D4CEDF8C6332014103E169E4077CD0CF95CDF2C0143AD
0491A4B422CC05F22C27642664E25DEF3E3117BBBFEF5B1B5EACC1F3B758C0D5
C36C735292199A2D6A82D56CD4F3E90E689E5DDB863B02E5D47F99D8F845024A
5321EC7046AD908DDC62269851BD1310A507AED640F7139D779DD5E626BB07C3
8D2BF8320AA4EF24757C510D3A43EEF53BC496D0C5EA9AC724E7604DE9113EBB
53C5A1133CE302B8A8499030F3C4C656572152C5F39E7AD182B2F1E536E3AB43
D4D2321DB41EC3BC44FE249112A5CD4234A4264F3444F87404A02BDC8AFE9D6A
C85EEDECBF7FD2D9718D5676E4CEB868E1B98502EB5F66E285E7D159966D13D0
DACE880AC6D98892EF898DED6441E31E75F76958FD897C11AAB82399841C8204
16196638C4CC73F37DB53E08DDDD025AAC520BD6826E7CDAB6AB6C3AA38A9278
84927F45D50F34201934C438646D7A420DDE89A86F51793C7D357315BADAEB55
32EB1A3AB42146CC2EBA88681E373E4150F047ECA4DD846745D23C58468ABE9D
1E4D30198D5544A387922FFEF9FBD3E21F5DCC2BCD8F5AFAC1750A394A96D341
DF7DF9B1DFDEAC05BBCF3047791E47C588605722F1EB31C633F8F21369663C69
45CFC5841B7523DD0F7219F780BB971C1B505526A6DD21448D88BF7A82EC6ACD
7D8E11BE826365C2D2026944E91FF8D609232DA21B5AC45E14265EE49576AA0E
2F35C5B44F2095C999F3FD66C333FAE33720163604D2E491585AB4B2FA5888EA
D455369F90BC0E5D0C5BA4B4D3C21AE6056C445EA56A4DD429C9FB45814A7B36
40935EA17571949391A85DF82EB76D05CD2D42889516B259BF8988852C9977DA
5A7D040272C30553816849EC2D7F6F0875374FE6B83173B7F8151312A415D64A
71325128C3103A00A493A5912F603581F53FE0FC5345FB8E2B2F6749083F9284
426CCE64E2FBAEDAFDC03F6E452447F9A41BC6251B6368A54DBC7DAC848DD27B
5584E01CC26949DDE0C8587323E39A716880D934DE034A8DA405526114A4D681
E2578BACA766099AF46CDCFE5CF2B6CEA37CF82C7A52FBF75E7F3CFBF18ED557
B478AF9418B44BC4C06B8CAEB75FBBA498B64C9DC8DBEF6BB194D6928E608AC1
9F02A6B209D3EE73D38432796D78AE912C68D14DEA927A8622B6FF656524D535
209F82D31893C57862261432003CDC23142E3E4FF18E3A1C94014626D37B9FB2
FA26F42535DA47E2F476DC654353933EE72B84C2420090CEE583634FEE8778F5
9C628B997E5A74FA31679A92237B0EF739A3F43695C47E040A479B85619F0B59
07E4C82D9F6719B4AAEE33B6D56F4B14A4FADE92AD0F9D4B490F4F3B4347A372
D33246812CA62E1786CF01E5536CB410AD81455F0B61670F92D7413C54E97194
2CF328FB31B9949B58BC2914C28C7130155CD4C8CA73E00AE4EE2A34F303C558
705A7952490482B10EFD02201E08941EE4B8F48C5AD6705D71E9DFE9F9ADDAD5
078268B2800FD7DEE7AEACEB4B31815AF1995A846882E9A8AB706D170B53DFF8
4A6924209750A609EDEF205C64F6623D778CDE29C9739F7B16D1FFBCB4AB53DF
7CCCDDD9938BAF772511FF9ADD092C2A9EE2276629296DA7BA692C4EB301E2F5
692981E204AFFD101A88B124385F0CE4B28A5D9149C45AF5CDD529419C0C4F10
E1BB0A4E9512B9413A5CD9CA0D93F7BC68147BB24ED20D8378F30784966D1055
59D7D7148D1766EA9ABECB5FF6FFF0C08626D551A28273302878610862E7C615
A8F1DCEC127C134F05DEB2524598A72EE993F380EEE9EA71523E92719C663BF2
FFA05F030E45577E62BECEDF24660E267EC944B192D24254D0D20ACF30E479B1
EFC52A20064AE970004D7D92433F29832CE494EB09A018B74D0C8C185992E29D
753734C8159031EA2226344C2E72DF2ED9488E183A8EC36A8D7C4067B9920DD1
4D0E4A5211AF0FAF8E69F3119519641A5F05599FC876290E6684D08EF595A5F3
0531BF2377610B636D4BB3AEDA62E3EAF47D63DAB15E9E9AB59AEDD0DD4C39A1
2864A3F0B7DC2228E148AEF0AFE9F97B017F9667049F258D8B9572724D00D84C
1FD66F4FF3DCFC7C17D74D07F0D199894DA208CFBAF45BD3E4A4B4A8F92A91DA
A36E9D857E05E8B78F35710D86F47090F9F9CB884FDD9F03CBAB1282DD23CB2C
9A7F89B3A73E5C49288AD420432144F45BB89FD03FCD43297BFE27935CFCBDF6
15B5B6D95109BF35225DCAEEA02B7EF814F0A33C988185176B2A2F6C7714D6D3
435A10C9A7D1B1DCEF9E7D7C33C9E9298F4C19C9F60EC9CD56A96546CB33D83F
84C06A81FA2097F15CF33664807A031E791FAAFA26DCE67B33492119848D43AE
F1F1E1892D580316A90771BDA335963B0F3FAD9ADB2821FD096889A2B11FB5DE
13796A002DA63C8B42378AD39D434558331D6D96C4AFE829D28CDE060620EC5B
9B99ED271BBA1FA6AE9B059CEF1065116DB17980F1CA7B047E10400B60E27937
807196DC10653C55614E67E3227B678C4FAD8DDB2CEC603D92DC68A1BAA58787
1BF48A3505CCFA10CB226CBA38620A58ABB743FA602DE0493389FB48CCBF5B37
CAFA3F02A63E239ECD8C5F39BF2F5714482565F4E3044CA8655C08456AF6154A
E2A1E928148525D0EE844300CBDC20CE6BAB383957E7220C6B8B0CB4ECFBEE43
42EE949E1042ED0DEF4EA0B1BFA36E39FF6D4B3161ED0FACB44B9D8D071D0362
1B766FE12F97106382EFB4C94EA57EE1B2D4DDFDC3E298B649B83CD6B48746A2
0066B309FDF92B913019ACE4816F35802682892A90D633150CF1282F7FAA60BC
6D5F10B415EA7C0B0B63FD2129B712CF460AE78E6D1D3FDDB1BFB07E820A6930
893EA847353297A049B28CD32325522C5677E016C7C69EFC731FFF24562C2135
11768727EDB01EEB7B23990B805AE0CF2B01142CD15909B492DC242358DE7317
B4C526D19ADD02819FDAFB89B83066B787D87C17368835F883F06876DC8D4650
28DF13EF1BF9522E282797AEFE2A20401BCEC0BD2FCDA3BA58027CC57DEC8281
F09E19DA251B696F5C3B9B6C04C339C38B0142F31A0B13C2E46B6E5C84D5D7D3
6E97E01827C6FBFE636F9C0F00964EB27C01FAD17F01EE236D74E05D7DBF00B2
1296200D92E2243D01B4A49A8A3B3D0ECFF944844973E4F1E1D0AB179C57B80D
A755B523BFE036A9A3CC47439563EBECB429ECB0DE2E3271F3D3FC1139471DD0
349AD139595C27CA73843FAC7DA4EF4AE77123652C7EB96A616759A18B71584E
435E951E5F1FB17757EB42E83262041839E812AFA3BF6EFA9594D6EDCE7E8C15
FF02A4E75B2D38960034570BF7ECD29F86A3F522B2EF995C3E7F79E8F55849A3
9D6095DF2FBD00B33E4D99F330A5D75D300207490B19368E1BE7A578EFA24B69
81322A8DA58A3C9AD5DE453A55B790546C2412A88BF9CE1CB3421462FB39E998
481282917433264B4C7FBA12D1B4EB7E7A63F604D57D81F23506DC514DE41D64
4CC0B16E664E318BB3CEB9593D0B499F73666D90E0268B1DC260543CA5BC05F8
F4A3DB4E9547A880893ED3D3EB00B341812EFA74F816F43427C2FBF2C23E7210
CC4C1404BB5A4F32D075BC1370DF2A93205B41DC41FD2065BBF6F9313B3CB4AA
5C17CACB25462E7FAB45637D198A94F28F93BB12B1AEF2727D94BBBE158295E7
BBC0D597B3A19E3D54890E08569427216A56C8DE4EA98EFDBCB92000BD7D548C
63903A2D6BDAC9C021C8F9B874D316AE59FB4C4D672D107D6CAFBA4FB0C1F855
1779186A3A232F3DBF02246F3FE4DBF3D8E84B1CD12C0076E3969CB909E21ABB
129AB680D1EAB2EEEB86C6FEFB81D4CEB4DDE24D90A78A5968F6006F41001DD8
FA13F9897F7FB2A60C93CAB9E8FBFC1315BEDC93A8478B8B4C35C21E785853CB
84B2090494FA8B5635DDC59E2744F1A4491D82D059D21E2BAB434788B27F8CE3
3574F81727CE4255448376A236FE4BFC5BBF19F7341F7BC0EE52072DF9A2F576
2CFA6FED6395E331C5824503CE90EC12B5AEC49EEFFB2304EA5BAB48447BE00B
EEAB1343766E9DC5B8EB42965A029070DC63D50F5346B21CD9344ABAD5C9F4E3
5795AC2519090C5302E0D8F221703792355AE17B4245AD1357D9D13669F3951C
DD9B53C3E0AB2BE854CDED3AB9401120147D4C146F7B4CBFE11475468E615752
16EE5985793CA00496F59CEE438196D0DF0EC7AC1F23108B372323C45B2033F0
8F03D14EC41C43253AE6199E09CD4988ADF543EFFB8E02D1E519188C09EB9C23
4E312CB5C7C409BF3E26BE43ADC5C46C94D751C85E4DFE1CED56E54A2201023D
AE516C0E8A8DC5F7E9C1D4774C133A85E3905B325364BFC51820C395E7AA0BF4
3C86D97FB2DC4F5BE12722570801B57FD62283A50F2667A1275B57BCC840A0F9
A107BCFF1205CE6A5C40EAF32C7499A310B834BA62D26A64EE13193A4BDDCA1C
F82E902D62A6AFB4BFC1486325CD8C5C1B6DE5ECD9494CF9133493642502238E
4493A6DBCF192B3AE535F28BBB13B82D3169DDB4F75D12559EA2533213315EE9
FCC3EC1DA86EFC9C322B19D08BBF974F7763D49AD322E284ED43296F2BC8F03A
8E3FFFB24544C744B9BB3659CA23BFEE0346F7853FBE83F8305D48B508928E10
16D452B443580F5A51B2697333BF85C8AC88A16D362AEA1224185A5C6522EBAF
2B3CDF348FD91ABDDC56FC0864F7840A3081D75F13ECDDD5F0E9E9AA9B1805B3
46287100C248203EDE34EBF36CB22CCFA00A3FF247717B42FEABF1E5C3FB8D5C
FA2CED5A43498069E515286E148CCB5C31C96702FC4319FFCB90511A33921A66
7BCC632F2651A60807DB7C2F94D0DFBD915B8D01D87C3DED4FD3277CBC21D27D
19EB6E6D3571FAE61285C2C6CCAC9D4444B9A1DA831D832591A713CD4C66EC13
2FA4D6D4DF79B3FACF9325171E3FB4DC86526AC8A8230E84CA7B3349A36161CC
F694A33E798B97A076C784BCD2A16E6348897C67AF725D61BAA1DC9A24301472
4429E9A4CC44EC47B4AF211F1AFCD938D7AD3F601CBAD34F36BB9C779AA2C743
BB6D8416B5E33F4E23A9054E5274D60400CA4C46672CC84434D5913D9955EE0F
5E938E93CFBE0DE955415D2791B3CACFCB165C570B85B6FB66A39BDE0E06B3A1
78799C2A319C0A1607D3BAF7E1F70A802507E1F9B6457A3F25013E4CADEAC618
E776A93713D90405FD7BC0977470DDF5619DAC00385147B84C58B58738E0B0E4
095C672E35E0BEB16593E97BFF13F57D21669ABF6465E6C297628827F07125F9
CFCEBB3185210D09BB85E23CC09428A3AEBD92D1EA81B6D7E255B6A3CFC50BC6
7823BD3C5BB507863BEB0DB9AB187FCFFED79037C0E5B7E6CB21AB75CB9E3906
4E80C4C10D8744012448FBB28FAB43F4985DD4DC9DB23C11227CE2529B949739
166439705AC56BC11898A9553712A3162654ED9C00ACCCE9C91C40F801030EB5
6E36FE9B0B938229967330420F4F41D71D1C8DC549940B86C490C0AA4A90E8C8
417F8F865B4CB0697E812339CF9113E2863ECB764E629D9577C2A8FD4B1439DE
46E0CA7341421418E750939A97E706DAD8B5021F99E3EB413ACC09643A1B56FE
5DF29AC67B02FFBA95FA1628D9C2C432BD74736EDE5382249119AF7016214B62
36369AEF6635DFCEBF3CE44926A5028E0D898CD313A137BD17263DEC5E18487E
A974512E9A8DABFEFAF97C6D46B585D7331BE67B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
52978AAF95DD252EB0D606F78C7E295BB640D1153A3A0AB2A191B9458436471E
A80334C07C23E3D43BC2A56EE61DFD9FFDF3329FCD4DE9A7CF92ABB65FBCAAFC
7EA124656746FA3B8D5E8C9B51642207EDC0600CA659E44717F2BE08C400AD76
EA2E4F62AB149858C2DA5051009ECCE091A6E497D4729FC9924FEC3FB6A9133D
6B463F7C7EBE4EF91B9B17160941AC0087818BC60EB64E687E9349331FDB33F0
7E1D24C34E9E439FB6C392AFD85238CFEA21292B8E1D0991D029790B7831A2EE
2FA82A3B52599EB0636EF92E5D7C13FB08C67361F04482BB6BFD44CEF14F39F1
21263707E73B9BCFEC74AE58A63D5C3D4D773182258E76E62A5EC2865FB5951E
70F9FDECC6604E7D7A3A56648C90B4F400CD61B0B1ABB6B2EB9F977F0DC1A090
109733A75F2CCFBDD27403DE02C363DE41F7C24249DA6FF6A943A97302E113B2
7C840C2A6EFF6442DD52B43E21BD247CB559F781ED48E700C7C6818380E335F5
C15409940D60BDEE0EFA73595159BF5FA6EF014B844C996C73F53F63A48C7F4E
CEE23E1680B0037EAE119E8C5E67E32C964A18B5D20E9DA6FA4E53156DD528AF
830015D7D80E0A7974FC52EE48924BA4AD2AEBA3156D5F5916537207EB369B2A
6B80A8A4B044164ECE1C1FD5A30B240DE3246DFCBBD6E7EF71B3F46D35AF2EC6
76BF005985FEEB5D4A9ADD84C49132594E273D0A94C8C2DE65B5AA436EFD8768
EC53F2288DC8C1B20D1AD0FD1CBCEE7CB7349F8A7410C5BC584A6FD6CECBF3A0
6263414BCE81888528B6D00FD524B3E8A9F72055812C6B34B53A27A4DDF49EE7
703DAF38098846BCB32AA54EA696669DC99DE3BF32B96E7D0A4107DD5E132FC2
4DEA28F304E91752899FA8BCDCC3D498B5E50B2FC370906607CC7EE79F2B8401
2920F318C7C15BB71C9DC7DF4B8A791B5B54D765955F91EC0F7F2C3EA9BDF35B
70EE1987D673ADB19CE8AA2759DAED309524FDB648ADE91791B8A9676D82530C
AD975F45EBB0A718CB2E83D3F636A4A68B79AC38A8926132E5A2261DD2E5776D
A3CD0CB50AD381FDF175E1DC39F5040A291AD3EE2DEB7A829C7E834A26DC4F9D
82D4F7642E62E9892886ED7D4B68699442FA88A357945B96130EFDD9A57200A8
1BD0FAD3B909E42C6C298900684EF844C1ACFD30D11813801BFDFFE5C15C73A2
13ECAF921477FCD2AB6FA0B35416A97ED8B6C273D9B94FA0EF759C005F8325C8
9AB1AB169BCA4C75851E7273E1A42F36F2E2C2587B4F63E87059C94EE6F81609
F12CEF63A6068F6391E11080CADD31EEE5FF737BC32456C9B2065BF365311049
E25A3C4F50C074602E6957DAA5DD05BC094541DF48A796DBAFEDEB2DE7793930
3F2EDFA3E829B73967DC70EAE09B69CE420CBB743A67B0166AA2E98302167E13
DFF1B5B2EA1E8C321EF659D0D19E488C8B74064E752B95858E61EDD3E0175E5A
B28269E3FE8684AB5AA86B26F3AB70A8E045D37C587DE692D018A9683A312501
5202C1C0BD615BDCBF3B5FFA52BE188F2F584140381D43F8C17F3A5A05E9FBD7
BA011D2E8086C67989542394F085AEA94441A83D9D18E64C1D89879B54B94726
EA17EF367BE66B4A200C2A56AC2340A40AB1CBBCFF47D5FF7EA0CFDCBE97B8BE
921DF822BB91C5474110592B7BA0C81E02ACEE568DF576F0C800D718FEF72B7F
37F2FD1CDAF5A4DE5BF8BD65DCAC1BD9C56F7C4BE8CE82443152E700AB71878D
A74EAC4A163E0F4D72FC0325897B46012AAED3AD0991C94B9BD3F6FD15E61F98
CDA321F0ACCB72A0FB52C2372198C46081FBDDC64172CF8CF971BA2E995DF9AF
C993DF48899946BEBE440B9B4221E8B82C5502E96BBA04B42C23834C1DDBFD88
B893BD5C1698AF413D95EA0463B1F6C3E5BADFAB970E722437378139559654B5
B6A625C6A749C3666F8FDC8F75A04A772BA555ED48BF37E3C1B6D3DA18B16E8A
1014EC40B77814451D03E26C8C9F8C6B7C4E5C47B6D089A23A802278ED660781
66EACE5F18934200DD2C762554BD6F1F4C69D6F86CC41BE0B89AB403E6EDB640
74B96C17C6D383975D99A4FDAA0CA422D3B6D927B968C9D0917653285A012039
3D5D2253B2C985E286AF78464D9F8DC697A6ABC3D9D9F0CD0B0D9EC8D2EB2210
336F8A6E0491B2A9F4D8847358D99D4B96C650A14153E639AE1F17BCA5194470
271450EA0D83DDD7E1D80DA73395BCA830D4CE50EEBA8AEC56C542596CCB82DE
98D51E984D1E12BEEB7119D4DD76E461E79B2E1DB863F63DE38E509E5CAE8580
F5D49FF26884FFF134B5597F3F00A9C3D6B7CE1F2512E92415E8ABBCF7FAF6B4
932025FC99CBF5AC6DE08615867B3252DBDB422BB5778CF635BFA40B3722FE0E
F38EA4183E356537E15A826AEAD3940BC834F5EC8390B72FF516E8F2201CA9FD
AF36EEE574A9B09B55F609E6C0F32D49DF59491C4BF64F2430329E31266FDE25
83DF699364D80578BB6C18A3DB53A552F5999A10B6FC821B8EAC477F749F8219
8FCD322FD08D6A15EEC079086858B740F2B4D53A866424505623842E8FB26BDE
8B8FB3E0BA6DC0FF88555EB74CFE608C9DFBAB211E78FE5F9262B46EE3D7DF43
2E8AC493AEE1B4033C103C9A06AA926EABE3AE2F998A3EF7B1ABA77F59A9CE7E
4549759D6BE81437046B65065CD1E32111E13A7808A65971DA9C4C75F5E546C8
5D9F226357C7FE970D1592844107DC3DC6E42E3583AA16B2AC8171F368DBB5A3
3A32AF2E70ABE15166676DF07F4357ECD781FAF27261063D676E8EDB91AC14BD
B66FE044465760847C77710513038F2933822DF999B512A80F5AE3FEDA769ABD
9AD139B0F640013F829467BE28A5B60AB3B83949B1CC8EACFBBF6D6830E2989B
D741693A02036410BD76E44E41E3E880F2EA983AF390AF765872732C05726618
2529984E3A8BE16CCC5EFD174065EB6052FA14DE9E62DAF2F5DB67D96B03C0B1
4F6F3B9C6D4683CDA500D2D47A478EAC363D0D75733F84F13CDA0B6E79CFAAEA
610BD2B3818E7FA41C37C3A3F2189D9BE30B5ED1F61ECFBA55A428BCD1553C89
FF0EA2C79EEAC8F717BEB0E38B28A989A8B56FCFA40C2F81AEC6D2FE11026B23
ACE310E19B5B57727469C4FF0FC927501EE5E84DB0CA4221AFE341A9FD765A69
F32289D4B8BFDDFEC897C150BC26392BB521F1A8FE2C949AA9EC2ED2EE0AA452
F417D27E54A1B6DD05AEFF65CB57CDA35B5719E517C8990E990CDEB10A169C3C
1072C81AEEA48D2174CBBF716EC5034C676072B0FC05B94A2513A73C21F37733
E85D676051908E67769C96DC633BEDF1D53863003EE068BA068BBE95BE2E86F9
9352A29816EEEB97F1962F2D3AACC0EF283E511286D8C3D18229E80866F25E94
E3DFCCDD4A5FAC0B6AF8B46A5E1A2D8CE52A8633FCE7C040D105753A66DCE850
44D5A3763FC5E9694F31CBD3FFDDAD2B2CFC3464C312231D71422757E7007862
4A015FE75310794385AC2427B83FDE3F8DA29FF0E606D1ED7577CDC9C4D9CB1C
5EFEE4E4217D546D86F1E197DD09949F89257B8BC394FA4C724A9F1DC97AA50A
1DA4B0CFDDDB8C73B21F8F73CF8E7938DFD17B33C0B71E492FB0302B99AEAB30
4B9824330D2FA91D8273D0046F9CE53BA9ED147C1456CC64D9EE32D6AFBDA650
DE094677F9F0750DC17691504B686DDCC9CC0D4E406E63EC5D3588BB8FC5EBBA
2EF1E41CEBB8AFA5C99B02AB37F931340F2E127EEEA30BCACBE0F46E7EE5D312
C42CCC48CC39F018729644F93EE67391340318F907D7DB674F3452249DA64D2A
BD0352745B6325718AF7EA47A6CAF9F67A367E174DFEA162B579A3FE4712B1D0
73A90E3A10C2AE0E7417423B366071DC919D6C50524CE8B24764D050C0E4F3B7
D501441A9B7C4F8BCEC0566FD5D4D7FDDDF2F59BCC4741268F3B0DEE3AC8F44C
7E49EEF89C24404A8C100C3C8F318BD30B3B2BEA749A4A0F3DBA016E9754F263
8CA6E7774A63C6E75A74147E1B345A8123997A3DF2202FBD00592C2FF2A519D7
B88222EBF0BF9EFBC0C7B3AE335960997AB50224B2CC9C3CBC78B6BA16B52E10
800506321D6DB80CD6443244ED5A44723B7A9CE18EC70341787E1449587E1A05
ED1672C9A5E83238E6FCAC9918064460F8A6CB41FB3D8144988D05F6D4DBAADE
D4D67E5BD1C165A362F3571938E1721E4232845C5234B3584CB2DDC5795DCE10
4B5258716D72057DDC12832372B08A31D4168583BB46DFD95E51BD63300FAB85
7060AFA7B325E8AD3C4EE00343730EA19332C5A5D8B2426A09D38C004D2DA38C
110B0F6A605C8A634928451F72B84A25627D7D708F42C2A61D80383BDDB19F5A
1ABE13802EBC6CFB22842FE6408F8F6EB57615098FF299F6967B7B72CBA3AC1C
1F762223E80BDE3A04F9AB70F0401597FA39DB0FAD8611C48B478DCC361AD13C
FDF599DD430506ADE98CA138A6F4C2FF8587CD1BE5A03E1471FDAD8752BE3E05
958CEB0A78E0FAC02DB659ADD1E9990C2E78D9E7ABA945833F5877D78490C5B6
C0745AF43972FBD40A3D1B14B40C8BDDAA1BFB873E2488086B9095B97314FBD6
F74C028181C8A83B769EBBC8CD53BFDE5A28210BA4265EC95173BF7AD0B05283
E6E7B11C953D943A53FCC402A2D0B0AB67EAD22394C03A72E677ECB3172F5743
16A8FEDD1C9318D387013C388D0AF3CD383C589504EBCDC59997D7ABB436323D
319E52D2F16015808582074BCD78C5F8E086E03D6A47ED8C069127404EDFDA3D
BC2B88EEB5D5197E333083AC8026558DC3FDD7762B91931ACD400943D1C667EA
C9920B77A2AA58E833F9F0D83EECC382BCB6BF1A16584D9684F502CF6254952E
3182E5DBCC63FD1CF93E89143256CB36700B64492AAC2481E49A70014620301B
81C4FF697C5CC30C550012885D668562B37C85E890A10C3299FD377346923605
3E54D81663E3BEC0954E2101093E0F11D88A27229420B01D385AF1647A4E415B
341BF5205530450DF5A1B457AAF1779CE576DBC40FD37EBAAEA6EDAA496DC83B
E776D8D81DD9CD844A36B5498FF7A017B34376BB68071DCAC32F16DD308D5FCA
D3F3FE4099D27446FB32FB2D221D9716AC3D4CE0439AD51CA05D0299243054E0
721EA9079752B09868F84195CC47261E711119E4F0B9958D7D8343C840FF9AC3
F00B1265E49AB8C45375DB009F4B5B5B94360C9D4729BC929A9B808566A39A5D
15229FCDB226EC4130A9304BAEF70E78979294E4FCE0F6826F908BF9C29A73D7
DCF7748A797C2E527FE0613B50B2DF38EEC1C211226EB3A9E4F3183B94B64458
5B336972C4BC53344957560EE2CCCCAADACCF6193CA6DC3A62BE2D56ACE9AE95
9F7E55F4F16FFC7B1A41BDB9F2046868A72F62BC765632C399420111FDF53A22
A7881910194CCC7FE4A0402540C2F43A3158CD5B06A6036ADD54FFE3072F05FE
A54C76C66A8E42CA109C43785B93335C35899FDB03EE03C2F397864FCD014791
E514E1AE6DBADF2F9A51171D5F53B62DCA5BE6754CB8D065090A6554331231DF
4A81DDEC350F7223AD08E64CD0EA626B47EE5C6C46E4543AB5B5131E7EBB3BDA
CCEBD72543F7692E2DB04AD112E6C47090D93C4F30EA097BF25B6428940FB515
5D9F1C5DEB4D442F3FE5093AB358A40B2812488FCB55A684D87EDE2DFB940A1A
24F3E77B5F7ABCBA1C74DB5E41862F313CBD222B559CF7A1612268B74D844A3F
306EE8D58C4E911F04D50526783F3C831C65E402D66D42B81CB362B3ECEFB66F
A27A9F321B44C355E6EB8C24ABEE6D519A8E6E704DDE38783E9CB13DA35C8917
A29A4C787BF78624E191DBF0A0E08D087C4FE13960BE555D77BFAF7245D8F075
DFD03E73FC22F88F6A225F2F49398D5C09EA88CA0841A7F1750CE53F1B636376
AC11022C0D17C269633D9CB975FC09D8A50DB0B75A27B13F8866C7B64E60EBC5
88A756A598A9BCD37FD9F472BB32383568F2E35C337714AE5E1D6496E06D59CB
B68BC53C5B458EAC709F6900589DDDD7C066B5E86056EC3967E0676CA53AAE12
15A28E566482DAC121422F9F6D691AAD977013B0ABAF27BD4EFCCA74851066FB
6E138FD0BF4DD5990BB524171AAFC5F367976D719DBA504696F1A8CE0D6EA03E
DD7A5CC54927A732F1557259410EF51880CA56A95F558EB0BF06E484DAD47F0F
85254F9F28B7CD66C43738F84201C5922517FA3E005265F0B26F3B7294583276
6395826CA40B9803F393513205F0A8CF8E7750FFD40C82C6C2A61D1009D054E5
58BCEAB22536403D067D95F37AFA8C2E3B71BAB26602235F026F9D7E00F5A884
569B15CCAB8207D49D48F5131F2E9E391D850DAC38AE11143DD8F035E7274DF7
5FF333997481DC9DB515FBD4E96740DEAF34C1C1A3BAC53475B595D21CB37C99
41260DB60A9AC19292BD7256F92B6228F798245660D00D630E06FD2051A5999E
0F8A20B82FC671AF4B2C83CFFFE39534D67039FE96DE745DFA4B804B0409836D
CC59CA143A38861C39B7DAE297CDACC45E1373232052D2B3E036A348F252D22F
BF1A6B3E728A64E1981C60A8C53CBFECEB3DF167B2D5EB8091C6263682315DAC
973B33A4245F13EA292EC1AE9E1F59F8EE27AB1E0E17EC93609683FE773F095B
A4D59255DE020C1F90E1172040DD437C9DC1472CECD48817D3086AC12A95D701
82EC824B80E77B8D164B2F151B1EA9E7010EDEFDA97FB1D9764EDF97ABD94AB4
5C2289082ED18575534CBBB7D22D9CDB15BDC026CABA8207DEC4257E7C646046
EE4A406963CADE45AAAE02CDBF0B7E35DEF7582B8D09E1B5A315D7FC4116D600
6A4269ACA5BF8303C57C61DBACE7D858AD4C7731754BBEB880FA5187BC0A1EFB
4153BE459EFDD766A93F371A6F7C9D698515726DDCDE7FAE056BC687F886C055
22B117EB0E7C76B743AEDD0DFD807C551651FF9214EFB182637890EA59F59784
062FDF2D9686FDF1F020CE5552EDD595BFC81A91A9939EE658BD6D9B72485E31
544D9B05B1DD9FF7729953F81EF6DA56C96259FBEBB4E08F06C51D1047D3B015
482F46B84E908CAEF8412493E0CDB4B0C26E0E782B0347B8613BCDCBCC845E0B
9CBB39B015BAB41483C7AF50A337D1FCB6E74D6EB41B2EF4EE04976EE6CA7D3F
B0E83CB291B89B7A591230B56C94DB68791293AA322D36E903F851A57CCC6D1E
D120AFA1DF75A9C6F8964127B420B21393B715F3C1C75BF645D0DE62608B3540
9CB163EA4EC25C24864D525CCFE1B3B052B436D832D124162880AFE112062435
47D82A140CD8B162C7FDF1A2886838CB23617A3EC662A90C3249819CB3D3ED57
2A5B787381FEEBB743BEA31CBC3621E82EE9514B408603A0C4AC3CA722A01437
1EF7182F9EE355A5A41FD2DC73B4951E6D0631AFD751D8ECACE3404B633E03C6
0747B074FB5D73FE61EB482A6AB98CF655A08B21475A1D3685C2D54240F23962
DCF92B8543CD382CBFFAC253D653F91337B434816B4BF894BB67569DDA9CFC66
C4F286514C202EC2EF546FE870949922CD3A819B7666CA5C3EF360ECC5DEB7E0
C94CAF9E0521068AC8ADC2ECB46DC4CE9B9FF1959F349B12BB4BBED641B35C31
52DC27876F40355472C33C523F93D979E2910B988EA598EAA04C3B90D0A029C8
BFCF8E6369BC716D37D282480F23541F4F7499BBC3C5C4E721CF55F55C4929A0
B3D0C475C248D205F705E42FEA7DA42838939FBFACEFCC5FA14AD459EFDA6AE6
E2A4D5A8547B96454275D54BAB8751794046B854F979573593E3B1564226C155
573B5AD351BC581F9BC37991122AE51D172FB3D7155B1812C1661026CA6BCAF0
886649FAB3189506BB9B3645D7D757FFB7D0C1AC6E875C713A8A0B7545B9A388
44E91D736A70CC3AC65F86FCFFA7AAAC62684A375B00DF9FEC2A7CF5B673FE43
538093DB58D8A547F628EC01E22B02D22FB0E176B584211EB5E125D99E82DBDC
6C8712E36D1C8D83BAD89299F6006B9DA08F5DFAC8E5D8AA631A8E12360862E8
F66C31890E76D14FA803147C4421FFDED35E1FB35A48D18C3F251F67BEBCD432
46D4A8A4DA8FD72CC2C43A5195C769372D48852394A266DCF2D1F00181683372
B2B53590511E9E317364351FEDADB864C476CFA604900722D3EB6E94F6EA3E2B
E8EEC7EBB31A68228D6F312EBD4247A4A723695B1D76CC4527CE2A50D1B055D9
6D4406FA5A021C9C6076F57CA00DCDF243F74170D5E0F028DF6FEA3F1AB59875
F33756960514864A1365597D245AFD63ED535ECC06EC3DBFD914A7AFD6F3EFF8
9CB90D93FA215065ED2C78DFA32817386DC0F2633C69F016B7B2742F08652883
4BEE3A0F86F00E9BFABB5F963AF1AE578BD372A950EB7286B7B01A4F6F3DBB28
4D3F81D4A9393A852792156C0B64354B41301440109DB73002A9F1537977D765
9CB90236BA2E5D622F3DB16FE77E612B6EFFD7395CA45CCBB86BF8734C4FE9A0
E37AF5E9934C372E4C019A9D7DFDD7DA9AFA71A174049A2B5B39634F2A5BEB4C
0A943D00529B6F10F2BAB55C609717335B3A00A8D060443558F94A5C1783CA30
84AE6B2AA98CA805CF2EBE2E4D521F7E27189824D42DF89C8D4D41C30FBB57A4
8D6972B09973939BF5E2BADE2184255888423654F4C3C7488DE45F2D134C3CDC
A9BFAF5B7CB1587EC0CB3586D298453A151E695EAFB5A76225A97B83E64254C9
F5D7DB58AAEC6E25FEFE5C6EDBDFCD86AFCDD44F7CE9AC95C24DC9AD3DEE6F1C
45FA11320DB2EFEDDC3ED7D971D2090F86E605115E28261A250C9B49EA400951
818F48E683560A9CA1C79C6A95DBB12265F7E11C50786197576F679B6B78B58A
D03B76A8EC5C9F615653B9589E88CC3E91F3AF6341497EDB266AB8F524A69CFD
B4505E6C45BB69A5E7F2FDA0209D8463E6465AA161AA42CBBA8CDE9FC64A6D96
765D6D7CBFF311FA3C39C76A507BF7B12C73C28B8115CAE34007B5114C219881
E618F0BC295689F1A9FFB71AA7EF53DAF4EB449208318765F1F8405895F8C6A4
3E3435A690856F6ED7EF6EFB176ACC5A6ECF7064D913AE4B3C693532AB28447A
F04A864BC548A542D251C62F4BFE28D191D4A3CD6A0F86430D6248B8AC68DB68
F789606821D18837CB6A8B68FAA4057DCB4913243080E7CEA073957B1631BC1C
8E8AA936DE85594E925526DECDC75C1B935CF6E58032AD745A4982345AFC9C32
38933A4D0B8502A29A766461D2C005B2E0B4C75A713F76B63D933A501F63B223
03B2A86810EEEBE12BACE358B51E801985BA10BBCA07E8A3A6443D7AB70336A8
B6AA4DFB24FD68BF534C4747698E8D582545396C400B2C6E8E9F7FB9404EA58C
71FBC8CCF992A8962DB30B986423BE1A589D1C0A108E518513067C2EA4AAAC62
684FB44492F924001CB17CAF8D1EC3618C09E1C8AB9BFA435FE5606023E82B5C
3D0E0A02A456D3CB3F24C7C41291F3A9CC81B297BD5D35DA3F8B41117D0C0CD5
5746262B471967BEB2771D9E8969005EA5A99EFBBF8ADA61A840CD4A70EAE037
9B84BFBB1C6A53F54BAB66CC420BDF3B51EB39E1C7E54F6B4BA35FC700B365E6
8BC7AA858405729FA64B31BB27C0C8FBCA8D7911AE5A16545E67B6E31BC9A983
B09AB6EAA705237CBA2C1F281B693C645105D530783116896F7C0BCA5096C782
331AE75E4AA5814897382D3ECDF20292EAC13AE4F1EF661692D1ABA356F58CAE
86A783240B04D84F95E458E1D4DD2FE1F9908BA0936DD83E563C29F78EC08CF4
7C409067273599AD506DD5D82726E29DEDAC4DA646A018C3D96FC34A9B10BBC6
1BB0DDBF19A971A08FD190724EC6D503D16C504C4E00A362231E451A8DF57709
9ECFFBBE1651D9E46DE8E278E56D86472F9068B076E7C374D9C1E8B69508A3B5
B29983E63EAB225F2857D7EFA2B2733EAEA93536094753AA5FD1D4A65861C14A
B20AD332FA502EC2D31C3FA5130392CFAE867C54C84E039F156AAA187789211C
80872E512F5119487E5CA619AAC33B133887B99D1B7F55A63816353F42CE40B3
EF7012DF52D261319388E0E16B8E376E7BFA41EB7EF39F9BA9D2B5D329CB2787
201656148393B96AC5D0C2D6695EF332BD3B984023BA4E204EC538F8B740679F
942886181D89F8D8AD4411072FF33006913988444728E6C6EE881A8F1DB552FB
90F126FACE6F63A8A0841103123F6B206E4A979C9357FA3D122C7EBE9BDC3D07
EBC505AABF582A1FE63994F9ED20E62C25A2EC55AEB085CC5D6971854B585932
8A5E4673A4B1B24094DCC9278786FA6FC3887349FCE09BE830EFAA2A96F7E1B4
6654F2AFC9436B920681063D7C888B30BB2C4C81550FB451A370672C0780BF85
0CFDBAD8541E07849B6A48767EEE16D73D08B0E832170B5AE51CF497C62C9519
339E5CE0EA6CE6F6E59DCE7636BF69CAF49162829D8442D76A0AEBCFA839A3F2
726ACD13ED7AE479D158211C079B733D96F26A888E4666CBE2333ACD6F79636C
D8A5945E07CC4F5A87276B68A6032F336C94C58B50DA40FD06C5085FD2C9022D
F9005A7256E8FA7C269AC8D73BE4333BFBE1B3266CF8FFFD5078A33746D983B0
BB9E24654F1AEE0B9E94FB8701BA665CDE023E71CEF701072CA100D46D385BFF
68A7B7D58DCCE1D78F88A26D0511AE032FB1032FDD99EC4E762B7F603114D9D0
0D7B5714D6B7C73978C1954D3E27D16964F9A9123065345D1BA394E1E47E6321
9BB3223E08E69941B789613B1E8AFBD82BF811E84F2073633C7126AD5787F819
421FDF22DD745B02A7610D49C639FCE1C3E50423DBF0E66F0EC1F8C806B6F2B2
5EE15BF76A1817E1A2BA5DDCA536EA089BC1B49B8DF96C50FF52C8D856739D65
97FD4A96DF7F05C060A9B328382FDCEEAA899126B167FF20707BAE2C104D11C7
2BFBF884D5CB7026A39B0CCCED08B3D889032DED69EEF7CF525C69553E073666
5F9861902FD93DBAAF8B6028C34A09EB1E84F9223A51A3B8D9FA38E818E43E7D
AB07773686E41F05B4B310621AD6AD59FB5E27C292001D28A43485CA97B6B40E
6AC01153D265EE616EA0A4161B900282294488D85DCB6464852E4E3279D8AD67
234A2CA17353FBAFA3087315E7FF1366F4DF91E8DB719F0BBEA712AC85567936
AAE8B6BA52A7CDDD1D763EB6A2C9EB824E1A51EEFE0CA640F86E221B7D88DA92
2CA4EAC54462D39605ADBCF6C941F8ED299BAB6D68159525995C8F1AE71A47B9
E18E7AFD37163201B8AB9C7A3E667590B1B0F45C0C6F7AE58E70B689D13702AC
F661DDFB8DD46156F128BD1AB9A783FEE93C229503321C03891F328C32332CF7
5656079114995B249ABA57725BAAF4CC49DB7644E3910E7C3D282349B06B39CE
AFB6F935466E50D10052779E277E8E5B8702D1A7ED75698C2CE589461B6ABDA8
842AE0BC7C85DE3E019152A93B445685F68B9B6AEE7F3500F030CDE66CA264DB
2480C2FB620D8CA6478282C9A7D6553494EDAC83BA805204F19BF3624C99935B
6FAD7C75ABE936BD890F40F386E276A937B1546E8E5F65D2EC3405E0D4D826D6
BF68F3302B6947D26913CE55BA9EECF754785DAD0B83FE1EF1C27FE29A4A5EB9
688166E1B3EDD9BF2034BD4E9726B55EE2300BEDB67AC4FC5BF8F69AFA979B44
50780B97017348ED282AD4DB804EE8B354AFD478D9E939E20D60F86764C6FF06
2719418FCA1F4F14EBBEE9ED15020072C76102503650F1E38E2A84039664D46F
ED437AC9B7A2D6B7322F3BB0EB3DB7F57A65D3854301BE3BC402D8016B4B41C0
FE765F2AFC898D9293F9A0A037B09DB2C33142F896B6B1FC01D73A5687B1F805
69817015F6705F448F69D529E9C30E667343C8D7E09270164153D5FD72A7A28A
591D22AC628EEC2457DAD90FAEB852B306F51731F7E448B360D8115DA7D7B9E2
C36CAD5932241F78F13D4D5914AE1AFD778ACFD306DDAE23C5457D44D9D5CD4F
EBB1189A6EB94B4BC4277F6F0EFDC66D3721735873CD2B7D32E780EC6B623073
ABF39EF79DCC05055A0F9DEC2C0F0A8379A19DE5EB5E4E0681857DDA3F8F3E1B
7FD355ACA0F21EC789BA6E42C5D9F1622196A632EC8618611F1FAE73493BCA04
22BFE9B6F4F240C93D5EE589115090897424AA836C2B4F5F455F522B47644BF6
951BCCE641AFD7414277423DC5BC6FAF04E38D66610FE00E031F5F170F9ADD3C
96E07B14569A85A0C164F80529F952876E8D25384C1A6123A48DB29A368226D7
47570A16A4896D484DD101571837DD32875F1BA72CAF55056DD7BA02D37CC7FC
6801FC793F24C3048513FE8AF6E6CB7AFAC6C9C21B41FCC7461412AD0CCF5AFC
45FD5185406903E4312FBC68C718702C07C4A0E37DE2DD25D9A22BCE0912C217
8EB9AC1FC6920E023452097F2BFD8D144B8A977E2C377937EBC52CE31AF7AAF6
97B1779793B5B90AD65663B2CCB36DD6AFAD358ECE59DA9FCE7763657F76AAAC
55D15945B2E01B12EE197411C3EDB202555C742B219739022860C06A39B49552
4D6E53EA0ACC9C6ED646EFD02F6972FB7BF9E2AAFB69A15CB2A91C97A69E1EC8
C216B0954243E49E2C4D82DF50960A13E8867CAE8ABC226216B95D14D73C98F6
714D41A2D507A59E5C82D18ECA1E80B1AA8E13658C828FE63ED339F44FB52242
3B47F9B1F915CB9DC2E5FB2BAC8FC27E21449B4ADDB167D8021C5DC37D8E9540
6BA3612090F755F3B9D66328CA0749E7D3E02729E208A20384CF255F1097EDAE
05CF60692D4B4816F1B1EE6256E41A8DFEC3607EDF3D0F0F1E91EC960B719C27
82BDC96DA42E6F9E9DEE7E788FCFC38D24018840CD82DFF489EDF080627EA02E
8D9D06EADA09F39A16AD8FB67C54C8C90CEEE591381152783F0298E2A64B220D
0273898D0891D1ABB06ECB9CF4F23AC30E374CA263EF78D8ACE45A2B3F5F8047
8B53FA21F875E62E617EC0A3C4326C4C0619FB2DEF9AED159B5E2AD9BF43CC4E
E54F1E984323031B055C311F1DD57CF428ECAF8BA982AA8B4781C64647986823
AD649CF241F7DC5DFBBA2855A1BF1F53C0B6429F716F03193129A54736A4757D
EE6695730F7DE2678DD9CE727EBBB9E24BEAD44F6FD2AC791391CC4BBD853326
16E0861DE4CE2A651E5887FE8A7D1947D4AE7CE062564AFE70CB7741B5E64B0E
98E666D91E685FF22F1D184956E354F243BA8168579C601C0180EC74D92E1760
7D59D3E1E32587D1F8383A7B103AE445866897C96721524B70D634E0C1D4DF35
CA8299BA30C77BC05AE1507B4EA6E527B5B8F31542BEDB9EE46F644E6778F1D6
B6C639A3653EC29A2974122FA36DC325FA383857E6B317D002403882AA4F6B7A
37A5BFC2AFFFB74A8A30482E37D38DEEF0B88E81AECFF8CEC1E5BD28B2967235
416F26BDFAAC99A5163CF6A1DDD1C14A043F4EFC9D6F13EC182A700A67ADB2FB
DF29F38D49806951F1EBDFCBBE63BA1BCA915E9DB0E48DCA6ADCFE8E97582EC9
B4A938FDEA5186ADE03CF8B9E0D916DE05CC9DFDFC00105766B7CC12A82B7A85
0E3B47553BD538759B8F4399CA79C1D6EEE33E280C021FAD1D97F1614952204E
62C5CAD93E4FB79A42FBB911A987FE7769F3FCF9B71A0779240118DC7C9196E0
110502A498B302E2350A18FDF4710B1B7F7141F6727FE6EBB6BBCB63CA4FE463
00F366B27F3936D51D352FE5364D7B4FE481A6B78C1AC02ECDCCFBB30E15CEE1
CD7D85C02D85BFD6BA102A088F02A66E35C99E38579A233DA5228C0B4F9578B8
BBC25DB8A938678E478F8F934E5CAE7582770877BC51A41D201FD46E013A407C
9E95092C6F5C93665D7213B00360C29BC50D224FE79A9C860639AC41E1D94006
9B83A5C7FCF9501CDE634CA36A108FF69DFC015E37C9E09447BEFB84C77231AF
F5001E75D084BF94CCD52214BE312B71A1740785979FA765BBE6D16DC68119B8
B63E92D5C6569C2BD62D6385E05FF79FBEA9F9E09EE3C7463938F50569D1890A
6629E6BC7ED9A0F0DD4C17F7360371A79A5A83DA84B0D277D28040879ED9A3A4
3B79D4E55C746D6F8083AC966A558D82413BEA6DD6F23B55AC7841CD0FE4F061
1037C8EEE4462F75D71CB05C3799A44BF4D31ED27A60DAD20D67C41C9DF0F61A
52E2C4D174319125263548FA932B04A1F011E92D354CFB688ADB9AD55DFD415F
CCC91051A9841E7DF86A0697DAD3C44CDD757E309C5B4F7A754EF41A21C42839
05CEE20B218F97D924B956795E5BEE92033375F0B94D0A87F1BCCEF91AA7719F
30F6762F2EDE2C4EF3CF33951A4E34281A11179ABEC8137E46926171268AB0A1
1B9EA845890DB77F895A33FDBD072CD11D9FCE07C5845E891242E0541BA787C5
0EF0451075128902D2EA811F901002D74317EC24F014889A2731F4B52DF7A85F
02F07542F14ED1269BF89B418F141421D9F224F7A75D822EF4CE113345E00ED5
B5FB770097EBEA2FC479F6D66988DE1D39E08EC9FFB95C0280856389504654ED
F0A47710DC7E41ACE79CFDADFEF89EAE33893F2F2F5D1CE8C8F17C97741208FC
D176D9DF7E08CADA4F82E32021D140A36B38EE1688E7BF1DA75A4C5F97E67A14
9719A88FC1D212E1550CEBFB2450FEE24F8B748E7FDE019B7A7AF9D7508794E3
9B37C13F742180167D6298E012DDAC91CAFC9F95B996CF0F36D17E82C7CC812B
42CED34F909EE85868584E9A50FA368A698FE83184469FCCC180A62EE6F1BBE4
D708D306E3F01710425DBC3C91785A78661901BDB65203A210AE61C3AA954107
054DFB0254AD819CE7C72E0C515D14250A4D4E41C15A084FDE0421327C4F904A
2E588E7015C9EFBA2B79B7E3A145A5E79D3C07E030533F8DE6804555286C142E
7C9E839D0BAFBE347AE52EEC89F7E7CDB6D888C9D3523F5A996BF2FD4E6B3CB5
2684CFC0245C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters-Italic
%!PS-AdobeFont-1.0: Fourier-Math-Letters-Italic 001.004
%%CreationDate: Sat Oct 30 16:49:00 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters-Italic) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 96 /lscript put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -249 825 751} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D440EF
6A6F1325CEC03C3A3F20FBB1DD06C21761D70838D1E83592E85E284B4270E83F
629BC6D3971271C950F0BBBEADF671311AF5411D45ED8085300D8E64F313462F
D04E2C3161217FEF562725FC5DC27438784EC45E8F533487F0B4622BD496D97F
F162ECFD0A3F379AD617BE859FAD42B9260E56747BEDB156FE844C8F7CB9A067
E940C5658DE86647C65CBC0C2C08D79C09F07B00890641C302576D48FCAF0EAE
D328445325AAAFFD80EB6CB76F52E22BF04678BA9FACA7B18B2CD01D95FEDAFC
DDB9720701A17522D74D4DFAF4F00E2534412DA11B60161DC23E13B16B54F7AA
8730C5C0AE9AC9EB6903540CCECAF0312A0E4E4D61402D7A7B1775D9591A2EB5
F284D11E9DE117B588FE6BFCC3C2965579F10F096E83A53FF334587BD24B0D3E
5783469281D7C7514BF9448059616084FBC5B2B797D96E7C7511784C9E290A48
088817AEE321C6C7E1D103680C8B1876C552361F3F6C2AE4090C120A08BAD8E3
5942031F8A3E739BD16DFDD228F01C1A01233D1B633BB37C6F1CCAB278FE8F8D
F6EF0C61C428EDBA1DDC254EF1F6109EEBB032CBC33DE7E1BEF1F4FF672C2D12
F48EE105D9B48C8FBC0C8567FDE51492E87EAB9362A1F3E3670416B0BC64480D
C4BE1681D05E3DD8B659CC8643CBADC4D1D4CF4190F7DE32271EB1DF06C7BEF6
013ECBB9CEC865C2FC9620587044E26D17216D2F99571097694DE10F548890AB
ADEA3D9EC11501D1F492837CF931D1CF1A7EC8388DA83793B661D8057DD36586
43EA5A9CF4C7437416A31C5CDA9FE54518A2EBEF1508E16AB5B944840D233F12
9DC0F470BFFCEA640B6CFBFF6FA5585C8E369D3B09C6A08A8ECA9D2481245BB4
CBD54FF3DCE252AA7F9820491384089BE8305D95BF3D75687FCBE284E3D9AAB3
77DDC466A669A15614813CCF13D5DACCEFC0044612E8DA68D16BD1CD44FAC85B
77D4EC8E51FAB737E69A5BF653B8E6BFDCFE4783C4DF6C06F669EED412848DB1
C2BFD00F84455918F6F7B0125E9AD62A8D51C0DB9E7286A8A2312B11DE4D3837
1E5D5E2FBDDB3EE8368C068CA768739C7B57E06AA6F782FD61F4CD0197B54D1F
72CC1A4B453BD8AD2A79E22212442BE535E01859C46C6A00E00209115AE10C86
D4134C8C541EE0C702938B25160E5A62B76BA761C38714A62CA5BA035C5B8BBD
EAA179648C41D4F6477AC75D7275831735AB24C6944A71D97332B5C2775851E9
6006A6604ED6429695CF8D4986849D9B31036E93C48FB693ECC593299A09D377
AC9DCC0396B2F1FA8ABD3B94B89311E353E7BF370F2CC662E1B6B61D8AEF337B
E4D6FBD832273999367D05A85FE31B5F2C0387456A37B80A3000B907D78BF114
6556892940F1A66A7FA4B442A843A915E7D3D27B2DD42D72D01CFE2A664E0632
E56F8C1D694079CB51AB44F3DF083D15E6BE7076BB0BE11B36F8E4D8E14950D5
A13146B2FE9CA799E8F5D938B6A1A2D12857FE53146A346ED4829FDA3718A154
35BECB6C91A2A41F9C4C4CA66E9CD469993C5BC48C2ABD45F298
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /circlecopyrt put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D47BE08ED6CE96278050BA67680A3B973613647
A93FAEC756FC253B3693FA2D6491B276EF45751EFB306961788E7C15297A5822
AFC5A2DABD0DBBFF0BE135267EA6B9D1B4E4760ED14895FFE1F8C3F564830001
EFA901B8442BD2D98561BAB9A0FD939E0F856E4D2EB04A9A4496704109B8A84C
EA06AB0999427B3B1BE776004AE906D0F22159C051D88CF573A0255D99B56781
CF326CD11919AA40B096769CD6D0ADF3ACEC7957621084ACF21AF1F265416628
86B67FCBDE9370D4F5C6F5CC67EBB0A2727E074090DBCA459AFA1A4778AED4C9
AE5400775223E684BFCB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.001
%%Title: wasy10
%Version: 001.001
%%CreationDate: Wed Jan 15 15:09:25 2020
%%Creator: Michael Sharpe
%Copyright: Glyph unchanged from version 2.0 were copied from the
%Copyright: wasy-ps fonts, copyright (c) 1998 by Taco Hoekwater.
%Copyright: Glyphs that are new or changed are copyright (c) 2019--2020
%Copyright: by Michael Sharpe using mftrace as the starting point.
% Generated by FontForge 20190801 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /wasy10 def
/FontBBox {-23 -1667 1720 752 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Glyph unchanged from version 2.0 were copied from the wasy-ps fonts, copyright \050c\051 1998 by Taco Hoekwater. \012Glyphs that are new or changed are copyright \050c\051 2019--2020 by Michael Sharpe using mftrace as the starting point. ) readonly def
% Glyph unchanged from version 2.0 were copied from the wasy-ps fonts, copyright (c) 1998 by Taco Hoekwater.
% Glyphs that are new or changed are copyright (c) 2019--2020 by Michael Sharpe using mftrace as the starting point.
/FullName (wasy10) readonly def
/FamilyName (wasy) readonly def
/Weight (Regular) readonly def
/FSType 0 def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /Euro put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE30585F628C5960F4BA7A0E78D80B
EA23A0384400281199F7528220D2F21D031A35321A044226094B6ED6DB52413E
0BC02D4EAA6BB6C3D02F5D5E4983DFAE1209911A8DDC998656E07B4EEAEF13DE
50FAB8A7D9346FDBBBF1EAF791BE7E3B4BBA8D381C5C32DCB4436D5834A17B60
26188D4C558BC1ED012EA8DED9DF22A29EAE8673C46D0CFF7F5EB4080882EF91
2FF746A93A7B15CFC25341DED2CC7041F5D2FFCE348F17C86124EDBD259F3D7A
A299B032DF19B1C8C6EF386EE2B3655A09E37996670E1878051E7B77C73B0250
EFA23B7014FD87F1D8F38F07EC2ACAF188606F724E436A3D5B001AF774C0BBB2
3B48D49C1D59D3FB5768719967A1086B0C955D8E90D69C2C18593A7EF0CE7A9B
A82AFC9604DDF32B61B5220CEA41E570BF9F9BF018876411E06807D45AEBD705
125665794E0C88DFCBBC57A43A8F7747B4A09C3941DCC35D91F9E238DEE5F56F
4D6E6032FC16C459482F4E32286E48F60DA55F2B5B1B86F3C934052B798067D0
254ECF5D61EDF99B3A6D86DB44265F4545D81B7A002D62C32A22D311876DC636
1CDE6DEFB5164BC751EAFF248E4D6CAB3FCA084FF2565070A0129CAA66035751
8A94EC45A9827D8398C0CAA83B3D4B032C75896D666161D5FB3F6C8F13B692A8
ED5B89F4654956A01FCF6295D4EFF3C7269DD46C0D06362CF44C087C14B0F984
A6CC760D2E439EFC1EFCE34DAAE9C0B017F709E18F64E7762F92A2723CD0728E
11ADE47D1A7AD0B9B75624B220C906D34D1FDB479E312B51DA3721CEF9576B50
F00CE281CC5AC9CA854C150636E2A4BBF26C0CB72843B7E8978C6923B20DF073
7D15F9069ED5C3CE92F4C2AB437BCEAC02473A6E023091F026B8AF8FDE54045D
BA32607DAB9EBE64BB05DDA506E90BDC38D7A94015DBF365B3F727D14E612395
6675298F00239CAB003959FE119E726D4B10B063CE62B1E648DDE9E995ADE22B
AED269BC6481FAC38C9D66CBFB5FA8CC6840F18F49FCA60F6E8D93CD2FE35A98
CB61C80B2F424A61789815DA278578DE6755411E3159852E8A76A43932A489B5
A8C48972C22CBE66C9DAA6EC7F3C70760DC4384C7D5E552E41C9969113FE9B41
4C792F58801331862721CC920D6060DB63D12BBDDDE58C2B1CFC0D1CFCB7EADF
9D0AB31059712DFECD2A616D70DD0EE5E53514B474FFAA0B184BB85B618303E7
DA826C2B7D1CBAFD1645C06F9A00BC1FF1222F94937A87EE04C4684B0A121DA3
E26BD7272D71E93BF96376F11C750E53E6AE7E9915809A21512969ED830C6395
1395B0E6790CE19FF4896550A040821442A2EA1CD3AC4DC9A0B90419882F45C0
598E040B77E600BEC9FF9AC627A92638BDC359317492BA4BAB8B1F2CC6A5AFBF
E81F9CE51A6BA62D5CE57EFC9607693B47AFE3EA791B97EF8B73C7C234FCDFC9
70357D3E9B4D8D8F475BC7448C1B25929B019FDED75169DE66513CCC23D034A2
7EBF6E2D44E394667EF8D57924D4D1F874B89EDA39976CAB94B3D58EA6551D10
3F4DF6E795D36E5C468ACD33C7B78CDCAD0B29ED5145EF4D2CCC59706188D10C
712973EABECD7A3FF3EAA14767ACB0551E39C831ED5452E0088D4F1A826548B9
726B84209947D4BB01DCA1E29FD478879E7F845E833C3AD2E29A83260A53F64C
BD36FC42E14A07FAFEC1B14C54A53A5E2D852263D358E675B62F9E30FDDD384A
56440941B4C437D4418A7898667D111FD994ED002E2E9C6DD47FE9D3C7F1D6A8
E5040A87A39A0509FFE4884E63CA3C0434F07185D8026E5B93B8A50AF015C796
033F05AEC49175ADDD337E2C1E9CFE41838999960D874AE74B8EA0FA61DA9497
58AFFB7A98DBB36FF2693F4EA3B83C6331BE4677D1F5D8150F9A66002C4E37E8
4DD52CEDD41ED9B724D09B3E562CD93B50414D87AD378B7D0523536041FE0EC3
3A5C2343D7DD645BF1A70B6AF3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CACDD72C726E008744
F8383B33D234761DEA8497856BDA04DD10EEE7043BEB84C62D7B46A094EB3699
CDB1A9406679EAE94F1F933DE269C7AC15CFFBE660FC1E5A4758EA23EF14001D
4F6FC6FB27FFFD254B345C3C32CD7F70DAF4D48F9516794CA4BAF0827AB41309
AD1CAE4940E093970991AD11C5A830E17A51EE27F727EBBD0411E3DB595FEF8C
2501BDAF0235FDDC02683334FF508FD924B568EAF96E7344A56505D616F0F3B2
0F3DBCE8698ABD5DFCCE5B0C401638E89429249EF111164E99A03A35925BA293
6AFB113BA123BC143E5E15BAF95BE6873697845E184DDDB6760709182967543D
7D8C43583DFE4D3F80627CFCD3E8BE1D7656C518666BA45A27055C773B16ECB6
511E2A60E0B185CFB488D118D74E8BF9637F0AC7E1C1D9184DACA06F816B12B6
478FC7ED76D24953253E0B2337E08EF790CA36DC8904E2CA4560AC14AD4E54AF
2FF89B894540D6E0A9F764AF34F4177CD3A56B5A2FA274AA4CEBF07EE63D15C1
3C7ADB781EE1DC4172B238CECB15B80F50EC2065DA9EC95D30D39DB92D17AF71
76E6FA7F2E68B3BBB010086EBBB075A72D0624084021887EB5284FAF73E72CCB
C15C7AECF1CB17416CF2BBD8BA7F054894F66DE1613AEFDF6D2C77AC001102A0
94A99CE647DF4C4C6CE1A7277FC848B39681531D3F8FECD47FF1EDD5B3CF4321
2B32FE804A11F6D76801BD5F2DC59354F4AA227006F97D796A5982FFAB3B471F
1187318913D940B5B7DAD2172DF1816D46A9FFAF8C077A7B727E6E7B9E427C94
EA7EACB0E431EB4276D6883579A7ED352738AD7E57BD11B89D67C4A1BCCDF08D
F33908E6BED58BE4EF071A9F8F8639682E6E7F043BCF250FC5195E02D81FD4EF
1EC67464E6D2CE3F3F75742A06D66C9E72D7CFFC32061D63D174B1A293460051
DA59D0708FB5E6F400469FE2227D126AA8317DA3CC28FAE21C4D4A60AE55C853
71FC39C8BCA5DCCFA45FB25783332BA57551CD78D79C802ED86245B0AEF9EE79
FE4AD5DDBC8AC5E400BC65AA5098854899BDB132956B7B058EBA3281B1DA0261
F7DDFCCCE244EF6E8C8D251E849321FE2DC55C542923370614897C30B247E1C1
91AF30B9E16ECFE5819E4FB0F6F593CEAABC2C85B02B37A8FF505BE1FAEA0CF0
B00E35685EC3AA0E606A89C7E6362AA22FEDA49B3BD0B0B7F71EA793E0C15C2F
92202040F95E97DD9B83E8797F8BBC480FA9D314650F4A4D5E2B983D5ADDEF8B
291C386143E6FECDE716FC5117135342E68D09CD435E392A6A2823657831DB12
A5D815080FE0674008A0AD0FF9FED8154DE4A72A6314E54395BBF726F0909442
73E1C2F5FF05D498C124BF0A962E290E4F1586B625B53B7C5CDAF36399A49A6F
4FF5BC5F996904E36279CAB17562096C255C63987A621C04C7860A4DA6654A84
BBFC50F15A9C99C0EFE948C58576081F34410F29457C455A6A32B6A302235825
1E86CC0CD96FC5E7819E44DE8716A2EA5394485C96847D1128DFB53BB2E2FC1A
2E9C72A308BA02F330BAFF42FCB3579CB6CFB106386C07DA3375D1408E68585A
B5F218ABFE8E10CEF81FF57E44D27493E6B60D8F01159DDEAD076CA03EA462DB
C29DFB9A1EC328513414FF4051ED02837BFA669EBE57C20FD02D897313760749
FCE2A9DA46E17A70D63B06F5D54EA413DE4842E28A8B124472729B9270289703
956BA1A8B0E9FC4F09323E3A5348591EC1CF1B2F247603FAD5DDA550CFF61C92
F2E5B2725D4347EEFD4006211443FD3E9E95B8C4795A0514FB6775A8ECE1BADC
18614DD264425C4CF2544EE405FED6EE737A810763CBEBB4A41A6C5B5B6982E5
9BF0FA8DB8E1F978CA906772CB96A403CEDBC090D4B7CAA46AFBED21C7132F3B
B21DB0DC5CAAA18316CDA3217D3035EE9C619A6D9E1F2ECE2DCD4B5E29433DAF
7520859209E91BEA15C5BD7E893657F0489D447D701B48B81F5A693BD9988C08
367CDB40EB73F48CB1CB2A23400E48135B4844B2C6F539C21436A7E045608100
C7EB4798424780FAA7927C468EAA3975AF92E96064718E720E28DBE62A8E1DB7
A52012B970A75CB813B08920CDAAB261C4668A7EAC8CFEE83FE96580EA561BA7
574DCE7D749C0F3396B9CCDEE4619834FEB40E6D0FACBD4322A304F0A7E2E0BA
12A16D57BD7628DA9D6BA907D9BF9F14DA81F74A7A9B1875C81E4F5C457E78F9
D6AAD4A849E20FEC0BC5F1703A6812D82EEAE4450886A75D0E871014E2950E49
038B3759B5683330C40AB11A87E974FE21783A464C04C0F61CFB5C1FC8DE1FED
CDCCCFD58FB685190E94E9577E314BC1F344CBEBE192695EEF9C17A6C574FFFC
3D53469CE31275F14BC2F4D99E5B7F97597769EF2650EF86E125A023BDC53269
E60B359CC8E0BE1018FDFCE63BA80290EADF5311857025C0DF989E6E1509F56C
69C1D3564C4021C2B30ED3826E187146C4EE345B90F4A4D901C8CFE98925EA24
E5B6E1BEE2F85537D1A8BF07F20CE080259410F86B37786CFE74A43DDFEA852F
EEAD75E3A91CFB52981AE4A6CEA7F905E48DA9443FF9D9C8BD071C4E93AE6C70
4C5F3CADBDD9BCB19D513CC88F6CD384E3BA2BA5466A0BC8854A274C74722650
2C221BE5F59AA161870F3817F0D7711896769329E2CDA2027209A25CB68EB5AB
7A9F42F28370231A8480369B0E1986992633C004E580A8F0B5A10A2B5ABCBED0
F869306B6F042BB6533EEF92AA815D774777E46CDE5F18114CDFA934DD2C434F
304CACC8F5F8F3B70E29B7073AB30DD02E62A1BF8C6E83927CBD52E5E796ADCE
781F2D2ACDC7705AFBD348A70CCE01CD4231313BEEA5B245C5611DBCA31A7F18
CEC1747AD16E7C3261EF6652F6ED590ABD84C1450DCEDED0DE890B4C047766F8
A7ACA13BCDBD1C93F3BB9217F0F364CB88904720873898190BB629FC23FCC17B
A3C86CC340EF8FF308928DEC320375E33F9544F1BDE86D88E2FC87D43BC34C44
7F138F35B1524461EF67F4DEB556E715831BB8A426341AA1F2E65533FA073DFC
905E2D6DC8A4260209EBBF4D83E08EC9C2EE3FEB2F1CE96F851B71620424D92E
4E9BC0FD0CE1F91F44352820F2039CEFE10BA56DFE6736EBE6BBEAEC5E228834
E0A9D1625605C9D947041CEF138E4BE42E44F9CEA3D3F926013B59DE40E25303
AEAE576C3412987F9D14B98EB7DE191662937C18838A433E8B0C14658CE8259F
56C8824738603F374E6A622915FCA7BA29CB33FF6B45CD85DEFB061BBC7C5B7D
40753E5B99D1B52A6A2A1204B800BA7432838EE1E3ECFCFEBDDB7A75D710DCFB
F667D5CF086469228F9FDB5CC083CF994F435523930C7FF181D407991977D64B
1A408041AAC5EFE527A9337F7B39982D66F5C28EB32E7F7BDD45A9C222C94D18
F8E1B350E94D3701460AE168967A1447E5C9E7C2A4EBA4E6AF11D509A5324476
F65EEEFE02FCE0C00964E1E28AF3B27C9C4AAE1DD83D9C1C9BA3F1199A331285
826BAC0F437308EBBE8163C22330524564FD59C45B12286AD2A003E324378D1F
0D07F66AADF8977011FBEA53A59DCE5A26DFFCD57DBAD6C2DC672BCB211639B1
1F8FA0DB3D906FA2C256F817D5C1B557FBE8D6A219CE0CD54A2AAC2481E49A70
014620301B81C4FF697C5CC309CD34F5279DD0F4B450CB5D21094F008B156E60
D6D3B8603DC2CAB866768942CF7E11EA8AA0B892E2BDFA44FA132C8AC420B637
B2AE972519751C717DAFFF9E1051D0A31A38113C1050E2655FBBC2B0A3D09383
E9C5384F1AE1AE6FB30EBB4A22AAE6369A83881AC534603C9C5F09DE8ECA5D52
56635A8D68969D01842A63715B7DE00A6DB20FBDC8F08B4865D621BE879C3833
9DD9F4ECA8AEC7EE85DB5413F500BC2720A7206F40DADDD21E78B3D6C351707A
5241B5DE896F7F3E47C5F5CB6B0C763E007FDCC1895EC435116748EF16F2B7B2
B633400FA677D8AC13393AA1820F4E426160BADF9E019F14C72976C7724CEE2C
70C1AB4699BBEA9C0868004FBBAF0254E8C194DB436590FA1387594F6D8A1274
BAE894323D0567A338DF2C25AB2BC8367167F31113CFF1361C05EE490294E013
312770945D3D6EC791A531EF6EE23CD2A9C193BC560CB3BCDCC053DD55469D7A
0A56FBB289208E41AEB723AFDEE715E8668B771B1D07EE8C40DA475E13240477
DF10EC1F059914FD2D7BE0FB41B99FD3875BCED32DB060002FBE2D6EF6AAEA38
5C1811F240BB7390D7AC278FB9B8E12D225563658B5EB2B2A4E7319B9FF1959F
349B12BB482D120A20DB390B13D057DEE8E8ABBFD78FC3C4F9463B350D36E737
49536523BE6CE38B19009B3A8AC75364CC21194573B61F7BE09A971CABD3CB32
BAEAFF539ACC35BCAEF1FAB9B8511D354D48F908419B7016D4333F67DC70EAE0
9B69CE420CBB743A67B0166AA2EC1395F4CC876CC994362C862C904C54985563
3AA1E241B7AFC928161F5B5D7E5A9781B24176C9184F8DAC52E277FECD6FAA32
94723552421E88D9C996E3FC25AC2DE0218C323E445C229B5484A92692ECB856
495A1667DE4ADA57D5BA69D0185EADC31B479D9917E1CBFE2C16C472D787712D
4F6AA9CA5143F4E234A7D478496C6784AB8DE8E75D66E142864B6AA755A5367D
B8882A8827B31715A8F6C17A4A97587747E27FBFAB667EF08701BA665CDE023E
71CEF701072CA100D46D3A3C36DB8CBD59CBDBB26F0983369BF6213A632E310F
665082DEDAB8AF8B5A3FB15D5725633072B651C69A88E593F6C8903192C1F31D
C67532105B2FD805839E39C0A49B70758E36562C5C7CBD2D06B8ED858D43F661
20D762B13240B7495F715F800C1E0E85CF476D0EBA1C70B3F576B024AB8E417C
BBF67188EDAB8F60017373A81ACFC5CF5B045E923878E5C1111BB98B0A32E9BE
1B75FC632957F8E4BA8449B7A858994798F6A9BF2FA8FB5A9FD1CEB691AA725E
FFBC0886A20B66AB0A59D4496A259A56EF66888CC3CA133567D66FE5AAD0ABA2
313DD1820F9B5D7C90EEC6822FDECFF5AFCB3F9BE12C1E4410E74F89E7C27CEF
5EE1B8CA99B40A3CA81F9FA7025B2ED5264445DD5B88906B6B1823B60F897FEC
EAD9E501237FCD5F7DD882644EC037E53EA6A5221170A2C5CB5C7896633DD07F
EB9D57A1AFC4C00169D30CC63050E933C5B2799B4A6B629B45ABA11C62B240ED
61DF2CC78DC0B71FD9CF4DB2D1E1A0E97003661B235D89AC4A0C7E1717AA5D4C
B0092E7CC538FD549B7D7258461FB87EDCC1726036E164ED6FD0E0EE9A85262B
D1C6C279672B00A179A125272087D1106B5BD95BB42F92EFD52176A6762E968A
7280AF3C1B82D633EE8D488E0ACB12D33508279355C7490BFB9C965B8B288544
60D65C168C73BFDFE638A24AD9D5C3475B9EAE1239A135E97C259B723F956B69
84520897A55F2DCAD5FFDF4482DC361256A312AC068167CE1B3F3483EBE20578
8569200930F442D8ADDEC1E338E66C77C6C44FCFAD13C99769CB0CCA5B1CC8E3
1084024D0E7342EF25E045B83EBBA8541B51A055B231CC8A22A75145F65F8D9F
0C0906EDEDFFC684C040872F3E7AD5D0ABEE6D87488FAFD708B24D34BDB181AC
D2DA6F0EBB6B72F915962FA074031B8EC4BFFEE86744AF3127D299A865E7CEBE
A48EA5B567B07A9A36ACE7B2E2E72CCAB07580609CE5F1AA194B2FC86BFB905A
2962182CF315395E04CBC32B53258B6BF496A4D5D965566E5DA0FF8705E8CA86
AB0086008147D0B121BC035224786854AD75F5FC3CADCEEC62CDC84725604B26
6B8FDA58E01ADB36BE642048F2BB4DCFC29374C6ED59B74A9DB4002D339A5FF0
2E328BCEC156495F88565BA0251744A1EAC0693CFE9712A378B708BD9A18C85C
1D2D47D9CAFA7384F17ACA51256EA441D9A2628A0752A8DEA889CAB985DAE1FB
609F62191AA35995B50C4B34A6E3A68977E3AF122BB37AEEDBB967CA5876B77A
7A127C8235437549A2010C51A4B6D952552CDC9E1940A0CF8C1F7364E7340AC9
48DAE1F38606B932D06C374DD02ED1EBD0FE43EA25BA9908E26923ADB72392C5
4C7E30C96815137336A6CAECDB6FBE126FE61C38118E2092EE2FCCC39DBEC8BE
EDA85DDFA8CEDBE3D94BDA4267B9CAD6F0FAEB46F0B4B8B3192CEAAA9952FA3D
1B2E9C9097E1C032512E819FFE925C54BCD4AF0DA8E77C7606F6D7C26E24B09A
5F74A2D4E08CA6D032F5E48806A1247F0AA44BC1842D444818AB259FFC315ECF
90CF38E4AA6C0C4142A552C278E04C5FEBD8D4AAEB807C1720B47F60FA4ABE50
009CD7AEE826D2536B99BDBC6AAAE1D6E1AEBF4510F5813A4CBAE6C36B63CC98
9682AEB72B6B9E6EF12456F3F5F79161A5A4A01C3DC4410F8E6B405D7E30EFAF
62E431D578E4ADCD1AC3705FA00F33D5DAC4625C54AAB2DF1A89C4DB378C40A4
F8B4C742266FEFC09FBB3FF896483930A8FEFB52DA5C2360B0BDE06438CE7C9C
ED4243271E5932429CC89B09AAD89CC7F08DBFF3DD2C978561DF71EAB6FB044C
5D51F5E6BEC12C896ED8F2F4A85CD125DC855705D057389AD0B2A5D10CE61200
60255F6D79F874FF502BF42DF46F924B061ADE0FD2A113DD261484049C0DA276
1A5ECE20913D3B7722B48B2CF10FA8BA6B4B650204C2A3BB44438C742979B4BC
35B21CDB2C80D89FD0770312ACD1605720870A3073E0D1734300F978D81F8450
770BA66D6FD9140A46655238EF8DD932EB014710E6DE6DD5630777008430FD15
3C84C906BE8D8C80DD46E4D972CAA80BE9BF0D4B077C4DB84399A66A3CB87B6A
A2AA2BBE0623D16885A589F794F585986EF9F538BE03720F7A290592E860C899
C92C78368F8A0BF4E3243333F02BB65C6E114259F997BBBAA952C639106FC194
05DB16C41F0F988A4D89D1189C0ADAEA4C23B83992C45710ED2F86907A14A805
35774CF0B1C639A1338E70052F860E08A868EC0D008B129D0003481625A581FA
DBE7C930F24EAF36298F046426410C9E698CC121CED1CBC6799069D50B1982C5
848A4DC9EC82516E8F04567E70DA5254488F91AD482C54E3EB596B08954C0E69
4A20846A32154D39CDCEBC754CD031D55565F2096BC24D4DFA8430E43AA279F6
92C99C95590F2D84E7E4B4D1AA41DD7643D81958F9F8271724CFCF5F75EA444C
FF1833285B48CDB9C97C84B899F1F37E4C63CE8B83D4AD3A540AC00C809463C2
7326AC7A9DFDB32A59816FCD4DDFFCE7B9036CCC003BEB0304257E9B81A226D4
DF11FC1FFE67269CA02D9EED192575E762CB43491E3E4FC135852263378F53DD
9EC4A2B651FF7BA8CE807C66EB0F213BACFCDADD7B745105E9FCBEE14886C4F9
EA89C44A395C932749B6354E0425EC4429C43AD6E3025FC8D0AB6D9028E902FF
0F1388DDA9EC142569DB6049553C9645940F1AB430E03C17B80B92D32F965853
1A3BA548F5CA06DA6254C5F26A3B404BA9076E85A632B60B49134698F9560DF2
143E46473F07FD2AFB1D342F67490101637B9924A973A8C5F5F39A07DB042EEF
50E9D57AB51FED69CBD01B78450F7620938B974207100456525F1AA02E659C1B
AC322F830B54A2126654FF7C17EF6D92E5B17968AE9E3C306D0B017D27FED94B
C7EE568D8F67BE432E453774F482E828FADD77BFC2DE482F244C74A5EE219227
1FFEE7514D89222B39F7E244FF83A7FC4CA79D0C41FFD0726F4FB99C874E74BD
93A6B19EDC4F5AA0B3207C500372414FBF3A1D85A9FC2013796EC10E9FD51708
4D75CE65F20C4A7D89757B8EFAFB5EF2E2C02F431FD5A12CAD1DBFEC8BD95884
306C377780B0FDBE167CF47D6C1BB06E0FE9E6DDF280F8B293B711E1558797E3
126550D5B4AD7FF42FD296D53736AD90E2A7D4621133F41BD2772A9BDD9A7653
F9D83164DD1DC3834B0E2D3A360C9C94BD89ED4DAC4BEA7FB75E260633FF0890
C661951DB5A4348441A538D9094020FE0A96F12F617EBA6B0F3BC423BF69C127
6628D6A2215A8C1F0D251105E062FF908AAFA203E9F6207E2C30DD6B65BD5481
9F810EB5FA49F47B73147EA8EC418452B7B1E58986478814133645FB9F8E614A
4F65BF1A71ECD77FAA68A887F6E213E8B7FBA1C447A40084861ABFD895337DB6
B77D1AF652B8EEF1EBAEE34FE8E58866F181A4C66C7CE4F99B94FEDA954309BA
AC29733EB70C13D346CE5AFDA10FE48B1C5F334F1030E92BAF1753C87ED83F89
4C8C90DEDE1390BE533BFC8116840011CECF1110F7CB41F2EBA90EFCC2DC3BDC
904C186DE88C74C764378F3374AD32C01F10EB9F28320EF8370397C39C3281D7
3EE2A1E44801A72885402E7890E8396243AC40A91AADDA723F7E4E985C531C00
6B93F9CF3F5ED4BFB8155649EFA251BBF7CE1EE2C46FB43A1B8A7C0315F73C5A
18EEBF7A177084B42332CC6C2A9C8BA66535A64186C0EF5B29AD6DAE25B3A707
1237805EA542066343742DFEA5984EAF9D29EDA3B8D1507602AE50A407FF5999
58DA5900F79FB03A7E33DABC33B2A4D211C5E3676AAFE12FB4E2073ABB8DFCAC
B2CFD1850E620ADD8DFFB0584D9684F502CF61A7C0AE6B0CC450524CCEE068CA
EBCA98D520A70572F59BC8A3F602E7D0B63D3AFFF6A56CBA634D68FFA0100BF5
5693F60E383D2BCAA15558EED5DC35745272FFE8FE0F2088B67BBE916E7ABE23
9D15416F2ECC59674540D9D06E84ED40BDD62D15A1753EF12A8F7CD520E175C1
727DBEAFEF7D22D5E7DFAFF9B484E87A2C42FCF56BA81F6C1165C981859867F8
27F5BDA52CD6B5853C841C50978088D276FC2366FE59465DCB39D71A6AB16F48
285FC43800870FB1308F0D1C442CC7775CCD231CFB3CC4E4504B102CC25B52EA
687D5F3BF2A172E6420C4F3906D95B9041FA6675508CAEFEDEC9D80B9D576708
B76861DA500C271AB7ABDC397E50AD5675DE5B6C8B56D865C63B5837F6BB1A46
0538C2EBE10BA654C223D1979F8B209A4660C22188A89855BDD2A6CF86D3B837
C6B7D5744F98CDB2A4BE6762D60F463DD26BBE949AAE119F11323AB2EF016D41
377701B2574FD56BF4A9CB9D01276FF63B62BBA237D819016B2E9227C04A548A
B6039485BFA31F981BBDA42C0512FF5FA6C191F7A80E40AFFB2EA9913265E0B1
49A2054E18A02ABA38F565560DBF90604B214869DB22C17456A41F750E9F7125
B7594DE5F8657326ABF4DF24E56898F67884BD71D8D8ADAB1CCF6579B90EC14E
1F5988611E976891A28F9E859BE6FB9B728B72DF46767C44F14C80FCC7FA6501
6797FB13F823760D45B73758165DE651EC614F544845155F0FD83B664C176DAA
926FD934AF9F4A0FBD6BD5F5D05C03F715594994C493DAC2531CDF135B9CF9AE
9DFD615FD8FEA15D50F197CEE526F9E276E5AD6A5AC7C0A3FA6321D04E48201A
74D9CBB917D050137C1D00A0237CE52286E6F7088C92EB56761F15073F4FCF98
3F6EA0C32C4D31839293AAFD483A47F2A4947F29402D538DC5CE740B64DFD56E
6021B7C0EF14464B51131038BB04C169CE062A3D6E208DB0A920DD1304F0BC15
41B6A7EFF30669EEA7D7CDA2E553EEE917415D435B4FDB78466EFF082DD61517
19C331E36725A1250C59350A7A08E04B4382B640CE433BB0C9961E81373B9674
62257D5F9A76317BB06BAF9A3D6C4D6A6FF803803D0AF9E65EF9DE75F0055AE7
D19BA240182797D2B32246F16C09662BE027E3AB7A61EAD1C04DF8C53366D4A8
5175E4E45D0F4CD9548096D06E2994B6BF13F7A9C46B56C1B6E3EDD591612F74
AC6842B227A44B5017A05D5E47F7B2082ED8293E70BA00EE3AC945681EEE5B8E
A1120293A22CF962E060A671043817BD85280B83A388F2C0DFBA2962DE349866
2F0F1A3DB54CC25D1D3540ABD8E956CDE777689D316D3D3631A60C5ED0EDA3C6
2FE7B4734070CA73E177D6279B6E27C3CF0902DA5CA6E2C2281F879E29222BE2
0141C166D542B31F175724D3A8E838237AF553DBDE2B4241C613CF4D19836FAB
5F4B5957A6FEB46984B78E26180BA3E920C592414DE045983B33DB36B45EB92D
84404EB2DE6DE3022121F535D81B70674603B5B09F902FB993E978AC45D8398D
F0CB50032EA6C7E34256C57E26889376BFDDDA4B3061A61F5DCB1D2362723AB6
ACCD87432AC7178C4F3EBE0A1FB6498F586BC8D1A4272FCF11904BFD79939970
71478BBEE8B049FC20A9B28D7AD7A99E872A9EB20FD8269D40CA8DF9B076E69C
EFE3EFB31EB36CD6D6C80E33DB9098C5DD828DED2B5DB9BABF5EC09B3D021405
29197AA0700E5C02F3A7DFC502A3A3F64EA1C764C3998B0D34776D021471FE8C
18DF4A3F5BFFEB23AF51E12DFE733657BA7C13003A14195492AB7CB457EAF0BD
4CFBF08142EE7FD24E03637B459A9720992E51DBF6BD4E870A0063DB5D2CAF22
8E074BC9B800D974C06AD19614EB0F5846CC35E9C8E83A177A2A2EC28AD70061
4732F3FBAFE6D29C6F30A3C0D17E664BEDED021B8515D27E293C59832FAA241C
3B8B7CA0225176D5D1D94A6A2816C2461AD673225C9E5137A409334E304188E2
781EE58B9C9935E7B787C40A8D41D1603EDDA01AE075B9B4E86728F7959E81B2
AF5DEFC753A80DD9F82F86B5660C775C623F8D2B39DCEEAA8A98284C0FD01330
69906634FA7ECA39CB6EE5878889B011BF6B8EB198340ABA9F7F03CFB7C2DEF6
26285BB003C54706B5ED164C1EBCD2823EB86095774B7494BE2F9A98E6FBC5F1
2F5389C0B5EA705F5BEDB3BC52C9CF6A6877852BBFF54CAC9E87579E8A2FE578
1B7F645C421FE9A17271F32D3631828D60C6838B33D002D09ACAC4FF36D73305
BE7C7694082239DC409FB028303EA61032D582DB153772FA53F3E9D5D12E3BD7
C375797607C278CDB32A0060FBD4AA98AA8A48DD66E0F91A24A2DBC09DEF8C94
6669DDF28B7075378862371093E8A48952F09CDC0A4D0BB7330D36A9A6A229F4
63B7E7F170BD84F20047CC74E1C828B7212D40C02C51A7409C31F4186F0ECFA4
C8833553A532812835B21BA7834A06063138D07B5AF040C43259B5641DC10C41
7C8DA01BBB8FC8FF74B45707DC4D912DA8AD22DCCEEEC6E6E9E4FD1C61501D21
A910309DF960C42EA2EDB32B88639153CE940F489CB7F5975AA8B406DA2BD875
E597FD86C9DA71107B7C326715B0BE7B87B0A349F922381F393F27C80E5447AF
F4214C807C9FA1BD66202AEB68A131D063AC980CFF66BE9D9063C0F4441BFF33
DCEE2A1794B28EFEE408340C3FA42BFDDE098D68E0B8CAB0DDE4E68945C1299A
FF85666C75B51E4E99168679ABAEF5981F8549F6E11CDC0B796FC367AE8E7D5A
7D968267DB701BB94B4E28846743A9713774A8506DE873EA739C16168B8D2D1E
52BBB831670BE42A5596ADE0C2DC4869135113CD9038A3EC52100298ED31B241
CED0DF347CFFE735620A886D234FA5E9AA12C2D1B9004B442F666D85E93D49E4
070D4D652FB11329723398612EE5E71FCE05A6CB84051989B3B678EDEFD6B7F8
165A64055C22677DCCA0047FD4F2BC995ABBAD279F9323688991AAF6BEBA1846
25F1E1B088CF43E8620A0C0B74D0168CBD912C810D00D9E25A5BD760D3AC554A
B36D541E06FD6BB3E3C2AA8E1AEA6AC4EAFBA651FB40055065B43A2D7B3F99DA
A52E4C479F7076D5C3CF77526FF59FCF1208F9C7E9B5DBDF38F863EDDAF63D1B
34FB1EBDFB42EEFF2C755A0044C1A9DD6BDC78FC4CB11BDEEDF905161335EBAD
3225A6CF691191D88E3362495CBE42324CBBE3B14A73CEF43B595B877D7ACCD2
F59ACC5E8E49B395A5FF4274AC89A2FD8BA788CFA324F4FD76BD7A44DDC16F00
88830D55CB2F0093B9DE0DF976C5384F7DE77FEF4F565AE917B562770E442B6D
FEA46119118D3B83B0F66FEA146FCB1395A056C6195A255230AFD1B06A948F46
D6E1477773E3A2C138620463A7714071927473B30C64623A1EAEC6446C17185B
A3270D81352FBEE37AA230333F282E4770738C4EA8B0F48F815DA9F726733B07
368E570964C90540FB63EBA8FE68C1D54E965C4D8F99EC8C78B828247301D3DF
F320D777C99C0E93500469D901073DC3ED06B0F73FD210BF22A7241EFC2AF2FC
C2DA57585E60ED849759409514691BC6E78C69C2819FF67AB97538181BE40FBD
7C4B85EE9F5EF1970A9251B9E528F681C3ABB6705EFC045711355223EAFB1D18
7D1FD9184F17110F97D9D17A2FB5C1C3FB34A965E2C781E6D9C28C1DDE65747A
F8F4BD66C4F9FAB0D2926006CC548763D67FB0DE1C0E5F88446D6FA39892106B
063D892E77AC04BBD7B29843622763D0D99887124C74848F721176DE75E1537E
F69FEDCBDCF46A810D72243617AE985BBC333964D3ED3CF12639AF17762BD968
8FE1E6A05D9F3D8AF1E78FDDBC445F5E95BB7C0689B00B25491DDB6D867ABA4C
0544414C1DD16FA1EBE709D7ACE06BCA17934210C32A07C5BBE976434742522B
C9A6CACC8EBC85452A9F96047B41DFAA9B3C2C9833F0FC52FDBF0D3B678E257F
0A240E043F5838E6CF63BB8252CC7D5EBA69B796D126BB41A53BCD4F8642EA21
7B61EE3A7DE9DBD170372B72CF35172EC0763100168A6009407145D7148F7233
BD991325347C4599A56689BCB2474643F58C3B898D3358330FC6F7E0FB51D628
2BC2ED9D0848242F9C5DE49C03FB70AC400C501D394C7F1354E70E1ED34089D2
89A05C06EFEC8D4CD5F1EC89E5AAA18403CB12166373DD739FD818B276D7DF57
9BE310D143E52434459BCA5EB1D10DDA6A4E6188E5F88B7C73FAF13FF8DC9461
141AD1ECD71836029DD15C709DBCCEF8490D834DA175A5A4FA4D37DEA19DAB8D
EC15256E77DD116172E76C4D5945EA069A09C4FDF5D6FAB247C35ED0CDAE0093
867B0E659F36E9BAA5F7A5EAE2D3112D43CD2B834A6D01EB541EE5C2733F543E
6ED56F4F669CE875B37ADBA95F4BC86409D151712EC628DBE6D3D63A4208E827
A9C603DBACFC09A7397F1E0911D11159E34C6DE75E0384C1C0C1F5D7BE6D8D2D
AAAA8A07223B1A696FB51777C88E00AF3461A1C651E27AF40D2CEA13ABB3BF00
C09DABB57673F1B5DE5EBD3AD2BFE2230DF3DEB82BFFC4B5ECF924FC113A45F5
93AF4CBD7A5B677F0EADD4BA3717BC4E65F5058E72CAF78247585D70E748B5BE
09FF506FE52DEFB7C31E30C4222FF12AD72BB975876830964E613AAE63CA63B1
271C7CDBC7550FD082ECFACFA45E68A2450C55F67F0ACD4F444801AB0A4BD503
9D6A5E219541C8B4C8224FA8FEDE1AC32FAFC256754FDF6D0B6F4D49325F682D
12CC85F297A77F7706E2FFE7583ECA47D94F8838ED13834CF45967E1B0152552
F28A7E1FF58CD1CC41D804146E7864C26C89B5AAA8BB40ADCC2895811B90E70D
3B8F405D7E49189FAF68D05947517B3ABFB60F86A010C3421A90317218B678DD
680B6CF032B0049060C79028955548389666B5056D6F7B34B4D5B27CD6642D7B
2B57B63E1A6D58BE1B09EA91B0E2EF5F85ABDC86CBC3DD63156E36D1654A4CE9
9734691FF59A6E453611368E40AA4DB7FA3D97EE03D247B3F9743378C890CCAE
0309D2902E94DEBD2EC2DB78EA5818C7796AD334F06E9AB7D0C252FE9E16A5AD
6A1E19A4A3B9AA20D537E73C8372932C5F084E3ACB148D6DBB2A4A3391ED9413
CC72620135BE78818520E05C520D8D3D381197E60C68B47D24DA1009777F23C9
6B5500966960EFDEA1FBFAB6E088E23CC4B12602FB5D7825A9F6D04269C8385D
BED04B2939F016766B9AE899A68792593B52B5914EB09A09C4356C456524593C
CE7549314313A18329C309409328CEC7EAF07367D350EE6DBD4BC9EF341296F3
A22FE3C6919E96C614284C147E639BDD49CE848A1B5DC27A38E45462BE30340D
B40DF2D7BE4DE8714A35C7B2D554837012B8EF53EEAA0D70CB01B3B8E28E2025
3CB51C3C9B622C7BED7F213547C45AB270B583B733EAE07CB1E41E9B9F7A0A1F
09EE6EDDF55C77D8F43EED478AE30A8FDA1D5DECB8900A2C9163C559A5C37144
F43483B6729BC6863A15E57FBE92D6D093BCB08C7A3F3A29916AF5A43E21D2D6
16E9F866BF4990A20C6E7BBB78861B4722F6E34E2A9D9EECDE153164710F3E86
2E099E395BDE88B37A5800C2923115081D54F6468E7A8888AE9ED4C453750016
5A7E52FC12FDD0D1678A30CEC1BAD95089D0F28228461963660E98BACECDA37A
1E475844E76CAD9535EDF44DA88048D06B5CAB47F220C2A3EA25F6BDDF2B860F
EE7C30942043E8517757DBA2A84AF2EDF5E1168A833A154129081E58AD4C87C4
765FFB137B3DF3D97CEDA55BA1B94161E2A40A74B3C221526269C0A5F13D9FE8
B6646F87680D80E29210233FD0307CCD2A71BD7DE00FDE86B7B4E27C70B75DE0
05421B99C911E795DAE152231D9C8DCF8A1D38C24AE00D4571F6205C70DE6F2D
37536F7853C2A17DD95185CCB04020483227A114CFFB69832BEBF4F7F0CE198F
2E825AD26ED6532FD27F6D58311A05D9F7C1BC133204E53F1710CCC6C5180A01
1B785FE9B26561675BFE0170636744DD2CAFAA2EDA711FF8CC92A16546BB9132
79A8D2A691A147ED06042AE119592CD9B82EE9C74D63CAC666B143F0BD8AA203
BE7B17BD50E643905F30366B1A00A728A1AC19191C4EA439342925AAA122CBF0
640F65D245E11BDC24DDD6F0645CE5B7DB67AFEBB4274670AE353C9D800DA179
E63E69ECB679994C589224CEA91D064D9587E9896254157A028BEDB6BCC9B62C
07F0F9DD7317E8E01CED37C38D04980A0196D97DD0690E29276B6034A7992BB7
16EF50E2F4E4E762A81D33B02EE34E116BE30D94B1FC205719978F9FA8F07CD8
D72E412E2ECDEF683579D9B061373650C6921325EC59A51AE820CC722CBAD47E
444FB7E84EEE80DD092E7F6A22C3A47D96BBF2CA11CEEB91B3E45FC9356F3A99
FE7FE86D43D895268652721E5521AFDFB7F5ABE56A940A21A877897D8A95BBCE
FE3B64896BBD628C5C7C5F59FF3D4926BE8C0C4EBF7A023CEB69E9B8ED575975
823AE58ACBCA152A41B470C8C9ABF6C44AFF76CBDCEC4FCBA54CB3499AB18B9C
186B8F4E2938AD9252818DB5482CFBD54210622EB8937BB5A5B7E677A15D9787
54C639106FD92F3003FC06D7A66AD67C8789313C17ADF3E3B76F55C1D123057A
533EE652348A40266A62D28EF000A865939D3BA3EA0E7C7F96049B21A745ECFC
4FFA11C750E975867C64BBB683326A9BC8E9F248351AB032C42E2783B8F5602A
190B8BD48987AB87B746197A8A9930630BF329F0A3DAC15D4B4B8ABB72D8327D
2E34B733F33C062E427489B764F843CE08C69A62F43FEC421A2DB9F73AB99D72
CED78E1515F6A795AAABEFFFE0A19F5CBE75E66F6A2535AC5FB5779E1ABA7ECF
9FE2F8F8C4C4DC4A4E1A4FA742441E7E817AB3D9F6D1027D6EE6812DCDD1A927
B15F7EEBAF90D8688BD5C7753C5CC1074FAA4C7ED8F31C475947EFDB6356691D
8AD8AEC9022360A6B2F673B5742D5497A93451586FA3A8FF6E44437353EA1937
E04867D0D9A22E418521AB53BF169D09B26CB190F88D12C7B1F8694AA37DADD1
9E8BB835676D685B60F758F02E0D2DA3908993F8218B1717D31A71E372D9A21A
B8DA31B058E450877B967F3E5FF42E7817D4A11621EF4C44CA8420258CF7AD7A
BA791EB98EAB5E7641F2AF8363B57CEC6D73C3FC25841027D7DEB2D0F8CE8CF3
EA2371225C8E40645D7212765792CBE5CFB8253C656B171AF72CA3634FD67063
38BC3C66E10104E022BFC7D8561D77FE5E8786085285B92B1E948C8BB7FFED8A
CB252C50244F25D535FC59487DFE2BF5C2482D6E1F95C06497356F91EE3D96DC
AB797CB561232022A2C5C42D47136C11002E3718C338938EE02F0A16CDC1A1B9
A680378FBDC6C3361CCC4635AE95EEA71C1559F155390B9DC570EF6111FF9F71
4CB81D2C7BF683F5FEFC9BF9E8110CAA48ADCAA8CC2979AD76D4A32498A4F353
F0A1363AD8BA47113CF5F600C0F586B6D22D1B3F3121FE9C657F05201678308A
FCACBF83AF3235FE4503C7C156DAB68B0C8865EE00AE88B6F0DC2AA03508A25B
C1367521614255A0ED7DDE2A70D367F85F927B8D4BC245191501AF231908CF88
2BACDB1188A2B7FC74B02909C5D895987C7D5118533396A809F1BA5C98D3E1CA
82B91130354F435C0867399B9F389BBF8D93A25C246B4A0281320C9C1FA9D13A
B5D0DD0F04BAF039D6A0EA231F61FAB589469B3F8E13AC6483217F9844730F93
71CE52C4BBA58D1E27F715DDA72621A7B4BA306F37B155FD7D4FAEFA7BD066B8
653AFC6A44E353518334078D526733E6E15CAF2E573E1A1DF37E5982E45EF1C7
C38B60A42242CDE1C6CA9D19AA0DFF4917913EC304EA1907C441E8C054026CFF
F08EC17A49C0A921EFC2AACB0E587C38BF5691E998A091012EFAA5D7FBE4A2AE
B52C952DFF2A513B651BE69B88D423B74E1E4A4EE70859F17523097E8069D713
0630A8F144E58F57E2C9F7D3178B831BC01C5768A5899CC610CA6E257A1B4134
EC424B46BCEE288E639A15FE8B3132B8560C442EF33DAD79601AFFCA55EA9DD3
2A2BCCA4B519F9ACAB5B7CAE3C87C06D31172987EE74CB1E4D30C860110ADD36
EED5EDB870F364368B82A06125484BD082216ED2735CC853F5C0317EDAAA0393
BA30E10684C07FC4DD1FF051CE4B41E74854944B79116F3ED1EBB1876930401E
702ECB19522802CA9DD84EF340B6E2258AFD75C5AF5008983A55A9F07236DEA6
3A4AAABF6B3B6F48D65FB4661E65B301AD008AD2B4A575C1ED9E04177576E13F
5787BAB092C1A2643A6EC68F60EB09C55D3FBB6207D9928543157DAF5D442215
89C9ADD30B28A1A9DE8FD15E44C2C7ED9D5C9A802512DFD81C073C54CB1F1387
DD63A3E6B5FC0A9E6FC384ED4798201577828BD17AE9772BB13FF81BCBA11CD9
0C006C07510CF1E42A6888288E7A46C770041CEECB8389C51F4AA5A7E6FA7D2F
A56F0AB13D16B55F05A8E38F2ABDEF2DA168FE3B68AF34B4F459740878B01BC2
AADCF584D2AA6839D53A15DF6A9B0DA7D9E0085D619E02A9693A8F7E6A73AEB8
D5CE86CB8372F1A827989D0C561085063153DEE3CB20F7F73CAC392299166C84
00C9F6890412974AAF474410E23F1DD6E349640EA83B9AF497B7E1077200DDCC
D6D6297D5FFB42D5F9C6A1652162842109203E04EDF2C2C372F70ED1C03A4164
C2F334FBCA88F69ABB4638F27FB848143DF52594946F462BEF373AFA70151F74
AB3F8BD7129A060D36CBB125B6137BD7A51C0937123714F558B4F34AE8368A3A
C989D49E914F0E1ECC655CF8DBED047DAF1E38F13C83F42FE03C8199E20BA3C1
64B32892C0E8F48A0A64621C9914253A9A60D4015EE0A1BF7D9DD5AF14C12382
D903BCB21A4A444506E1D719DCF247365B09089054DA05C54069A49766A5A3ED
1992A74275879C817E4292F7B8CAA95722AC932F9E3018BF591A678CD3D8867A
0D0F6C40A299B1EE94CD2D725416818DE6772301E010F03A53E98DCB2BE56D87
43882D424EBA861E7E917A809F042941C5B1257B938AEF8DD58A0D510E0FFC94
999AE0ED9520AFF1DAE5B6607F33294BE7B8B81265861AA13FA0327BF6CB2C1D
772AA059ADF011BE106F4F79DC2CA72F8FACB7323927DA72ECFBEA04ADEFE109
ADE81A9E4FCB95F7589D1FA69261A12B12A8CB6A1585631C15ECA03D108CBD13
6AD478DF218CF62208AC57AE76C90BB12E612D12292183020F408294B6073991
FEAF8EF10475CDC30831D8C257BE6574270A4325FEE9493CA7DBB3D4CF9300D0
42258778C4BCCAC0B219F3B97FFE0DF7FD65BFA4AAF0374CF3EA03DE5854EF45
26060926274B079F207C0320BA32CB9CA7E83B0505D8DBEFACE4335F84780F8F
2E3DF49AB046CCFEB582A44833272BCDCB31A55662B1937402AAFCF6ABD5FE77
0DA80FED8B5C2B209B09712E439F3A5FEA065A0F2E7786E0057679EDD16C53D3
A1857D6521EA191F5850BD308FB09A46E09DA24A7B01A7CEA0DF1A6A71FCBD76
DB420DDDC4C3BBCE5543182AF7C678CFC0AC6BBF78A1D7BAA7FBDB61A75F24BD
86A9AB4CD300788BA6DDAD9A81E0E6A339FE769AB11F51D202D7766407F1D218
5CB7D50EE42F4F43D9F494E4EDD37B16D04ABCF59A51D693D52EDB2DD94D43DE
37C5E59F36057330A614CCE0CB17324814C0BF984089FB0EF8B63EAE625EDBDB
8CC27179E5314502C278A57196E506A368AC05EBBE8163DA5C7C62B52172E98A
222E8D6D8A90DCC64843C29D1B8B860E1B2BA71020B7A7D45B3FB61237313ACE
7A675F65F88FC221E9CE263C0E04F1616042CDFF5EA702EF48A35FDBFD57DC77
4B14626C64E35C09F5D5D488F78773C68AC26FF3E552304B2260FE926F41F2F7
D2382288A937A172582F20996FE823CB319F970D6CFF3D13CD1AB8DFD0B94B77
BA13D6555B19A243DB87DE46A7B16E29D4E7E729FBC2B663340B24D8F9AD473B
C957F396DEF14D571CBEE02071E0B72DD0A1D26B24F8EF8036F059110E47FC3D
D36EDA826C8C10DA582E301126A6E2F4233E731C31DC39FC1DE4F67D868E69D8
AABD0FFF6C55E6D71CC135335CFC7E1090E85C85A54B561C26DDFE478CF371A9
5959E002A2781CE610C49B76679724C1DC28D72EE4395DFA22C1F83334834C50
C6DD80635A60A4DA885347D5CA3EF0F98B22B8DE4B4539B557348D5958FCAE3E
2361D9EED9C8651C469C418437243D51798A815EF20F86E69726593A222C0428
4F1EDD0CBD13EE1E90FB4D432DF23D1E11D071D5FB925B4206F05D5E2C4CFE65
17F7CF2BEDB90054680CFCFC842519F83961804D0AF9632D68AD95BEEE6BC04D
70459C5C1E3DDE7FD53A45A6AA81557D026C0EB257C2953D1BE8D4999F058220
C266B275684A0451E0D1E4077BE03841F73B5D13BB237332DC0A2418B83205D5
6AFB2A503085B9296A7D76B3FC3D70FBEF1495AB52C7217A38CC1FC2EE464EEC
71F3817C6CF84AD83164EDA7FE3624950F5382A1F973C2A11EDFFC8E12898A34
69D7CC9BE6D30A77B9FEAA8CEC92CD83A02E9DA2C36A13BDA16AE7FCC8026AD8
788CBC823918A26579FE543FA340862998DEDDE89822A5C5137BAE53A82EB3C6
DB52BE15A564E3FE37EC33F7FF8C42BCD5D0DBF846B861DDD1833D119BD9A74B
B62A6B50EE203727A85164C7B6142BAF9BEE6BD4517AF91A6A53B1BC97BE2973
D328A97C3F608AC23F49C1C176B165E58702BBB039CDCE9DAC12B10FBC5294E4
169410C98D4300A50ECDD01E4FF522A4AF689768AD5FAA68E2CC351E719284CD
AC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (CorrigesTechno.dvi)
@start /Fa 130[34 34 34 34 122[{}4 76.3801 /Fourier-Math-Extension
rf /Fb 216[0 1[0 1[0 35[{}3 83.022 /XYBTIP-Medium rf
/Fc 216[0 1[0 1[0 35[{}3 83.022 /XYATIP-Medium rf /Fd
58[42 35[42 161[{}2 58.049 /Fourier-Math-Symbols rf /Fe
141[19 12[26 101[{ TeXBase1Encoding ReEncodeFont }2 49.6466
/Utopia-Regular rf /Ff 141[23 3[36 110[{ TeXBase1Encoding ReEncodeFont }
2 58.049 /Utopia-Italic rf /Fh 22[31 115[37 21 27 24
36 37 35 38 56 17 1[17 18 37 32 19 31 1[30 1[32 20[35
26[32 2[16 1[16 4[17 39[{ TeXBase1Encoding ReEncodeFont }24
61.1042 /Utopia-Regular rf /Fi 139[20 25 23 4[54 7[30
46[31 31 31 31 31 31 31 48[{ TeXBase1Encoding ReEncodeFont }12
58.049 /Utopia-Regular rf /Fj 242[83 13[{}1 83.022 /CMSY10
rf /Fk 205[36 36 49[{ TeXBase1Encoding ReEncodeFont }2
68.7422 /Utopia-Regular rf /Fl 177[58 78[{}1 83.022 /wasy10
rf /Fm 134[36 39 2[47 2[31 2[41 47 8[35 1[34 43 43 13[41
4[58 4[26 3[46 58 9[20 58[{ TeXBase1Encoding ReEncodeFont }16
76.3802 /Utopia-Italic rf /Fn 159[44 96[{}1 76.3802
/Fourier-Math-Letters-Italic rf /Fo 57[55 55 8[55 22[55
1[55 21 55 161[{}7 76.3802 /Fourier-Math-Symbols rf /Fp
4[46 16[39 39 39 38 6[40 22[46 13[34 15[34 14[67 6[31
8[78 17[37 39 37 1[38 46 26 33 30 45 46 44 47 70 21 40
21 22 46 40 24 39 46 38 46 40 6[47 3[48 1[47 41 49 1[46
58 60 72 43 50 27 27 1[56 44 46 60 52 49 49 1[30 1[44
1[20 20 40 40 40 40 40 40 40 40 40 40 35 20 30 20 44
1[27 27 21 1[64 33[47 47 2[{ TeXBase1Encoding ReEncodeFont }82
76.3802 /Utopia-Regular rf /Fq 22[40 40 111[40 1[40 48
28 34 34 46 47 45 49 72 24 2[24 48 41 1[40 46 38 46 42
14[52 1[50 1[56 7[45 48 59 1[52 7[21 43 43 43 43 43 43
43 43 43 43 1[21 46[{ TeXBase1Encoding ReEncodeFont }41
76.3802 /Utopia-Bold rf /Fr 22[57 57 114[69 41 49 48
1[68 64 70 104 34 2[35 3[57 67 1[67 60 12[69 3[71 11[85
17[62 62 49[{ TeXBase1Encoding ReEncodeFont }21 109.987
/Utopia-Bold rf /Fs 22[47 112[45 4[40 36 2[53 5[27 1[48
1[47 55 45 31[63 67[{ TeXBase1Encoding ReEncodeFont }11
91.6562 /Utopia-Regular rf /Ft 22[68 68 81[66 32[80 45
58 51 78 1[76 82 122 37 2[38 80 69 1[68 1[65 1[69 16[79
2[125 77[{ TeXBase1Encoding ReEncodeFont }20 131.985
/Utopia-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -254 -561 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-246 -246 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246
-246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246 -246
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Proportionnalit\351)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (Droites et suites de nombres)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -246
-246 a -246 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin H.S end
 -246 -246
a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray
0 TeXcolorgray 700 166 a Ft(M)n(ath\351matiques)30 b(\226)g(P)n(r)m
(emi\350r)m(e)h(technologique)1496 577 y Fs(C)o(orr)q(ig\351s)18
b(des)j(exer)n(cices)-246 937 y
SDict begin H.S end
 -246 937 a -246 937 a
SDict begin 18 H.A end

-246 937 a -246 937 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -246 937 a Fr(T)-10 b(able)22 b(des)h(mati\350r)n
(es)p 0 0 1 TeXcolorrgb -246 1120 a
SDict begin H.S end
 -246 1120 a Fq(1)67
b(P)o(ropor)q(tionnalit\351)472 1120 y
SDict begin 12 H.L end
 472 1120 a 472
1120 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 472 1120 a 0 TeXcolorgray 3631 w Fq(2)p 0 0 1
TeXcolorrgb -246 1293 a
SDict begin H.S end
 -246 1293 a Fq(2)g(D)o(roites)15
b(et)h(suites)g(de)g(nombr)o(es)871 1293 y
SDict begin 12 H.L end
 871 1293 a
871 1293 a
SDict begin [/Subtype /Link/Dest (section.2) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 871 1293 a 0 TeXcolorgray 3232 w Fq(4)p 0
TeXcolorgray 1930 5895 a Fp(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -246 -246 a 83 x Fr(1)105 b(P)o(r)o(opor)q(tionnalit\351)-246
-54 y
SDict begin H.S end
 -246 -54 a -246 -54 a
SDict begin 12 H.A end
 -246 -54 a -246 -54 a
SDict begin [/View [/XYZ H.V]/Dest (exo.1) cvn /DEST pdfmark end
 -246
-54 a -246 -69 a
SDict begin H.S end
 -246 -69 a -246 -69 a
SDict begin 12 H.A end
 -246 -69 a -246
-69 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -246 -69 a 0 TeXcolorgray 90 x Fq(Ex)o(er)o(cice)14
b(1)p 0 TeXcolorgray 0 TeXcolorgray 147 w Fp(1.)p 0 TeXcolorgray
42 w(On)j(compl\350te)i(un)f(tableau)g(de)f(propor)q(tionnalit\351)i(:)
p 0 TeXcolorgray 0 TeXcolorgray 1425 108 1258 4 v 1425
208 4 100 v 1478 178 a(\311l\350ves)p 2001 208 V 360
w(40)p 2340 208 V 268 w(?)p 2679 208 V 1425 211 1258
4 v 1425 311 4 100 v 1478 281 a(P)n(our)o(centage)p 2001
311 V 144 w(100)p 2340 311 V 219 w(70)p 2679 311 V 1425
314 1258 4 v -38 437 a(Il)e(y)f(a)i(40)10 b Fo(\243)g
Fp(70)g Fo(\245)g Fp(100)18 b Fo(\306)c Fp(28)k(gar)o(\347ons)f(dans)g
(la)h(classe)o(.)-246 471 y
SDict begin H.S end
 -246 471 a -246 471 a
SDict begin 12 H.A end
 -246
471 a -246 471 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -246 471 a 0 TeXcolorgray -141 566 a
Fp(2.)p 0 TeXcolorgray 43 w(On)f(compl\350te)i(un)f(tableau)g(de)f
(propor)q(tionnalit\351)i(:)p 0 TeXcolorgray 0 TeXcolorgray
1425 653 1258 4 v 1425 753 4 100 v 1478 723 a(M)o(ar)q(ins)p
2001 753 V 332 w(1)12 b(760)p 2340 753 V 167 w(1)g(046)p
2679 753 V 1425 756 1258 4 v 1425 856 4 100 v 1478 826
a(P)n(our)o(centage)p 2001 856 V 144 w(100)p 2340 856
V 228 w(?)p 2679 856 V 1425 859 1258 4 v -38 983 a(1)c(046)i
Fo(\243)g Fp(100)g Fo(\245)g Fp(1)e(760)20 b Fo(\274)15
b Fp(59,)8 b(43,)20 b(donc)d(environ)h(59,43)h(\045)e(des)h(mar)q(ins)f
(sont)h(tomb\351s)h(malades)o(.)-38 1147 y Fq(N.B.)f
Fp(On)e(fait)h(le)g(calcul)f(et,)h(seulement)i(apr\350s)o(,)f(on)e
(\351cr)q(it)g(la)h(r\351ponse)g(avec)g(le)f(symbole)h(\045.)g(R)o
(appelons)h(\340)e(cette)i(occasion)e(la)h(signi\002cation)-38
1246 y(de)g(59,43)j(\045)d(:)1604 1373 y(59,)8 b(43)19
b(\045)c Fo(\306)1969 1316 y Fp(59,)8 b(43)p 1969 1353
191 5 v 2003 1430 a(100)2183 1373 y Fo(\306)15 b Fp(0,)8
b(5943.)-38 1595 y(Donc)17 b(dir)o(e)f(que)i(59,43)i(\045)d(des)g(mar)q
(ins)h(sont)g(tomb\351s)g(malades)o(,)h(c)n('est)f(dir)o(e)f(que)g(la)h
(propor)q(tion)f(de)h(malades)g(est)3401 1539 y(59,)8
b(43)p 3401 1576 V 3435 1652 a(100)3601 1595 y(.)-246
1667 y
SDict begin H.S end
 -246 1667 a -246 1667 a
SDict begin 12 H.A end
 -246 1667 a -246 1667
a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -246 1667 a 0 TeXcolorgray -141 1747 a Fp(3.)p 0 TeXcolorgray
43 w(Le)22 b(fait)h(que)f(la)h(bouteille)g(soit)g(titr\351e)g(\340)e
(12)i(\045)f(vol.)h(signi\002e)f(qu)n('elle)h(contient)h(12)e(\045)g(d)
n('alcool)h(pur)-5 b(.)23 b(On)e(compl\350te)j(donc)e(un)g(tableau)h
(de)-38 1847 y(propor)q(tionnalit\351)c(:)p 0 TeXcolorgray
0 TeXcolorgray 1366 1934 1376 4 v 1366 2033 4 100 v 1419
2004 a(V)-5 b(olume)19 b(\(en)f(mL\))p 2060 2033 V 141
w(500)p 2399 2033 V 228 w(?)p 2738 2033 V 1366 2037 1376
4 v 1366 2136 4 100 v 1419 2106 a(P)n(our)o(centage)p
2060 2136 V 262 w(100)p 2399 2136 V 219 w(12)p 2738 2136
V 1366 2140 1376 4 v -38 2263 a(La)f(bouteille)i(contient)g(500)10
b Fo(\243)g Fp(12)g Fo(\245)g Fp(100)19 b Fo(\306)14
b Fp(60)k(mL)g(d)n('alcool)g(pur)-5 b(.)-246 2295 y
SDict begin H.S end
 -246
2295 a -246 2295 a
SDict begin 12 H.A end
 -246 2295 a -246 2295 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -246 2295
a 0 TeXcolorgray -141 2392 a Fp(4.)p 0 TeXcolorgray 43
w(S)n(ur)18 b(100)g(personnes)h(de)e(l)o('entr)o(epr)q(ise)o(,)i(il)f
(y)f(a)g(56)h(hommes)o(.)-38 2506 y(25)g(\045)f(d)n('entr)o(e)h(eux)g
(fument,)h(ce)e(qui)h(r)o(epr\351sente)1566 2689 y(25)10
b Fo(\243)g Fp(56)g Fo(\245)g Fp(100)18 b Fo(\306)d Fp(14)j(personnes)
-38 2871 y(\(on)f(peut)i(bien)e(s\373r)h(fair)o(e)f(un)h(tableau)g(de)f
(propor)q(tionnalit\351)h(pour)g(obtenir)g(cette)g(r\351ponse\).)-38
2985 y(C)o(onclusion)h(:)f(les)g(hommes)h(fumeurs)g(r)o(epr\351sentent)
g(14)f(\045)f(du)g(personnel)i(de)e(l)o('entr)o(epr)q(ise)o(.)-246
3069 y
SDict begin H.S end
 -246 3069 a -246 3069 a
SDict begin 12 H.A end
 -246 3069 a -246 3069
a
SDict begin [/View [/XYZ H.V]/Dest (exo.2) cvn /DEST pdfmark end
 -246 3069 a -246 3087 a
SDict begin H.S end
 -246 3087 a -246 3087 a
SDict begin 12 H.A end
 -246
3087 a -246 3087 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -246 3087 a 0 TeXcolorgray 97 x Fq(Ex)o(er)o(cice)d
(2)p 0 TeXcolorgray 0 TeXcolorgray 147 w Fp(1.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1435 3240 1239 4 v 1435
3340 4 100 v 1488 3310 a(N)n(ombr)o(e)i(de)h(personnes)p
2302 3340 V 145 w(4)p 2526 3340 V 144 w(6)p 2670 3340
V 1435 3343 1239 4 v 1435 3443 4 100 v 1653 3413 a(F)l(ar)q(ine)h(\(en)
f(g\))p 2302 3443 V 268 w(250)p 2526 3443 V 114 w(?)p
2670 3443 V 1435 3446 1239 4 v 1435 3546 4 100 v 1660
3516 a(Lait)h(\(en)f(mL\))p 2302 3546 V 276 w(500)p 2526
3546 V 114 w(?)p 2670 3546 V 1435 3549 1239 4 v 1435
3649 4 100 v 1779 3619 a(\214ufs)p 2302 3649 V 435 w(4)p
2526 3649 V 144 w(6)p 2670 3649 V 1435 3652 1239 4 v
-38 3761 a(P)n(our)g(6)g(personnes)o(,)j(il)e(faut)g(250)10
b Fo(\243)g Fp(6)g Fo(\245)g Fp(4)17 b Fo(\306)d Fp(375)19
b(g)e(de)g(far)q(ine)o(,)g(500)10 b Fo(\243)g Fp(6)g
Fo(\245)g Fp(4)17 b Fo(\306)e Fp(750)j(mL)g(de)g(lait)f(et,)h(bien)g
(s\373r)-5 b(,)18 b(6)g(\234ufs)o(.)-246 3794 y
SDict begin H.S end
 -246
3794 a -246 3794 a
SDict begin 12 H.A end
 -246 3794 a -246 3794 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -246 3794
a 0 TeXcolorgray -141 3890 a Fp(2.)p 0 TeXcolorgray 43
w(Les)g(6)g(yaour)q(ts)f(p\350sent)i(6)10 b Fo(\243)g
Fp(125)16 b Fo(\306)e Fp(750)19 b(g.)p 0 TeXcolorgray
0 TeXcolorgray 1541 3978 1027 4 v 1541 4078 4 100 v 1594
4048 a(masse)f(\(en)g(g\))p 2074 4078 V 102 w(1000)p
2339 4078 V 105 w(750)p 2563 4078 V 1541 4081 1027 4
v 1541 4181 4 100 v 1625 4151 a(pr)q(ix)f(\(en)h Fl(N)p
Fp(\))p 2074 4181 V 194 w(2)p 2339 4181 V 214 w(?)p 2563
4181 V 1541 4184 1027 4 v -38 4308 a(J)n(e)f(payer)o(ai)g(750)10
b Fo(\243)g Fp(2)g Fo(\245)g Fp(1)e(000)19 b Fo(\306)14
b Fp(1,)8 b(5)19 b Fl(N)o Fp(.)-246 4393 y
SDict begin H.S end
 -246 4393
a -246 4393 a
SDict begin 12 H.A end
 -246 4393 a -246 4393 a
SDict begin [/View [/XYZ H.V]/Dest (exo.3) cvn /DEST pdfmark end
 -246 4393 a 0 TeXcolorgray
114 x Fq(Ex)o(er)o(cice)14 b(3)p 0 TeXcolorgray 42 w
Fp(L)-10 b('\351nonc\351)18 b(donne)g(les)g(infor)q(mations)h(r)o
(ecens\351es)f(dans)g(le)f(tableau)h(ci-dessous)h(et)e(demande)h(de)f
(compl\351ter)i(la)e(case)3744 4504 y Fk(1)3721 4507
y Fj(\015)p Fp(.)p 0 TeXcolorgray 0 TeXcolorgray 1525
4619 850 4 v 1525 4718 4 100 v 1593 4688 a(F)o(lor)q(ins)p
1898 4718 V 118 w(7)p 2042 4718 V 113 w(?)p 2185 4718
V 2262 4685 a Fk(1)2238 4688 y Fj(\015)p 2371 4718 V
1525 4722 850 4 v 1525 4821 4 100 v 1581 4791 a Fp(Pistoles)p
1898 4821 V 107 w(6)p 2042 4821 V 1 0 0 TeXcolorrgb 103
w(4)p 0 TeXcolorgray 2185 4821 V 0 TeXcolorgray 2262
4788 a Fk(2)p 0 TeXcolorgray 2238 4791 a Fj(\015)p 2371
4821 V 1525 4825 850 4 v 1525 4924 4 100 v 1579 4894
a Fp(Deniers)p 1898 4924 V 112 w(?)p 2042 4924 V 1 0 0
TeXcolorrgb 104 w(5)p 0 TeXcolorgray 2185 4924 V 1 0 0
TeXcolorrgb 104 w(30)p 0 TeXcolorgray 2371 4924 V 1525
4927 850 4 v -246 5076 a(On)h(compl\350te)h(d)n('abor)o(d)d(la)h(case)
774 5073 y Fk(2)751 5076 y Fj(\015)g Fp(:)g(en)h(\351change)g(de)f(30)h
(deniers)o(,)g(on)g(a)f(4)10 b Fo(\243)g Fp(30)g Fo(\245)g
Fp(5)17 b Fo(\306)d Fp(24)k(pistoles)h(:)p 0 TeXcolorgray
0 TeXcolorgray 1525 5189 V 1525 5288 4 100 v 1593 5259
a(F)o(lor)q(ins)p 1898 5288 V 1 0 0 TeXcolorrgb 118 w(7)p
0 TeXcolorgray 2042 5288 V 113 w(?)p 2185 5288 V 0 TeXcolorgray
2262 5256 a Fk(1)p 0 TeXcolorgray 2238 5259 a Fj(\015)p
2371 5288 V 1525 5292 850 4 v 1525 5391 4 100 v 1581
5361 a Fp(Pistoles)p 1898 5391 V 1 0 0 TeXcolorrgb 107
w(6)p 0 TeXcolorgray 2042 5391 V 103 w(4)p 2185 5391
V 1 0 0 TeXcolorrgb 104 w(24)p 0 TeXcolorgray 2371 5391
V 1525 5395 850 4 v 1525 5494 4 100 v 1579 5464 a(Deniers)p
1898 5494 V 112 w(?)p 2042 5494 V 104 w(5)p 2185 5494
V 104 w(30)p 2371 5494 V 1525 5498 850 4 v -246 5646
a(On)f(peut)g(alors)g(compl\351ter)g(la)g(case)879 5643
y Fk(1)855 5646 y Fj(\015)g Fp(:)f(en)h(\351change)f(de)h(30)g(deniers)
o(,)g(on)g(a)f(7)10 b Fo(\243)g Fp(24)g Fo(\245)g Fp(6)17
b Fo(\306)d Fp(28)k(\003or)q(ins)o(.)-246 5731 y
SDict begin H.S end
 -246
5731 a -246 5731 a
SDict begin 12 H.A end
 -246 5731 a -246 5731 a
SDict begin [/View [/XYZ H.V]/Dest (exo.4) cvn /DEST pdfmark end
 -246 5731
a 0 TeXcolorgray 1930 5895 a Fp(2)p 0 TeXcolorgray eop
end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 83 x Fq(Ex)o(er)o(cice)14
b(4)p 0 TeXcolorgray 0 TeXcolorgray 147 w Fp(1.)p 0 TeXcolorgray
42 w(G\351n\351r)o(alement,)20 b(dans)d(ce)h(type)f(de)h(question,)h
(il)f(vaut)f(mieux)i(conver)q(tir)e(en)h(minutes)p 0 0 1
TeXcolorrgb 2973 -163 a
SDict begin H.S end
 2973 -163 a -30 x Fi(1)3010 -163
y
SDict begin 12 H.L end
 3010 -163 a 3010 -163 a
SDict begin [/Subtype /Link/Dest (Hfootnote.1) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3010 -163 a 0 TeXcolorgray
Fp(.)p 0 TeXcolorgray 0 TeXcolorgray 1528 -86 1051 4
v 1528 13 4 100 v 1605 -17 a(temps)h(\(en)e(min\))p 2208
13 V 127 w(60)p 2392 13 V 134 w(?)p 2576 13 V 1528 17
1051 4 v 1528 116 4 100 v 1582 86 a(distance)g(\(en)h(km\))p
2208 116 V 103 w(20)p 2392 116 V 104 w(45)p 2576 116
V 1528 119 1051 4 v -38 230 a(On)f(mettr)o(a)h(60)10
b Fo(\243)g Fp(45)g Fo(\245)g Fp(20)18 b Fo(\306)c Fp(135)19
b(min,)g(soit)f(2)f(h)h(15)g(min)g(\(puisque)h(135)d
Fo(\306)e Fp(120)c Fo(\305)g Fp(15\).)-246 259 y
SDict begin H.S end
 -246
259 a -246 259 a
SDict begin 12 H.A end
 -246 259 a -246 259 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -246 259 a 0 TeXcolorgray
-141 353 a Fp(2.)p 0 TeXcolorgray 43 w(On)17 b(peut)i(se)e(passer)h(d)n
('un)g(tableau)g(de)f(propor)q(tionnalit\351)i(:)e(1)h(h)d
Fo(\306)f Fp(60)k(min)q(,)f(donc)g(0,)8 b(6)19 b(h)c
Fo(\306)f Fp(0,)8 b(6)i Fo(\243)g Fp(60)20 b(min)15 b
Fo(\306)f Fp(36)k(min)q(.)-246 382 y
SDict begin H.S end
 -246 382 a -246
382 a
SDict begin 12 H.A end
 -246 382 a -246 382 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -246 382 a -246 382 a
SDict begin H.S end
 -246
382 a -246 382 a
SDict begin 12 H.A end
 -246 382 a -246 382 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -246 382 a 0 TeXcolorgray
-141 476 a Fp(3.)p 0 TeXcolorgray 0 TeXcolorgray 91 w(\(a\))p
0 TeXcolorgray 41 w(On)f(compl\350te)i(deux)e(tableaux)h(de)g(propor)q
(tionnalit\351)g(\(on)g(tr)o(availle)g(en)g(min)g(et)g(en)f(km\))h(:)p
0 TeXcolorgray 0 TeXcolorgray 589 584 1072 4 v 589 684
4 100 v 665 654 a(temps)h(\(en)e(min\))p 1268 684 V 127
w(60)p 1452 684 V 144 w(?)p 1656 684 V 589 687 1072 4
v 589 787 4 100 v 642 757 a(distance)h(\(en)f(km\))p
1268 787 V 123 w(3)p 1452 787 V 124 w(0,5)p 1656 787
V 589 790 1072 4 v 0 TeXcolorgray 0 TeXcolorgray 2661
584 1011 4 v 2661 684 4 100 v 2737 654 a(temps)i(\(en)f(min\))p
3341 684 V 127 w(60)p 3525 684 V 113 w(?)p 3668 684 V
2661 687 1011 4 v 2661 787 4 100 v 2714 757 a(distance)g(\(en)f(km\))p
3341 787 V 104 w(15)p 3525 787 V 104 w(5)p 3668 787 V
2661 790 1011 4 v 145 949 a(S)n(t\351phane)i(nage)e(60)10
b Fo(\243)g Fp(0,)e(5)i Fo(\245)g Fp(3)18 b Fo(\306)c
Fp(10)k(min,)h(puis)f(il)g(cour)q(t)f(60)10 b Fo(\243)g
Fp(5)g Fo(\245)g Fp(15)17 b Fo(\306)d Fp(20)19 b(min.)-246
979 y
SDict begin H.S end
 -246 979 a -246 979 a
SDict begin 12 H.A end
 -246 979 a -246 979 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -246
979 a 0 TeXcolorgray 4 1071 a Fp(\(b\))p 0 TeXcolorgray
41 w(S)n(t\351phane)g(a)e(par)o(cour)q(u)g(un)g(total)h(de)g(5)10
b Fo(\305)g Fp(0,)e(5)16 b Fo(\306)e Fp(5,)8 b(5)19 b(km,)f(en)f(10)10
b Fo(\305)g Fp(20)17 b Fo(\306)d Fp(30)k(min.)p 0 TeXcolorgray
0 TeXcolorgray 1610 1146 1072 4 v 1610 1245 4 100 v 1686
1215 a(temps)h(\(en)e(min\))p 2289 1245 V 137 w(30)p
2493 1245 V 114 w(60)p 2677 1245 V 1610 1249 1072 4 v
1610 1348 4 100 v 1663 1318 a(distance)h(\(en)f(km\))p
2289 1348 V 103 w(5,5)p 2493 1348 V 134 w(?)p 2677 1348
V 1610 1351 1072 4 v 145 1462 a(La)g(vitesse)i(mo)n(yenne)f(de)f(S)n
(t\351phane)j(sur)d(l)o('ensemble)j(de)d(son)h(par)o(cours)f(est)h
(donc)f(60)10 b Fo(\243)g Fp(5,)e(5)i Fo(\245)g Fp(30)18
b Fo(\306)c Fp(11)k(km/h.)-246 1542 y
SDict begin H.S end
 -246 1542 a -246
1542 a
SDict begin 12 H.A end
 -246 1542 a -246 1542 a
SDict begin [/View [/XYZ H.V]/Dest (exo.5) cvn /DEST pdfmark end
 -246 1542 a 0 TeXcolorgray
109 x Fq(Ex)o(er)o(cice)c(5)p 0 TeXcolorgray 42 w Fp(A)-5
b(vant)23 b(de)f(commencer)-5 b(,)25 b(il)e(est)h(utile)g(de)f(se)g(r)o
(appeler)h(que)g(10)g(cm=1)f(dm)9 b(;)23 b(et)g(que)g(1)h
Fn(`)19 b Fo(\306)h Fp(1)j(dm)3079 1618 y Fi(3)3114 1651
y Fp(.)g(A)n(utr)o(ement)h(dit,)f(un)g(litr)o(e)g(est)h(le)-246
1751 y(volume)d(d)n('un)f(cube)f(qui)h(mesur)o(e)f(1)h(dm)f(sur)h(1)f
(dm)g(sur)h(1)f(dm,)h(ou)f(encor)o(e)g(10)h(cm)g(sur)f(10)h(cm)f(sur)h
(10)g(cm)f(\(la)g(\002gur)o(e)f(ci-dessous)j(n)-6 b('est)20
b(bien)f(s\373r)-246 1850 y(pas)f(\340)f(l)o('\351chelle\).)p
0 TeXcolorgray 0 TeXcolorgray 1260 3032 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 166.1639 a add def
/d 0.0 a add neg def /h 131.45152 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1260 3032 a
1596 2767 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 56.90549 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 56.90549 56.90549 56.90549   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 0.0 0.0 56.90549   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 85.35823 0.0 56.90549   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 28.45274 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 56.90549 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 28.45274 56.90549 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 28.45274 85.35823 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1596 2767 a
tx@Dict begin { 16.50264 -4.55254 } PutCoor PutBegin  end
 1596 2767 a 57 x Fp(1)g(dm)1596 2767 y
tx@Dict begin  PutEnd  end
 1596
2767 a 1596 2767 a
tx@Dict begin { -28.45274 32.4361 } PutCoor PutBegin  end
 1596 2767 a 57 x Fp(1)g(dm)1596 2767
y
tx@Dict begin  PutEnd  end
 1596 2767 a 1596 2767 a
tx@Dict begin { 76.82231 14.79555 } PutCoor PutBegin  end
 1596 2767 a 57 x Fp(1)g(dm)1596
2767 y
tx@Dict begin  PutEnd  end
 1596 2767 a 1596 2767 a
tx@Dict begin { 26.17647 35.28156 } PutCoor PutBegin  end
 1596 2767 a 57 x Fp(1)g
Fn(`)1596 2767 y
tx@Dict begin  PutEnd  end
 1596 2767 a 2640 3032 a
currentpoint initclip moveto
 2640 3032 a
-246 3239 a Fp(On)g(r)o(emplit)h(d)n('eau)g(un)f(aquar)q(ium)h(r)o
(ectangulair)o(e)e(dont)h(la)h(largeur)e(est)i(80)f(cm,)h(la)f
(profondeur)g(30)h(cm)f(et)h(la)f(hauteur)h(40)g(cm.)f(On)g(dispose)h
(d)n('un)-246 3339 y(robinet)f(dont)h(le)g(d\351bit)f(est)h(de)f(6)h
(litr)o(es)g(par)f(minute)o(.)-246 3379 y
SDict begin H.S end
 -246 3379 a
-246 3379 a
SDict begin 12 H.A end
 -246 3379 a -246 3379 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -246 3379 a 0 TeXcolorgray
-141 3473 a Fp(1.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
994 4699 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 255.20395 a add def
/d 0.0 a add neg def /h 141.11893 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 994 4699 a 910 4719 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.39554 21.33955 42.67911 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.39554 106.69777 213.39554 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.67911 106.69777 42.67911 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.39554 106.69777 42.67911 106.69777
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35822 128.03732 42.67911 106.69777
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 128.03732 85.35822 128.03732
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 128.03732 213.39554 106.69777
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 42.67911 213.39554 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 128.03732 256.07465 42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35822 42.67911 85.35822 128.03732
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35822 42.67911 42.67911 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 42.67911 85.35822 42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 910 4719 a
tx@Dict begin { 122.08083 17.51845 } PutCoor PutBegin  end
 910 4719 a 57 x Fp(8)h(dm)910
4719 y
tx@Dict begin  PutEnd  end
 910 4719 a 910 4719 a
tx@Dict begin { 19.8912 68.34283 } PutCoor PutBegin  end
 910 4719 a 57 x Fp(4)g(dm)910
4719 y
tx@Dict begin  PutEnd  end
 910 4719 a 910 4719 a
tx@Dict begin { 236.70636 31.57625 } PutCoor PutBegin  end
 910 4719 a 57 x Fp(3)g(dm)910
4719 y
tx@Dict begin  PutEnd  end
 910 4719 a 3113 4699 a
currentpoint initclip moveto
 3113 4699 a -246 4733 a
SDict begin H.S end

-246 4733 a -246 4733 a
SDict begin 12 H.A end
 -246 4733 a -246 4733 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -246
4733 a 0 TeXcolorgray -141 4844 a Fp(2.)p 0 TeXcolorgray
43 w(Les)g(dimensions)h(de)e(l)o('aquar)q(ium)i(sont)f(:)1025
5009 y(largeur)c Fo(\306)g Fp(8)k(dm,)155 b(profondeur)14
b Fo(\306)g Fp(3)k(dm,)155 b(hauteur)15 b Fo(\306)f Fp(4)k(dm,)-38
5174 y(donc)f(son)h(volume)h(est)1795 5273 y(8)10 b Fo(\243)g
Fp(3)g Fo(\243)g Fp(4)16 b Fo(\306)e Fp(96)19 b Fn(`)p
Fp(.)-246 5313 y
SDict begin H.S end
 -246 5313 a -246 5313 a
SDict begin 12 H.A end
 -246 5313 a
-246 5313 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -246 5313 a 0 TeXcolorgray -141 5423 a Fp(3.)p
0 TeXcolorgray 43 w(On)h(peut)i(se)f(passer)g(d)n('un)g(tableau)g(de)f
(propor)q(tionnalit\351)i(:)e(le)h(d\351bit)g(du)f(robinet)g(est)h(de)f
(6)h Fn(`)p Fp(/min,)h(donc)e(il)h(faut)g(96)11 b Fo(\245)g
Fp(6)19 b Fo(\306)f Fp(16)j(min)g(pour)-38 5523 y(r)o(emplir)d(les)g
(96)g Fn(`)f Fp(de)g(l)o('aquar)q(ium.)p 0 TeXcolorgray
-246 5569 1757 4 v -154 5646 a Fh(1)q(.)p 0 TeXcolorgray
-76 5646 a
SDict begin H.S end
 -76 5646 a -76 5646 a
SDict begin H.R end
 -76 5646 a -76 5646
a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.1) cvn /DEST pdfmark
end
 -76 5646 a 0 TeXcolorgray Fh(Les)d(calculs)g(ne)g(sont)f(pas)h
(toujours)g(plus)f(faciles)i(en)f(minutes)f(qu)n('en)i(heur)o(es)o(,)f
(mais)g(c)n('est)g(g\351n\351r)o(alement)h(le)g(cas)o(.)p
0 TeXcolorgray 0 TeXcolorgray 1930 5895 a Fp(3)p 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 -246 -246 a 83 x Fr(2)105 b(D)o(r)o(oites)24 b(et)f(suites)f(de)
h(nombr)n(es)-246 -78 y
SDict begin H.S end
 -246 -78 a -246 -78 a
SDict begin 12 H.A end
 -246 -78
a -246 -78 a
SDict begin [/View [/XYZ H.V]/Dest (exo.6) cvn /DEST pdfmark end
 -246 -78 a 0 TeXcolorgray 99 x Fq(Ex)o(er)o(cice)14
b(6)p 0 TeXcolorgray 42 w Fp(Le)21 b(tableau)h(suivant)g(donne)f(l)o
('\351volution)j(du)d(tir)o(age)g(jour)q(nalier)h(\(en)g(millions)h(d)n
('exemplair)o(es\))f(de)f(la)g(pr)o(esse)h(quotidienne)h(d)n('in-)-246
121 y(for)q(mation)18 b(g\351n\351r)o(ale)h(et)e(politique)j(en)e(F)o
(r)o(ance)o(.)p 0 TeXcolorgray 0 TeXcolorgray -246 217
4392 4 v -246 317 4 100 v -193 287 a(Ann\351e)p 330 317
V 604 w(2010)p 1092 317 V 602 w(2011)p 1855 317 V 603
w(2012)p 2617 317 V 602 w(2013)p 3380 317 V 603 w(2014)p
4142 317 V -246 320 4392 4 v -246 520 4 200 v -193 390
a(N)n(um\351ro)-193 490 y(ann\351e)h(:)e Fm(n)p 330 520
V 692 440 a Fp(0)p 1092 520 V 723 w(1)p 1855 520 V 722
w(2)p 2617 520 V 723 w(3)p 3380 520 V 722 w(4)p 4142
520 V -246 523 4392 4 v -246 622 4 100 v -193 593 a(T)m(ir)o(age)i(:)e
Fm(u)126 605 y Ff(n)p 330 622 V 642 593 a Fp(1,80)p 1092
622 V 622 w(1,73)p 1855 622 V 623 w(1,60)p 2617 622 V
622 w(1,47)p 3380 622 V 623 w(1,36)p 4142 622 V -246
626 4392 4 v 3593 696 a Fm(Sour)o(ce)f(:)i(INSEE)-246
857 y Fp(On)g(note)g Fm(u)100 869 y Ff(n)161 857 y Fp(le)f(tir)o(age)h
(jour)q(nalier)g(en)g(millions)h(d)n('exemplair)o(es)g(pour)f(l)o
('ann\351e)h(num\351ro)f Fm(n)t Fp(.)g(On)f(a)g(donc)g(:)p
0 TeXcolorgray -76 1000 a(\225)p 0 TeXcolorgray 42 w
Fm(u)46 1012 y Fi(0)96 1000 y Fo(\306)d Fp(tir)o(age)j(jour)q(nalier)h
(l)o('ann\351e)h(0)c Fo(\306)f Fp(1,)8 b(80)19 b(;)p
0 TeXcolorgray -76 1099 a(\225)p 0 TeXcolorgray 42 w
Fm(u)46 1111 y Fi(1)96 1099 y Fo(\306)14 b Fp(tir)o(age)j(jour)q
(nalier)h(l)o('ann\351e)h(1)c Fo(\306)f Fp(1,)8 b(73)19
b(;)p 0 TeXcolorgray -76 1199 a(\225)p 0 TeXcolorgray
42 w Fm(u)46 1211 y Fi(4)96 1199 y Fo(\306)14 b Fp(tir)o(age)j(jour)q
(nalier)h(l)o('ann\351e)h(4)c Fo(\306)f Fp(1,)8 b(36.)-246
1279 y
SDict begin H.S end
 -246 1279 a -246 1279 a
SDict begin 12 H.A end
 -246 1279 a -246 1279
a
SDict begin [/View [/XYZ H.V]/Dest (exo.7) cvn /DEST pdfmark end
 -246 1279 a 0 TeXcolorgray 109 x Fq(Ex)o(er)o(cice)14
b(7)p 0 TeXcolorgray 42 w Fm(u)21 b Fp(est)d(la)g(suite)g(des)f
(multiples)k(de)c(4,)h(en)f(par)q(tant)h(de)f Fm(u)1788
1400 y Fi(0)1838 1388 y Fo(\306)d Fp(4)c Fo(\243)g Fp(0)16
b Fo(\306)e Fp(0.)-246 1429 y
SDict begin H.S end
 -246 1429 a -246 1429 a
SDict begin 12 H.A end

-246 1429 a -246 1429 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -246 1429 a 0 TeXcolorgray -141
1523 a Fp(1.)p 0 TeXcolorgray 0 TeXcolorgray 88 w(\225)p
0 TeXcolorgray 42 w Fm(u)129 1535 y Fi(1)179 1523 y Fo(\306)g
Fp(4)c Fo(\243)g Fp(1)15 b Fo(\306)f Fp(4)k(;)p 0 TeXcolorgray
7 1622 a(\225)p 0 TeXcolorgray 42 w Fm(u)129 1634 y Fi(2)179
1622 y Fo(\306)c Fp(4)c Fo(\243)g Fp(2)15 b Fo(\306)f
Fp(8)k(;)p 0 TeXcolorgray 7 1722 a(\225)p 0 TeXcolorgray
42 w Fm(u)129 1734 y Fi(3)179 1722 y Fo(\306)c Fp(4)c
Fo(\243)g Fp(3)15 b Fo(\306)f Fp(12.)-246 1747 y
SDict begin H.S end
 -246
1747 a -246 1747 a
SDict begin 12 H.A end
 -246 1747 a -246 1747 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -246 1747
a 0 TeXcolorgray -141 1845 a Fp(2.)p 0 TeXcolorgray 43
w Fm(u)11 1857 y Fi(20)92 1845 y Fo(\306)g Fp(4)c Fo(\243)g
Fp(20)16 b Fo(\306)e Fp(80.)-246 1919 y
SDict begin H.S end
 -246 1919 a -246
1919 a
SDict begin 12 H.A end
 -246 1919 a -246 1919 a
SDict begin [/View [/XYZ H.V]/Dest (exo.8) cvn /DEST pdfmark end
 -246 1919 a 0 TeXcolorgray
115 x Fq(Ex)o(er)o(cice)g(8)p 0 TeXcolorgray 42 w Fm(u)21
b Fp(est)d(une)g(suite)h(telle)f(que)g(:)p 0 TeXcolorgray
-76 2134 a(\225)p 0 TeXcolorgray 42 w Fm(u)46 2146 y
Fi(0)96 2134 y Fo(\306)c Fp(2,)p 0 TeXcolorgray -76 2234
a(\225)p 0 TeXcolorgray 42 w(tout)k(ter)q(me)g(de)f(la)g(suite)i(se)e
(d\351duit)h(du)f(pr\351c\351dent)h(en)g(ajoutant)h(3.)-246
2276 y
SDict begin H.S end
 -246 2276 a -246 2276 a
SDict begin 12 H.A end
 -246 2276 a -246 2276
a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -246 2276 a 0 TeXcolorgray -141 2368 a Fp(1.)p 0 TeXcolorgray
0 TeXcolorgray 88 w(\225)p 0 TeXcolorgray 42 w Fm(u)129
2380 y Fi(1)179 2368 y Fo(\306)14 b Fp(3)c Fo(\305)g
Fp(2)15 b Fo(\306)f Fp(5)k(;)p 0 TeXcolorgray 7 2468
a(\225)p 0 TeXcolorgray 42 w Fm(u)129 2480 y Fi(2)179
2468 y Fo(\306)c Fp(5)c Fo(\305)g Fp(3)15 b Fo(\306)f
Fp(8)k(;)p 0 TeXcolorgray 7 2567 a(\225)p 0 TeXcolorgray
42 w Fm(u)129 2579 y Fi(3)179 2567 y Fo(\306)c Fp(8)c
Fo(\305)g Fp(3)15 b Fo(\306)f Fp(11)19 b(;)p 0 TeXcolorgray
7 2667 a(\225)p 0 TeXcolorgray 42 w Fm(u)129 2679 y Fi(4)179
2667 y Fo(\306)14 b Fp(11)c Fo(\305)g Fp(3)16 b Fo(\306)e
Fp(14.)-246 2691 y
SDict begin H.S end
 -246 2691 a -246 2691 a
SDict begin 12 H.A end
 -246 2691
a -246 2691 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -246 2691 a 0 TeXcolorgray -141 2790 a
Fp(2.)p 0 TeXcolorgray 43 w(P)n(our)j(obtenir)g(le)h(tableau)g(avec)f
(un)h(tableur)-5 b(,)18 b(on)g(entr)o(e)f(la)h(for)q(mule)1945
2956 y(=B1+1)-38 3122 y(dans)f(la)h(cellule)h(C1,)f(et)f(la)h(for)q
(mule)1945 3221 y(=B2+3)-38 3361 y(dans)f(la)h(cellule)h(C2.)f(Ensuite)
h(on)e(\351tir)o(e)g(vers)h(la)g(droite)o(.)p 0 TeXcolorgray
0 TeXcolorgray -38 3464 4184 4 v -38 3563 4 100 v 105
3563 V 419 3534 a(A)p 778 3563 V 624 w(B)p 1451 3563
V 622 w(C)p 2124 3563 V 617 w(D)p 2797 3563 V 620 w(E)p
3470 3563 V 627 w(F)p 4142 3563 V -38 3567 4184 4 v -38
3666 4 100 v 15 3637 a(1)p 105 3666 V 363 w Fm(n)p 778
3666 V 631 w Fp(0)p 1451 3666 V 544 w(=B1+1)p 2124 3666
V 521 w Fo(\242)8 b(\242)g(\242)p 2797 3666 V 594 w(\242)g(\242)g(\242)
p 3470 3666 V 594 w(\242)g(\242)g(\242)p 4142 3666 V
-38 3670 4184 4 v -38 3769 4 100 v 15 3739 a Fp(2)p 105
3769 V 342 w Fm(u)446 3751 y Ff(n)p 778 3769 V 1096 3739
a Fp(2)p 1451 3769 V 544 w(=B2+3)p 2124 3769 V 521 w
Fo(\242)g(\242)g(\242)p 2797 3769 V 594 w(\242)g(\242)g(\242)p
3470 3769 V 594 w(\242)g(\242)g(\242)p 4142 3769 V -38
3773 4184 4 v -246 3834 a
SDict begin H.S end
 -246 3834 a -246 3834 a
SDict begin 12 H.A end
 -246
3834 a -246 3834 a
SDict begin [/View [/XYZ H.V]/Dest (exo.9) cvn /DEST pdfmark end
 -246 3834 a 0 TeXcolorgray 94 x Fq(Ex)o(er)o(cice)14
b(9)p 0 TeXcolorgray 42 w Fp(N)n(otr)o(e)i(objet)i(tombe)g(de)f(:)p
0 TeXcolorgray -76 4027 a(\225)p 0 TeXcolorgray 42 w(5)g(m)h(pendant)g
(la)g(1)570 4003 y Fe(r)o(e)631 4027 y Fp(seconde)9 b(;)p
0 TeXcolorgray -76 4127 a(\225)p 0 TeXcolorgray 42 w(15)18
b(m)g(pendant)g(la)f(2)610 4103 y Fe(e)653 4127 y Fp(seconde)9
b(;)p 0 TeXcolorgray -76 4226 a(\225)p 0 TeXcolorgray
42 w(25)18 b(m)g(pendant)g(la)f(3)610 4203 y Fe(e)653
4226 y Fp(seconde)9 b(;)p 0 TeXcolorgray -76 4326 a(\225)p
0 TeXcolorgray 42 w(35)18 b(m)g(pendant)g(la)f(4)610
4302 y Fe(e)653 4326 y Fp(seconde)9 b(;)p 0 TeXcolorgray
-76 4426 a(\225)p 0 TeXcolorgray 42 w(45)18 b(m)g(pendant)g(la)f(5)610
4402 y Fe(e)653 4426 y Fp(seconde)o(.)-246 4568 y(C)o(onclusion)j(:)d
(pendant)h(les)g(5)g(pr)o(emi\350r)o(es)g(secondes)o(,)g(l)o('objet)h
(est)f(tomb\351)g(de)1461 4734 y(5)10 b Fo(\305)g Fp(15)g
Fo(\305)g Fp(25)g Fo(\305)g Fp(35)g Fo(\305)g Fp(45)20
b Fo(\306)14 b Fp(125)19 b(m.)-246 4943 y Fq(R)o(emarque)e(:)j
Fp(Les)h(infor)q(mations)h(de)e(l)o('\351nonc\351)i(sont)f
(impr\351cises)h(:)e(si)h(l)o('on)g(n\351glige)g(la)f(r\351sistance)h
(de)f(l)o('air)h(\(frottements\),)h(un)e(objet)h(soumis)h(\340)-246
5043 y(son)c(propr)o(e)f(poids)h(tombe)g(de)f(4,9)h(m)g(pendant)g(la)f
(1)1334 5019 y Fe(r)o(e)1396 5043 y Fp(seconde)o(,)g(4,)8
b(9)i Fo(\243)g Fp(3)16 b Fo(\306)f Fp(14,)8 b(7)19 b(m)e(pendant)h(la)
g(2)2709 5019 y Fe(e)2735 5043 y Fp(,)f(4,)8 b(9)i Fo(\243)g
Fp(5)16 b Fo(\306)f Fp(24,)8 b(5)19 b(m)e(pendant)h(la)g(3)3763
5019 y Fe(e)3789 5043 y Fp(,)f(etc)o(.)h(Dans)-246 5143
y(l)o('exer)o(cice)o(,)g(nous)g(avons)g(r)o(emplac\351)g(4,9)h(par)e(5)
h(pour)f(simpli\002er)i(les)f(calculs)o(.)-246 5285 y(N)n(otons)c(par)g
(ailleurs)i(que)e(ces)h(r\351sultats)g(doivent)g(\352tr)o(e)f(for)q
(tement)h(corr)q(ig\351s)f(si)g(l)o('on)h(veut)g(tenir)f(compte)i(de)e
(la)g(r\351sistance)h(de)f(l)o('air)-5 b(.)15 b(P)m(ar)f(exemple)o(,)
-246 5385 y(un)24 b(adulte)g(en)f(chute)h(libr)o(e)f(qui)h(par)q(vient)
h(\340)e(se)h(mettr)o(e)f(\253)16 b(\340)23 b(plat)16
b(\273)46 b(devr)o(ait)24 b(arr\352ter)f(d)n('acc\351l\351r)o(er)g
(apr\350s)g(une)h(dizaine)g(de)f(secondes)h(de)f(chute)-246
5485 y(environ,)k(sans)g(d\351passer)f(60)h(m/s)9 b(;)26
b(tandis)h(qu)n('un)f(chat)g(ne)h(d\351passer)o(a)f(pas)h(les)f(20)h
(m/s)f(et)h(pourr)o(a)f(sur)q(vivr)o(e)h(\340)f(une)g(chute)h(d)n('une)
g(hauteur)-246 5584 y(impor)q(tante)o(.)19 b(La)e(vid\351o)p
0 1 0 0 TeXcolorcmyk 490 5586 a
SDict begin H.S end
 490 5586 a 0 1 0 0 TeXcolorcmyk
-2 x Fp(KEZ)q(AK)m(O)h(:)f(chute)h(libr)o(e)p 0 1 0 0
TeXcolorcmyk 1213 5527 a
SDict begin H.R end
 1213 5527 a 1213 5584 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.youtube.com/watch?v=RFbmabdbBC0)>>/Subtype
/Link H.B /ANN pdfmark end
 1213
5584 a 0 TeXcolorgray 17 w Fp(explique)i(ce)d(probl\350me)h(en)g
(d\351tail.)p 0 TeXcolorgray 1930 5895 a(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (exo.10) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 83 x Fq(Ex)o(er)o(cice)14
b(10)p 0 TeXcolorgray 41 w Fp(On)j(tr)o(ace)h(les)g(droites)f
Fm(D)938 -151 y Fi(1)988 -163 y Fp(:)h Fm(y)j Fo(\306)16
b Fm(x)f Fo(\241)10 b Fp(4,)19 b Fm(D)1415 -151 y Fi(2)1464
-163 y Fp(:)g Fm(y)i Fo(\306)14 b Fp(2)r Fm(x)5 b Fp(,)19
b Fm(D)1817 -151 y Fi(3)1866 -163 y Fp(:)f Fm(y)j Fo(\306)15
b(\241)p Fp(2)r Fm(x)g Fo(\305)10 b Fp(3)18 b(et)g Fm(D)2451
-151 y Fi(4)2501 -163 y Fp(:)g Fm(y)j Fo(\306)14 b(\241)p
Fp(2)k(\340)f(par)q(tir)g(de)g(quatr)o(e)h(tableaux)g(de)f(valeurs)h(:)
-246 37 y(T)-6 b(r)o(ac\351)18 b(de)f Fm(D)124 49 y Fi(1)159
37 y Fp(.)p -246 67 425 5 v 0 TeXcolorgray 0 TeXcolorgray
-3 119 551 4 v -3 218 4 100 v 52 188 a Fm(x)p 147 218
V 137 w Fp(0)p 345 218 V 158 w(2)p 544 218 V -3 222 551
4 v -3 321 4 100 v 54 291 a Fm(y)p 147 321 V 110 w Fo(\241)p
Fp(4)p 345 321 V 104 w Fo(\241)p Fp(2)p 544 321 V -3
325 551 4 v 105 521 a(0)10 b Fo(\241)g Fp(4)15 b Fo(\306)f(\241)p
Fp(4)105 646 y(2)c Fo(\241)g Fp(4)15 b Fo(\306)f(\241)p
Fp(2)p 0 TeXcolorgray 827 663 9 710 v 0 TeXcolorgray
873 37 a(T)-6 b(r)o(ac\351)17 b(de)g Fm(D)1242 49 y Fi(2)1278
37 y Fp(.)p 873 67 425 5 v 0 TeXcolorgray 0 TeXcolorgray
1171 119 441 4 v 1171 218 4 100 v 1226 188 a Fm(x)p 1321
218 V 109 w Fp(0)p 1464 218 V 103 w(2)p 1607 218 V 1171
222 441 4 v 1171 321 4 100 v 1228 291 a Fm(y)p 1321 321
V 110 w Fp(0)p 1464 321 V 103 w(4)p 1607 321 V 1171 325
441 4 v 1251 521 a(2)10 b Fo(\243)g Fp(0)15 b Fo(\306)f
Fp(2)1251 646 y(2)c Fo(\243)g Fp(2)15 b Fo(\306)f Fp(4)p
0 TeXcolorgray 1946 663 9 710 v 0 TeXcolorgray 1992 37
a(T)-6 b(r)o(ac\351)17 b(de)g Fm(D)2361 49 y Fi(3)2396
37 y Fp(.)p 1992 67 425 5 v 0 TeXcolorgray 0 TeXcolorgray
2262 119 496 4 v 2262 218 4 100 v 2317 189 a Fm(x)p 2412
218 V 109 w Fp(0)p 2555 218 V 131 w(2)p 2754 218 V 2262
222 496 4 v 2262 321 4 100 v 2319 292 a Fm(y)p 2412 321
V 110 w Fp(3)p 2555 321 V 103 w Fo(\241)p Fp(1)p 2754
321 V 2262 325 496 4 v 2256 521 a Fo(\241)10 b Fp(2)g
Fo(\243)g Fp(0)g Fo(\305)g Fp(3)17 b Fo(\306)d Fp(3)2256
646 y Fo(\241)c Fp(2)g Fo(\243)g Fp(2)g Fo(\305)g Fp(3)17
b Fo(\306)d(\241)p Fp(1)p 0 TeXcolorgray 3064 663 9 710
v 0 TeXcolorgray 3110 37 a(T)-6 b(r)o(ac\351)18 b(de)f
Fm(D)3480 49 y Fi(4)3515 37 y Fp(.)p 3110 67 425 5 v
0 TeXcolorgray 0 TeXcolorgray 3353 149 551 4 v 3353 249
4 100 v 3408 219 a Fm(x)p 3503 249 V 136 w Fp(0)p 3701
249 V 159 w(2)p 3900 249 V 3353 252 551 4 v 3353 352
4 100 v 3410 322 a Fm(y)p 3503 352 V 110 w Fo(\241)p
Fp(2)p 3701 352 V 103 w Fo(\241)p Fp(2)p 3900 352 V 3353
355 551 4 v -246 845 a(On)h(place)g(\340)f(chaque)h(fois)g(les)g(deux)f
(points)i(en)f(gr)q(is)o(,)f(puis)i(on)e(tr)o(ace)h(les)g(droites)f(en)
h(couleur)g(:)p 0 TeXcolorgray 0 TeXcolorgray 973 2633
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 235.4022 a add def
/d 0.0 a add neg def /h 202.12918 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 973 2633 a 1565 1768 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -91.04913 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 164.04189 0.0 -71.36032 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 22.76228 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -68.28685 0.0 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 97.87788 0.0 -104.2513   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 22.76228 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 164.04189  0 -71.36032  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -71.36032
 164.04189  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-104.2513  def /maxTickline 97.87788  def /dT 1491749 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 22.76228  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 22.76228
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 97.87788
0.0 -104.2513   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 164.04189
0.0 -71.36032 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 97.87788  0 -104.2513  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -104.2513
 97.87788  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-71.36032  def /maxTickline 164.04189  def /dT 1491749 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 22.76228  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 22.76228  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 97.87788
0.0 -104.2513   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 164.04189
0.0 -71.36032 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1550 1865 a Fi(0)158
b(1)g(2)g(3)g(4)g(5)g(6)-1375 b Fd(\241)p Fi(1)-262 b
Fd(\241)p Fi(2)g Fd(\241)p Fi(3)1476 1787 y(0)1435 1976
y Fd(\241)p Fi(1)1435 2165 y Fd(\241)p Fi(2)1435 2354
y Fd(\241)p Fi(3)1435 2543 y Fd(\241)p Fi(4)1476 1598
y(1)1476 1409 y(2)1476 1220 y(3)1565 1768 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0.49803 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.135027624309382
def /x1 7.206740331491703 def /dx x1 x sub 49 div def /F@pstplot ((-4.--1.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 22.76228 mul F@pstplot
22.76228 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30 22.76228
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 22.76228 mul gt { moveto } {
dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 1 0.49803 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1565 1768 a
tx@Dict begin { 101.38412 37.78546 } PutCoor PutBegin  end
 1565 1768 a 1 0.49803 0
TeXcolorrgb 53 x Fm(D)1628 1833 y Fi(1)p 0 TeXcolorgray
1565 1768 a
tx@Dict begin  PutEnd  end
 1565 1768 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.135027624309382
def /x1 7.206740331491703 def /dx x1 x sub 49 div def /F@pstplot ((-0.--2.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 22.76228 mul F@pstplot
22.76228 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30 22.76228
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 22.76228 mul gt { moveto } {
dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1565 1768 a
tx@Dict begin { 31.32904 60.54774 } PutCoor PutBegin  end
 1565 1768 a 0.49803 0 1 TeXcolorrgb 53 x
Fm(D)1628 1833 y Fi(2)p 0 TeXcolorgray 1565 1768 a
tx@Dict begin  PutEnd  end
 1565
1768 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.135027624309382
def /x1 7.206740331491703 def /dx x1 x sub 49 div def /F@pstplot ((--3.-2.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 22.76228 mul F@pstplot
22.76228 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30 22.76228
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 22.76228 mul gt { moveto } {
dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1565 1768
a
tx@Dict begin { 79.19249 -79.66798 } PutCoor PutBegin  end
 1565 1768 a 0 1 0 TeXcolorrgb 53 x Fm(D)1628 1833 y
Fi(3)p 0 TeXcolorgray 1565 1768 a
tx@Dict begin  PutEnd  end
 1565 1768 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.135027624309382
def /x1 7.206740331491703 def /dx x1 x sub 49 div def /F@pstplot ((-2.-0.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 22.76228 mul F@pstplot
22.76228 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30 22.76228
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 22.76228 mul gt { moveto } {
dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1565 1768 a
tx@Dict begin { 91.04913 -34.14342 } PutCoor PutBegin  end
 1565 1768 a 0 0 1
TeXcolorrgb 53 x Fm(D)1628 1833 y Fi(4)p 0 TeXcolorgray
1565 1768 a
tx@Dict begin  PutEnd  end
 1565 1768 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 0.0 0.0   false
NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 45.52457 91.04913
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 0.0 68.28685  
false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 45.52457 -22.76228
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 0.0 -91.04913 
 false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 45.52457 -45.52457
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 0.0 -45.52457 
 false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
2927 2633 a
currentpoint initclip moveto
 2927 2633 a -246 2816 a Fq(R)o(emarque)14
b(:)k Fp(La)f(droite)g Fm(D)567 2828 y Fi(4)619 2816
y Fp(est)h(hor)q(izontale)o(.)g(C'\351tait)g(pr\351visible)o(,)h
(puisque)g(la)f(valeur)g(de)j Fm(y)41 b Fp(\()p Fo(\241)p
Fp(2\))17 b(est)h(ind\351pendante)h(de)g Fm(x)5 b Fp(.)-246
2783 y
SDict begin H.S end
 -246 2783 a -246 2783 a
SDict begin 12 H.A end
 -246 2783 a -246 2783
a
SDict begin [/View [/XYZ H.V]/Dest (exo.11) cvn /DEST pdfmark end
 -246 2783 a 0 TeXcolorgray 180 x Fq(Ex)o(er)o(cice)14
b(11)p 0 TeXcolorgray 41 w Fp(On)j(lit)h(gr)o(aphiquement)i(les)e(or)o
(donn\351es)g(\340)f(l)o('or)q(igine)h(et)g(les)g(coef\002cients)g(dir)
o(ecteurs)g(des)f(droites)g(:)p 0 TeXcolorgray 0 TeXcolorgray
-246 5184 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 266.31767 a add def
/d 0.0 a add neg def /h 242.41748 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 -246 5184 a 392 4579 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -56.90549 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 189.49536 0.0 -76.82231 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 169.57854 0.0 -72.83894   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 189.49536  0 -76.82231  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -76.82231
 189.49536  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.83894  def /maxTickline 169.57854  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 169.57854
0.0 -72.83894   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.49536
0.0 -76.82231 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 169.57854  0 -72.83894  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -72.83894
 169.57854  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-76.82231  def /maxTickline 189.49536  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 169.57854
0.0 -72.83894   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.49536
0.0 -76.82231 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 377 4676 a Fi(0)205
b(1)g(2)g(3)h(4)f(5)g(6)-1705 b Fd(\241)p Fi(1)-310 b
Fd(\241)p Fi(2)303 4598 y(0)261 4835 y Fd(\241)p Fi(1)261
5071 y Fd(\241)p Fi(2)303 4362 y(1)303 4126 y(2)303 3889
y(3)303 3653 y(4)303 3417 y(5)392 4579 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -1 def /x1 5 def /dx
x1 x sub 49 div def /F@pstplot ((-1.--2.*x)/1.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 1 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
-28.45274 0.0 -28.45274   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 28.45274 28.45274 -28.45274   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 56.90549
28.45274 28.45274 28.45274   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 85.35823 56.90549 28.45274   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
85.35823 56.90549 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
85.35823 142.26372 85.35823 85.35823   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 392 4579 a
tx@Dict begin { 71.13185 158.76636 } PutCoor PutBegin  end
 392 4579 a 0 1 0
TeXcolorrgb 53 x Fm(D)455 4644 y Fi(1)p 0 TeXcolorgray
392 4579 a
tx@Dict begin  PutEnd  end
 392 4579 a 392 4579 a
tx@Dict begin { 30.15984 -9.67383 } PutCoor PutBegin  end
 392 4579 a 0.49803 0 1
TeXcolorrgb 51 x Fo(\305)p Fp(2)p 0 TeXcolorgray 392
4579 a
tx@Dict begin  PutEnd  end
 392 4579 a 392 4579 a
tx@Dict begin { 58.61258 58.0434 } PutCoor PutBegin  end
 392 4579 a 0.49803 0 1 TeXcolorrgb
51 x Fo(\305)p Fp(2)p 0 TeXcolorgray 392 4579 a
tx@Dict begin  PutEnd  end
 392 4579
a 392 4579 a
tx@Dict begin { 87.06532 115.51807 } PutCoor PutBegin  end
 392 4579 a 0.49803 0 1 TeXcolorrgb 51 x
Fo(\305)p Fp(2)p 0 TeXcolorgray 392 4579 a
tx@Dict begin  PutEnd  end
 392 4579 a
392 4579 a
tx@Dict begin { -53.49129 -24.185 } PutCoor PutBegin  end
 392 4579 a 1 0.49803 0 TeXcolorrgb 420 4664
a Fm(b)18 b Fo(\306)d(\241)p Fp(1)p 392 4582 283 4 v
392 4691 4 111 v 671 4691 V 392 4693 283 4 v 0 TeXcolorgray
392 4579 a
tx@Dict begin  PutEnd  end
 392 4579 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 109.25842
108.68968 134.29698 77.96066   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
392 4579 a
tx@Dict begin { 120.0706 76.82231 } PutCoor PutBegin  end
 392 4579 a 0.49803 0 1 TeXcolorrgb 422 4658
a Fm(a)j Fo(\306)d Fp(2)p 392 4582 230 4 v 392 4685 4
105 v 618 4685 V 392 4687 230 4 v 0 TeXcolorgray 392
4579 a
tx@Dict begin  PutEnd  end
 392 4579 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0.49803 0  setrgbcolor  [ 0.0
-28.45274   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
1965 5184 a
currentpoint initclip moveto
 1965 5184 a 0 1 0 TeXcolorrgb 591 5521 a
Fm(D)654 5533 y Fi(1)704 5521 y Fp(:)j Fm(y)j Fo(\306)p
0.49803 0 1 TeXcolorrgb 15 w Fp(2)p 0 1 0 TeXcolorrgb
2 w Fm(x)p 1 0.49803 0 TeXcolorrgb 5 w Fo(\241)p Fp(1)p
0 1 0 TeXcolorrgb 0 TeXcolorgray 591 5646 a Fm(D)654
5658 y Fi(1)704 5646 y Fp(:)d Fm(y)j Fo(\306)15 b Fp(2)r
Fm(x)g Fo(\241)10 b Fp(1)p 0 TeXcolorgray 1946 5676 9
2596 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1992
5184 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 266.31767 a add def
/d 0.0 a add neg def /h 242.41748 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1992 5184 a 2629 4579 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -56.90549 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 189.49536 0.0 -76.82231 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 169.57854 0.0 -72.83894   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 189.49536  0 -76.82231  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -76.82231
 189.49536  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.83894  def /maxTickline 169.57854  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 169.57854
0.0 -72.83894   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.49536
0.0 -76.82231 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 169.57854  0 -72.83894  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -72.83894
 169.57854  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-76.82231  def /maxTickline 189.49536  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 169.57854
0.0 -72.83894   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.49536
0.0 -76.82231 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2614 4676 a Fi(0)205
b(1)g(2)h(3)f(4)g(5)g(6)-1705 b Fd(\241)p Fi(1)-309 b
Fd(\241)p Fi(2)2540 4598 y(0)2499 4835 y Fd(\241)p Fi(1)2499
5071 y Fd(\241)p Fi(2)2540 4362 y(1)2540 4126 y(2)2540
3889 y(3)2540 3653 y(4)2540 3417 y(5)2629 4579 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -1 def /x1 5 def /dx
x1 x sub 49 div def /F@pstplot ((--4.-1.*x)/1.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 1 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 2629 4579 a
tx@Dict begin { 113.81097 15.93346 } PutCoor PutBegin  end
 2629 4579 a 0 1 0
TeXcolorrgb 53 x Fm(D)2692 4644 y Fi(2)p 0 TeXcolorgray
2629 4579 a
tx@Dict begin  PutEnd  end
 2629 4579 a 2629 4579 a
tx@Dict begin { 30.15984 101.29169 } PutCoor PutBegin  end
 2629 4579 a 0.49803 0 1
TeXcolorrgb 51 x Fo(\241)p Fp(1)p 0 TeXcolorgray 2629
4579 a
tx@Dict begin  PutEnd  end
 2629 4579 a 2629 4579 a
tx@Dict begin { -50.64584 127.46815 } PutCoor PutBegin  end
 2629 4579 a 1 0.49803 0
TeXcolorrgb 2658 4664 a Fm(b)18 b Fo(\306)c Fp(4)p 2629
4582 228 4 v 2629 4691 4 111 v 2853 4691 V 2629 4693
228 4 v 0 TeXcolorgray 2629 4579 a
tx@Dict begin  PutEnd  end
 2629 4579 a 2629 4579
a
tx@Dict begin { 102.99878 104.13713 } PutCoor PutBegin  end
 2629 4579 a 0.49803 0 1 TeXcolorrgb 2660 4658 a Fm(a)k
Fo(\306)c(\241)p Fp(1)p 2629 4582 285 4 v 2629 4685 4
105 v 2910 4685 V 2629 4687 285 4 v 0 TeXcolorgray 2629
4579 a
tx@Dict begin  PutEnd  end
 2629 4579 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
113.81097 0.0 113.81097   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 85.35823 28.45274 113.81097   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 56.90549
85.35823 28.45274 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 56.90549 56.90549 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
56.90549 56.90549 56.90549   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
85.35823 28.45274 85.35823 56.90549   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 2629 4579 a
tx@Dict begin { 58.61258 72.83894 } PutCoor PutBegin  end
 2629 4579 a 0.49803 0 1
TeXcolorrgb 51 x Fo(\241)p Fp(1)p 0 TeXcolorgray 2629
4579 a
tx@Dict begin  PutEnd  end
 2629 4579 a 2629 4579 a
tx@Dict begin { 87.06532 44.3862 } PutCoor PutBegin  end
 2629 4579 a 0.49803 0 1
TeXcolorrgb 51 x Fo(\241)p Fp(1)p 0 TeXcolorgray 2629
4579 a
tx@Dict begin  PutEnd  end
 2629 4579 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 78.5294
70.56267 107.55133 87.06532   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0.49803 0  setrgbcolor  [ 0.0
113.81097   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 4203 5184 a
currentpoint initclip moveto
 4203
5184 a 0 1 0 TeXcolorrgb 2811 5521 a Fm(D)2874 5533 y
Fi(2)2924 5521 y Fp(:)k Fm(y)j Fo(\306)p 0.49803 0 1
TeXcolorrgb 14 w(\241)p Fp(1)p 0 1 0 TeXcolorrgb 3 w
Fm(x)p 1 0.49803 0 TeXcolorrgb 5 w Fo(\305)p Fp(4)p 0 1 0
TeXcolorrgb 0 TeXcolorgray 2811 5646 a Fm(D)2874 5658
y Fi(2)2924 5646 y Fp(:)d Fm(y)j Fo(\306)14 b(\241)r
Fm(x)h Fo(\305)10 b Fp(4)p 0 TeXcolorgray 1930 5895 a(5)p
0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -232 1213 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 256.11636 a add def
/d 0.0 a add neg def /h 175.66972 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 -232 1213 a
172 215 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -113.81097 T 7
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 207.4672 0.0 -48.64917 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -28.45274 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 55.52097 0.0 -120.14876   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 207.4672  0 -48.64917  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -48.64917
 207.4672  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-120.14876  def /maxTickline 55.52097  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 55.52097
0.0 -120.14876   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 207.4672
0.0 -48.64917 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 55.52097  0 -120.14876  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -120.14876
 55.52097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-48.64917  def /maxTickline 207.4672  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 55.52097
0.0 -120.14876   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 207.4672
0.0 -48.64917 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 157 312 a Fi(0)205 b(1)g(2)g(3)h(4)f(5)g(6)
-1705 b Fd(\241)p Fi(1)83 235 y(0)41 471 y Fd(\241)p
Fi(1)41 707 y Fd(\241)p Fi(2)41 943 y Fd(\241)p Fi(3)41
1180 y Fd(\241)p Fi(4)83 -2 y(1)172 215 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -1 def /x1 5 def /dx
x1 x sub 49 div def /F@pstplot ((-2.--0.5*x)/1.)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 1 0
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 172 215 a
tx@Dict begin { 120.45352 25.96893 } PutCoor PutBegin  end
 172 215 a 0 1 0 TeXcolorrgb
54 x Fm(D)235 281 y Fi(3)p 0 TeXcolorgray 172 215 a
tx@Dict begin  PutEnd  end
 172
215 a 172 215 a
tx@Dict begin { -42.67911 -40.79662 } PutCoor PutBegin  end
 172 215 a 1 0.49803 0 TeXcolorrgb 200
301 a Fm(b)18 b Fo(\306)d(\241)p Fp(2)p 172 219 283 4
v 172 328 4 111 v 451 328 V 172 330 283 4 v 0 TeXcolorgray
172 215 a
tx@Dict begin  PutEnd  end
 172 215 a 172 215 a
tx@Dict begin { 110.05553 -65.44139 } PutCoor PutBegin  end
 172 215 a 0.49803 0 1 TeXcolorrgb
202 295 a Fm(a)j Fo(\306)d Fp(0,)8 b(5)p 172 219 299
4 v 172 332 4 116 v 467 332 V 172 334 299 4 v 0 TeXcolorgray
172 215 a
tx@Dict begin  PutEnd  end
 172 215 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
-56.90549 0.0 -56.90549   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 -42.67911 28.45274 -56.90549   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 56.90549
-42.67911 28.45274 -42.67911   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 -28.45274 56.90549 -42.67911   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
-28.45274 56.90549 -28.45274   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
85.35823 -14.22636 85.35823 -28.45274   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 172 215 a
tx@Dict begin { 31.86693 -48.36957 } PutCoor PutBegin  end
 172 215 a 0.49803 0 1
TeXcolorrgb 51 x Fo(\305)p Fp(0,)g(5)p 0 TeXcolorgray
172 215 a
tx@Dict begin  PutEnd  end
 172 215 a 172 215 a
tx@Dict begin { 60.31967 -34.1432 } PutCoor PutBegin  end
 172 215 a 0.49803 0 1 TeXcolorrgb
51 x Fo(\305)p Fp(0,)g(5)p 0 TeXcolorgray 172 215 a
tx@Dict begin  PutEnd  end
 172
215 a 172 215 a
tx@Dict begin { 88.77242 -19.91682 } PutCoor PutBegin  end
 172 215 a 0.49803 0 1 TeXcolorrgb 51
x Fo(\305)p Fp(0,)g(5)p 0 TeXcolorgray 172 215 a
tx@Dict begin  PutEnd  end
 172
215 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.43004
-30.15984 119.90607 -59.75093   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0.49803 0  setrgbcolor  [ 0.0
-56.90549   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1895 1213 a
currentpoint initclip moveto
 1895 1213 a 0 1 0
TeXcolorrgb 557 2209 a Fm(D)620 2221 y Fi(3)669 2209
y Fp(:)19 b Fm(y)i Fo(\306)p 0.49803 0 1 TeXcolorrgb
14 w Fp(0,)8 b(5)p 0 1 0 TeXcolorrgb 4 w Fm(x)p 1 0.49803 0
TeXcolorrgb 5 w Fo(\241)p Fp(2)p 0 1 0 TeXcolorrgb 0
TeXcolorgray 557 2334 a Fm(D)620 2346 y Fi(3)669 2334
y Fp(:)19 b Fm(y)i Fo(\306)14 b Fp(0,)8 b(5)r Fm(x)15
b Fo(\241)10 b Fp(2)p 0 TeXcolorgray 1946 2363 9 2610
v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1992 1841
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 262.1333 a add def
/d 0.0 a add neg def /h 240.28926 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1992 1841 a 2545 878 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 195.47107 0.0 -66.66223 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 124.31186 0.0 -115.9774   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 195.47107  0 -66.66223  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -66.66223
 195.47107  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-115.9774  def /maxTickline 124.31186  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.31186
0.0 -115.9774   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 195.47107
0.0 -66.66223 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 124.31186  0 -115.9774  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -115.9774
 124.31186  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-66.66223  def /maxTickline 195.47107  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.31186
0.0 -115.9774   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 195.47107
0.0 -66.66223 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2530 975 a Fi(0)205
b(1)g(2)g(3)g(4)h(5)f(6)-1706 b Fd(\241)p Fi(1)-309 b
Fd(\241)p Fi(2)2456 897 y(0)2414 1133 y Fd(\241)p Fi(1)2414
1370 y Fd(\241)p Fi(2)2414 1606 y Fd(\241)p Fi(3)2414
1842 y Fd(\241)p Fi(4)2456 661 y(1)2456 425 y(2)2456
188 y(3)2545 878 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -1 def /x1 5 def /dx
x1 x sub 49 div def /F@pstplot ((--3.-1.5*x)/1.)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0 1 0
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
2545 878 a
tx@Dict begin { 89.62596 -71.16832 } PutCoor PutBegin  end
 2545 878 a 0 1 0 TeXcolorrgb 53 x Fm(D)2608
943 y Fi(4)p 0 TeXcolorgray 2545 878 a
tx@Dict begin  PutEnd  end
 2545 878 a 2545
878 a
tx@Dict begin { -54.90012 103.02744 } PutCoor PutBegin  end
 2545 878 a 1 0.49803 0 TeXcolorrgb 2573 963 a Fm(b)18
b Fo(\306)c Fp(3)p 2545 881 228 4 v 2545 990 4 111 v
2769 990 V 2545 992 228 4 v 0 TeXcolorgray 2545 878 a
tx@Dict begin  PutEnd  end

2545 878 a 2545 878 a
tx@Dict begin { 112.014 -55.48492 } PutCoor PutBegin  end
 2545 878 a 0.49803 0 1 TeXcolorrgb
2575 957 a Fm(a)k Fo(\306)c(\241)p Fp(1,)8 b(5)p 2545
881 354 4 v 2545 994 4 116 v 2895 994 V 2545 996 354
4 v 0 TeXcolorgray 2545 878 a
tx@Dict begin  PutEnd  end
 2545 878 a 2545 878 a
tx@Dict begin { 29.67749 66.86412 } PutCoor PutBegin  end
 2545
878 a 0.49803 0 1 TeXcolorrgb 51 x Fo(\241)p Fp(1,)g(5)p
0 TeXcolorgray 2545 878 a
tx@Dict begin  PutEnd  end
 2545 878 a 2545 878 a
tx@Dict begin { 58.80316 24.185 } PutCoor PutBegin  end
 2545
878 a 0.49803 0 1 TeXcolorrgb 51 x Fo(\241)p Fp(1,)g(5)p
0 TeXcolorgray 2545 878 a
tx@Dict begin  PutEnd  end
 2545 878 a 2545 878 a
tx@Dict begin { 87.36923 -18.4941 } PutCoor PutBegin  end
 2545
878 a 0.49803 0 1 TeXcolorrgb 51 x Fo(\241)p Fp(1,)g(5)p
0 TeXcolorgray 2545 878 a
tx@Dict begin  PutEnd  end
 2545 878 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 107.86653
-30.39862 119.90607 -53.93065   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 28.45274
85.35823 0.0 85.35823   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 42.67911 28.45274 85.35823   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 56.90549
42.67911 28.45274 42.67911   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
56.90549 0.0 56.90549 42.67911   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 56.90549 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
85.35823 -42.67911 85.35823 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 1 0.49803 0  setrgbcolor  [ 0.0
85.35823   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 4168 1841 a
currentpoint initclip moveto
 4168
1841 a 0 1 0 TeXcolorrgb 2767 2209 a Fm(D)2830 2221 y
Fi(4)2879 2209 y Fp(:)19 b Fm(y)i Fo(\306)p 0.49803 0 1
TeXcolorrgb 14 w(\241)p Fp(1,)8 b(5)p 0 1 0 TeXcolorrgb
3 w Fm(x)p 1 0.49803 0 TeXcolorrgb 5 w Fo(\305)p Fp(3)p
0 1 0 TeXcolorrgb 0 TeXcolorgray 2767 2334 a Fm(D)2830
2346 y Fi(4)2879 2334 y Fp(:)19 b Fm(y)i Fo(\306)14 b(\241)p
Fp(1,)8 b(5)r Fm(x)15 b Fo(\305)10 b Fp(3)-246 2426 y
SDict begin H.S end

-246 2426 a -246 2426 a
SDict begin 12 H.A end
 -246 2426 a -246 2426 a
SDict begin [/View [/XYZ H.V]/Dest (exo.12) cvn /DEST pdfmark end
 -246
2426 a 0 TeXcolorgray 100 x Fq(Ex)o(er)o(cice)k(12)p
0 TeXcolorgray 41 w Fp(Le)k(gr)o(aphique)h(suivant)f(donne)g(le)g(pr)q
(ix)f(pay\351)g(dans)h(une)g(pompe)h(\340)e(essence)h(en)g(fonction)h
(de)e(la)g(quantit\351)i(de)e(gazole)g(achet\351e)o(.)p
0 TeXcolorgray 0 TeXcolorgray 1094 4290 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 206.11479 a add def
/d 0.0 a add neg def /h 200.7048 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1094 4290 a
1274 4141 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 184.50043 0.0 -21.61436 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 182.79463 0.0 -17.91017   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 184.50043  0 -21.61436  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -21.61436
 184.50043  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-17.91017  def /maxTickline 182.79463  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.79463
0.0 -17.91017   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 184.50043
0.0 -21.61436 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 182.79463  0 -17.91017  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -17.91017
 182.79463  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-21.61436  def /maxTickline 184.50043  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.79463
0.0 -17.91017   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 184.50043
0.0 -21.61436 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1259 4238 a Fi(0)205 b(1)g(2)g(3)g(4)h(5)f(6)
1185 3925 y(1)1185 3688 y(2)1185 3452 y(3)1185 3216 y(4)1185
2980 y(5)1185 2743 y(6)1274 4141 y
tx@Dict begin { 146.53145 22.76227 } PutCoor PutBegin  end
 1274 4141 a 57 x Fp(gazole)1274
4298 y(\(en)17 b Fn(`)p Fp(\))1274 4141 y
tx@Dict begin  PutEnd  end
 1274 4141 a
1274 4141 a
tx@Dict begin { 3.41418 150.87689 } PutCoor PutBegin  end
 1274 4141 a 54 x Fp(pr)q(ix)1274 4295 y(\(en)g
Fl(N)p Fp(\))1274 4141 y
tx@Dict begin  PutEnd  end
 1274 4141 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0. def /x1 6.484452736237389 def
/dx x1 x sub 49 div def /F@pstplot (1.5*x)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 113.81097 170.71646 113.81097
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0.0 170.71646 113.81097
170.71646   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
28.45274 42.67911 28.45274 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1274 4141 a
tx@Dict begin { 30.15984 24.46938 } PutCoor PutBegin  end
 1274
4141 a 0.49803 0 1 TeXcolorrgb 52 x Fo(\305)p Fp(1,)8
b(5)p 0 TeXcolorgray 1274 4141 a
tx@Dict begin  PutEnd  end
 1274 4141 a 2806 4290
a
currentpoint initclip moveto
 2806 4290 a -246 4461 a Fp(Il)17 b(y)g(a)g(deux)h(m\351thodes)g
(possibles)h(pour)f(r\351pondr)o(e)f(\340)g(la)h(question)h(:)p
0 TeXcolorgray -76 4560 a(\225)p 0 TeXcolorgray 42 w
Fq(P)m(ointill\351s)14 b(rouges)h(:)i Fp(4)h(litr)o(es)g(de)f(gazole)g
(co\373tent)h(6)g Fl(N)p Fp(,)f(donc)g(le)h(litr)o(e)f(co\373te)h(6)10
b Fo(\245)g Fp(4)16 b Fo(\306)e Fp(1,)8 b(5)18 b Fl(N)p
Fp(.)p 0 TeXcolorgray -76 4660 a(\225)p 0 TeXcolorgray
42 w Fq(F)o(l\350ches)d(violettes)g(:)i Fp(chaque)h(litr)o(e)g
(co\373te)g(1,5)g Fl(N)p Fp(.)-246 4740 y
SDict begin H.S end
 -246 4740 a
-246 4740 a
SDict begin 12 H.A end
 -246 4740 a -246 4740 a
SDict begin [/View [/XYZ H.V]/Dest (exo.13) cvn /DEST pdfmark end
 -246 4740 a 0 TeXcolorgray
112 x Fq(Ex)o(er)o(cice)c(13)p 0 TeXcolorgray 41 w Fp(Dans)j(chaque)h
(question,)h Fm(u)j Fp(est)c(une)g(suite)g(ar)q(ithm\351tique)i(de)d(r)
o(aison)h Fm(r)r Fp(.)-246 4894 y
SDict begin H.S end
 -246 4894 a -246 4894
a
SDict begin 12 H.A end
 -246 4894 a -246 4894 a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 -246 4894 a 0 TeXcolorgray
-141 4989 a Fp(1.)p 0 TeXcolorgray 43 w Fm(u)11 5001
y Fi(0)61 4989 y Fo(\306)c Fp(2)k(et)f Fm(r)25 b Fo(\306)14
b Fp(4.)1779 5272 y Fm(u)1828 5284 y Fi(1)1878 5272 y
Fo(\306)g Fp(2)c Fo(\305)g Fp(4)16 b Fo(\306)e Fp(6)1779
5397 y Fm(u)1828 5409 y Fi(2)1878 5397 y Fo(\306)g Fp(6)c
Fo(\305)g Fp(4)16 b Fo(\306)e Fp(10)1779 5521 y Fm(u)1828
5533 y Fi(3)1878 5521 y Fo(\306)g Fp(10)c Fo(\305)g Fp(4)16
b Fo(\306)e Fp(14.)p 0 TeXcolorgray 1930 5895 a(6)p 0
TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163 a Fp(2.)p
0 TeXcolorgray 43 w Fm(u)11 -151 y Fi(0)61 -163 y Fo(\306)14
b Fp(5)k(et)f Fm(r)25 b Fo(\306)14 b(\241)p Fp(2.)1792
134 y Fm(u)1841 146 y Fi(1)1891 134 y Fo(\306)g Fp(5)c
Fo(\241)g Fp(2)16 b Fo(\306)e Fp(3)1792 259 y Fm(u)1841
271 y Fi(2)1891 259 y Fo(\306)g Fp(3)c Fo(\241)g Fp(2)16
b Fo(\306)e Fp(1)1792 383 y Fm(u)1841 395 y Fi(3)1891
383 y Fo(\306)g Fp(1)c Fo(\241)g Fp(2)16 b Fo(\306)e(\241)p
Fp(1.)-246 621 y
SDict begin H.S end
 -246 621 a -246 621 a
SDict begin 12 H.A end
 -246 621 a -246
621 a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 -246 621 a 0 TeXcolorgray -141 705 a Fp(3.)p 0
TeXcolorgray 43 w Fm(u)11 717 y Fi(0)61 705 y Fo(\306)g
Fp(10)k(et)g Fm(r)25 b Fo(\306)14 b Fp(1,)8 b(5.)-38
819 y(P)n(our)17 b(obtenir)g Fm(u)463 831 y Fi(6)499
819 y Fp(,)g(on)h(par)q(t)f(de)g Fm(u)956 831 y Fi(0)1006
819 y Fo(\306)d Fp(10)k(et)g(on)g(r)o(ajoute)g(6)g(fois)g(1,)8
b(5.)19 b(Donc)1547 1002 y Fm(u)1596 1014 y Fi(6)1645
1002 y Fo(\306)c Fp(10)10 b Fo(\305)g Fp(6)g Fo(\243)g
Fp(1,)e(5)17 b Fo(\306)d Fp(10)c Fo(\305)g Fp(9)16 b
Fo(\306)f Fp(19.)-246 1098 y
SDict begin H.S end
 -246 1098 a -246 1098 a
SDict begin 12 H.A end

-246 1098 a -246 1098 a
SDict begin [/View [/XYZ H.V]/Dest (Item.22) cvn /DEST pdfmark end
 -246 1098 a 0 TeXcolorgray -141
1199 a Fp(4.)p 0 TeXcolorgray 43 w Fm(u)11 1211 y Fi(0)61
1199 y Fo(\306)f Fp(4)k(et)f Fm(u)319 1211 y Fi(2)369
1199 y Fo(\306)d Fp(10.)p 0 TeXcolorgray 0 TeXcolorgray
1524 1364 2 2 v 1526 1365 88 4 v 1614 1364 2 2 v 1523
1464 4 100 v 1615 1464 V 1524 1467 2 2 v 1526 1468 88
4 v 1614 1467 2 2 v 1550 1439 a(4)p 1 0 0 TeXcolorrgb
1765 1312 a Fd(\305)p Ff(r)p 0 TeXcolorgray 1639 1354
4 4 v 1641 1353 V 1643 1352 V 1645 1350 V 1646 1349 V
1648 1348 V 1650 1347 V 1652 1346 V 1654 1344 V 1655
1343 V 1657 1342 V 1659 1341 V 1661 1340 V 1663 1339
V 1664 1338 V 1666 1337 V 1668 1335 V 1670 1334 V 1672
1333 V 1673 1332 V 1675 1331 V 1677 1330 V 1679 1329
V 1681 1328 V 1683 1328 V 1684 1327 V 1686 1326 V 1688
1325 V 1690 1324 V 1692 1323 V 1693 1322 V 1695 1321
V 1697 1321 V 1699 1320 V 1701 1319 V 1702 1318 V 1704
1317 V 1706 1317 V 1708 1316 V 1710 1315 V 1712 1314
V 1713 1314 V 1715 1313 V 1717 1312 V 1719 1312 V 1721
1311 V 1722 1310 V 1724 1310 V 1726 1309 V 1728 1309
V 1730 1308 V 1731 1307 V 1733 1307 V 1735 1306 V 1737
1306 V 1739 1305 V 1740 1305 V 1742 1304 V 1744 1304
V 1746 1304 V 1748 1303 V 1750 1303 V 1751 1302 V 1753
1302 V 1755 1302 V 1757 1301 V 1759 1301 V 1760 1301
V 1762 1300 V 1939 1337 a Fc(\045)p Fb(\045)p 1838 1300
V 1840 1301 V 1842 1301 V 1844 1301 V 1845 1302 V 1847
1302 V 1849 1302 V 1851 1303 V 1853 1303 V 1854 1304
V 1856 1304 V 1858 1304 V 1860 1305 V 1862 1305 V 1864
1306 V 1865 1306 V 1867 1307 V 1869 1307 V 1871 1308
V 1873 1309 V 1874 1309 V 1876 1310 V 1878 1310 V 1880
1311 V 1882 1312 V 1883 1312 V 1885 1313 V 1887 1314
V 1889 1314 V 1891 1315 V 1892 1316 V 1894 1317 V 1896
1317 V 1898 1318 V 1900 1319 V 1902 1320 V 1903 1321
V 1905 1321 V 1907 1322 V 1909 1323 V 1911 1324 V 1912
1325 V 1914 1326 V 1916 1327 V 1918 1328 V 1920 1328
V 1921 1329 V 1923 1330 V 1925 1331 V 1927 1332 V 1929
1333 V 1931 1334 V 1932 1335 V 1934 1337 V 1936 1338
V 1963 1362 2 2 v 1965 1363 136 4 v 2101 1362 2 2 v 1962
1466 4 103 v 2103 1466 V 1963 1469 2 2 v 1965 1470 136
4 v 2101 1469 2 2 v 1989 1440 a Fp(???)p 1 0 0 TeXcolorrgb
2239 1312 a Fd(\305)p Ff(r)p 0 TeXcolorgray 2126 1341
4 4 v 2128 1340 V 2130 1339 V 2132 1338 V 2134 1337 V
2136 1335 V 2138 1334 V 2140 1333 V 2141 1332 V 2143
1331 V 2145 1330 V 2147 1329 V 2149 1328 V 2151 1328
V 2153 1327 V 2155 1326 V 2157 1325 V 2158 1324 V 2160
1323 V 2162 1322 V 2164 1321 V 2166 1321 V 2168 1320
V 2170 1319 V 2172 1318 V 2174 1317 V 2175 1317 V 2177
1316 V 2179 1315 V 2181 1314 V 2183 1314 V 2185 1313
V 2187 1312 V 2189 1312 V 2191 1311 V 2192 1310 V 2194
1310 V 2196 1309 V 2198 1309 V 2200 1308 V 2202 1307
V 2204 1307 V 2206 1306 V 2208 1306 V 2209 1305 V 2211
1305 V 2213 1304 V 2215 1304 V 2217 1304 V 2219 1303
V 2221 1303 V 2223 1302 V 2225 1302 V 2226 1302 V 2228
1301 V 2230 1301 V 2232 1301 V 2234 1300 V 2236 1300
V 2427 1342 a Fc(\045)p Fb(\045)p 2311 1300 V 2313 1300
V 2315 1301 V 2317 1301 V 2319 1301 V 2321 1302 V 2323
1302 V 2325 1302 V 2327 1303 V 2328 1303 V 2330 1304
V 2332 1304 V 2334 1304 V 2336 1305 V 2338 1305 V 2340
1306 V 2342 1306 V 2344 1307 V 2345 1307 V 2347 1308
V 2349 1309 V 2351 1309 V 2353 1310 V 2355 1310 V 2357
1311 V 2359 1312 V 2361 1312 V 2362 1313 V 2364 1314
V 2366 1314 V 2368 1315 V 2370 1316 V 2372 1317 V 2374
1317 V 2376 1318 V 2378 1319 V 2379 1320 V 2381 1321
V 2383 1321 V 2385 1322 V 2387 1323 V 2389 1324 V 2391
1325 V 2393 1326 V 2395 1327 V 2396 1328 V 2398 1328
V 2400 1329 V 2402 1330 V 2404 1331 V 2406 1332 V 2408
1333 V 2410 1334 V 2412 1335 V 2413 1337 V 2415 1338
V 2417 1339 V 2419 1340 V 2421 1341 V 2423 1342 V 2425
1343 V 2451 1364 2 2 v 2453 1365 128 4 v 2581 1364 2
2 v 2450 1464 4 100 v 2583 1464 V 2451 1467 2 2 v 2453
1468 128 4 v 2581 1467 2 2 v 2477 1439 a Fp(10)p 0 0 1
TeXcolorrgb 1528 1625 a Fm(u)1577 1637 y Fi(0)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 1991 1625 a Fm(u)2040 1637 y Fi(1)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 2475 1625 a Fm(u)2524
1637 y Fi(2)p 0 TeXcolorgray -38 1786 a Fp(D)o('apr\350s)j(le)h
(sch\351ma)g(ci-dessus)h(:)1616 1886 y Fm(r)25 b Fo(\306)14
b Fp(\(10)c Fo(\241)g Fp(4\))g Fo(\245)g Fp(2)17 b Fo(\306)d
Fp(6)c Fo(\245)g Fp(2)15 b Fo(\306)f Fp(3.)-38 2035 y(On)j(obtient)h
(donc)f(le)h(sch\351ma)g(compl\351t\351)i(:)p 0 TeXcolorgray
0 TeXcolorgray 1069 2207 V 1071 2208 88 4 v 1159 2207
2 2 v 1068 2307 4 100 v 1160 2307 V 1069 2310 2 2 v 1071
2311 88 4 v 1159 2310 2 2 v 1095 2282 a(4)p 1 0 0 TeXcolorrgb
1298 2158 a Fd(\305)p Fi(3)p 0 TeXcolorgray 1184 2195
4 4 v 1185 2193 V 1187 2192 V 1189 2191 V 1190 2190 V
1192 2189 V 1194 2187 V 1196 2186 V 1197 2185 V 1199
2184 V 1201 2183 V 1202 2182 V 1204 2181 V 1206 2180
V 1208 2179 V 1209 2178 V 1211 2177 V 1213 2176 V 1214
2175 V 1216 2174 V 1218 2173 V 1220 2172 V 1221 2171
V 1223 2170 V 1225 2169 V 1226 2168 V 1228 2167 V 1230
2166 V 1232 2165 V 1233 2164 V 1235 2164 V 1237 2163
V 1238 2162 V 1240 2161 V 1242 2160 V 1244 2160 V 1245
2159 V 1247 2158 V 1249 2157 V 1250 2157 V 1252 2156
V 1254 2155 V 1256 2155 V 1257 2154 V 1259 2154 V 1261
2153 V 1263 2152 V 1264 2152 V 1266 2151 V 1268 2151
V 1269 2150 V 1271 2150 V 1273 2149 V 1275 2149 V 1276
2148 V 1278 2148 V 1280 2147 V 1281 2147 V 1283 2146
V 1285 2146 V 1287 2145 V 1288 2145 V 1290 2145 V 1292
2144 V 1293 2144 V 1295 2144 V 1484 2193 a Fc(#)p Fb(#)p
1371 2144 V 1372 2144 V 1374 2144 V 1376 2145 V 1377
2145 V 1379 2145 V 1381 2146 V 1383 2146 V 1384 2147
V 1386 2147 V 1388 2148 V 1389 2148 V 1391 2149 V 1393
2149 V 1395 2150 V 1396 2150 V 1398 2151 V 1400 2151
V 1401 2152 V 1403 2152 V 1405 2153 V 1407 2154 V 1408
2154 V 1410 2155 V 1412 2155 V 1413 2156 V 1415 2157
V 1417 2157 V 1419 2158 V 1420 2159 V 1422 2160 V 1424
2160 V 1425 2161 V 1427 2162 V 1429 2163 V 1431 2164
V 1432 2164 V 1434 2165 V 1436 2166 V 1437 2167 V 1439
2168 V 1441 2169 V 1443 2170 V 1444 2171 V 1446 2172
V 1448 2173 V 1449 2174 V 1451 2175 V 1453 2176 V 1455
2177 V 1456 2178 V 1458 2179 V 1460 2180 V 1461 2181
V 1463 2182 V 1465 2183 V 1467 2184 V 1468 2185 V 1470
2186 V 1472 2187 V 1473 2189 V 1475 2190 V 1477 2191
V 1479 2192 V 1480 2193 V 1482 2195 V 1508 2207 2 2 v
1510 2208 88 4 v 1598 2207 2 2 v 1507 2307 4 100 v 1599
2307 V 1508 2310 2 2 v 1510 2311 88 4 v 1598 2310 2 2
v 1534 2282 a Fp(7)p 1 0 0 TeXcolorrgb 1747 2158 a Fd(\305)p
Fi(3)p 0 TeXcolorgray 1624 2196 4 4 v 1626 2195 V 1628
2193 V 1629 2192 V 1631 2191 V 1633 2190 V 1635 2189
V 1637 2187 V 1638 2186 V 1640 2185 V 1642 2184 V 1644
2183 V 1646 2182 V 1647 2181 V 1649 2180 V 1651 2179
V 1653 2178 V 1655 2177 V 1656 2176 V 1658 2175 V 1660
2174 V 1662 2173 V 1664 2172 V 1665 2171 V 1667 2170
V 1669 2169 V 1671 2168 V 1673 2167 V 1674 2166 V 1676
2165 V 1678 2164 V 1680 2164 V 1681 2163 V 1683 2162
V 1685 2161 V 1687 2160 V 1689 2160 V 1690 2159 V 1692
2158 V 1694 2157 V 1696 2157 V 1698 2156 V 1699 2155
V 1701 2155 V 1703 2154 V 1705 2154 V 1707 2153 V 1708
2152 V 1710 2152 V 1712 2151 V 1714 2151 V 1716 2150
V 1717 2150 V 1719 2149 V 1721 2149 V 1723 2148 V 1725
2148 V 1726 2147 V 1728 2147 V 1730 2146 V 1732 2146
V 1734 2145 V 1735 2145 V 1737 2145 V 1739 2144 V 1741
2144 V 1742 2144 V 1744 2143 V 1923 2182 a Fc(\045)p
Fb(\045)p 1820 2143 V 1821 2144 V 1823 2144 V 1825 2144
V 1827 2145 V 1829 2145 V 1830 2145 V 1832 2146 V 1834
2146 V 1836 2147 V 1838 2147 V 1839 2148 V 1841 2148
V 1843 2149 V 1845 2149 V 1847 2150 V 1848 2150 V 1850
2151 V 1852 2151 V 1854 2152 V 1856 2152 V 1857 2153
V 1859 2154 V 1861 2154 V 1863 2155 V 1864 2155 V 1866
2156 V 1868 2157 V 1870 2157 V 1872 2158 V 1873 2159
V 1875 2160 V 1877 2160 V 1879 2161 V 1881 2162 V 1882
2163 V 1884 2164 V 1886 2164 V 1888 2165 V 1890 2166
V 1891 2167 V 1893 2168 V 1895 2169 V 1897 2170 V 1899
2171 V 1900 2172 V 1902 2173 V 1904 2174 V 1906 2175
V 1908 2176 V 1909 2177 V 1911 2178 V 1913 2179 V 1915
2180 V 1917 2181 V 1918 2182 V 1920 2183 V 1947 2207
2 2 v 1949 2208 128 4 v 2077 2207 2 2 v 1946 2307 4 100
v 2079 2307 V 1947 2310 2 2 v 1949 2311 128 4 v 2077
2310 2 2 v 1973 2282 a Fp(10)p 1 0 0 TeXcolorrgb 2217
2158 a Fd(\305)p Fi(3)p 0 TeXcolorgray 2103 2185 4 4
v 2105 2184 V 2107 2183 V 2109 2182 V 2111 2181 V 2113
2180 V 2115 2179 V 2117 2178 V 2118 2177 V 2120 2176
V 2122 2175 V 2124 2174 V 2126 2173 V 2128 2172 V 2130
2171 V 2131 2170 V 2133 2169 V 2135 2168 V 2137 2167
V 2139 2166 V 2141 2165 V 2143 2164 V 2145 2164 V 2146
2163 V 2148 2162 V 2150 2161 V 2152 2160 V 2154 2160
V 2156 2159 V 2158 2158 V 2160 2157 V 2161 2157 V 2163
2156 V 2165 2155 V 2167 2155 V 2169 2154 V 2171 2154
V 2173 2153 V 2175 2152 V 2176 2152 V 2178 2151 V 2180
2151 V 2182 2150 V 2184 2150 V 2186 2149 V 2188 2149
V 2190 2148 V 2191 2148 V 2193 2147 V 2195 2147 V 2197
2146 V 2199 2146 V 2201 2145 V 2203 2145 V 2205 2145
V 2206 2144 V 2208 2144 V 2210 2144 V 2212 2143 V 2214
2143 V 2402 2184 a Fc(\045)p Fb(\045)p 2289 2143 V 2291
2143 V 2293 2144 V 2294 2144 V 2296 2144 V 2298 2145
V 2300 2145 V 2302 2145 V 2304 2146 V 2306 2146 V 2308
2147 V 2309 2147 V 2311 2148 V 2313 2148 V 2315 2149
V 2317 2149 V 2319 2150 V 2321 2150 V 2323 2151 V 2324
2151 V 2326 2152 V 2328 2152 V 2330 2153 V 2332 2154
V 2334 2154 V 2336 2155 V 2338 2155 V 2339 2156 V 2341
2157 V 2343 2157 V 2345 2158 V 2347 2159 V 2349 2160
V 2351 2160 V 2353 2161 V 2354 2162 V 2356 2163 V 2358
2164 V 2360 2164 V 2362 2165 V 2364 2166 V 2366 2167
V 2368 2168 V 2369 2169 V 2371 2170 V 2373 2171 V 2375
2172 V 2377 2173 V 2379 2174 V 2381 2175 V 2382 2176
V 2384 2177 V 2386 2178 V 2388 2179 V 2390 2180 V 2392
2181 V 2394 2182 V 2396 2183 V 2397 2184 V 2399 2185
V 2427 2207 2 2 v 2428 2208 128 4 v 2556 2207 2 2 v 2426
2307 4 100 v 2558 2307 V 2427 2310 2 2 v 2428 2311 128
4 v 2556 2310 2 2 v 2452 2282 a Fp(13)p 1 0 0 TeXcolorrgb
2696 2158 a Fd(\305)p Fi(3)p 0 TeXcolorgray 2583 2185
4 4 v 2585 2184 V 2587 2183 V 2589 2182 V 2590 2181 V
2592 2180 V 2594 2179 V 2596 2178 V 2598 2177 V 2600
2176 V 2602 2175 V 2604 2174 V 2605 2173 V 2607 2172
V 2609 2171 V 2611 2170 V 2613 2169 V 2615 2168 V 2617
2167 V 2619 2166 V 2620 2165 V 2622 2164 V 2624 2164
V 2626 2163 V 2628 2162 V 2630 2161 V 2632 2160 V 2633
2160 V 2635 2159 V 2637 2158 V 2639 2157 V 2641 2157
V 2643 2156 V 2645 2155 V 2647 2155 V 2648 2154 V 2650
2154 V 2652 2153 V 2654 2152 V 2656 2152 V 2658 2151
V 2660 2151 V 2662 2150 V 2663 2150 V 2665 2149 V 2667
2149 V 2669 2148 V 2671 2148 V 2673 2147 V 2675 2147
V 2677 2146 V 2678 2146 V 2680 2145 V 2682 2145 V 2684
2145 V 2686 2144 V 2688 2144 V 2690 2144 V 2692 2143
V 2693 2143 V 2882 2184 a Fc(\045)p Fb(\045)p 2768 2143
V 2770 2143 V 2772 2144 V 2774 2144 V 2776 2144 V 2778
2145 V 2780 2145 V 2781 2145 V 2783 2146 V 2785 2146
V 2787 2147 V 2789 2147 V 2791 2148 V 2793 2148 V 2795
2149 V 2796 2149 V 2798 2150 V 2800 2150 V 2802 2151
V 2804 2151 V 2806 2152 V 2808 2152 V 2810 2153 V 2811
2154 V 2813 2154 V 2815 2155 V 2817 2155 V 2819 2156
V 2821 2157 V 2823 2157 V 2825 2158 V 2826 2159 V 2828
2160 V 2830 2160 V 2832 2161 V 2834 2162 V 2836 2163
V 2838 2164 V 2840 2164 V 2841 2165 V 2843 2166 V 2845
2167 V 2847 2168 V 2849 2169 V 2851 2170 V 2853 2171
V 2855 2172 V 2856 2173 V 2858 2174 V 2860 2175 V 2862
2176 V 2864 2177 V 2866 2178 V 2868 2179 V 2870 2180
V 2871 2181 V 2873 2182 V 2875 2183 V 2877 2184 V 2879
2185 V 2906 2207 2 2 v 2908 2208 128 4 v 3036 2207 2
2 v 2905 2307 4 100 v 3038 2307 V 2906 2310 2 2 v 2908
2311 128 4 v 3036 2310 2 2 v 2932 2282 a Fp(16)p 0 0 1
TeXcolorrgb 1073 2466 a Fm(u)1122 2478 y Fi(0)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 1512 2466 a Fm(u)1561 2478 y Fi(1)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 1971 2466 a Fm(u)2020
2478 y Fi(2)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 2450 2466
a Fm(u)2499 2478 y Fi(3)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
2930 2466 a Fm(u)2979 2478 y Fi(4)p 0 TeXcolorgray -38
2628 a Fp(\(On)d(peut)h(aussi)h(obtenir)e Fm(u)799 2640
y Fi(4)852 2628 y Fp(avec)g(le)h(calcul)g(:)f Fm(u)1410
2640 y Fi(4)1460 2628 y Fo(\306)e Fp(4)10 b Fo(\305)g
Fp(4)g Fo(\243)g Fp(3)16 b Fo(\306)e Fp(4)c Fo(\305)g
Fp(12)16 b Fo(\306)e Fp(16.\))-246 2659 y
SDict begin H.S end
 -246 2659 a
-246 2659 a
SDict begin 12 H.A end
 -246 2659 a -246 2659 a
SDict begin [/View [/XYZ H.V]/Dest (Item.23) cvn /DEST pdfmark end
 -246 2659 a 0 TeXcolorgray
-141 2756 a Fp(5.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1246 2894 2 2 v 1248 2895 88 4 v 1336 2894 2 2 v 1245
2995 4 100 v 1337 2995 V 1246 2998 2 2 v 1248 2999 88
4 v 1336 2998 2 2 v 1272 2969 a(5)p 1 0 0 TeXcolorrgb
1487 2842 a Fd(\305)p Ff(r)p 0 TeXcolorgray 1361 2884
4 4 v 1363 2883 V 1364 2882 V 1366 2881 V 1368 2879 V
1370 2878 V 1372 2877 V 1373 2876 V 1375 2875 V 1377
2873 V 1379 2872 V 1381 2871 V 1383 2870 V 1384 2869
V 1386 2868 V 1388 2867 V 1390 2866 V 1392 2865 V 1393
2864 V 1395 2863 V 1397 2862 V 1399 2861 V 1401 2860
V 1402 2859 V 1404 2858 V 1406 2857 V 1408 2856 V 1410
2855 V 1412 2854 V 1413 2853 V 1415 2852 V 1417 2852
V 1419 2851 V 1421 2850 V 1422 2849 V 1424 2848 V 1426
2848 V 1428 2847 V 1430 2846 V 1431 2845 V 1433 2845
V 1435 2844 V 1437 2843 V 1439 2843 V 1440 2842 V 1442
2841 V 1444 2841 V 1446 2840 V 1448 2839 V 1450 2839
V 1451 2838 V 1453 2838 V 1455 2837 V 1457 2837 V 1459
2836 V 1460 2836 V 1462 2835 V 1464 2835 V 1466 2834
V 1468 2834 V 1469 2833 V 1471 2833 V 1473 2833 V 1475
2832 V 1477 2832 V 1478 2831 V 1480 2831 V 1482 2831
V 1484 2830 V 1661 2867 a Fc(\045)p Fb(\045)p 1560 2830
V 1562 2831 V 1564 2831 V 1565 2831 V 1567 2832 V 1569
2832 V 1571 2833 V 1573 2833 V 1574 2833 V 1576 2834
V 1578 2834 V 1580 2835 V 1582 2835 V 1583 2836 V 1585
2836 V 1587 2837 V 1589 2837 V 1591 2838 V 1592 2838
V 1594 2839 V 1596 2839 V 1598 2840 V 1600 2841 V 1602
2841 V 1603 2842 V 1605 2843 V 1607 2843 V 1609 2844
V 1611 2845 V 1612 2845 V 1614 2846 V 1616 2847 V 1618
2848 V 1620 2848 V 1621 2849 V 1623 2850 V 1625 2851
V 1627 2852 V 1629 2852 V 1631 2853 V 1632 2854 V 1634
2855 V 1636 2856 V 1638 2857 V 1640 2858 V 1641 2859
V 1643 2860 V 1645 2861 V 1647 2862 V 1649 2863 V 1650
2864 V 1652 2865 V 1654 2866 V 1656 2867 V 1658 2868
V 1685 2893 2 2 v 1687 2894 136 4 v 1823 2893 2 2 v 1684
2996 4 103 v 1825 2996 V 1685 2999 2 2 v 1687 3000 136
4 v 1823 2999 2 2 v 1711 2970 a Fp(???)p 1 0 0 TeXcolorrgb
1962 2842 a Fd(\305)p Ff(r)p 0 TeXcolorgray 1849 2871
4 4 v 1851 2870 V 1853 2869 V 1855 2868 V 1856 2867 V
1858 2866 V 1860 2865 V 1862 2864 V 1864 2863 V 1866
2862 V 1868 2861 V 1870 2860 V 1872 2859 V 1874 2858
V 1875 2857 V 1877 2856 V 1879 2855 V 1881 2854 V 1883
2853 V 1885 2852 V 1887 2852 V 1889 2851 V 1891 2850
V 1893 2849 V 1895 2848 V 1896 2848 V 1898 2847 V 1900
2846 V 1902 2845 V 1904 2845 V 1906 2844 V 1908 2843
V 1910 2843 V 1912 2842 V 1914 2841 V 1916 2841 V 1917
2840 V 1919 2839 V 1921 2839 V 1923 2838 V 1925 2838
V 1927 2837 V 1929 2837 V 1931 2836 V 1933 2836 V 1935
2835 V 1936 2835 V 1938 2834 V 1940 2834 V 1942 2833
V 1944 2833 V 1946 2833 V 1948 2832 V 1950 2832 V 1952
2831 V 1954 2831 V 1956 2831 V 1957 2830 V 1959 2830
V 2148 2870 a Fc(\045)p Fb(\045)p 2036 2830 V 2037 2830
V 2039 2831 V 2041 2831 V 2043 2831 V 2045 2832 V 2047
2832 V 2049 2833 V 2051 2833 V 2053 2833 V 2055 2834
V 2056 2834 V 2058 2835 V 2060 2835 V 2062 2836 V 2064
2836 V 2066 2837 V 2068 2837 V 2070 2838 V 2072 2838
V 2074 2839 V 2076 2839 V 2077 2840 V 2079 2841 V 2081
2841 V 2083 2842 V 2085 2843 V 2087 2843 V 2089 2844
V 2091 2845 V 2093 2845 V 2095 2846 V 2096 2847 V 2098
2848 V 2100 2848 V 2102 2849 V 2104 2850 V 2106 2851
V 2108 2852 V 2110 2852 V 2112 2853 V 2114 2854 V 2116
2855 V 2117 2856 V 2119 2857 V 2121 2858 V 2123 2859
V 2125 2860 V 2127 2861 V 2129 2862 V 2131 2863 V 2133
2864 V 2135 2865 V 2136 2866 V 2138 2867 V 2140 2868
V 2142 2869 V 2144 2870 V 2146 2871 V 2173 2893 2 2 v
2174 2894 136 4 v 2310 2893 2 2 v 2172 2996 4 103 v 2312
2996 V 2173 2999 2 2 v 2174 3000 136 4 v 2310 2999 2
2 v 2198 2970 a Fp(???)p 1 0 0 TeXcolorrgb 2465 2842
a Fd(\305)p Ff(r)p 0 TeXcolorgray 2336 2875 4 4 v 2338
2873 V 2340 2872 V 2342 2871 V 2344 2870 V 2346 2869
V 2349 2868 V 2351 2867 V 2353 2866 V 2355 2865 V 2357
2864 V 2359 2863 V 2361 2862 V 2363 2861 V 2365 2860
V 2367 2859 V 2369 2858 V 2371 2857 V 2373 2856 V 2375
2855 V 2377 2854 V 2379 2853 V 2381 2852 V 2383 2852
V 2385 2851 V 2387 2850 V 2389 2849 V 2391 2848 V 2393
2848 V 2395 2847 V 2397 2846 V 2399 2845 V 2401 2845
V 2403 2844 V 2405 2843 V 2407 2843 V 2409 2842 V 2411
2841 V 2413 2841 V 2415 2840 V 2417 2839 V 2419 2839
V 2421 2838 V 2423 2838 V 2425 2837 V 2427 2837 V 2429
2836 V 2431 2836 V 2433 2835 V 2436 2835 V 2438 2834
V 2440 2834 V 2442 2833 V 2444 2833 V 2446 2833 V 2448
2832 V 2450 2832 V 2452 2831 V 2454 2831 V 2456 2831
V 2458 2830 V 2460 2830 V 2462 2830 V 2648 2863 a Fc(')p
Fb(')p 2539 2830 V 2541 2830 V 2543 2830 V 2545 2831
V 2547 2831 V 2549 2831 V 2551 2832 V 2553 2832 V 2555
2833 V 2557 2833 V 2559 2833 V 2561 2834 V 2563 2834
V 2565 2835 V 2567 2835 V 2569 2836 V 2571 2836 V 2573
2837 V 2575 2837 V 2577 2838 V 2579 2838 V 2581 2839
V 2583 2839 V 2585 2840 V 2587 2841 V 2589 2841 V 2591
2842 V 2593 2843 V 2595 2843 V 2597 2844 V 2599 2845
V 2601 2845 V 2603 2846 V 2606 2847 V 2608 2848 V 2610
2848 V 2612 2849 V 2614 2850 V 2616 2851 V 2618 2852
V 2620 2852 V 2622 2853 V 2624 2854 V 2626 2855 V 2628
2856 V 2630 2857 V 2632 2858 V 2634 2859 V 2636 2860
V 2638 2861 V 2640 2862 V 2642 2863 V 2644 2864 V 2660
2889 2 2 v 2662 2890 197 4 v 2859 2889 2 2 v 2659 3000
4 111 v 2861 3000 V 2660 3003 2 2 v 2662 3004 197 4 v
2859 3003 2 2 v 2686 2964 a Fp(12,)8 b(5)p 0 0 1 TeXcolorrgb
1250 3159 a Fm(u)1299 3171 y Fi(0)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 1713 3159 a Fm(u)1762 3171 y Fi(1)p 0 TeXcolorgray
0 0 1 TeXcolorrgb 2201 3159 a Fm(u)2250 3171 y Fi(2)p
0 TeXcolorgray 0 0 1 TeXcolorrgb 2719 3159 a Fm(u)2768
3171 y Fi(3)p 0 TeXcolorgray -38 3305 a Fp(D)o('apr\350s)17
b(le)h(sch\351ma)g(ci-dessus)h(:)1513 3405 y Fm(r)25
b Fo(\306)14 b Fp(\(12,)8 b(5)i Fo(\241)g Fp(5\))g Fo(\245)g
Fp(3)17 b Fo(\306)d Fp(7,)8 b(5)i Fo(\245)g Fp(3)17 b
Fo(\306)d Fp(2,)8 b(5.)-246 3482 y
SDict begin H.S end
 -246 3482 a -246 3482
a
SDict begin 12 H.A end
 -246 3482 a -246 3482 a
SDict begin [/View [/XYZ H.V]/Dest (exo.14) cvn /DEST pdfmark end
 -246 3482 a 0 TeXcolorgray
122 x Fq(Ex)o(er)o(cice)14 b(14)p 0 TeXcolorgray -246
3671 a
SDict begin H.S end
 -246 3671 a -246 3671 a
SDict begin 12 H.A end
 -246 3671 a -246 3671
a
SDict begin [/View [/XYZ H.V]/Dest (exo.15) cvn /DEST pdfmark end
 -246 3671 a 0 TeXcolorgray 132 x Fq(Ex)o(er)o(cice)g(15)p
0 TeXcolorgray -246 3870 a
SDict begin H.S end
 -246 3870 a -246 3870 a
SDict begin 12 H.A end
 -246
3870 a -246 3870 a
SDict begin [/View [/XYZ H.V]/Dest (exo.16) cvn /DEST pdfmark end
 -246 3870 a 0 TeXcolorgray 133 x Fq(Ex)o(er)o(cice)g
(16)p 0 TeXcolorgray 41 w Fp(On)j(note)h Fm(S)k Fp(la)c(somme)g(\340)g
(calculer)-5 b(,)18 b(que)g(l)o('on)g(\351cr)q(it)f(\340)h(l)o
('endroit,)g(puis)g(\340)f(l)o('envers)i(:)1336 4185
y Fm(S)g Fo(\306)p 1 0 0 TeXcolorrgb 14 w Fp(1)p 0 TeXcolorgray
92 w Fo(\305)p 0 0 1 TeXcolorrgb 10 w Fp(2)p 0 TeXcolorgray
51 w Fo(\305)p 0 1 0 TeXcolorrgb 10 w Fp(3)p 0 TeXcolorgray
51 w Fo(\305)10 b(\242)e(\242)g(\242)k(\305)p 1 0.5 0
TeXcolorrgb 10 w Fp(98)p 0 TeXcolorgray 11 w Fo(\305)p
0.5 0 0.5 TeXcolorrgb 10 w Fp(99)p 0 TeXcolorgray 11
w Fo(\305)p 0.75 0.5 0.25 TeXcolorrgb 10 w Fp(100)p 0
TeXcolorgray 1336 4310 a Fm(S)19 b Fo(\306)p 1 0 0 TeXcolorrgb
14 w Fp(100)p 0 TeXcolorgray 12 w Fo(\305)p 0 0 1 TeXcolorrgb
10 w Fp(99)p 0 TeXcolorgray 11 w Fo(\305)p 0 1 0 TeXcolorrgb
10 w Fp(98)p 0 TeXcolorgray 11 w Fo(\305)10 b(\242)e(\242)g(\242)k
(\305)p 1 0.5 0 TeXcolorrgb 10 w Fp(3)p 0 TeXcolorgray
51 w Fo(\305)p 0.5 0 0.5 TeXcolorrgb 10 w Fp(2)p 0 TeXcolorgray
51 w Fo(\305)p 0.75 0.5 0.25 TeXcolorrgb 10 w Fp(1)p
0 TeXcolorgray -246 4493 a(On)19 b(ajoute)g(membr)o(e)g(\340)f(membr)o
(e)h(les)g(deux)g(lignes)o(.)g(On)f(r)o(emarque)g(que)i(la)e(somme)i
(de)e(chaque)h(couple)h(d)n('une)f(m\352me)h(couleur)f(vaut)g(toujours)
-246 4592 y(101)33 b(:)1181 4791 y Fm(S)15 b Fo(\305)10
b Fm(S)18 b Fo(\306)p 1 0 0 TeXcolorrgb 14 w Fp(101)p
0 TeXcolorgray 12 w Fo(\305)p 0 0 1 TeXcolorrgb 10 w
Fp(101)p 0 TeXcolorgray 12 w Fo(\305)p 0 1 0 TeXcolorrgb
10 w Fp(101)p 0 TeXcolorgray 11 w Fo(\305)10 b(\242)e(\242)g(\242)k
(\305)p 1 0.5 0 TeXcolorrgb 10 w Fp(101)p 0 TeXcolorgray
11 w Fo(\305)p 0.5 0 0.5 TeXcolorrgb 10 w Fp(101)p 0
TeXcolorgray 12 w Fo(\305)p 0.75 0.5 0.25 TeXcolorrgb
10 w Fp(101)p 0 TeXcolorgray 1430 4826 a Fa(|)p 1464
4826 562 10 v 562 w({z)p 2094 4826 V 562 w(})1915 4903
y Fi(100)17 b(termes)2699 4791 y Fp(.)-246 5026 y(On)h(a)f(donc)1099
5143 y(2)p Fm(S)j Fo(\306)14 b Fp(100)c Fo(\243)g Fp(101)476
b Fm(S)18 b Fo(\306)2198 5087 y Fp(100)10 b Fo(\243)g
Fp(101)p 2198 5123 319 5 v 2337 5200 a(2)2541 5143 y
Fo(\306)k Fp(5)8 b(050.)p 0 TeXcolorgray 1930 5895 a(7)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
