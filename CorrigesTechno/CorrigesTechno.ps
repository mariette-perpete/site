%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: CorrigesTechno.dvi
%%CreationDate: Fri Sep 13 16:13:29 2024
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold Fourier-Math-Symbols
%%+ Fourier-Math-Letters-Italic wasy10 CMSY10 Utopia-Italic
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o CorrigesTechno.ps
%+ CorrigesTechno.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2024.09.13:1813
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:50:41 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /minus put
dup 162 /periodcentered put
dup 163 /multiply put
dup 165 /divide put
dup 188 /approxequal put
dup 197 /plus put
dup 198 /equal put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F90970716B059E19D81A
B8BEAA3A9BE8B55011CB6A8C2BBE60B08B624F91399F3A94475A343A381B1BE7
FDB135FF6D94AAEB9AB5C650C9351529D811CF0AD1BC2137C4F1CAF70E7280E9
FD9C8BDB44A112F94FC68A03524EE7DCAA6B604164162F722B80EA7DDB2B7957
1CFA4CCB61CCBA386873E00F8FE7B0BD3B62620E0F9D38B147959FE9CE2A9930
EEB594DDE47EF12DA0F556B8A3499645410DDD99E58BD48E53CAA921AB9D473B
CCB5C6F4AE07E93E0ABE0160B2F18459E716CBF0FA021392E7AF19BE4EE98C75
90E210EE8208441FFF28EAC2BF3DE178DAD5CC54C4F455FED810A32CF641C81C
60671F2BD6F849339C94984F77292C9C9B3D4CAD750E0EA00C87827DE9CD94B5
2FC34A291D1C1EE2EDE73FE1E5323F3009FBAA094879A6E8155FACB2F0171791
0251052393878C2BD4ABFF5D40DF50B8A05D025F5DEF3B4CF86F099E60E9C503
1D5D4C4CE9E56E73F0901018246EE939BF6364A8760FB4C38F8D88FEAFF4E124
3B1149D4E094231B9F39098B54E046AE35CB536876653855FD6B709F0EE47C8C
5881C99582FE910336E8E1B13F9418BEB30EA472001F384B0B8141C78E75E806
BB7CB4758F2C82436B1F6B484F3F2E1A9BB3F92CA741E0E230FC424D5053F349
2EBD4E0C342DFA0F8CD75F7E40FDCA0B7C53EBE9CF040BED8BC9820560ACB210
D195614B7479092537980B07450D2852D7F9CFB86FC2381626576708999059EE
F50556FC8D7302162393AD10CF85A13C81A773A0332592A1779BCFA8CB9FB2FE
20A231F65AC11417FB54B01A4F089707CBCCF26BCB334EA4E5618A6784F03F6E
F5D3C8DA6BD3600AFEE1E194F67E58F156E9DB2749F5654445F1E2262AC3AA22
BE4DA6D5FB4A4A4CB7BE1D8E30CB44E0F1004DA290FDE470796B2F210C1AC640
EF0D6DBA486D295FA7E588BCE3C88E50694350D254F79ECFE05159BF0E1C2E53
D7BC34EC9F704540BBFE8C934D70C8E1B4AB9566B188F6B92D2C3329CC787B6E
075A2BE13B2ECDBCCC9155A296A00B3A00442A1C05E5DAE4B078D4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC7775D014891054D978CDA
2123ABEA1F56B7AE95ACBFB66602930C7FF181D407919EE24F9822ACEB90CDE2
8600399C4B6A20B9F9372AE5FF89509FC2DD0A41FF090A6554331231DF4C7487
1AE978282A9D1CD19D8BC9A2C60B4013973946C9961828EABE87D4EFA0BD65C6
86674692C0F27E9FAF66DC1195124A60A6E5F01BF2C6D78355FB7575C229866F
C1AB1434BE0F4861EC8F64AE46D40D52EAC802878FF064922470D50F2A18FE57
DE5237FB22C8424FF3CC5990A998A735C12B31FC7F5E6CE9C732AAA4AE3F2C72
C23DD8504C426F0258ADB1585D75CFE278C1CD4E699553715048D27CC0A4E0DE
FDBA01DDEF496F6DE0DD44001E2F1363A9B1A38719B53E70C814D0FC7F5D069E
C95994EA648AB4D100B6B2DA0E1594AB8CC867B772253A7C92050AEDE8F8E58E
2AF48F64A090AE8D456458835F196A930F7E51B1E22FCA52B12375B2DA1EB4C8
19A28226AFD8F3E04598F519B32EEA410CA5C653EB9FDAA0CA007F8DD54B61F0
F8DF83A7B4BD041661945091BDCE083424A47790C81D990013ACC1763260E9AC
E361D63457087101F7BF2358A06084859C632C8DE35FADC38FFCD02EC1160CAE
5A6D87E2112C48DF124951653D19B04EEA5CFD0D994059D2B412EA2767BB5867
F44610C81FFE049D199AF9F5B2786D5EB2431E778C6E8A492379CD73BD7A2E0C
CB6634DE71F20FCD1939F2A0A02FEA9FAFC4A3C788958195DB48A6EA8666FF25
4A83839F08E6B37E6E55F27832DDA15B7592C06FA60FF1C751CC1E402911CAB4
9534A03AD5A6EBF977303BE913DE8B9C0D53432D9BE087DD17AC5A8033BBE0CD
E9A55A7A09D6E4D7E801AC7DE94C740A041DA9BCF6166ADDBD0BD59BD1B6CFD4
9111F4366E4AA8FE4AEDE949D8F732F744197AB5B4EABF03CB5CAFDAED28975C
A03C9BD259A50618883E2B007C46FFFCF9F605F804513E11CEF8F542DE0C0AE3
7C73BC14806632A876B9275789B85F37B93AFB5EA3EF757F16B0236432F307E4
0C4BE3AD0B34393BFAD9B010875BA73EBD9A175259842E6DF965D4E5BFEAD394
07ABE54CE6B415AB37571F2A62FB679BC60EB0146C2B3C9FB77D5285C30EE408
E64FC6AD060AAABAD60E67A4110832F198E3EBA2BA0061D924E8B0C518B17E14
F874622C8B1A115C10E15E8E1AFDAD7C3C4BFCC7B63BE298A124A92229938268
E3FCF67EA5E16108C276AFF3C02866465883B2216368C07EAE98DA71C99F0F14
CB58B87ECB4571E98AEE8C4EA27849EDF9FC24D9C8156098979A1938788DED15
020072C76102552D003454E020E5FF5A3C613CF3BFA671718DB1E4AEE2B63420
D1CFC724D8D515C07A3637970B570A1C2C7B19722D1809D6D2C99A0888C3CFFA
343B76AE1536F52AB3DA276A717E928F4213DC5EF3E98B70C14D755D55CA286E
31ECD51E5B3FAC3F7DFBA3001911014560C630FAD0A07F6EB620DDE74E323C0E
77B32B4863BB0D630E174B622AFF5034F1417DA298826C815DD6191837BB59A6
EFDDC722FECF62CF48AFAE9826118A7842410C4684B52C6C2EBD0E6EAE48CA9A
E688028FEF7910135E70512342821C190FDFD3929CC83670EE968195C5D76179
9C5A1366F48B54A28C26E541AB95EE922122FC84A868773E686161BB319869A1
4312784F224FB8CA890BAAEC943EA33B68FE03057A26865B263620A6D219203F
9868DB049706CBECB746B77B40B0EFE4A4FFE8C12FA40E2858C489953BF1A2C1
CFF4B373765BD1F1DBD7232CE27F5B2820CD12A6CB8136C7E7711B193C2FB434
D7538395C051EB16E6536E852D7066C7730D900327E83554A4BEA206C6837FCC
60D682FC2EB4B4167CBC6F666F6836BC53AC53280AC90B81DCDCE63D8C624DA5
307A9AA98D6C5DF59F1753225095C172115E538C05D8D598A9329E45D5F1CAA9
0C756B2857EB8D5467C782560C35F5AF92103051E4D6EF5928F505187D2A99ED
9933E6C0C482A40730AA0B6E310854C9306535B049A2BA27F72B4165D9CFD34F
683F036F317645288424809317EE853BD818AEC10A09F7A57D614CD390D7A9C4
D2B579C4D4B93FA2311AF32695D1B2252367EFD9F7728A46CC68A03D2EFC01F4
C8090ECBD68E555C7AA62A53B9E02A5640E188384FD9090CC5A1727EB97A6C6B
EFA8B5A4A115FD669683760D62AACECD4A1243D26B0ED2AF2C0E9C8F18C57512
46F1657137F50756062E9A24B088A00C7FB912156FF3F36B93E173D032F1674D
B9AD8CDB5B0208BB29ADF6D2A27372E22F1CAA8B85E8A7F402E498D91B0B1696
66D3E4A18B76F49F9D6A836B08868BFC07AF195DB79441C0AEA235474A25B3EB
8FC14062F3DEFE6BA10690C92D6D52BBBD816590020448BC4939426240C4CCFB
A16DEE1DF3719A855B65AAA491E6B34886D07FB2D313480A405C503FD8ACB1E2
E1A3DB09F75788AFD624E645E2129FA6DC7FAF8C27C5AA912901F48C4A6E314B
7B441784E2343BD1D016B1F322622BD1043E43EA4B331BF4FDA23DE6C460AD41
89D026A941C3A253FE382B58952ABC0E1477785B01D947059EB6D92365D2EBD0
81BC7FF15A2B0D2916AF60DE0FCBA213F5E21184AB9DFCB30B245A2AE0CBC0AB
C67184EC1180FCAFCCCC572024A44F5DBDA4EC0E5A479B333798A27E45998060
8D24401392F4F8EACD1BC9FBF57A14289955FF8AF276BEF25C99CFE69164BD86
93E07D35080D3B51D3E3AE8D7D5A1F63F7770972FD1DD83AD47EAA9F8EF91A7E
B8E2859856A5128D9B01F519E9BF314FACB26F1D17A680387AB67B635B3386E3
62EC7ADBEB4E1135117931613E13BB89CA6944E33A32371E55D27BC14630A58A
2C721F607260523DD5EBBC3ABC404CA70C78AF07A70D115CF06A5D622D0A07E8
86325C76F875CBBE15A724C453267475D4CAA08082FC63A7F3DB40EFD19B8557
B9F5692DD366E93EE4E31F275661714EC4EA43CD30BF50D2C1D7374260E9C0D4
9537AA9B9FBCB26A66DA270BB995F3EE0D7001218A4B2C0A98F27E1EC9E80568
15C130374AD278C4CCB30F0C7E6817B50781583516F828B209A9C4FE7EDF46D8
8C2BC6D6DF576C7DD1173063AC7831616C51C1103F0CBE37ED039EA3425C4EC3
CBB17FD9D9EFED7586BEB89C511362783F6527BEC7DA9EDCD713B1FEF95C7B01
AEC9114E35BA00076874707D41E24B3E28E823EE0928D8F5B775E36C212D8F51
27B32D7468AFC24194401A0E73E3EAD9099FDDD1ECAADB0C92EB8D5ACF68EDAF
EAF708525C69FC55BAD4C122D680CF7323CBD8348DD1C4FB30ACFFD83546ECFB
A1C3F4898882FE4926FAC967E682605CE4E5D763F9625F73F8A837CD10BD8FE9
45E8DBF5BC212A0B77AB704403B7C69C773EAE57A71EC336B63248EAC701CA3C
50B5F23B73FE02101DF6C8284F5F58779952458A54C62579CAE43C48FEE46293
106612C0D2F72F11126D733F98F11723D1D64BA085AE32794E65FF22D036CA7D
224F896045EA894FFBDD0BA4426155D0AFB25F51B801222452FDBB41D1C03F7C
AFF7BDD32DBE2CE5BB288EA85EE61F5310F7C8C0EC130462F18F876C6EE62B15
D7217455AFC8C0315E00DD306D33E8D59138A53B0A146FD6AA9E6E9B3F137EFF
A817CD4241EC91235F9F1BA07A5A482C1EE8CF0D9400C5C7F06F921008B52E9A
83EC90C90673EDE4C93CA7E73EF55226B44FEEFE58A2000582EBE214606E40D7
F32D734A860EEBDB404EFC6BED2E68FF9E02C9880583F6ABB520C2769235241C
AE46CBBB95D91C42E722857664524B3FC36469AEAC60650BD6D0D1A5B9FF3737
69EE243E7565FB05F89868EC582658998FD5D707DD686757E74C40396C8E10BA
988D46126A0327E1CD1B581937930267909C4FBB011609F9C3EDC9EB169A820E
3350818A4470ACDA66E5498C209ABD49E140F4CA972DF5C76C4515DE95A29D15
BB665BDB2A56E4B15956AA2D5B790AFDDD209B70104DDD829412F9D97FC5C8D5
E39937B001BF048D62CEFE7A1BE1F55C8566649F597820D56B44779BD6DC5A6B
4D0F63A3E9A857949EE410BA4F8250E227FB05DE799C1BD44600D2AB94AC15D2
AC772C1BA775A3414CFEA58CD14FD71FBF91382972395980DAAB0F15B779C4ED
AE89A65C8401B7ABE0A6E5294D558161DE6AB95461246F9C46BF526A58DA46B0
BB09A3BF5B2ADF456453DE03ED3D90D015838F8072D767F4D533BEA62886B878
E1AB9362D7875D4582D2A574CBE1D26DA0F9D0D7ED7AF5D067444272BD8E14E2
2689D398B953B65D098F09CFCB139D0745C61023DE7A6F50AD92E062B2BC9664
DD65F3CC7111BF7606C14066A7B4D7ECCB4A43F24DF2217066183B5069313CC5
E760B8224DEF054D40B3409EBA34CC609FA53BED792DA48B78559F4E24A6D58B
4CB35AA57D1545E9EC5D5C3375E19B4D8E21A5BF462C169BDFD6C700DB2DF0DA
D79D7D74607F03181DDBBDCE8E8C3337095E21142117E65F954DA05AE9C967E6
82605CE4ECBA2840187527B57ED962708CF7AFFC5A5E4B14C74EEDC260E1A539
3669CCF8F290683574D32F41B39AF3ECED0D95C460362726C4A6606D446EBDEB
19CBF0743F7F57BC9024F8E326AF1777FD5318E97E0E6CE2CCE1AEB657E9EFCE
8D09775E7432888144686AFE62DBE3F422BCA2848A065A1560B1C2D9886336B1
00F563EAE038F1202878168633408F8A2E89D7C9A8DD908C36F20BF53172F819
4CE3B471CC2C7FE44C832B9BF0E529D8442652673CFAD49B63B96D97FC546E89
9C8BCE40EA0CDCCEFF486438C4EB99366FB6DDF44F265EF23D51EC6346E3C963
FB1BA1018B8262F1E2097510CEA33495FC5CD4F1455DBC3E902F1805B3E415E9
42C015C36D914C2A19EC75577D484B085CF2D3BD13041715795D6DB1D7F39ABA
A0D3138F6C40CD614F18E9FF184F3ED7868AF74ECE5DA88BFDB49E1B31830CBC
28680176F8BCAAFA58B287777FED983955D033876B721F0742C642094F648AAF
D00DE629FA237BDBAAB9634ED6248487CDA90B25E1B529E859D283503D108C1D
2C2FAE18D0F837F2FBC40DCC16DB66BE6275511D597F3F7834AE54BBABDE8C4E
5E6E59A7E8184B1F07081E0B050984FEAFECFF846191F4F4F6C69AD7377801BD
125505D34C751744962994578C43A710A148BB13EFEF18F34E3FCA0C68F3E680
6A2BF4EBA18FB4CD0D9FCDB85231FDCFBEE735D796E357AD910B422620203D96
14786185C0449DCC820C78968FCA40C0D865F46A2F35F70FE3D7C375A6C0B331
EFB1D7ED3831C4BCAD8D82A06DECD55295985B13E448FB954363EE04C1CA370A
9C9CC533EE8B901CFD38B6AE8519D68549CF4A443F786849F4D135580793DE6A
7CC299925F530C5ECAB9021D736A5DEA95A929C10D00EBDCF91531FCE908A5BA
C001A2AAD9B6DCAD1953A3EB3FBE7A0BBE34ED09BB1BEFA7F3AC52BD2CD52A72
9853E632808C06C928783AE7D1F2FD32C072BFB0B91C6BD4FC37D98D939516C7
55DBD34DCF21BCB6C500C4F8147C54ABDC618F6F35470E9F4027E09BFE76434E
3BCB1064B0D8F1FA962A4323F5B029E1FCEF3342B282099288D5BFA77AC3B48D
420D3E953D2F6FF0E45D64FF0AC96A411E0F9382BEAAB4A8412B180F0A545B30
E4232333E201BDF9463E19DCC6D85F357A8D8EB2B929CE53EB6FA955045A9309
0FF6D582639B94529FB8BA5F68FEE60B29DC5BFA8EDB4C261EEFD85FFA0272B6
7393DC8FB4294B006D7B9FA64F1DC9D40FC30F76ADEB12ED78235A57F0F59D2F
89F19B479799D6CD55958B3F874EC368E357E5782BD17740E017B54F286F58CF
2232FE55FBECA07BE6FC758C062585E100F24DD56743347FE3EE6D197AACAE8E
91B7DC82926481E021CB53EC0003BEDCDF05258CC5FFE245CB61DF2032E0E98C
5353D19FD21D6BF9308F48B7C2738EE52A7491F8DE642C6D89EE6E8F2E8F32E8
D10D6199565DAD1C08E4028F2F6B29B0EB5BFDCCE789852C349920CE6B42AAFB
F0F90853ACE5012BBDAC60AB0020164901F83DF3BA9466234266440913D50739
F51CF7E2D941872FF3D55B7A327DF7FC87C03F143E1A2D8720028C0019ECC8F8
0726C5DB3852D171E401724807B07AB5935CB1B8636630F31E9061C7F1C8897B
52EE6EDD81132E4412BCC326331F40C305AA140A6CFCBDE1AB7983940A589D9A
AF82C4663A3B304F9D591FAD26B2C3D294FA26CDF6613C06CC52B3D6C3AB805F
D8A8B3D0BA3DB62D5A1A3CE5CF1EC0F3EA22D097FA2052AFD27654A467CD11B0
E9D84CD20D82C137108894380F35CB7D1A9922FB399A4E977DC9B462089E84CF
E1011574D9EBBE781DA16CD63169BCD09BA3E5E5737DDA455CAE9D1D681C6043
AFE0663C368CF15E228F3988E6499808D0E9FDB17142AF047D0C60A87A81207D
F09674F324FA8A3CB9430A6E23D29B2D7C529F835EDC8B761635A26838BE79D6
939FDE88F9E2498F1FB9512C40DDC92C7A11FDDAB2E8F89BE4046A4A683EE91B
8D869C9EBCEDE0C6E328D7F2FCE78BACC0CEB7C38430DFD56AAFD887B22532E8
9339DDFD764DF2FB93BA92FCF7952A42CE1DA35C7642425AEC212BC90E9D5FDB
88F12DECA34947E30E0D1F0FDE402D4C4C477A9B49860D3EDEE1EE1EDDB0B6F7
DEA0CC5CDF6A8B3FC64E39E2DE83E407FFFFC7383FD18168A5E9F9CE271676A5
53A12CCB2032EAF44C1E4833FE530BC0441E0D0677CD16D0EB243F926513AF9A
377E0FC731808E5E52DDE2D911B8556EC31B4FF6386920012F89CF3111212085
58615B8D03F409DEB62CB6479DEB4F6A2008CC7E3AB92D00C9F6A8837A414828
563E853ACA9B23AF194E8F980867837CF7FBAAD6366551E60DBDF78DC9DFEC34
2E157E1A500DB4159F8949C5C3D753908524F6649B59B5D7FD35C2FB818EB8B6
320CC8DAA8B188CA63FEF4644BF31F27E8CBF1FB4415332B1F4D85C1B59A2A11
D2EEB18D4FA03DBA1AF666B38B72F9FBA3A854DA482D3C35939AD54025E65458
3C4ED6D9D0956AE651C2B84306176F7AB5BA95874A1620DE843BB0CD6A9AD4FD
3497EBE63302D3370A84A580411645BD3696C4B6935D4D9781A6076CF4AC23F5
F3A495E60D2DC40052E16B99FB510444D359449BBA58F8B073442BE7A1A8F78F
5959CDBAE07AC4C849CC72AC6BF8F810235FFA4B36B990180F6B2C8065D9ED2E
4C25E75CD6015C07E38A1580CC9FAC38CD272BE4AD21376E03009FCBDC9BECF5
03EA4B2FB4C886EDF3C74E1462FE9F1C24F11FA1EE28195617BC2D178C7A9F8B
8113B5B51E066AA366FDB635B6D81B981C21F73B34E3D77AEF339FB4672DDAC6
A751FE7144F3F8F952C598816588DE9C8A1ED4CEDA6CF086D2606F4FDAE7DD3D
CB7581DA0523186F9F0FE9DF94E159D685D715786514400EB47B86D02D5A568F
8A7166A1285C2598BE0414F5C000CFB115415E3709B1E691B9D0FCB6ED17C218
25F52F9F6DE2C3E9374E5D2C8F1E12BA348C9B5280EAFE1FCB031A9531C4F38A
553637928081C92987A40F5776AF97299E671D9EF6A6ADBD46DC27EBCBE11F4C
F423CB3D73285F32FC4E53A02480DEDB9CFC98C33F37E0080D8B12B256913E51
25478D6B518C25A5FBE871D8035F45D0EFAD4132CB76C2FE8FBD5E0D042D3049
867723984BB1683934B76326BB8423614ABFC42CC17B060800760C11AF007CAA
5AA38A1EDC25BAA1D9E95DDA3540E1232B7450237CC6659E3AB7A54611AAEEA7
2B792EFC2BF4CD7E2C39CB5E14B9FBA427A9147FA8438617D0FFB24E731F7E16
652C113B75D41C0FEA3951EB1E9E0436DA0F21ED3ACE2804B4966096FAFB8B28
5780E567E76E82C8EB674E4024F7A187BB70D33164E3955DC135A18D08DFF8BC
21F37F99F544F5E06B75136B84FAEFE90BB7C62324F675B2C5019FD0F006ED9A
A5997B7E5428E7D3086371649EA744DB4AED994D8D2093DB0CCD985B410FAC97
4E1B4827057078CF0D2158B50937201B296B9C1956B32E0FB0A289780F36C0D9
78EDD8969EA70C8DC4C63A7D7BA92036FBA6B329753CA2B246A68203728C9D5B
A28781C1F0E5F99EEB895CE4DD324E112D5BEB1AD63991615A2CF075ED4437C7
9640E4901E5D90F43EC083490A694DC7132FFC10FD2D158A422BA3918B398B8B
FD42B4BB51B879CCC72EDFEA64AE533D0F93A02931E754ED53ECEA581D7F61AF
C759B96CD82DF912080CC89FAC65DE6B44E5221AFE942BD503E19C5CD1271F46
C229AD7091D30542F498E69A677A3D356768743DFBC88690F17069BA98F57B7C
C30B6CE0F7C94F14EB315BF7154456EFBDEFE44963C182FB30FEE92BDA21EA4F
1CEE8F0DFCC7AB4380F4E7789EF9899EE74015C3DA4D37BD0974A676CB5D3A60
407D0059206D1080DA20573617858CBB7B22937797C0FA87B0E1E0C8EB724B8A
C82A7BFEAAF97DADF735C6B7B159694918F93F0B78BE0002D50C234928CC829F
C6FF6556E1E4A3A71B934F2A45A8A0660A6FDBB0B23808F2CD77A05B23B88A7B
FA2EEC346E0528AE2CADA4B247061A912888C230DBDD3D01234B7D0D3BAB2532
896191FAF4BDBE2E5C7FFEF624B5C048935AD5A9BC3C90871DBCD2D1E7020BC4
EF5A869DD783ACDC25907A26E70E3A3361645BC877BFF69C0EA1A9B409ED3C88
FA93FEA2F142CFAC051E6654E86649174FD11A6DCDBC9D4398BB4F1F80F49D71
83017CBC482A452CA72A1A8AFE1C6AF136D430251A144C3983941A00D1312714
7DEF123DC68CD29458F88629C9355B3D37EA6751A5636630DDBBC3D067F3995F
CF22FDF16CB8DD548160E6BE75CF7B0345268DB6B2999933D86BCCC09FEFCA8C
6EEDA13C134906569463499092C2150C1C29AFDC3FE79236579639F8D329C17E
D00398FC3A742A48E0FE6F855EC129CF819412471F291047C450AA9C3F0ABB99
33D06883364352594FD974965626AF9AB92BC3C5157D11F8A9A4147F22FF25ED
D7B19BE347B57978DBC3760AD42D7735045E0131EC014080552BA01AEE38E112
CB8F8B6686EC12288DD4F353DB146F43DEB9F4610B018CED2DF184E812E41F13
07CF5B59114ECE0E976335055046BC1EB023606D90DDBE0303120F2BBA7BE319
FE9053CB92D08B6EEFC676A790DCBA9BE649196EC3588E3AC01B8504D54F3828
F21804C3643C1542DB0CE1BA1D33170450A2F1A88CC892CA135BAA268D558AC0
495817EFF3FB6B15B27F44DAAA5F514FA550E85F2D90EFFCA8BB85A38FA70852
0CB64FF37AE7FAC8C7493AF6E3DF94C2A688474FC93E294EC9CF931CA10DD99D
AC5865E0133671E9ADFB2C1810A4C29772C5A15303089CA6D7EA691A1F35CB8E
409F2BB3FC80C9331F86CFBAF8A46B4E6305A8894B4280C08495EF319B31FDFA
7D55701A962CC05DF4DDE845DB3A91D726D44F4A9E2513868C596929D0CDB6FA
9E610DFA88B61018DF6A337C5A2AF4C68F81FF37E98BF648D893A588918216FE
757FDCB1F6F8D6F9BEDA4DC4981565C766CB0754C66B9C43ED3A01A038D92565
35E39CFFB33A5919D7A9A4D6E0BCE28B4663F5957AAF9C33D3F197E87DDE402E
8DC06C98C2554A33F8FA67C55C1348A0A6E1B618E5425F589A3BC8127D525BA7
ADB9E7EF9153005909C4934BD5492CA5A5868BC72896FA7107169E69D698122C
6A364345641207A58836B337B9277F090DE03CB62E3DE4F2FDF367511EC2AC17
07362FB7C8FC4A16840D357B1242B3D28D23D6C61D01B7464618FF703691BCF3
48D5E2A312DE388F8E152584953E527C3FDBE3E4D7CA6395335FAB0D70008BB2
ABFD6417A7461A5086163963FC3CFA53DB8CBCED4BFBD3B8CD5E52AD92638F03
B94932867C38827131CBF409196FCDD499CD0DD2C44780166846675092C0D6E0
83B7DA79CFA322B745E961348F41BDA453C0154882BB6BFDC37EB38D9960A185
1F68A18C72594CF46489A3AFC625BAD1C1C0DE366B93A6FA829729655BD745D6
7616B65AEC39EF0D9631859D85577FB496F37541D49B74356EB51EF1AEEC61BD
C427DA97D8805B90ADBF1BB9CD3DE04C8D23621F77848B7001A4A3F99C8690A4
8E486AA54A7D53A674778B741908838C1586332CE57B21B9959A1144103E6FAF
2315A5DE6DB89F61D150F78B7FB96F1B9B891E3CB0FB4C7F98F35CB3C58A372B
B7481DE83CB8B2408D35E8F09F2C8BA6FDDF9FB02FE30D138E8A738F9CDF76B2
5A4550A8FDC3693090DA94855A815E6555011860A53BD183B8A87C0939372166
D3C11D0D92D1E3A15C127E5EB950D1B6100039726F980D57FBBC9132A9037AA5
F7F949763828D5B31ADDB7ADA1F7FDA6F177D5D6608E5C7B5EFBD6B6B131E4CF
C8835C6FCCB45E676AC096795FCC39AD38245C31156D10388D3E7A30A6B4B08A
C8920891D0F79B102E357108AE46657248D12FF437E5FF77CF2B8014897CB077
A0DA316400AC3CDD391020A1F1B4CAFBE3981D267A5CA3C71EE55C26B018D6CE
771A96D261C5ECA7CD5BC9D6591B38C40C1D18D832C8597EE582525C4AFD1590
4D68F36BC4ADF8132B3F2A05D66CEB664D1B59A87DACBADC7BA6E05EC76CE13D
A8B90ED2CBC7E65D4AAA1F26A444175FDD6251C8A08E577D1E9AE29E098C6FD3
243344D659BE3D8109C473A2BAC866DB19F35D34ED3E3B0B7A0227229158747B
118C0C65FB669A9D5E45FECDDE73D0E0DF463C70DC4F5707E03751D76CA22A0B
0C5CC59B68FCD30B46B78BD05C5106F7EE2F2B5355F26CA585D2B2B39892D4E9
1FFF4277C9FF5B0DD5536764F70B9859A1E5ACF013D55A4C354BC066E48A803B
8BB13E562F1994E6E92FBB22850486AD07F295B9AFA66AC827BC327C5178A7E7
C46C39A8F0C2E67EC74E44E741A03A1E3479390C0BBE9C65A9AD5648C12F4C92
F4279D6B9DD8B52663998B92B8680D01A3E3C59C8AC803BC88841306488D2A62
BF10DE1F1D17CAFDE4EE95C35A3B5FFDA253BF15E1AD890E700B9A05B6723B57
FF68CC87B7521DBFE2A3F276FEF658CFB09BD1449253111FA9B92C5B0643E293
DC779D49B1E7559090F09C83AA38454116BDC096004C09C4D8C3D72332DA6370
C0709C1710DA053E19A16E5A1B12C048D74D7DB15EBB3DD78DAB20428AE21334
507FA04CBE962D92C3B3850A1DE2B1C827D43D22781754EDB0D004DB357B3373
88D7983862931D3D10C4427774DBCE4F75489E86ACA23B6A8E370643D37F7258
A54D9B988A37CB6E3E3711E980C518EB3566A85F6F2DB3B1E59EABF7CDEE3540
99AAF275DD427B8FC974EA819A987308CF4752ED234519B5F4FE16F43427AF29
E238AD8984C55E3DE43753F279696B81628FA157103F89532025A8CC8541D74E
CB4D0D019FE78D095885B0E66264433630F2B69417C9D7F5074F02D4E8E0A1C2
21C510B2031099528D379C8DD3F9EB36BCDB9F3BB45D5350DF6AFECA1621B8E6
2B85FDF711388604F08B7B672426554F6B314B0B2CA6E258D28D8C944ACC26A7
0880B703026442424AF699C60B5E41F0D596C658CB6B4BC661AE8CB0FEF8C37E
2CC03E32C97B9DFC020F5B8FCD8CDB2617817F05DA9AE11E0960DE6462832ACB
00E7B43675FE8E849CF8FC276BB20734CFFB33D266CEF07791D8D2B3A81C4512
FE742F4F091E2AE2CAD6DD7C7854924E47FE016066264245DE3FC0C8799BAC93
DED1B2B919CFA0BD82B13B1024D5FA614404F42AA6071DECF6AAB965C737DD70
730333DF9EA132595748E39047E2B5AE21BCB2533C4974AB799F4085E779AA4C
E5C19693D5651412307AF69D6BCA5B01747306F09B0EF64BB3DA65C73BE7A228
43BA8DB3064F4AF4BFA24AFBE34AF5918F04BAA532407575FD0243B93C6D0115
FB0197A19D31B811384DE04E7B6431A076AE324120EAB2102F74527FC0000040
C811CEADF45A74DF8E5E176D10E70C23EA38476EF11194DB2403EAB76DC7AD49
661D4349D9D480E548C76029D83A3DE4E60A4ADF6C0B27ADFFE4BE8A42473C9F
122316DD963865991F86623E2DC89AC8FEC57BA3A7E6EA61F27C3A72B168F38D
56DA47A0E6D4B2D9C57F94A9A8D266A86405CA90A59E766331B728CFD1568C4B
2107E8B4A6BC930F382EF91852E1FA44B309291292BFF6EC0A34ACE33038F5B8
BC937A322E36B82DBE00481D02F27700552C6086C577C920F1DEB49D8141816C
354616BC1FB2F221C9D4D02C0358ECD726400C1D1FD21F51F1BC921FB88F43B0
84570332F3C4E8178CDCFDAC6E016744A45C8AFA67FC4E4717B56D9EEE57C68B
E0092D15E2CAD6D25CC718FB0A6B7FBE9B5F897B954E790DA67887AFE822D379
1454D26B90706004ECB344C0F9453189A1DEF610A129AB3BB92C1EA90C5E2A87
A66A60E06D8150A33617A142295A978188BE518146A143DA36873997DDF78749
7DB78A5D206242431DCA16909099ABC73CCA88277EB3B6DCFA7CFBC809773B47
917A74DFC2508A47806800FE59CF6B5F61B253A64E7FEAEB810834C9B7DD065F
AF44F1A2869AAA1F817FF57EF4CC55048E84262D9C2BBE9B7EC2113DCBD6D3DE
8F3BC0720F23CEDC5E42A4D14D1EDBB6DA767FFF0BBA9C8701EAF0CFD1F8470F
0DDBB535193DB8FD86FA2697330379EB6F72A58BD711659D8A1CD53572CC2260
233B44991C5CFE52FDF07B55B1594B60BE1FC2ECB8499C5C56E085681F7BF933
988F5FEA5AF6530E320DF1E0A4D5FB9B323953447DD6C711E40F1F4F4AF8D700
78341B8685AC96EFC164225942D24BFDFDB3B097414856D5C79BACEBBCC336B1
78B32214CE55501C47D08047B935BF6B04437C9D0EF681F94C3E4E4F7BCF5141
CCA040C9F838929B000D999090F2537DB02D105EEF47948EC0BB97053C3309A7
E4854762CB4A92E6A941C515C88CCA32B89E260B016FEFA9EFA67229CF4B600C
4D0071E2464D25F60F15E9B0260BDD241E10AD23885DFB748076DBCC17AECC6B
9A6E116EFAC2748B66490F1169A8E4D3E434F6523CF7B634F906846AC5733EDB
25B4AAE418746FD26C3A0E6387C14E0AF699277CC144209F0A99F06C9AF18513
1BD26E921672049872ED425FC3BCE52C160BBD2F2F09B300D61D75F0437499E6
448E139EF8FFD1C00398B6253613BEE0DE3430AF9ECD7764EBF51EA441CEC089
5FC5712926AD67D822E096DF143BFE7B70EF366BC2F3F82943872FEBA04DC0D3
E84EB32530FD8142AB91FDEBE6EAE34DA0637523FE32A9C95F48F65EA3B826FD
7DD4328FC9F45EF5CBE5233B5C5DB2346E7588B9407304B8F5A6604CA5D5F3F6
F24EA15DB5CFD46703D3049725C42C642E12D3E18EF3EB7CBFE7BED6E77201B7
6F3F87A0CE167FB5D289C5D91556C3BFE5E00F081A80771FC8CE420441815E90
FF6C2C42E2A17256507D7840B4DECE024BA089F951D75323331969BC35305456
889846E440FBEBC6D76A1575F3964D2685769ECEC109600AFAA32C0D430F937F
3777161586A6D655EDCACEE53F09033FC91DB38920F978BCA9A123B31E6EFFAF
E30B1BCADACCA285D9BA634A228514CB06C212AB929A12C1C5D7D41C27BF2D76
FAE51A0B7A6103A8026AFFFEBABA69E2339BD2EC90E4F2403B05F2982F12FF1B
0D2878C84B13F48CAC1EF93C280ED7128555E7EF522619BDE936DC01D8C0C887
F047AB45E7650A4F679B9A4196A54A0EDF398982A2C7C994E513B8A10FE17269
C63610E5B534F7B0C3262D189E3BA2AB0266371F561BD4A95F53A62245D5B98B
A9CD1C9F0B7B00AFD9C334D888715F8F834D4EC4D0A74192A9B5C50B8AD80FDF
0B97EFBE01E8ECC748CC5F70504EEE4A81E5BE9EF5B0FE1E61AB1FC21CBE13D2
E957603462E25ACD04258827998948A9E428C9E8F7D7924195176EA973E58B2D
B22519F976BB5C8BB9950C05CE480536832AEA85B92681AFB514EAD5C8185DB2
A50E79111815F0EC1A429C0BB530FE96A1468548BD512E193B30DA97A0F043F0
8D14E4A3ED96CAA01BA9C76BDD341AB084BCD1D4460CDE823D1F27BDC523D03D
761AF13F050B674B2CABE15206AF0FE780F8C6148B49B1D498D32B8A1918B7DC
F4E639D9DD0DCFC01A875393E7B15CFD2FD666030F4EAFFDF3AFE4782B90379F
6477341D7433EDF4B50C65F72DD449F7F10B009FBCC2932630E38833A64085E6
55FE17716A525E92BBAF939E96D9BA7029C8E8033767C9914765198CBEACD2D4
AC6A8EF33834B8179D90772EA1F084BC767254BB687339F28589D3D91453BA86
675B17019481CCC146E0022BF8B6CE164FC16494477FDF68D35C47BFA25ED7E0
9A4BA2EC668DF690E5B7B6B74D392D22169D51642D1D9B6599360B8A97318843
B93146EC76A522D02F97B32B1514EE325CC98BA8BDD0FE33FE6370D7CDF74F6D
B1FCD83C9C34C76C6E303DEA9731322CAE91F48B7FC6E64C6810D50CF3E0E553
75C7694EC6F3F4BC661F7CEA9DA15CBD30EDBD97B1DCCABC47EEEAA703E26C8C
9F8C6B793C19FAF3C3792EC80B21279F59EFFAC39711352071C0E6E54E913CBC
C5A0047355290286B90437C71444E570E4FB2A5A7D09D9D9C621D1FE47D715C3
3632490186FE89F5CFCA3203364C0B6ACF714EC679115A415553D2574BF171EB
7B5D0B2EBCC4AF5AA40AE1B31EC926026DA25D51A3BC1277D15A6B44B44631BC
32B840610A65EDFBE121594AFC00710F137C5F61D61616FAD6FF7AC87BDAFB16
29719C99A79CD9F73207DE7D6B8C48CF558BAB5BB636158C4185E1B8C023F7E2
7D95B9817EF2D36127B419085447DD964CC5947C5AE65EA617F8935144A8492A
A5FD014FA70C13240B1D8FF62F06E192B957C41E47F39171E31760496022D50C
49AEA1895306C8D08B08959D00792F2C19A14DA46A2B49ECF95D3DDEF938C0B4
1C1687B09A69AB9FCA6C29ED39CDE4F9CD2D067C2EAB987493386610D920993A
FDF134FCE1408DB1A5B9B02DF16968942FE79F0ABAE08118545762ADBBECC58D
564A2A480D866EB363DD282E5ED2B39BD3001F698F13FD283DDDF9BDC9595D88
5D3BA5E96709E6A05912AD77C5E88350FA77E7B137B8A6F38C14A7D31F07778C
2256DD394E67DFBBCBCA9F576DF07199C03BA5745D802A12395633D95805F585
D0781BF997255D7A5CDB509D6E3456118C14CD378AFFA0B3071E8667AA7BAE2B
6BD2687A36A01100B17044A7FC61E6AD2E5ECFB199E49BBD28DB216195143EBE
FF8F7970CE5EFB380B1EA37E094923F532E28EDC2D623FD3612C7CE8E0EA6A0B
A105952B58DBF5E9DA541AA238147DE6A54B0E4259227E2C9518B39AA092B311
E89869BE33C55803F52FE11DCFB6FE7BC6B6D88AC9C28BC369FD38DF588D9552
909676B8A41D5059562C82BF4B3C0F8F9240412E977AA7486D663B0D0FC0C7C8
E92D06542129C0F4214AFCDC3378D68970C0B9428FB64D12DD4F84D65DC6656D
6F8514B8A76751B95BF3A0755EFE8AAB4E0EF7E97DA4344A9990BE9B3AB133D4
34D7195A2FBC32BA092A0D4101A33E8A80209BFE5571FB05FAB707080A32CDD7
278036D198219383BEE2370127CEFF8F3CADACD67D2BBC35AC6EFE12E11463B6
C4BB34AAC74F37B28209CC84A2F879D244E3670B5E0EF196F3D016FA1075B46B
57B8DF6C250B69DD5F98E795BAEE0A3F2ED505E4783B1536FC79F6196B63EE6C
0ABE50FCB03334DF4CDE06A25B326E44496719CF8BC6FC8203B33D594A5905EC
9726C54A5600F101C8BF414580A8BE6D26211842FF006FB0925FD865BF27380F
18F03DFD626427745CB37675BCAB8E0555FDCB3302167D51975AFB3C7900AB43
81F372F87A1D636ABEC422BCE91F8E262DFD8D4F384B3503FF0C5963FAD1F06D
6A47B767303F4771D797448FB200D7506942A27B3AE1CD3BE572CF8DB62C805D
C5ED49CCB97A49355F105B2A2C59E0D3D574C697248E245699C738CE195FFDC0
B6691A6E0CD312B6D473EF46547120F259C91D0274B4B94EEE035BAB15D5D125
0D768421E79BAD3CBD759DBB96DF931D2C38E3EA4B9BFB6842C45885D90D55DE
85E73B1F98312D6366BB8D484B42653B9DFD8EC8B1466973280E631B4B32790A
E1EBCA27688C1F2E0DFC02ED3AF7E266FBC2B62CA66EA732F3DE9B82E1FF6210
78F55281E06323AC20AD4672E0D4F48C2BCF493D309594B9084AB1D19B370492
3DF899254F420DBA099DF4ED79ED8F8940908D838259F42C116E6B60B6763759
85FD290347D28A801CE58BE3EEEFDD3227DBF1ECDB1E90079BE03D5D1B6E2DE4
50551198D4E916D631B557CDEB3E63BF5D5FD34B781929C4DCE76C2294C844EE
DF055F20095A740F956A62A4C3CA585591D2E9979CC9D52E27FCABEEF17714DE
5AED82103C4B1F086DE07C0EC2258524E12A2A929AFA471C42941FF7F44967EC
2866565DCB78A5C1FFD476334C6BC6ECF868613BCA2C95F0F425BCAD9CD88086
C9029AF47977F0A9BB4A614732C47D38776DA4409A3406F5F5611D4AE6B568FF
378016810F1745B4AF5AC9ED11E9E79D823517A4204431EC6436C6936E979AB5
975146A487F3941B37F8FDF3A046DBBFF3A35B9DCC9EFA39090B3EFFE9545E39
832A35840FB2BACE26C801920581905F9291F9FC41341E4692E8B6D65B0B3BFB
1257FD506D4AF27815144705CDBFEE9C1926CCBE56FE97B0211DE50C52C05DF8
AB780CF0963C63CEE546616117F7CA5E841CB7AA7EB51564818A8CC52EC3122B
37215B57BCC84051333C85E59E596BEE48E4155570440967D68C527D3F5A5D14
93DB57E96D8364E18E0F0A319DB5E57FD96ECE9B46A014B64886B1DE916A3246
CBE7E002C59E1D9DF27BE0B140791162E84E0648C8D90B445F4DBB5C81F40A74
B738BF88C0BFCC7D5760FE9C51A9B86224250981162ACDA630D190E22340FB0F
FBE5391E696F730019CCF591CD8519134EEECF76627DC702808E89452DA8A2F7
84B84C87825DD97FE4B9E849E11020510DA46FB570F5BC1645AEF3FB9B113462
F2B2C3153BA39434430C8401C23128BF63F9AB7D42CE0BB4AAB966BE892038CF
D90F7AE00609F8BC20D68E9396EF80DFE2BD32A349749CD16B57149576B30030
C3F5DDC69C3F45E317B9119FB9293130595DC1365967826AF254ED71D4250B0A
5818115F5934D90B607D78647B86648633CDD6342AE76D0773716628CE10AF41
7B5A28ED15D2DF37D2B2CFD8C590F6D23150D1DCBB092E9170FB4FE221925392
28DCD677DBD7C9DBA780461C8088F7DA4A580DAC0CECE5788FB75595FEFA5107
7E8F50B05EA673C872AD40D915AC0C61C21B615266C19B7022A031F2E326D706
77879205F0DFE6BAF05831C21474A042799A735412A8A5842F2788F0D1B9EB65
3FD5FF5A48C02A6BFABFCFD8E5EECB2113284BA94984275FBA65305C753CFA83
BE28A978568CD7CAC786B77BF70F9A5CEC64C3905C133AA2CD1C299686A8626D
5977EB89AA193E716C1325FF5A3A622CF3DFB73DA6452FDA2754038F27D716F0
6298C63EBAC0996CC6857C07C89B26E59E94CE1055574AE7DDF365B4EB715971
E0D9BFC393998ED646AAC3E669E81BEC471A01F025051109ECA4878E605700C3
8F6DFA13878DB01C681E11D9BBE274466CEB72FF5FE89699B70A2563696C276F
CA0E5AB893BE44DA2F9648930B5DE7978CE567127E8375C76B19E5FC97248FF2
D848E20676A446B7802A2BDB7A299143D23EDDAA65639405CC6B638680555EA1
DFDFB6B3344CDEE10E590BDBEABFF0F72380190ADA3F7B5F35FD90DECA1BE0FC
336EFD051AB25E3D0D4D7E63685E0500EE83CBD471CD5B7419565D6580A1FA0B
351130C91B5D5CD7B8E94B0C1B4A2E3F94807EBF93C66EBF24822405FA97085D
8EBB1BCEB26573B1E6596FEE24E11F9FD34ED177269BAC74E46700890BD01995
CF695A698E695354BBDAD4FEAEFB4E5F27E12D806EA3406F97340DB47B14094C
36BA54BADC9C66D88ED7E582C6FF26D252BB5F4DDA896EF90DA71DAF6DB80082
F09A16292D2F221CEF488957C0DFAC00EC2E87565768EC51D8F5223AD9599F2F
91D84F827D80FC95F26C6751BB56CF64867A7DF816909F155C7A9167B17B6783
751B22D313AD9E3D42BEA8C0F8545EDCDD579E98B0D2F7F5303EF014824F40B1
813D6E7462CCE161DF56FAE3DEDCAA3E9C6CB923DF4CF0AFD94A797F00730D5D
43BF1D9A5F9E2ADB94EBA8281A39DAE1C6592B83F246ECB371070C3AAF60FC59
457AD464876D1C1853E083198BE26BAB5FBD57044D4D8455D111F0A145AF8D4F
0915B942BF0EAA553E50B625E4EB2C577506DF4C7636578B9E743B5337AB0B8A
79FE353C512AF39A32269553FA4562D4783B0C150F952002C6428C98AD3AE4E0
8ACCAE1F2EDA2ABBD20AC06D723E77210434FD5AE73EE767A911EE2F6E6958E4
F9F0A4076396CB120724D06CE63DB26999BA1C561154D5AA76A6534339A24E92
68162C823367BA185E4478419B81B6D7EB7770452361B1361F30229416777749
A8AE58A91B54E6549CADDCFF6D1B932322C317ED1595DC1D343B5D8155786766
7000F8641FC1511A496A571EC8117F42209985E88C3AA27EE21C95A4C3DE9B3B
DD6F5C00B175ECD2F0B602002D9AC2D2517212A5810CA70F9AC2B8614B76E4B2
E28D4104C03D09DEDC5B6467DCE84844ED1A541309489EC9B07DF57033298903
653E29AED4F1E5F7D2B463CA41D5A0D0B2EC515837FAB38320F641A1B2E0E932
A84C0E0DD45CCF0A13F8ABAC147003AD0AD6DE5DB7D64E7510AFF6ABF78C60C1
CF3EC4FD37CCAC45FF0977361F2FF2B2C7978EACE392FCAC907D3A6434477E2C
83AE79F66E6953148F87237746DE0444530CD2B289B2A405735E0155A95F60E8
03DC70C6310ACD92FD5D30C87E54FB36DCCB5C6F5ACF7541DF4C7703920B0738
D054285DF115AF8A8BA409CECD915D2C43C938944FA0D94D59E32724ACC78E77
394B686C6C9043DF6804FFCD67FF9B58E1FFF8D35F399676B7C20B888D49CE10
CEF70A8ED2241FB3D6110FDDE31E760BEF5B4A6F8393287F0AB74A21F52D0751
525B1ADFD6CD98D2F53907BBF0151D8BE5B0777F3BF84A46629D9B0C39DB121A
E6F9265EF710634ECEF6374DC124978C6595954D06E7F61EA4FE59537FE88F4C
496154EEB7C3612DB25384ADD698ADB7378EC72FA18DB8FD7E78E07651DC55EE
06E976BB82249A048A9053E5AB729BD44D45228830E16574F3152A001EE81A06
EF3508DD390EBC609B97E6A30E3C8C3C238975C5A433EC37C39F349BEAECD50F
C44D875EF53A06F57C89C5F317CD407E564403E8564D286A994BB9E506F8F8A8
DB11B628813AA381225130AB704979A705B4D561A0394941DAA8E6A0F88CB98D
356B608919F28488635F7EFC1DD79CCFEFB4B97445C36AEC9C09B7D83DE66F07
BEB5AE7FAD57170F717548178172B46BF878649EB1D717AED49645B10987944A
E802AE5EC7D464D3EFBE51C99A7D69D280E21F9802181A2E4B9A07A0A7F37394
91089BE5411B4A44760BB54A8F888CE8AB40643EA29DF04FA35051D41501C72C
AF717BC1164BC3F1C5703EFBE74A8B67573A3BC0DA5695DB84B4F53E2F5629B4
BFCB21CB7AC53FF65B43A9CB81EC0AEC57006EE57147AC03F85301768EC854D2
634D11194C82BF5544ECD8C07C609487DE15F2FCB9766AABACAC156C41D010AA
DC509D38CE7BEB8424AA9307CFE6ED2E8BD9671EB8B938D5CCADACE36D8E5D00
C4BFE745219F92C2458FA2190DB74A95491AE2237CA503220FF30E252942FDD5
EB32855F32950684AC4764CDE6E2AA905A316E085A16A8ECC1F03C11BD630A65
AB4B26B35F0E8EE029EAC24A2390902EF370A3F32339EF3F8CDAD4739765121B
53D8188DAFB560716104203E34D084EADBCAF58FA697F76BA554FDCF7670AE03
9A76DB44DB7B99D5C808BF71D892EE8C894C8BC3DF16590384A1B4F12F3F7519
1A7C2F9BC5D6A1B3EFD5D81D67CF1828F5B631C5B70F1C664E07BE0AC5E3142C
5BF8D63C5115AC7E81EE21F1CB004C932A593870ABAC75F94BAEC27E1D71214F
392A8BE29DC476D73F8D205297B636C32936B07070F81A0B7208BB90247A212F
638A33111EC2A2A15D1C397AE74981FDF16EFCAC42A003F51312FD7A70875FB5
69460490EB687169D6EF3D0949EC290B8E4FF0125F70D2A2EBAC9203EE00385B
A04D2D9DB56512B292D5EB3029FC6890828F0F9ABB7D1E799B9EA008039955BE
D5104BF75EEF75489895342CE3C5F609E307B9DE947BCBB9C7B2974F3B4F606A
664318BB796A98828A54A71638C1DB7BD64F650BA0802B11253AEBAB69F2ED22
41C28BC30EFF2CB1909D4CEDF8C6332014103E169E4077CD0CF95CDF2C0143AD
0491A4B422CC05F22C27642664E25DEF3E3117BBBFEF5B1B5EACC1F3B758C0D5
C36C735292199A2D6A82D56CD4F3E90E689E5DDB863B02E5D47F99D8F845024A
5321EC7046AD908DDC62269851BD1310A507AED640F7139D779DD5E626BB07C3
8D2BF8320AA4EF24757C510D3A43EEF53BC496D0C5EA9AC724E7604DE9113EBB
53C5A1133CE302B8A8499030F3C4C656572152C5F39E7AD182B2F1E536E3AB43
D4D2321DB41EC3BC44FE249112A5CD4234A4264F3444F87404A02BDC8AFE9D6A
C85EEDECBF7FD2D9718D5676E4CEB868E1B98502EB5F66E285E7D159966D13D0
DACE880AC6D98892EF898DED6441E31E75F76958FD897C11AAB82399841C8204
16196638C4CC73F37DB53E08DDDD025AAC520BD6826E7CDAB6AB6C3AA38A9278
84927F45D50F34201934C438646D7A420DDE89A86F51793C7D357315BADAEB55
32EB1A3AB42146CC2EBA88681E373E4150F047ECA4DD846745D23C58468ABE9D
1E4D30198D5544A387922FFEF9FBD3E21F5DCC2BCD8F5AFAC1750A394A96D341
DF7DF9B1DFDEAC05BBCF3047791E47C588605722F1EB31C633F8F21369663C69
45CFC5841B7523DD0F7219F780BB971C1B505526A6DD21448D88BF7A82EC6ACD
7D8E11BE826365C2D2026944E91FF8D609232DA21B5AC45E14265EE49576AA0E
2F35C5B44F2095C999F3FD66C333FAE33720163604D2E491585AB4B2FA5888EA
D455369F90BC0E5D0C5BA4B4D3C21AE6056C445EA56A4DD429C9FB45814A7B36
40935EA17571949391A85DF82EB76D05CD2D42889516B259BF8988852C9977DA
5A7D040272C30553816849EC2D7F6F0875374FE6B83173B7F8151312A415D64A
71325128C3103A00A493A5912F603581F53FE0FC5345FB8E2B2F6749083F9284
426CCE64E2FBAEDAFDC03F6E452447F9A41BC6251B6368A54DBC7DAC848DD27B
5584E01CC26949DDE0C8587323E39A716880D934DE034A8DA405526114A4D681
E2578BACA766099AF46CDCFE5CF2B6CEA37CF82C7A52FBF75E7F3CFBF18ED557
B478AF9418B44BC4C06B8CAEB75FBBA498B64C9DC8DBEF6BB194D6928E608AC1
9F02A6B209D3EE73D38432796D78AE912C68D14DEA927A8622B6FF656524D535
209F82D31893C57862261432003CDC23142E3E4FF18E3A1C94014626D37B9FB2
FA26F42535DA47E2F476DC654353933EE72B84C2420090CEE583634FEE8778F5
9C628B997E5A74FA31679A92237B0EF739A3F43695C47E040A479B85619F0B59
07E4C82D9F6719B4AAEE33B6D56F4B14A4FADE92AD0F9D4B490F4F3B4347A372
D33246812CA62E1786CF01E5536CB410AD81455F0B61670F92D7413C54E97194
2CF328FB31B9949B58BC2914C28C7130155CD4C8CA73E00AE4EE2A34F303C558
705A7952490482B10EFD02201E08941EE4B8F48C5AD6705D71E9DFE9F9ADDAD5
078268B2800FD7DEE7AEACEB4B31815AF1995A846882E9A8AB706D170B53DFF8
4A6924209750A609EDEF205C64F6623D778CDE29C9739F7B16D1FFBCB4AB53DF
7CCCDDD9938BAF772511FF9ADD092C2A9EE2276629296DA7BA692C4EB301E2F5
692981E204AFFD101A88B124385F0CE4B28A5D9149C45AF5CDD529419C0C4F10
E1BB0A4E9512B9413A5CD9CA0D93F7BC68147BB24ED20D8378F30784966D1055
59D7D7148D1766EA9ABECB5FF6FFF0C08626D551A28273302878610862E7C615
A8F1DCEC127C134F05DEB2524598A72EE993F380EEE9EA71523E92719C663BF2
FFA05F030E45577E62BECEDF24660E267EC944B192D24254D0D20ACF30E479B1
EFC52A20064AE970004D7D92433F29832CE494EB09A018B74D0C8C185992E29D
753734C8159031EA2226344C2E72DF2ED9488E183A8EC36A8D7C4067B9920DD1
4D0E4A5211AF0FAF8E69F3119519641A5F05599FC876290E6684D08EF595A5F3
0531BF2377610B636D4BB3AEDA62E3EAF47D63DAB15E9E9AB59AEDD0DD4C39A1
2864A3F0B7DC2228E148AEF0AFE9F97B017F9667049F258D8B9572724D00D84C
1FD66F4FF3DCFC7C17D74D07F0D199894DA208CFBAF45BD3E4A4B4A8F92A91DA
A36E9D857E05E8B78F35710D86F47090F9F9CB884FDD9F03CBAB1282DD23CB2C
9A7F89B3A73E5C49288AD420432144F45BB89FD03FCD43297BFE27935CFCBDF6
15B5B6D95109BF35225DCAEEA02B7EF814F0A33C988185176B2A2F6C7714D6D3
435A10C9A7D1B1DCEF9E7D7C33C9E9298F4C19C9F60EC9CD56A96546CB33D83F
84C06A81FA2097F15CF33664807A031E791FAAFA26DCE67B33492119848D43AE
F1F1E1892D580316A90771BDA335963B0F3FAD9ADB2821FD096889A2B11FB5DE
13796A002DA63C8B42378AD39D434558331D6D96C4AFE829D28CDE060620EC5B
9B99ED271BBA1FA6AE9B059CEF1065116DB17980F1CA7B047E10400B60E27937
807196DC10653C55614E67E3227B678C4FAD8DDB2CEC603D92DC68A1BAA58787
1BF48A3505CCFA10CB226CBA38620A58ABB743FA602DE0493389FB48CCBF5B37
CAFA3F02A63E239ECD8C5F39BF2F5714482565F4E3044CA8655C08456AF6154A
E2A1E928148525D0EE844300CBDC20CE6BAB383957E7220C6B8B0CB4ECFBEE43
42EE949E1042ED0DEF4EA0B1BFA36E39FF6D4B3161ED0FACB44B9D8D071D0362
1B766FE12F97106382EFB4C94EA57EE1B2D4DDFDC3E298B649B83CD6B48746A2
0066B309FDF92B913019ACE4816F35802682892A90D633150CF1282F7FAA60BC
6D5F10B415EA7C0B0B63FD2129B712CF460AE78E6D1D3FDDB1BFB07E820A6930
893EA847353297A049B28CD32325522C5677E016C7C69EFC731FFF24562C2135
11768727EDB01EEB7B23990B805AE0CF2B01142CD15909B492DC242358DE7317
B4C526D19ADD02819FDAFB89B83066B787D87C17368835F883F06876DC8D4650
28DF13EF1BF9522E282797AEFE2A20401BCEC0BD2FCDA3BA58027CC57DEC8281
F09E19DA251B696F5C3B9B6C04C339C38B0142F31A0B13C2E46B6E5C84D5D7D3
6E97E01827C6FBFE636F9C0F00964EB27C01FAD17F01EE236D74E05D7DBF00B2
1296200D92E2243D01B4A49A8A3B3D0ECFF944844973E4F1E1D0AB179C57B80D
A755B523BFE036A9A3CC47439563EBECB429ECB0DE2E3271F3D3FC1139471DD0
349AD139595C27CA73843FAC7DA4EF4AE77123652C7EB96A616759A18B71584E
435E951E5F1FB17757EB42E83262041839E812AFA3BF6EFA9594D6EDCE7E8C15
FF02A4E75B2D38960034570BF7ECD29F86A3F522B2EF995C3E7F79E8F55849A3
9D6095DF2FBD00B33E4D99F330A5D75D300207490B19368E1BE7A578EFA24B69
81322A8DA58A3C9AD5DE453A55B790546C2412A88BF9CE1CB3421462FB39E998
481282917433264B4C7FBA12D1B4EB7E7A63F604D57D81F23506DC514DE41D64
4CC0B16E664E318BB3CEB9593D0B499F73666D90E0268B1DC260543CA5BC05F8
F4A3DB4E9547A880893ED3D3EB00B341812EFA74F816F43427C2FBF2C23E7210
CC4C1404BB5A4F32D075BC1370DF2A93205B41DC41FD2065BBF6F9313B3CB4AA
5C17CACB25462E7FAB45637D198A94F28F93BB12B1AEF2727D94BBBE158295E7
BBC0D597B3A19E3D54890E08569427216A56C8DE4EA98EFDBCB92000BD7D548C
63903A2D6BDAC9C021C8F9B874D316AE59FB4C4D672D107D6CAFBA4FB0C1F855
1779186A3A232F3DBF02246F3FE4DBF3D8E84B1CD12C0076E3969CB909E21ABB
129AB680D1EAB2EEEB86C6FEFB81D4CEB4DDE24D90A78A5968F6006F41001DD8
FA13F9897F7FB2A60C93CAB9E8FBFC1315BEDC93A8478B8B4C35C21E785853CB
84B2090494FA8B5635DDC59E2744F1A4491D82D059D21E2BAB434788B27F8CE3
3574F81727CE4255448376A236FE4BFC5BBF19F7341F7BC0EE52072DF9A2F576
2CFA6FED6395E331C5824503CE90EC12B5AEC49EEFFB2304EA5BAB48447BE00B
EEAB1343766E9DC5B8EB42965A029070DC63D50F5346B21CD9344ABAD5C9F4E3
5795AC2519090C5302E0D8F221703792355AE17B4245AD1357D9D13669F3951C
DD9B53C3E0AB2BE854CDED3AB9401120147D4C146F7B4CBFE11475468E615752
16EE5985793CA00496F59CEE438196D0DF0EC7AC1F23108B372323C45B2033F0
8F03D14EC41C43253AE6199E09CD4988ADF543EFFB8E02D1E519188C09EB9C23
4E312CB5C7C409BF3E26BE43ADC5C46C94D751C85E4DFE1CED56E54A2201023D
AE516C0E8A8DC5F7E9C1D4774C133A85E3905B325364BFC51820C395E7AA0BF4
3C86D97FB2DC4F5BE12722570801B57FD62283A50F2667A1275B57BCC840A0F9
A107BCFF1205CE6A5C40EAF32C7499A310B834BA62D26A64EE13193A4BDDCA1C
F82E902D62A6AFB4BFC1486325CD8C5C1B6DE5ECD9494CF9133493642502238E
4493A6DBCF192B3AE535F28BBB13B82D3169DDB4F75D12559EA2533213315EE9
FCC3EC1DA86EFC9C322B19D08BBF974F7763D49AD322E284ED43296F2BC8F03A
8E3FFFB24544C744B9BB3659CA23BFEE0346F7853FBE83F8305D48B508928E10
16D452B443580F5A51B2697333BF85C8AC88A16D362AEA1224185A5C6522EBAF
2B3CDF348FD91ABDDC56FC0864F7840A3081D75F13ECDDD5F0E9E9AA9B1805B3
46287100C248203EDE34EBF36CB22CCFA00A3FF247717B42FEABF1E5C3FB8D5C
FA2CED5A43498069E515286E148CCB5C31C96702FC4319FFCB90511A33921A66
7BCC632F2651A60807DB7C2F94D0DFBD915B8D01D87C3DED4FD3277CBC21D27D
19EB6E6D3571FAE61285C2C6CCAC9D4444B9A1DA831D832591A713CD4C66EC13
2FA4D6D4DF79B3FACF9325171E3FB4DC86526AC8A8230E84CA7B3349A36161CC
F694A33E798B97A076C784BCD2A16E6348897C67AF725D61BAA1DC9A24301472
4429E9A4CC44EC47B4AF211F1AFCD938D7AD3F601CBAD34F36BB9C779AA2C743
BB6D8416B5E33F4E23A9054E5274D60400CA4C46672CC84434D5913D9955EE0F
5E938E93CFBE0DE955415D2791B3CACFCB165C570B85B6FB66A39BDE0E06B3A1
78799C2A319C0A1607D3BAF7E1F70A802507E1F9B6457A3F25013E4CADEAC618
E776A93713D90405FD7BC0977470DDF5619DAC00385147B84C58B58738E0B0E4
095C672E35E0BEB16593E97BFF13F57D21669ABF6465E6C297628827F07125F9
CFCEBB3185210D09BB85E23CC09428A3AEBD92D1EA81B6D7E255B6A3CFC50BC6
7823BD3C5BB507863BEB0DB9AB187FCFFED79037C0E5B7E6CB21AB75CB9E3906
4E80C4C10D8744012448FBB28FAB43F4985DD4DC9DB23C11227CE2529B949739
166439705AC56BC11898A9553712A3162654ED9C00ACCCE9C91C40F801030EB5
6E36FE9B0B938229967330420F4F41D71D1C8DC549940B86C490C0AA4A90E8C8
417F8F865B4CB0697E812339CF9113E2863ECB764E629D9577C2A8FD4B1439DE
46E0CA7341421418E750939A97E706DAD8B5021F99E3EB413ACC09643A1B56FE
5DF29AC67B02FFBA95FA1628D9C2C432BD74736EDE5382249119AF7016214B62
36369AEF6635DFCEBF3CE44926A5028E0D898CD313A137BD17263DEC5E18487E
A974512E9A8DABFEFAF97C6D46B585D7331BE67B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
52978AAF95DD252EB0D606F78C7E295BB640D1153A3A0AB2A191B9458436471E
A80334C07C23E3D43BC2A56EE61DFD9FFDF3329FCD4DE9A7CF92ABB65FBCAAFC
7EA124656746FA3B8D5E8C9B51642207EDC0600CA659E44717F2BE08C400AD76
EA2E4F62AB149858C2DA5051009ECCE091A6E497D4729FC9924FEC3FB6A9133D
6B463F7C7EBE4EF91B9B17160941AC0087818BC60EB64E687E9349331FDB33F0
7E1D24C34E9E439FB6C392AFD85238CFEA21292B8E1D0991D029790B7831A2EE
2FA82A3B52599EB0636EF92E5D7C13FB08C67361F04482BB6BFD44CEF14F39F1
21263707E73B9BCFEC74AE58A63D5C3D4D773182258E76E62A5EC2865FB5951E
70F9FDECC6604E7D7A3A56648C90B4F400CD61B0B1ABB6B2EB9F977F0DC1A090
109733A75F2CCFBDD27403DE02C363DE41F7C24249DA6FF6A943A97302E113B2
7C840C2A6EFF6442DD52B43E21BD247CB559F781ED48E700C7C6818380E335F5
C15409940D60BDEE0EFA73595159BF5FA6EF014B844C996C73F53F63A48C7F4E
CEE23E1680B0037EAE119E8C5E67E32C964A18B5D20E9DA6FA4E53156DD528AF
830015D7D80E0A7974FC52EE48924BA4AD2AEBA3156D5F5916537207EB369B2A
6B80A8A4B044164ECE1C1FD5A30B240DE3246DFCBBD6E7EF71B3F46D35AF2EC6
76BF005985FEEB5D4A9ADD84C49132594E273D0A94C8C2DE65B5AA436EFD8768
EC53F2288DC8C1B20D1AD0FD1CBCEE7CB7349F8A7410C5BC584A6FD6CECBF3A0
6263414BCE81888528B6D00FD524B3E8A9F72055812C6B34B53A27A4DDF49EE7
703DAF38098846BCB32AA54EA696669DC99DE3BF32B96E7D0A4107DD5E132FC2
4DEA28F304E91752899FA8BCDCC3D498B5E50B2FC370906607CC7EE79F2B8401
2920F318C7C15BB71C9DC7DF4B8A791B5B54D765955F91EC0F7F2C3EA9BDF35B
70EE1987D673ADB19CE8AA2759DAED309524FDB648ADE91791B8A9676D82530C
AD975F45EBB0A718CB2E83D3F636A4A68B79AC38A8926132E5A2261DD2E5776D
A3CD0CB50AD381FDF175E1DC39F5040A291AD3EE2DEB7A829C7E834A26DC4F9D
82D4F7642E62E9892886ED7D4B68699442FA88A357945B96130EFDD9A57200A8
1BD0FAD3B909E42C6C298900684EF844C1ACFD30D11813801BFDFFE5C15C73A2
13ECAF921477FCD2AB6FA0B35416A97ED8B6C273D9B94FA0EF759C005F8325C8
9AB1AB169BCA4C75851E7273E1A42F36F2E2C2587B4F63E87059C94EE6F81609
F12CEF63A6068F6391E11080CADD31EEE5FF737BC32456C9B2065BF365311049
E25A3C4F50C074602E6957DAA5DD05BC094541DF48A796DBAFEDEB2DE7793930
3F2EDFA3E829B73967DC70EAE09B69CE420CBB743A67B0166AA2E98302167E13
DFF1B5B2EA1E8C321EF659D0D19E488C8B74064E752B95858E61EDD3E0175E5A
B28269E3FE8684AB5AA86B26F3AB70A8E045D37C587DE692D018A9683A312501
5202C1C0BD615BDCBF3B5FFA52BE188F2F584140381D43F8C17F3A5A05E9FBD7
BA011D2E8086C67989542394F085AEA94441A83D9D18E64C1D89879B54B94726
EA17EF367BE66B4A200C2A56AC2340A40AB1CBBCFF47D5FF7EA0CFDCBE97B8BE
921DF822BB91C5474110592B7BA0C81E02A882DA853CF858E539037C2A36F06F
3DF2C8C7DE3591B2FEC24EA2A599EAA9F662021467C3990AFD8FBEA2FBCBB1E6
14186292E6AAFB2470787CB3D65C8B5623BF95A07528C834007B5394E5358C9C
FC5B8431EEFFA5346A760EBBD7DE8CC24538DF6C34EABE6FBC51D349F269C24E
E63C0FE9FB37A6B7E83990030648D7EC7516E263F5EF59E908C9F7EE0ACB4D58
58D688E9CDF25E9844749FF7C02F49B5F1AA32E82045AD34384F239AB07F638C
6CBC4C6C34D4E9B6F306694CD0A9F1C777124B81A226975CC6276ED902D125B8
2674AF980D4A5965ABBF9B3FB9B54FFF52C3A537EE237E43E6D20691B072DF2E
7BC425118B543338D1FD9221D7F914209AE128D721B7E48CADF2C33829E7A074
3313D1B1337F26FAB4B95F331FE391A832F3888DD1FB41E6C329BD7CEF9EBF62
644B56B45C48662F59F9FFBAC6391D3CAB26792639189608264D061945B5B66D
F4C58708292723963F7F00A027FF49E5B37EF91967AF19B16E8A1014EC40B778
14451D03E26C8C9F8C6B7D7DDC0B2DE6050ACE7755A750EDE47AB7CCA4EDCD21
4B7919A09EA7D3CBA86067AB078DE6AB76FDFCF3FAE6D116146E8C7D419799A1
D87119F6B5293913380FAB5C1712F01DBDD78F7634C7FE0EBACAD58B8E32E602
705F90C7381755C08427C1C3CE693744841C1AB31D489BD24F07B2FB0296AEB0
EA4501328FAE3B6FA2515949EE39E783623EC5D85EC1C1DC4AA1EA09B952883B
4441730ED967ACDD2AB61AE18302B116A46393782B9F6500CD257A387507E1BA
5659E854A83D4E5DC42B68B10C447D095108E3367FB78F46312A99F4CBCCC61E
6966477EA16826F3A2E161FB636CE1D6B5553F88F16F2C95738BA421BEA52145
F2BAB9C1B36FA17A9C5C5673B88D224A1A3567111E7FD32BAA8B5161FA6F7133
A6F89EC0BC6EB2B71655E83CAD3D439205B56FF1652A6D13C5971082724BBC15
1B9F2A6AF7250F85A7F49B1E3D982B234E9DD1F2C090E42A72BA41E3F1843CA8
2F8FE9FDADEAF899B491DC1857954CA0BE0463CF2AC9706633DE6AE000E22EDA
65F539203233222F1F99ADB1F644E66EABCC4C859BB52E71B0CC77A8C693B79D
4B70645198858503F7BF9AB4E3EE391F3601D1E82984B89CD7C7210B025CBB4F
486075EB6C82984F684FAC17D94230C074FC047709DD9D7C086BC9088D84F74F
498CF6A508204D3F6BCEF35152BC47860B690A9B4C146E164A78957817BFE454
9637125725BF8C9EB0538F96B284E8769E5426308DEA7E69B397DEA706F9E9EB
CBC3894806BB456D6BB22818E224164E46ABA3D373755C9CB412B254AEA90BFA
21E3A43A6DE2F1ADCF7D7686ACFAEDB48CBF98917D8F75CD8D72EB6C1516A3CB
C068EFE76C3905A20CC770EC6D55DAED51E82C6F8DA00AB8F92A73559AD39FF7
AE4CDAF4D5EF7D35675535A4E2C58D912073F645753D533311F3C53182C6E2E3
C0D90FA7A18B0347D9917DAC7B9CA6DDBECF1D09D621DB6C33432FEF600F8054
6B2D997B2563159E3EFBBEE7693A1459706158819F5CE03BEF598F0FC4FD7904
B915C2D98C4345A04D2DC9F3EB180AC11099E20006333BA9EA39A006AAD53C17
F4BB21E958F4A959459C2BFAFE632A196A80FBE13452439F91898A1A9271B3AF
31F6AAE12B321583852AA0CAE4F7FE74ACA3475C9B24066404AAB04646C328C7
B77E2EF9CB6BEC0C27DC11EA1444BA54862830F89D2489BC4867D723EBAC2827
12D4A0CADE1F171B62E7EF20B7E3AF195A23F51F8D8C9AA0FA33D1C62E95F659
D6BD7E243C440FA84CEC03C55A4520D4C3503CBED9CE5F26F28357151F0315A5
1C9F4172EFE0C59EDA04A175C89EF6401111FB15BCED0783AE6ADC9AC306D01B
5CFAE10E9B626D94C59BDB5E5F9384E583B94A24E10810995360EA2678D180EF
7BAEECE624353575E13D7BD452E73137494CEF886C5468925581CF8198041C54
392AA062A7368CFDD0D66C70760A4FEC450DA5AAC3E9E93C8DF8194EA1981FA7
2292473759440CB93D175E88ADD1EDDAE4FED868F11194DBA3B20687C41EB7AE
08654BEDFDA9E424FD049E14C5BA82DFAEC4C84A770C16EA31C81B5C82D36C76
840046ABE6DEE542D357664A548FFF2AFC5D663FD181334244F1B53A7CEAEB48
E1D6A8657B3EB2178B3E16ACB157DAACACBB60C080AED9633D26FE3CE6F903A1
0FC58E46BB65AB343451EFCAE6D5873D8ADAD0BB512BFC294417B17650893FD9
21D33AA66890C0E430BAABBA76105BFF7E4B6B4F66F4159165B045E7072DDD0C
D5E02F0313BEDDB7334E238D984BD0EBFA439914B77DE7D4173F08C252E2C0AB
0B5986FD07604C302D4B14DA11FB16C0D4971180CA1A0873E229DBB527FFEC07
F731E0BB8C4ECC7D2F2B08DE36C37A4589DF52B923E492CF6104DEA4F3432E34
EC9281D988C6F5CFF3276BCE104716061F918A31C57455A8AA4E15D90A41AB1B
0AE52F89B881AA5DD8D1A6B9A6F17DA3757ECAA0AD7FD946EE771AFAC1155DB2
0178002E2261FF18E4EC9439628D6C41A1AF04BBE50126C506E35DAF65E32B17
AEB32666DCD6594737FD81C0312ACFA1E496B5B927F693F362CB47CB9B8C8DEB
7777D293E0B5821B3F22045E7CEC1E54A639DBE4124AFB764E65C70F7D37498A
6E2FB8A3CA9CF5CE733C427FFAB579BA6B2C67C69756498D025DCE099BF77F9A
61E023D286C41F18FB8C6D2B778A24DD727265BCCAFA987C138EE1DC217E8A1F
BDA916B95A3F41675DAE667ADD2560B8AD58435B34B1E5C5F2A4948ABB0AF138
59FDE1239472F92BDF5A7D8778243E1B814F77FF4382E44F143EFB399326E705
EED3798EDA35F2E4A7F4A8AC4E54C52D9E451DC214623BC0B755824F7699C3BB
5F30D78C1225F96B9660D287E65B2DDEFF19D80B46BBF92E4D2AE9BBB628D959
E396C85116AA848D3F2BA07B3CCCB2CB624861707D2B98701285BCA6A242BF7E
22418537EC841AAD80258C6BB95FDD63B923CD9F053AA10536E070A58988ABF5
B5C3DC10D1FC0A677C10929047654F564E1AEA7FC5D7EC59DA32FF9AEE81FCE7
E09A005F17863E5718EA658ED402F997C8D85906E8C9AB405004CA0DEDCDFADD
FAF3D591A849017D6C50835120E89BCA96EF236E54EEF9B382955E4C129F96A4
6E2629BE1EA48D28C670CBFF1BC3FB7F501B48D0E9741B08DF798524DA4A9A86
0C3B9539CA6C50D349F05A5770A26ABFCEA93A0A6C40428A32AA20C17BA6A887
9E1206F6D825323C376B5ACCA9A6ADA956CBC0B7AF7343A81EF370B7BB0A870C
3BC0685F718C426CE527EE4E5DC2C575CEEAADFDE26D8036877D600C827C0987
F49395F92155D48F768640F7EE6ABBF83B47C188B06C32690F55F1FA62CF9AC0
C97ACC1DC0693AED348F07AFB5F7A24E6EABAAE93F55AC2648C390FB9EEFCBBF
A10436C255D05460358BF68A46EEC1DDB8AD53B19211BCBB495FA9E8B594BC8B
CEC6C6AF76DF14714816D0B196EBDF5ECF8D5AA73EB482C0DFC9A62B4A886C64
5E9E282B98F5C481E2D94559446540172594A34DE3CE77632F0D887AC6A6497F
9503A4C29772C52679ED7C3B66C96EC223C08E07302F6BCB0211D3D97F40F1B3
C7C7B0831A0871A8F9F63A16A7862A6828811DEAEF9BDD1EAE2BCEF21BA4281B
F14E7064FE4C20E497DF8C5DA218EC31EF128B1DAF7BFDC77C6DD41819ACC391
902FDFEB517B2FC2DC11106C68316364B2889C780DC46FA1A6684D8E8B658AC0
A3578DF52938305FB7CDEFDEE37F337A7BA4140B05A24078F8FA919F23A2F2CF
48FF0CA96215E620E75724EA3B963A4492672A3B3089D6F69379EF71E31A1422
FFA193D81E289B58C0B3E23BAE1E963098AC45BCA85FEB5380E3B89A01CFB031
959BF559D2BDE517B21C3C6ACCDFBFA3EDA081AA057BE2C823A411B7AA04AAF8
2EA728C293837334C08FB306589E39D88ECA26330CCB234E117C63F2E7A63485
05175088F0F3EEF60F40CED873EEB636927885ED9DBC80FDE4CE3D746DDE16A3
9742427BA60815F2A7A0FE38D3A01DFD95E541E0A4133DDB491260E067EFA056
4E9D7A4514EFB34EC29D3AC00E0F07C9727783019F736B0BE40B47C2309F2B2C
D95C71475C1F8E8BFB5A609F0CBEA7D69EA6D99A323F5DF0E393778ABACBC9A3
4B2E0712DE208CBBC246E1F683EE4C2E93C34CDBA6BB2FB79B26B7C6D8931CDF
F7ACBDE3E03F4216C93E9B1186D4ECCFE19EA146817DBABA0E78F35BB0C43821
F047E47DB8F83CFE4FB3FF03CA99C867E0E86EF8B6EFE486F8C60127017BCD10
3ED7A1B9C2DA8172A2FA4CEFF6B720D35105F262FA6E2F80DE3590D52F450A80
8F8B9C908A72C7709FA322F968E5129E9AAEA996FA92A0B3CE776903D5EF0CA2
4784A1DB4D790D552E9D7244922F14ED3F2FD7D6D347CC1C09EC5884127EECAD
A0B282AB141270A4A723CB17E4E7AFB193B44251715A87A3B3C4BE79F40AF64C
B76961B16C9E65CEDDB576EEBB97C7C1320D0CFCD9EA63D6B9B76F3695B0B46D
3EF2BAD00BD851AD8907FEB55663B2CCB36DD6AEFAB35D0E4AF32B0F5E79D444
A503B56D7CBB108D6118E8F8F56A5C09006F3A39B43BFED73431A9C936BA9489
1EC72511D668F3CE739731BF2934F620EE513F6F2E502EEAEF83ACC2BC51A8ED
14C5957E64833D67559EC831CFAB4328E44BBB2787711E637AEC878C2826F3CB
6806441FAE3A558D36A8DC9724B738DEB7E75CE551FDD12D9D3718E4BEC0954E
2101093E0F11DB1AA9DEA5909A4971591C710366ECAC12405F80F2B8B5A4195F
EF4F685C43586781B6BA786DB1A5A2BF3213C1AE986408CCB7C375321C5B5422
DC7897E3FD02962846585234C45D5856C4CD23C2A86019287CC9C1864C0EA361
51A9470F1F504644EE71DE3331323D590EA7802189AD2AD0784932BE8D968D15
9872E9A32DE6392CAAEF5D023BB26BB18234A51ACB599DF98A27F608C1EC2FCF
22822C24636E6FD8305E833A817403BB249D1E9591C3860BEDBD7031874DA4A9
06FE2792F77D83A85B90FC438EDA31E6CC1D7E3BF93AA84D22059DA7B240D724
FECCC768588BD3BD7D3DBFF4EE7CE1D1D13DEC8D31DA7A66E75426CECB79955D
2C14E61D8E935C613650E556C18D0866E94C4DC225404F38B4BA01C1E32F7973
7EE829F5F830D39DB92D17AF717D58A1BC7CF551E3D0D54D8EFAE0C16680C2F4
E2285FCB04F54210E65384AEF8B6C7C5E83AD1B8F73F39E8B0CF6BFC7E954D7A
1CC4D12AEA2767BB5867F4461689DF3E0B57C6F7B2A3B17C64569AFFFBBC97BD
B5E4C4E9C03A9EC0867AAB0196AAE43DDF50DB540EE7AE2CF7569369A03D5BA6
719DF09FC9D641FCF55E668A4CAFAA87AD2494A4B2B51C83CEEB3AD77C07BA84
E155F0FBC120A159E2377C1B663E846F49F2F83F388DD52807D9B8A8734DC075
0B3E207F9BF8237387DF6C74FD530C24D2A0C8F43F36E1A946A81E48BBFF4149
E4C3C764A26FC77A72CD8C5D0CB868F5D521B51EAD90FA028D8FB2842F52A16C
35498B8D3264DF633A1409CC901EC4348F91B3991BEB108350947148EF60F292
0C42B680E44C980F349927927981E3955A5ED3F9F83463AE236F9DA20B1421D8
96FBEDC15956D63A3F8D8A38F32FAD05E3B19FB9314ECF9437B0505A68693BA3
291ED21514666934729BB57E33FC5AAB62B1E33FB874E47BCA77E29350D67978
DB8683433CEDD6922A8AF4B7B1381D3C48C20FE32DADED3FD85ED1BEEB246255
47D5493D4BD9A068E597D00057DF42E2A7451675B8F0DDF33D182FACF4C15475
92558767042CF485C8B7DC2BC88F52EA30D7ECD2BA25631C93EC73502F2F1C38
C45D482F8AE3DEC8A2AE13FBDCC28110D942825870B00054517CCA4925E1B192
0B1DD86E4FFA3085CD578ECEFCE5A9A23BA4E052625A1AB4044765386FC1589D
6C29F01D1CD094A868075AE66569B47B45452DA310FA2970274DDE6C3C21A2CF
911C5A0D5AD22FB696419BE7C61E9B78C5C167F7B485ACC661BDA379E3854023
A8480AC52B9ADD7B9F0DBA1C0EDADC85904A80119281A69CA6F870C4B09F27B2
52DC558D383EE815322FB9E80142D5BC93D05D5C67A7D38706FCE69E7E92FED9
5B5A7E28097B246DFAF0622D43F227FE1365989195488FB720F49A70133F3DE8
ED5077BB742C920C89C77104F8D259C117CE9B98EB6581A50B6A649325B1331D
B09439200EF4AA2F0DEA808E21C3DCCD44FC30E12CE682EEEC29022C3EC7AA7D
5032C5D93AC31AC855C629A368F30F4A10C2329E0DCE31F2D8DAA7E32DEAC063
AA82969C302EBC66BCFF62672DE4F02469A210510CA568E7CBF1A6B3F832690C
E4620F4DFBD6E1CC85F9C2EC8FADACCBC8D716520E73372B2FA2852F1B7579AB
4917616032623433B59E560DABD5FEA39D7FE05BFB277DFC37D27982D7AF6827
9457417FE127C215868206BD7E0BCAA20FC4A9CD665ECA40DC033CE8F3027CE0
A00CC34C1B0978BD23BDF85713C9511A3AD6CF7C54C10AA51C09226325A27C50
FC62B16BF9349B85C4467E36F724941920F4E395EB7A5B48460EBA113296B449
BB7470CBD1E370B1330D812D4BC62C59AE5E6AB7F0B7DEE09AECA88EE61FDB1F
93E8D40E56D5CBC09E3F5F1E1A32B00A3E1DD9275244E6DD90525F504631408D
6B518C25A5FBE871D8035F45D0EFAD4132CB72895E5308C6A77D5E121BE525E7
979E5F304C3E0DE2EB46A4E8EE73E68B176D92FF09F0A901EBC38E8730621E32
7FD5BA4AF000067FF0FDE730875F9190EF68E43AA7C315F277D54D7F92163E96
8D5DE56C1ACB23B715E66CB45CC8A734896A8C1A745D6E3BB3F00AB6AE424F6E
238934CF7E5ABB36B12E11739C628DEA95906C9A0AC65F08E5545EB431629E68
66C3566C202491935577FD22C8CACCBF4CFB9399C69BE659A82662B1AA412EC8
A254B8592E0313C2C1B93708A0F310DB7B198E5452629FCEF6316426D873CE66
7E63D9EF1759754CAA63E52698385CE13B21A2AF5FD6DCFF8C2B380031341B9D
F942D5D4A04B99BC5B5E477919FA92542A313F2C5326CFAF15219CC600D9FB7F
1FBA9D7E4E715AB3D87BA81F3C9C9235A7D55717CEB0BE8F60167148E2975673
88B424B6CC9B88F8045ADA7D4DA3DFA1B6C669B40C9FDB94C490BDACB2E5C22F
C18241ACA59C813564225AB26442530AA5E783830B627A759527DCDBDB253246
08209C59E01F124D1ED6E3073672646C7D4189B90441D8D3D7BB81B1119685AE
984A15935EECFC34EA17C69DC53F5DB90741D249A02A2E0B722061D81A9ABC62
83FBE336D8C2D100B6B2DA0E1597CB7DC5C62FC7DED06FCC2E3AD7BB16194D0D
05C3E29ACAE3533BDB447C2EEF0D7420D4DCFC2B7720DD0DD05F7042AE380E0B
173A58F5A8C8C2B5447A84AE5D237D00BB79253FC9D9DFD8277B6E5EF52BFD11
540152E276781B0672E3710BAC74028A6CBDFAFB92C64EC81C1F89A1016CD38F
76D20AC05DA571C5599F89C29816C67ACF82AAC21BCD3C0D65EB0E98678351E7
8A1EF01F2A68B268DEE36C2AD674F8CA6F8C6A61D41E770F5FD1F5601DAF369B
65761EE5FB89EB932443AB7CB756FB9D2DC3F59AADEA79F1CFDF7E07C36E69E2
59D13AD930AF497D2A46F98810A5C0649182BA4DD7D15C8042ABAE0FE6B7FC5E
8A62D663AED0E397DFD15A08B8BE47F16C09662CAF1846EB5B30059159C18961
6A403C757EDB2AD6200FA129FEA6AE465FBEF66FE814E500C4AFCAC91967D08C
1F3D9BD115E94D8312630431C286C900AED7566C05FE55175ACF474B8D104A64
7B00FC3021A52FF1EFE6E2CEBA5F3AFE76608695FDDA737BE911DD09C34F7C82
6FC32BABE87DF05A75C1492BB7BFA5A320FB86BF1D72627D6A932346113E0662
38B010F6B8CD8892B2FDE7303FA34EB4A33DC66173530BFFEA2A5DD388E10D8B
5A218E447E76C319D0DBB7110B804E4F7DC33C739ED262A92291FFF953936FA7
8E522495C05D8654D1D5506A00090A973B8673366CF785D0781BAA203E8F7160
C862B689FE16C08A7B4EE04D1063186032C729FF0F2DE38AAB19806C5536394E
9E2B6649661C19B923D096910DD19B9935952C99C8CE9706831FFD736AC7B6A8
C020E90331A61AB63364F6B34D06B111191923415CEE1BB7AAF7BC5045659626
B33FBFD838613C6C26CD70E5E0FE0B5D86C953B9ECB870DCD891E8F0C600F370
ED0F1BBBDA92833AAAA43C1B428B896B771994E0B15476660DC7C687556F2731
F75439C5BDE740F784B9ED1C4905B01ABC6B1FDC7DC07EC2D1DED6194A979509
A881C43BEC2DF392A0971EE623A0CB84C30D8EAEC1A55A9A149D54BBDEE9F0AB
98D3D653E43EB5DA6CF3F0A34097D1EDC863F18FBA0F6B0835E341FE9A0D88CD
AE36830AFE4000FBEE381F58098CF0FD98908069AD047E440282E8BBDD90AB80
3185BFCBBA10DB3AFAD299FD002D1E0A422C7025D7630F178A078B3DF00B0BFC
2C39A9B9E5B204745C778D8081A32B914A4AF2022FE7AC5F228B0A955302C236
E9F3A83C02CA0342158F17975B669886FC66CC604C68F08DB117DAA439A6A4C5
6ABB328A5449198228603A4BE4457E4DF768ADA1377BB55F2BD084BFC2DAA253
671BC725E4FB6E07D5C634355D2242AD4A1395E218855AF6352D6FAEE1CF4EC6
A0227E7BF78257CE77F1E39CBA43C3E22344427DAB18EFCE0AB8BC8E30EC6CA1
D7FE6D5E20BDC0D27AD5CD1C2A8C789FCBA4B962EDFBADEC61870F51C4E3A47F
56F0DB90FF2EC2C243D1B09678642F5735F91D61E51829E19B19B7B199684CE0
53665272DA93BE57A429980AA9AA395D5B94927DC08495A0EE8768B6484EC03D
9F7A3233324C9AB8256C049219FC028C5CE5F3DBA78D98F359C4C17295145364
C880095913B160E7EC1483C5E051983F73CE6C21A0A1AC6C938C70975692B2F6
B49E91B7C729A4F796BC13003954C6D6B8F8A8AFFC818C9D8EAA1993164F1B45
CB5883F0976AD0FE54FAA43B6790BCF086D8E99BA00096E7895ACE4B6D06E143
F0FF84E36739FFA7271DF32F36DE6F9D30C04D3611F28C962F51B172170B2BAF
AB8F35E6C8B3CF94A7B466770490E2689525BD879F6F2C8F60F010C55C0A796F
4BE9068BD0DD2A17B7A940D9983E6471E6367E0EA95F1D4E91E20EA540F7918E
1A060C97D7FC1F4296BECADEA433F549D306ED11E5CC54925FCBAEF1DA240DD8
0E0C07A42DFEA5984EAF9D283A9E7CB93960F7D0C91463B1425938A9A509B66A
A256DF36F2EA7727A3F416BEE9D6CA435753443E1A788B7CD8771172BA41B63C
C4D76B4780C64CE32F9D03A1F920848718D000C820CBB53D2A9C357F5EC8415B
FB34610D1A4E38A2E0C4F7824675A4237B03B224E909FF5EEB4E8E08218820BA
D2D1E702DF328F0CDA81C84E7A7766A934A5D1DF4BBB1843722B29E019342B0C
4E011B4731A111429C8E11236F5EC9F330AAED96AFDAD92B0574A372C3226F2E
416C26B7F6A5C51DAFD02468E4F1898A65106290C53550051893C411340EE83E
395D98B3AF338BC80DFE5AA377C0AC759564F06293DE8B2F0613D9C7AD3B4261
9498FA88A7FF0213903DA2987FBBF6B05B55D7493590B9747530D30E07D07015
D2FC72CE36DC1039D5E0F17F67F5D539E40ABDA634431D9FCCDFF93BA686CF40
8A1309D054A5B55EB9C5BFA5415ED1E4DCBEECFE4CE87078C103FCC2DAC7FAE2
B6477320E8E0C42B085B6460A12ADFFC475DD2BEF52423CBB58ED0B5AC17B156
BC53344957560EE06FF785CE51B3D252643AD41F39987EAC32F89CADCF0359CB
33003E9C2E70A3BC797AEE897993DB4D152B5B3445771CEB08B9D150901C70B3
7A9C0DA3F714229B41A9350F18EF1F46BFC3A8A34BDAC678FEBC1FE2ED8355B2
1CABD4AF8916CC2455EAA8B3B284F38140FA4AB6022082E729BAA3F7AAF40CEE
47A9A05B28CC3953A1ED460E04E49EBEC43D28E1C6528ABB7F27E7487A3D2F59
6C372353595E1C1FD13CEFA5EE69997E96F9ED7A2E7FE722341BD44F1288330F
3C8CE8E6218801EAFB01ADA133E6B4D9FBE8572222EFB07E749CDC981002C473
69A145829863BA9FA7D36636A73175E65964082541F38ED4E2751AF7032878E7
D06CB3BD0F0CE331CFCA1E94BD9ECD2405DE171B5E6A9098FA3E7433B94133FD
5BB47530FD36D1265B5AB119B7ACB4D064F427B5E436626F17D02D74E2C745C0
9AB719CD9ED41CA778E7DB825474F638AEAC23581F3DA3732ADA27726C82B87A
7CF1A9A578B3BC9DB5F96847EFDD65725993F196536F23C19F391E08E5758066
FB3667FE43D0AB25F052F647A40791289E392A7F378D85500BB73D504C43F004
4C4B5F2119B20D5BFD19567EA7C79D3DF2F8572CEFB47B9A2493235D2A156E44
FD8CA29C73B4B32769819C67BBD54506647E28D17916D51B1E5D37F73318128A
2B2D8164F8D4B95A3033F9C8586A817DB4EB6B7378DFBF04A7373F882020CAA6
20C1F82A2F120D17A1F3085C7FC4A4251B9387AD70AC64A42E68FEFF5271F1BF
66358B7E9825D6D65D9F18F0AFDD929CD58D04B4DA575E5716E9202202E567AB
517B5D810E7E05045791A70BFAD7BD278E7B66F3992B56BD5F43773EA871DBC0
F418A0340CFE0A4231F6B47C79B3DB886DA310F17C190A671339A0D163ADB438
374E3870CEE954B7D91BCA1D3F55A8AB98F6D877CCB0C26C28A54C0C7D24C5AF
3560FFC9EDDE8F932AE016B3AAB2DEDF984C2380DE2F010DF7324DBEB0FE2772
92FD83B6E52944868510F09D41C7C798C812A5172E08420CA5ACA3604CF82969
DD694204AE852E6B9851361DC744F48D3F41DFE21706324FF5545D0CE8A5CCC0
86CAA9FB6843850047A2BB038807C1CF98699973F30339A9787C1FD0303CBEB9
BCA683FFECEE5B499F0DFD0046D7D75C9C06CC45605FBD87EA118C5A383D1D5F
6B972E4ACE8A701810417CAE3EF1F88608C8375A1D2E8D121F7974483CE4589B
31D45080FE3B3DEDC8AA92340FC77189A1653926A512683C6D610AAB704403B7
C69C7C205776B0A21863071974F130DC8ECA1887E69486BE5A62BEC565290341
D03137040CCC4A5F9F3832470314C49ED50990FC04F4D5CC39A82492AC3DCC1F
7524052887CBE4D306428CBC3FB70093D4857290DC12E2EBFDD954F5D8ADB6AA
B34C535B7750ABBF5FF7AA1B5AE08B50A27CBCC32E2653D719B9C5B5CFB2EA12
39D082EB3C816986C134C52F2107A27AC61183585C0F17DAAA2BFF93932926B5
0D9A3D2F6F04DB255292AD14643920AEDCED663FD82B375C786FE5BB8EF844E7
A2A7BFB9E5C569CD649943585A890B8B329A1F8F5C73BAC72A36D0B3134D0323
2DEB9A81C714E4197A3F564C26786D2099A46BD4F966549E1784F1A39FC9160C
43CE24A992BC2470A94D50EC469D611E6DDC7188200A53B8D4072407D8844D81
218D547516CF9414AFF62CBC05DB25FBFBB1016B7C4826D1AB2FDFA7D44AC344
CE1FE41CC73B7E1E437D44F3267C03B0C2117C66DE600B09569B3DEC07DF1489
A8315CA3EA4C15FF7BEC8EBBBD71B468F2BBD9B129FD4960E105159829C6635B
2F9048EA140CDEA201A921630B789535A08944183FD40F00C8F9BDC78B78E77C
C383DCF1ECDB1EE3B037DE2CA6A31B5D1B7D6F081A1D450BD7A507CB9B4DF7B1
C639A15BC5F9FE8C6645A3F04177846AC6E8EC06401785B04C5291EA1A1FC0F9
2ADE65B5A7F957FE37B2BB86C2703DFEBBA8D3B99D8A7265AA300A8026D92BA4
8988D8C086DCDE41CDC8C01B95065B8B13CF0030C5C1E430ADF9E5630A547E80
B5B0602008504BEF80BE38D8740EBD6AEFC68D0E86E31D7D936AF847F8B096E3
145C8245926D93C0B6B2F67EABF4AB4B1C80C24D65D092A30C20CAB72F41DE47
4ED2A337CCA1D8B75EB84B043B1823007BD1F134AEDB5CAFA4340F1524C4FAFC
8F2958BF100AA698B9C338D55D7C3BCAF470BB6B5DC1D0FA2129B06FB42E0CBD
5A6779850043543FD478331D5B1BD813C5CDF99B11502C94C0B084DC1273DB09
7EAF0947F80D1174A1C0E5A8CFFDB5D055329749B0BB2BC9D7F94543D1B74AEA
16CC959EF380791C97D30112977F614E6C13867A968075FE3A3C1C97504A6192
274956E116842D60C4A9AB5C9B766466A6F707C3486C844A8A3972B10EAEE070
2F23487DD36676A3BDB2D1B988E4BF1C1651EF87CB86AE34E7261DF02C0189B2
555B7B056A1E9D9B472CA8BF04FC92BCE2237ED47EDA9D0943B5F9572D9B3C34
F7AABA9A5AC3E74D6D8306BF6F6814D6C0DD8AC8A17CAD5150C0698ADB68AA9C
3D8E504F03D640579B4A45F0B31A5E0374C247359F92EA60E3F3FCCA5D0334A9
5A4671FB3D2DFC0E85CB2511AB27F3F905006A6383FA83368CF2E9032C6EEB25
9E2AE9A7D01B729031F361EDF91F7C5448167A5CF87A810C0BD705B45DD969BE
7BA61BA0A0A7C9E986904CC009C50E4D2AEC1AF42AFA222A8327EB15EB6D4ABB
19C6FA9F8642AD63942EBE7BFB837C714BAEF5C6E563FDA0A2D4875D15AD6048
1D21F96793DE1E90E264DA693062532963A67C96241AC2CD48F5B7E6DF616AD1
B5E8290EEC50C12096EDC8C1A2D722D5E56C91C2A4868FC2944EAB513D6EAD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Letters-Italic
%!PS-AdobeFont-1.0: Fourier-Math-Letters-Italic 001.004
%%CreationDate: Sat Oct 30 16:49:00 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003-2004 GUTenberg) readonly def
/FullName (Fourier-Math-Letters-Italic) readonly def
/FamilyName (Fourier-Math-Letters) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /Fourier-Math-Letters-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 96 /lscript put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-80 -249 825 751} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D440EF
6A6F1325CEC03C3A3F20FBB1DD06C21761D70838D1E83592E85E284B4270E83F
629BC6D3971271C950F0BBBEADF671311AF5411D45ED8085300D8E64F313462F
D04E2C3161217FEF562725FC5DC27438784EC45E8F533487F0B4622BD496D97F
F162ECFD0A3F379AD617BE859FAD42B9260E56747BEDB156FE844C8F7CB9A067
E940C5658DE86647C65CBC0C2C08D79C09F07B00890641C302576D48FCAF0EAE
D328445325AAAFFD80EB6CB76F52E22BF04678BA9FACA7B18B2CD01D95FEDAFC
DDB9720701A17522D74D4DFAF4F00E2534412DA11B60161DC23E13B16B54F7AA
8730C5C0AE9AC9EB6903540CCECAF0312A0E4E4D61402D7A7B1775D9591A2EB5
F284D11E9DE117B588FE6BFCC3C2965579F10F096E83A53FF334587BD24B0D3E
5783469281D7C7514BF9448059616084FBC5B2B797D96E7C7511784C9E290A48
088817AEE321C6C7E1D103680C8B1876C552361F3F6C2AE4090C120A08BAD8E3
5942031F8A3E739BD16DFDD228F01C1A01233D1B633BB37C6F1CCAB278FE8F8D
F6EF0C61C428EDBA1DDC254EF1F6109EEBB032CBC33DE7E1BEF1F4FF672C2D12
F48EE105D9B48C8FBC0C8567FDE51492E87EAB9362A1F3E3670416B0BC64480D
C4BE1681D05E3DD8B659CC8643CBADC4D1D4CF4190F7DE32271EB1DF06C7BEF6
013ECBB9CEC865C2FC9620587044E26D17216D2F99571097694DE10F548890AB
ADEA3D9EC11501D1F492837CF931D1CF1A7EC8388DA83793B661D8057DD36586
43EA5A9CF4C7437416A31C5CDA9FE54518A2EBEF1508E16AB5B944840D233F12
9DC0F470BFFCEA640B6CFBFF6FA5585C8E369D3B09C6A08A8ECA9D2481245BB4
CBD54FF3DCE252AA7F9820491384089BE8305D95BF3D75687FCBE284E3D9AAB3
77DDC466A669A15614813CCF13D5DACCEFC0044612E8DA68D16BD1CD44FAC85B
77D4EC8E51FAB737E69A5BF653B8E6BFDCFE4783C4DF6C06F669EED412848DB1
C2BFD00F84455918F6F7B0125E9AD62A8D51C0DB9E7286A8A2312B11DE4D3837
1E5D5E2FBDDB3EE8368C068CA768739C7B57E06AA6F782FD61F4CD0197B54D1F
72CC1A4B453BD8AD2A79E22212442BE535E01859C46C6A00E00209115AE10C86
D4134C8C541EE0C702938B25160E5A62B76BA761C38714A62CA5BA035C5B8BBD
EAA179648C41D4F6477AC75D7275831735AB24C6944A71D97332B5C2775851E9
6006A6604ED6429695CF8D4986849D9B31036E93C48FB693ECC593299A09D377
AC9DCC0396B2F1FA8ABD3B94B89311E353E7BF370F2CC662E1B6B61D8AEF337B
E4D6FBD832273999367D05A85FE31B5F2C0387456A37B80A3000B907D78BF114
6556892940F1A66A7FA4B442A843A915E7D3D27B2DD42D72D01CFE2A664E0632
E56F8C1D694079CB51AB44F3DF083D15E6BE7076BB0BE11B36F8E4D8E14950D5
A13146B2FE9CA799E8F5D938B6A1A2D12857FE53146A346ED4829FDA3718A154
35BECB6C91A2A41F9C4C4CA66E9CD469993C5BC48C2ABD45F298
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /circlecopyrt put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D47BE08ED6CE96278050BA67680A3B973613647
A93FAEC756FC253B3693FA2D6491B276EF45751EFB306961788E7C15297A5822
AFC5A2DABD0DBBFF0BE135267EA6B9D1B4E4760ED14895FFE1F8C3F564830001
EFA901B8442BD2D98561BAB9A0FD939E0F856E4D2EB04A9A4496704109B8A84C
EA06AB0999427B3B1BE776004AE906D0F22159C051D88CF573A0255D99B56781
CF326CD11919AA40B096769CD6D0ADF3ACEC7957621084ACF21AF1F265416628
86B67FCBDE9370D4F5C6F5CC67EBB0A2727E074090DBCA459AFA1A4778AED4C9
AE5400775223E684BFCB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.001
%%Title: wasy10
%Version: 001.001
%%CreationDate: Wed Jan 15 15:09:25 2020
%%Creator: Michael Sharpe
%Copyright: Glyph unchanged from version 2.0 were copied from the
%Copyright: wasy-ps fonts, copyright (c) 1998 by Taco Hoekwater.
%Copyright: Glyphs that are new or changed are copyright (c) 2019--2020
%Copyright: by Michael Sharpe using mftrace as the starting point.
% Generated by FontForge 20190801 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /wasy10 def
/FontBBox {-23 -1667 1720 752 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Glyph unchanged from version 2.0 were copied from the wasy-ps fonts, copyright \050c\051 1998 by Taco Hoekwater. \012Glyphs that are new or changed are copyright \050c\051 2019--2020 by Michael Sharpe using mftrace as the starting point. ) readonly def
% Glyph unchanged from version 2.0 were copied from the wasy-ps fonts, copyright (c) 1998 by Taco Hoekwater.
% Glyphs that are new or changed are copyright (c) 2019--2020 by Michael Sharpe using mftrace as the starting point.
/FullName (wasy10) readonly def
/FamilyName (wasy) readonly def
/Weight (Regular) readonly def
/FSType 0 def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /Euro put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE30585F628C5960F4BA7A0E78D80B
EA23A0384400281199F7528220D2F21D031A35321A044226094B6ED6DB52413E
0BC02D4EAA6BB6C3D02F5D5E4983DFAE1209911A8DDC998656E07B4EEAEF13DE
50FAB8A7D9346FDBBBF1EAF791BE7E3B4BBA8D381C5C32DCB4436D5834A17B60
26188D4C558BC1ED012EA8DED9DF22A29EAE8673C46D0CFF7F5EB4080882EF91
2FF746A93A7B15CFC25341DED2CC7041F5D2FFCE348F17C86124EDBD259F3D7A
A299B032DF19B1C8C6EF386EE2B3655A09E37996670E1878051E7B77C73B0250
EFA23B7014FD87F1D8F38F07EC2ACAF188606F724E436A3D5B001AF774C0BBB2
3B48D49C1D59D3FB5768719967A1086B0C955D8E90D69C2C18593A7EF0CE7A9B
A82AFC9604DDF32B61B5220CEA41E570BF9F9BF018876411E06807D45AEBD705
125665794E0C88DFCBBC57A43A8F7747B4A09C3941DCC35D91F9E238DEE5F56F
4D6E6032FC16C459482F4E32286E48F60DA55F2B5B1B86F3C934052B798067D0
254ECF5D61EDF99B3A6D86DB44265F4545D81B7A002D62C32A22D311876DC636
1CDE6DEFB5164BC751EAFF248E4D6CAB3FCA084FF2565070A0129CAA66035751
8A94EC45A9827D8398C0CAA83B3D4B032C75896D666161D5FB3F6C8F13B692A8
ED5B89F4654956A01FCF6295D4EFF3C7269DD46C0D06362CF44C087C14B0F984
A6CC760D2E439EFC1EFCE34DAAE9C0B017F709E18F64E7762F92A2723CD0728E
11ADE47D1A7AD0B9B75624B220C906D34D1FDB479E312B51DA3721CEF9576B50
F00CE281CC5AC9CA854C150636E2A4BBF26C0CB72843B7E8978C6923B20DF073
7D15F9069ED5C3CE92F4C2AB437BCEAC02473A6E023091F026B8AF8FDE54045D
BA32607DAB9EBE64BB05DDA506E90BDC38D7A94015DBF365B3F727D14E612395
6675298F00239CAB003959FE119E726D4B10B063CE62B1E648DDE9E995ADE22B
AED269BC6481FAC38C9D66CBFB5FA8CC6840F18F49FCA60F6E8D93CD2FE35A98
CB61C80B2F424A61789815DA278578DE6755411E3159852E8A76A43932A489B5
A8C48972C22CBE66C9DAA6EC7F3C70760DC4384C7D5E552E41C9969113FE9B41
4C792F58801331862721CC920D6060DB63D12BBDDDE58C2B1CFC0D1CFCB7EADF
9D0AB31059712DFECD2A616D70DD0EE5E53514B474FFAA0B184BB85B618303E7
DA826C2B7D1CBAFD1645C06F9A00BC1FF1222F94937A87EE04C4684B0A121DA3
E26BD7272D71E93BF96376F11C750E53E6AE7E9915809A21512969ED830C6395
1395B0E6790CE19FF4896550A040821442A2EA1CD3AC4DC9A0B90419882F45C0
598E040B77E600BEC9FF9AC627A92638BDC359317492BA4BAB8B1F2CC6A5AFBF
E81F9CE51A6BA62D5CE57EFC9607693B47AFE3EA791B97EF8B73C7C234FCDFC9
70357D3E9B4D8D8F475BC7448C1B25929B019FDED75169DE66513CCC23D034A2
7EBF6E2D44E394667EF8D57924D4D1F874B89EDA39976CAB94B3D58EA6551D10
3F4DF6E795D36E5C468ACD33C7B78CDCAD0B29ED5145EF4D2CCC59706188D10C
712973EABECD7A3FF3EAA14767ACB0551E39C831ED5452E0088D4F1A826548B9
726B84209947D4BB01DCA1E29FD478879E7F845E833C3AD2E29A83260A53F64C
BD36FC42E14A07FAFEC1B14C54A53A5E2D852263D358E675B62F9E30FDDD384A
56440941B4C437D4418A7898667D111FD994ED002E2E9C6DD47FE9D3C7F1D6A8
E5040A87A39A0509FFE4884E63CA3C0434F07185D8026E5B93B8A50AF015C796
033F05AEC49175ADDD337E2C1E9CFE41838999960D874AE74B8EA0FA61DA9497
58AFFB7A98DBB36FF2693F4EA3B83C6331BE4677D1F5D8150F9A66002C4E37E8
4DD52CEDD41ED9B724D09B3E562CD93B50414D87AD378B7D0523536041FE0EC3
3A5C2343D7DD645BF1A70B6AF3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CACDD72C726E008744
F8383B33D234761DEA8497856BDA04DD10EEE7043BEB84C62D7B46A094EB3699
CDB1A9406679EAE94F1F933DE269C7AC15CFFBE660FC1E5A4758EA23EF14001D
4F6FC6FB27FFFD254B345C3C32CD7F70DAF4D48F9516794CA4BAF0827AB41309
AD1CAE4940E093970991AD11C5A830E17A51EE27F727EBBD0411E3DB595FEF8C
2501BDAF0235FDDC02683334FF508FD924B568EAF96E7344A56505D616F0F3B2
0F3DBCE8698ABD5DFCCE5B0C401638E89429249EF111164E99A03A35925BA293
6AFB113BA123BC143E5E15BAF95BE6873697845E184DDDB6760709182967543D
7D8C43583DFE4D3F80627CFCD3E8BE1D7656C518666BA45A27055C773B16ECB6
511E2A60E0B185CFB488D118D74E8BF9637F0AC7E1C1D9184DACA06F816B12B6
478FC7ED76D24953253E0B2337E08EF790CA36DC8904E2CA4560AC14AD4E54AF
2FF89B894540D6E0A9F764AF34F4177CD3A56B5A2FA274AA4CEBF07EE63D15C1
3C7ADB781EE1DC4172B238CECB15B80F50EC2065DA9EC95D30D39DB92D17AF71
76E6FA7F2E68B3BBB010086EBBB075A72D0624084021887EB5284FAF73E72CCB
C15C7AECF1CB17416CF2BBD8BA7F054894F66DE1613AEFDF6D2C77AC001102A0
94A99CE647DF4C4C6CE1A7277FC848B39681531D3F8FECD47FF1EDD5B3CF4321
2B32FE804A11F6D76801BD5F2DC59354F4AA227006F97D796A5982FFAB3B471F
1187318913D940B5B7DAD2172DF1816D46A9FFAF8C077A7B727E6E7B9E427C94
EA7EACB0E431EB4276D6883579A7ED352738AD7E57BD11B89D67C4A1BCCDF08D
F33908E6BED58BE4EF071A9F8F8639682E6E7F043BCF250FC5195E02D81FD4EF
1EC67464E6D2CE3F3F75742A06D66C9E72D7CFFC32061D63D174B1A293460051
DA59D0708FB5E6F400469FE2227D126AA8317DA3CC28FAE21C4D4A60AE55C853
71FC39C8BCA5DCCFA45FB25783332BA57551CD78D79C802ED86245B0AEF9EE79
FE4AD5DDBC8AC5E400BC65AA5098854899BDB132956B7B058EBA3281B1DA0261
F7DDFCCCE244EF6E8C8D251E849321FE2DC55C542923370614897C30B247E1C1
91AF30B9E16ECFE5819E4FB0F6F593CEAABC2C85B02B37A8FF505BE1FAEA0CF0
B00E35685EC3AA0E606A89C7E6362AA22FEDA49B3BD0B0B7F71EA793E0C15C2F
92202040F95E97DD9B83E8797F8FE3694B7A9DC43C2287828E258EDAF9CC8FA3
0AD1BC97D92B75E2802B6764B6E0CA20D592723FB3BE5600AF29A5CC14FF594A
ED53BBC547055DC280E10FFEF6147305BB91A865A73123F0877A677BFEE8F95D
9A8AF89B06D3BBB5FE05382EDECFA26872B55777684178F8AD61103BEA697CE7
38C3343512CBA3BC82C8E01F154E478FF7256CEFD5E032616A1FF973AA31BE3A
299A2D98C1FA9751703F9426BDC4891C28C943B5709565C8818A538DAB017A6A
D9B24A0158DAAD88F4495C4D974E2C8536710CF1FBEB07528DF5312399CCC382
15CE324E3FF67B93C13CF00C6F8129E347F4257FDAEA0942D2A2FA6AE085985C
AB49BB651D5D00F150F6E6E0EE214D8C6D9AC747CF7113878FF3386732F01C87
A0B4197E418A019F94096DCEB4AA8E568F4FD66188D776CF2ED01EA46F4DF5A7
F7D4FA688FA1B9F4652B791D21AE9C464C1CB17122B1A6CA9DC9E2EA93473A65
4E720288065E86D7F59A12180E4E1C713DE57075F75B85D5BF72D6130AE22190
F0571B357668B9E522248397CA2E28B8B71B3C3FE0F42DD08211CB7834A91116
1655851D034567EFBE7CA0E26C208ADDD6ECC73ABAA7AE4D9997C93A8D6377B0
56A7F8E219872F88E03DBDFC146C2B3C9FB77D578ACF28954DF4A19E45CF3721
11215AE27DE83944629B24C7410E659462E92935F86B9CF6BF32D2A22D90099F
E89FFD55D42E3FFFE40B6143369CBF8DD68348217E334787070E2CC7E9724B8E
7C4743B3D96ED69ECA2271BCFDDA20BCD6328693DA446E9FC3BECE3E469083CB
2046E81CE32530B02636A11583840C6AC6A1E3E82C66DB5D38C95B0055DEA471
E9578B3531735060C666801C18182FBEDA5E099DCA7B0E953A235F1BA6E2D1E4
A46E2A8B1F6A109A43F3FC2ADE98BA4D13ECDDEC1706B793E3173BEBB7CD4173
B49C11BEAA8E5D449CB25B90EB55EC44E148AD59F48F0454A32F920553B9D61C
ADF82A488851AF453F0318A61A09190105C67EA4E778D3D83C8CA5EC9A98F1F8
B23CF51CCF1FF524DC6655F1B8285F5EE96477C532F2F2DAACF86DFBF189A45D
2C0465848CA393FC86414FB2DA615D58C58CADC7D159958EF68B719D7280A90E
A731FB6604687AE14CD93521073B064F1C78C7A6DE03B350D208B442F2D70B7E
DAA1017B180CBA3A798A1B06D63389AABE03EF13CDF12B4C43DA45DF205AB948
F478C0971540EC176234A2E00F13584B0A9500ECE26C5AF10CEC9FC647086429
F804356AE33597BF405AA67E46A1F7F6D47397AE47CD1B4DA8A99B4A3A952897
FC2F261B8B61B0A76B7D04BAA8D702049AB4B78CF5BE89F5DA4ED0C6DA40E68E
B2783BB15AA29E1CF5C1B8AEF5E81340ED4A90590C8D83F4C9F5CDD2CD39AF25
2F34F2514248D037E41A267CDB6C357B98DA930FAD999E1D8C06BEE5B3AFBDD4
A5E1FE32F1D52116B1DC30B30648AFD240C153D80B2835D7AFDACF01CDF9B99E
37B466C451AF60E2EFE2D66DD9B63E8D156F90D8A483DEDFC03B251D8141B724
35823A798BFE8BE4EDE9EFD75006814AF61B29271D8AA24CD5D25484B3BB4E4F
1081AA1993162EE6672BD4265C14DF930B0E661A40CBD13573DC8F7B8C1C9313
1071725CA92957EA91A45ACD48B3E6314A40382A517C14214728D08DDD7BEC6E
D5BF157D27628D9540AAF1D161A1B28D69B3578700060CF82F494A32CBEEA854
478E4DDD413871CAAB11FBCD9D62CDB0ECF26B09BFFD7BE7D9458B1AFD6740F1
523F30B48F373CA7E5A3F02561A8BAB199927BCEDC8A09389931DF463685C851
18C793EDF90D8C4E3666B033EA073C8922C72653171C01A0DDC218003DB89F0F
106A70E13EE1100F15202444EB3DE62596E597522E88C203C69145F8C00682B9
BB4146D9BF69B09E4A9D821A95E11382BDBAC2556AE99106FB0644DDF146F8F2
859FF3098A0A33D311387BDA80B29A59CDD5994238C39531CDEEC6ABDAF38CAF
2A672194219471EA093EDF3861D83754A06D57CA5364272359F22CD473EC3B83
08B94D9CC39C8F087A77A9669FF8EE4AA0A4B6E0567AE9A9F026D6851111005A
2D4567B74F29EF483C9711E1B0EAA8897F9E44E542659DAC1AAEF295CD8F97EA
851757DC3E7CC6F7C0C42BF081FABFA601AA7172A8F67A55594F1CA14637B9F0
1137660C1B9C9716711F492F031EB25082796485008A7A3D38D7DFA251E9C4B8
880B6F30506AE636470E19737DA4E020FE9E6F5613F33921912308EE920D7E1E
130EFEF25CDA4184D6C7C1A5C451BB69C75723DF5CD87975DC18EAF9CD571D59
928989263FE700AB0665239AA4BCAC0763BDA3A81371FF60479439BB3BCB6C80
A3F46DE9BD68C4C0728A69BBB0B9CF8EA3D7E903974FAA983831628605B69E7E
03CB5C00D652004F62EB5F1F03E96A55B5C87C6B6114267FC316FE5DCB1D71F6
21CFC27F4A03163822F7BA8148EA7FE28C8C37973177C16D043E0EEC1B9DB07E
FAA0A98BC83BFCA22C80B10DA76845967CFBBED547005615DD22AC0AC350035A
3FD5242312EC2543239C9E1A4FDA3C4B386AEFB71B6134343FFF768A9C4E2B6A
3693799DC3CC0FBE3A1CDB9D1FFCBA9B1336E5AF135276C819153F6584AC966A
55E594ABF60D9EEC3CDA298908B18ABAECF34CB7E3DB89D0EE3B243B6FB37C97
E610E7DAAEA647621C24CB9F8DEBD21E86B0172832EA2CE44EAE25F30B3DF219
ABFFCD5B59A3B2E75CEDF13EC2A662A8EEF149AAE7A89D2DF0204E57E9CC5266
299A4316ACB27DD8256AB1C300F291BF98DEC385C5933B692AC78D33C5148599
6873C9CF8A2C8C066BF6EB9CDECAD6B2FF273321E3955B49456E4C142ABF564B
93AFE3671F2AFF273AC239ABDCD321438A2A99AF870BF464A2AF158618CFB93E
1367D1B814D713933F6765EE980522A3656FEC5CD2FB4EFA5ABC3A7216A3CE3D
633287DAD2E39336866911279BC49CFEB0423C4EC4A0D6FA90C467C6E56BEA49
9A8FD3C29D5D48DC25E27A51E3B5F1DCF0DDD45CE978AE145953100566039F5B
1E2933FD80CE830D6771F15029A2EE8212CD77213E5938C1434A71231B4F7AC7
52BBEF2876075B3BEDE3F474FECE863530DA8F7CD85D47721566A71B087B76EC
8EA97BE5F195CEF3B811A6A761D1C476AEB59E843E6ABD3DFE996B50DEA57563
E4D5F5DA3AFE742169991281DC21190D354EE0C9414A7BA2D497B50B204D67F7
FA2E37E299E494D9E1FE8E8508377AA57FA1ACBF255F9F08A6755311AC119280
1E75A2276EB609015DC71BC15394930A2C3C2BEBA85E34AB0C0FB1B2BF55C650
000E45484BEC47720C47AA724470B9BBA94B9F2C04D1339C930F07F492EDC026
511BF3BF9320785DAB0DE34176F3EBFE0443F0FA2B757F02EF62753833D79E70
77564F4BBED8DDA2B5A491729057FB1B3594A7D2E4EDB75C29F60512FC38ABC1
F2A618F4B95CEE6F78535360331978769574D054112AB99ACD767F040E1AE99F
09FAC8B35A70EB34BA9A764BC3650C9D845C1B334E81123C1022A4B87E89AEAB
3ED00E7A47E1DAB8EF3A65E82F1F269661A968EA5D22124C4BF39256ABC7BD7C
52EE2B4E334A0C41033253B37B08E03DB0BF573E09AC6CD2AC1AE5F0C5AA20FB
63E0F9026E29ECF91E796C56921560B6E30AD78D89B0F48CD2BF936BF12396A4
CADC9A1E9697EFAD417AEAEBBA2823E63322931E299AD651A9C5DE687893873C
E97AE2F4DB648D406F7F34235EE00CAE374CB8E340BA285E43E9190631EFF9F1
E26BC835A0095FAC21C8DB890D11DB4E158156D4AC92C4746392E8BEB4189250
87CD091D341937145BCFA36EF43641F2DAF989115A0DBDF30E5584411241DE39
0FE335A955C6F53CCC12012D47C29BFB5A8726C6BDE9F571940346E1C114B6FC
7CDCB3EC0DF934EA96F88C8DDDB541B5712E42AE015219DFD7B7E0D06B6DBF32
6873EBF3F736312DAA72F7FDE350227534D472B77AAFDB061C48AF20527C0757
7F38E83132D7A2336832501CA2C904FD3162CF242FCA13D0823DA3C76FA67A78
7A5C6C9C09CBE984EEB1741106D61AAC438B81BCD283495F7C581EC4DF2AC088
7212F37F02168BE1020ADF5271790B899F9846C53E33848E75B9E4603A9F6279
A8105964B5C4BE9E6EE4B1A0DA5BE0E1EBE6D859911B0A08046B6B11F3538E82
6D0FA422D3B6D927B968C9D0917653285A0120393ACDB6B415045BBFF3837424
6121038F2E97E31CF409C758B271BA8BC06948448DD00039E95158DBA2BD4D39
04F72F3CC6B7B18B68AD88804CADC932BBBE93F4D12E55766F43BA7288757768
01E712B72CAEBA74FCDB075872B6B6FC8D19182D792490B244C88799A461E55B
4FF2E66C104384D6AD0810B5727565AC5AF0203D7CB427A80FF746FA3AE7DDF8
E15B6AD1AB102898D53374EF6414E7B199C117A4B48B09D4605C45B517E56587
810AB6CE69BC2ABB44628368E2181C9631F5E11E4E0A76E1A47B95BD29B09B93
397F57E0509776B21DCF0C8F08033E523AA8313C2A7C978F3F58E9354AE3ECE8
6C834B0947637701EFBB1D6D2C62A3F6BF6325FFE9F9F670365EB42B8257689D
3B8C5C0B2D0BDF11229C58E539ED68DC615750C2BFAA67B0569BCE9ED816D45E
EAD310CE7B2A266F24D1BF1576BC1C26FF02A5B3C307F37C9786C3BE9F383AF4
50648A58ED7B19BCE2DB755299395CC93B61892A595AF02DE1AADEF8DD076DA2
BC1A259EF699DB0CE26B9807513FDD9BDB7AF19810223605626B70FCD6E8370F
3F71E5D2C4254EDF4D474A840036E3D1E71CA181B2EA2D5BAF30E2E9DA87B872
12976872F59B638DA804EA935EF7E4205EE35720728B18325C60CB92B6BD1188
942CDFF491829179120E119B5F7E15A4204FADC7E1A2C3735D4DB97B642FA2C9
F012CCB5C8C152862427E6DBDDD76F33F274E322692410F18B35936849802197
020147A946721C6C9A1449B2F252B70C7C583BE34AA67DE58462A9AC9C7D63DF
A8FDC2A66E77E07E5CFC49B857DFD3029537A73291925B9A3579DFD26BE7AD8E
A561B0A1A4261898725F5C6CC30590F96003095CB6A7CE92A254983196E958BF
6F00FAAA36C9E55516479206BBB272BDDA3663F90B8DF65026421E78EB89C066
BC48651AF26823FFB63A8B9F41580DDE4F376D3F0E76F167F875CBBE151FD06B
4473239B9EE730512BBCCEC0E2A2D1106087B8F4CC2668B0BD5FAF4F3F2C3855
A99BFA28050D9FC4F65130127A096F3134B7F3A2D34055823DC83616EFA05F39
22C5088A390734949BA30720FA5217CF628DF9BB1BF483EC77EAE6F2F7D01186
8BA6CDAEB8F87A9B60494D9DC64B16D6EE1A00541690035EA030A59D6337736B
A22AAB35C0BDAF269569FAFA2CCEA36DD93C12E49D04EED09B48D1CD1F4DA5AA
FAD7C21CE3C0345394D2AC9AF549C06ADBF1CBFD8C8D76DA5391EE932517DFE2
8A27F92472AF1112131F18BF0A27FFE546617BDA40A5FC47B9F74D7AC952C627
211A10245BAE9EAAEDC6323BD29DC4CAAB4E2D813D240739CFE20B5876AAE79D
528A780DABA3D6456BF76BA1C2592C54A42801A170E59440BEA478CD3C09C19E
A2415E2A0F0A30C13DC2A70A37F7C8336ACD49336D032605406F8E32BF80D3C6
E3383906222B6747739DC017D588E84A9C527CF13FBA26D6EF2D93039DA0B85D
1B6ABFB846A088BFE3F5C549F7E8CC6BAB800D7BF4248C413285DE6B0574162C
8529E1C2F34B7484217C2B5ED2F6DD26862E297841A20A8A19C90D6918118720
DD1BD5E8433CB0CC361FF06E984CB41D6C109D9D4AE58BDF5554706C8EE0C6B7
7E282E001EF70620C53E89715BE86948428244DBA6CD22CAAB0FA961E15B4451
9657F3B7AB8A507D95B2E9643542E8D8072855EA6EE7A98B81B98E80520F467B
2B762DBA6EF344C6CAA26A61E97B12976A5A9D69A3AE28DDF3317309BCD7EC5D
5344B5D92E1CA5018F0E8EE2EDF9F0617150AFB4994E8B39C2992A6DF7223188
7FBEA73EB130C193E1A9AEE91235EE909D696FA82717454271D587A083C9CC6E
0131931DFF08545C47F002BE9359E1778FA0D8F0B380C80381C7005CF440966F
A3E87BAEECE6912287941A683559454F6322E1D964D36FCA16748F21B8764659
39C2044509C50492B5DD0B068D6F6EF429A003A56E3D4909081BBEA28CFE4BF8
0988B628CB7EBCD56321279F86AE6C8C6B09B6BF8E81FB588469B973ED5AB743
A7264FE50D3A7D6B7AEA07EB63D12F5B0546DB157E14C53E1EF127597B8A033A
7DE5DE613F0E2AD6661334764E47492B34FA870DC42C067B09C7EF7DF11C0FB2
9AF1BD5DFA482F5D90725AB45B44CB45251C458AD396628829816B9C1C38CCCF
65C980AF76E6D3DA23B98009A80E46A151527132951BD814C32D34AEE4F3932E
5EA6D997B7C5900C4305D9FEB413298198DD33CF65B356A8D9300CB1DBC3E3A4
74B01F62E4BC9211860765FE3FF469319BAF39578394C1161777E3352820D72D
0F112B60AB91DB1F2F2F5E489B0D08549D0E53EFC739D75529CF8E7CE4383BC8
174C9AF5400C2FE02AC4279A62630F411188C875A3ECEDDB4C1BA24A7C947379
8C9668E38E79D1F3E208CC50AFF8ED79EEA2E4952C181A02D22F8AFD21F1AADF
F6795A814F6EB7223510A81D78800C193CA72DE9046EBB29B130691361C6F4F8
48C1DC1A0D939868A15E8C6DC71A5833878A4512D9409235259DB3C223E98F3D
8C38E86A35AB65055B96E898CF68CF57288323E40D7601A83B1678DE4B6AA78D
3B27F101DFE5D2E77AA3F7D4D2A9BF5B3007C36E360B24C443069E7A88E8BBF9
BD23A19C5D50AF1723B33DF4AB7AABBF9AE99FB1556356108C711771C8933768
5B2A69330F8BFB9C3717F17732B1753588F7C527856884C3C5F04C7763E710BE
627437160EE9837F16C1A4D10AD299E8102B170DA5BE70964115DE4FAD8418EB
BC5D87ABC2FF9978EDAD7BDC71CD19E9B47C4D9FDC754155789755E225884A21
992A13CD39B92914D0BAAF45BA91D40EFCE1692D3F86AEFE8D960DE72CD6E3C6
D8CD8969998653D1F357560B58D41AD53AFC517689C27865C67FCE3322C33BB8
392A025AA337A90DB2368F02029083C1EA7BD00595724B004608B17D733034EA
574388D48F17FD8D89FA44CFEE392785A0B31336FE2CDC08B14AD69F6783F044
62DAC815C513A81E01771657F46971579DB2ADA1BF422082713893720E870E8A
FE1C29EA0251D5A354A9B8F80F220D2B18C3D7BE48D9D9706C2DB78F59ACE38C
94359F75CA88647D78B66436C2BF72F1BCE91E7BF3C1132B7B2B1850131079F5
336AADDA811B8B40F429C8D64A965CDFAFCF89BF7D9C287D54E39521E1028EE1
9D224D21AE4CDE4A0AB5EDB187FF9195076FF3B318C51E08FD2E0F5AD6CCCF72
B013137AF0D768D74D928D5BB2BCC60DF9146E08836B0E85A05CB8C6046FC966
43AE869EF18B449668FFD9CB9731DCE92D962994334346BA37CCD71FBDC0B10C
EC6010097AE75EAFABA615D69666841619ADF3A146A5F94E602457A33AC5929C
9CEE82C4DA8CFA7418A4950D59824ED1A093EBCA56302BF10C4F983830A0639E
68FF1B7B51421F6C7564C80EB1E334257706ADD0872259642C943BB5D6B68DBC
3D2AB595BC6692CA118CAC396F3C67E74AA55FB02F823B2CA8C3CE2557E635E6
0A539D53983C7A7CC3BE69C9AC2B68228F7132FE9C9E0775F760C4DCB73CBFF5
CAB5DB116775A7346C3AAA9FE0BBE86DA597E2A731A4F41637182E2BCDA0DC60
F58E1CC111B1018F6210E7BE7F317F970B71AAEC8075A9AF1BFBBE837B1EDAC1
6B8735EFA68A118B915B776313A15853DCCE705A61A53C0BB3612B532AAC855E
F1982FD41F9BDD178E68A5F2456695D884B0EB24EAD444A2AB79E4898A3F0C99
58E592E7B9CD23AC0B3728D0E9A6CB3832855DEF8A81BA63F4C6FE59CD83B0C2
3D5B0A0705520572CE8EF37B9C73FA6936CA95CB92BBC859B056B7FC058F971B
9EB51A666C9583E84F8D2EEDFB2DC2BB376B1D7672B61DAE4E23F2A19BCBA2FE
FC687A9D349B35CC6D691951CF682DB8F3C0A5DF5078519713D6C2402EFBD562
D284EFB85DACC7EEE0ACE99EDE98DEF39C1E325272278754DADCE33260F3888F
AC37BF352FB49BC2EF0B1319683E86F6E7EAE79A42DE6FC3C18B380F6CB66DEB
C484BC33E429573820E82BFE65DCF46AB32DC91F6C44F22D91E822BF43933505
FEF125D25B03F93EB355C9EE3CE1F6C1548305675B1B209938DA2463A7B21109
796252F69D47B1A020296D112338E6034499FF78234C0AF3E10E5D14B07E2D70
C2B625B9FC645D9B9E186BE3B4BBC6FC63E774545DFEA3D901F50FA111F4AC0B
74B04032BAB826ACF60E32B4C1465A29425E007165B89B2E278087B358D2BFF0
D73C194BB3943CCB741E91304F90590B9C68F20E193D02D618AE4745A247AE59
C5E6889976C2C21CC692DFB2716FE0AEF640C96C19CD3282EA6997F98F35341E
A395752A982E8E4234DB4058E3006776088819802AC0DE4ED8F7853E8E1BA4E9
E4EE1844C189191CB0F0DA42A98F4EFE71A06B658C913BBA3E08C9F3B8CC2C57
C6523A1664E3F6218CB6AB5D68E3197A0E4F727AD5D857DD43B8E563D39FB048
9BFC83DA3302A322A2995D6BA8BF1FCEDADD0CC42CB977A3CCD939D4C162357C
5CA253D353A4019EB454893AC10647FE2944354AE32CE3177E0F2E2812D7416C
BA28CE0DA975AAFE1418D5A3FBC3A08647BB343D62657BFF310056D4203E5C9A
33A0604E6D6FB548DA101CCFB336E44A0910C681039B3A37809D79EBA0DCE1FF
88240FC0E7C02D0BC604562958033A495C031307E8C84FF03C1DB4D1F2EB23DA
C77B64A5BA681EB077C28BAB6E92B498C974BB2F472E8ADD5E1E01B94A9B263A
AEF21B9D499E22B46CD22738DD178026FDA7809692F817DCE1BA4293A4CF5608
9E8548FAC9F3B393F4B9C74218542D22F15319ECA059429A5A869916EE9CA0C5
6E93BB0DAB2472DEAE70A66BDA9E58A0ADE9FF445832072383857C26578C8D36
6273C74148C1EFC5D664D0037D7E1DE358037AFBCD7E169510940A9E9748E619
3D7A06465FFDE23C4AFC5B773C239D973706C1A96E9688E44C4C4339DE68F914
DCA35287CC65893DD1B99DAB6C3C6CCF66EB8306755FF4502726CAA04C99BF38
AE32FE20C380D27A16305AA88B0B3764D702BE1DD68860AC7D3AEB738B17CEC6
B82F4C8A6056BB18F8C521D8F3C505BE97D8CFC7C0970E048EE4D68C25E3365A
6B6603DD03B0729C26A667B8322934FCCCEA4A140CC6F17626F8CE866E938834
B0BF60301193633F2A805F8F3BBB96A9E568F4B42C5353ED4844275964414F82
622BE93C6229B206E648FEB99A307BCB0D732D1EA6B322308166FA521AF1D44A
E66BD7F42D8C44541CDE6E2C70CBAD85E49D121786F1766C1CF7BA2B5BE5C7E7
31625D9C0051138043054B714A3AF816C5E0DF808A075F95BC7AE1DC4DE73D44
6B752513A368FCDB34504DA56DC93AAE1BB0622055D24378007F45E8D03B4271
0B6D04B3EFC25B60E410527353E4EBE83DA709DB9A94BC08E49CDC8AA291B82B
51DE1BCB0003EC0A5752A5DCF70CD6D81127EC85CE63FD40FF863B4BDAF30A71
2F14D3DD8FF91DF68D783DDF97890FA4A83E3ECF3733A72B04BD65EB1010AB5E
0B519895564A71BFF1DB36881428C3468ED18ECA1E54CD00A59B2B869AB71AAB
E3C91F4537B2C223E98F8884A6D31FF9F4A62118514F9DD29514DDCCDD6989CA
C139352EEF5728C240EA60044A04939ACB5CD1FBB4CDEB5FD84F55247F7AC946
36F294B4518B31B3EFA879CE252C640A3E19DD134C949E1C572876F34DE6275D
4D8E18EB432A5967F4F24D41875FD80FACD7ECE8087DF94A33F28C206A38459F
12D3289C985A460029901999C23E3B0454C801343FDEED9E46B35C76A424A3D3
5CD752A7BC219A65121B53C3A97B9BC866FD0E8177B9BDFCDC6FDB04B6BCC488
E18E019B8E51D530FF9F42A78EBF6BA1B1189D1EC580EB375CE16087508B93AF
1EB6ED852FFAA39719AB32B2F8A87A308F3DC836166CBB6675DA43A09132B8A9
0894D6DD83AA17B3677FB4BD0946A25173F8A45C56316746C7E0FDA43669C7A6
A60DA0F48FF9EE82FF36C0E44EA7FC0D28FF0C8368A9D0420AA28765DE3F71CB
6E6136B7AD3D78827CBC8722F1EB1BBDE23ADBB96061C2E736BD581A45D33DFD
65CF8858AD6109054535D4C10F4755732AE98CA3F86A0F071A8EAB3F5B180F7C
FB1FFE555611B282230E55E126E1DE790D762BACA4D1ABB2ED239303AAE28E1F
26A25723535B0D15269542DDBEBECDCE5D517689C27865C67E1EB3F4741C6853
E886B331515883BFEC4FEEA9CDAC5AC6F201DCCB31358FD5F673DCC934A55BB3
3E08761386C303AEE46715948A9D4DC82D5DA610408294D109D7236CC7FE5916
5C824C1AB17489F2D087E6F865CB55C8A94F674A7BD85A65152A97C88375AA4B
F95533157E5822A3F74E7D0EB562BC3E38C4F452EE0D1CC19F581EC026DF0464
BB2AC6A2540B737834E097D2B7198152AFE12965E176567836CA0B1D5847106E
7ED16FD17270E8605ACAAC332492FFF5E6A34F2F19744A4433C91319E96C166E
5BB2BDDFAC2247BE094ABA5E3BE045428B93FE26C15FA28CCF33AAB8993068CB
E68F459D865BFEE7C178A2CC19B8000365F49426F8D9569100705AAC8F64106F
C26211C2A892BDE90CEAE21AFDAD087B2E4304E37789D55B0A89C53EA3354836
05B68B8ACBACD4CAF2DA060CBDD41C3E51080AB2795715732DC7E2D6477AA1CD
43C50DEEC66250E165A1D95F1F0BD8E8020BD7B74DB62ACCE2C61CECA3A1B671
6ACFC562C7908D29FB5C111C7B825FE6FFB69666A5BE00AE59113B8080244F83
25D8F79AF610EAD4B770ABDCE952D81E8D7684D0506CD7D09EC95203C0AF140E
EA5A826AEA55C0271CC7F1AFAC531F4E95E61F953F7C30D530506DE264B0935B
116BEED980A54683E22207DCAEE1E36A85AA31C1B99A4D225B2A10597334857E
A92C2D87A0348C46BFE7F8BFE795E47512D19C307118AC00B4469BCF9EBD0677
CAD3712AF7E3486A7772597AB2E0A4FF13555DFA05624853025DEF94F035E218
A7C4165EAFFE6F72E75C54AAB2DF1A89C58D8BB8AAB69EE964C66DF0E6C9D4D7
553D0221D906CB0BC54BAF334910C493E3D1DF4382D916BEF71C4C63B92003BB
D5963C615AAD63ED933F8DBE94E9C5F3A02289046C0727F11710BDEA2C9D1783
125D6379BCDDD1C7A407D5D1DEE101693C9465711B3FADFD01DFE4461F10B8C0
036920AC4D6A008DDACD4404465AD111586EA16547F12369BE1FB27F04E6A169
C0D3C89BFCC9992B8945C1C8223F9E340C6746CD036D3FD44FD95716E5AC076A
514AB72F831764DC696377E055CF907B9626CA1660A9F2D4DF74A8F5AA539E39
2405BC4A77BAEC87EF5061D8900D17D9659B08AC75838D96BF19F411F46AF9BD
B696284A5BD9C6898176C8297873C1E99D28352DAC1FC3E0386FB738C9EBF3A4
13E2FBBF9A131600DDE703F053C1379F429E432D0BD031E9A25AC8EC3490719F
691C5E2ABA4EB7602699E3122628301B463A5E042A0025A85C9EDD2B19511709
6C7493B8491EB8B63B0049256DE1B322181C9D806EA33FFF096A3A3BA5B1FF03
652783FF582C8EC31BF148A32EE6461FABC125058691D96735FC6686231EE6B8
F4466CD445BB03CA0BA51CA6E5E08B357495E8B46CABC5D74CBAE9D02083727D
4B54D6538F7190FEB1993A3028EB8214CAE6901DFE35E687B70E71E6B55522AB
CEC03D43AA9AE072022AE19DC7928D08329F28EBA7D4DFC6638C040E8B04DD56
36B87CCFBAB5A54B3D12BD06AC01664C7E695EEE372721DC9B2117F5FB9CADEC
ABE2D54ACD1E9F309DFFB15CB5138FB779C653A12AAE214034101215B849F5A7
23F27A5420B9B36305A62481CD30CE4E7B6238D88FEF1F73748AD603BAE60204
38F4DC566550DDC16DD8D3186799F4F92927DC0945827B1FAA99249EF5E4EF9B
C545B7B9DF64EC954A7169B17DFE3B303F191C5B30F9704C3F9A1EEEA70FB248
19A5566D98BCFDAAEE9C96ECB027BF31D746ED4F87EB1F7EB82451A72369EE37
CA8727741F39E0E195F7B5B68D937A9F66A12942326B234E24742A4DA26E1DC2
0D95FE1A5B9CA526FCB9E12528BE840C03EBD07EB92139F65811C292DF2F6E65
E3237D838D8E21B53162984E5E72667A782397BF72827EB7B6D37287232D4D5E
7692BC492492157565D36559C2D36E5CF8676E295A59DB6C0269CAD17A87E4B0
7A8836EADCE5CAD108EE8C8928C5EE314CC1FD5552E42684C759118EC29B24BC
2DDAC04E28C8BA0E1504A5409E3584441E2F230F7AB7F6310C46E976BACB5D05
6550ECB62DA76B1C79240CEFE8A128837BFA9F6FE56FCB8EF38406990DF77884
AA2E740F3F62FC3CBB4AD03CFBA0A3F38396452C30D602AC0A64908D3B42AE71
28CD9005F1467D0415A34E2C78350D7035114050186967CF456BD3D30E460243
2C4864207492CACB4DFA92DADD5E521E81112BC2B15F5F316C6EE018EFCCC025
29ED4AA047B6EA43D50432C71572BFEF8809559D2D82C6B944F1534F1DDAEB44
5FDEADB6A57587ABB1439279CD2257645FBE684E4C5C3F7217F84DDABF9B312B
5FEF352FCD070024A6E38252EFAC286A8E2D74E76A10D88962D28A125BC5DBAC
F536393B1C2E0BFAA42695E0EE7805507A0DE284D0B4E88D57448107EB84C067
0A262FBC0AAE0F0CC36608D4F119C7AD0610202ABC87AD78E00B63F62E3C9C12
FE0C343408B5612082D97715C0B8A2DB3385E68BBE19902BE216DFE824A316A0
9095477758A59EC3760EA7DE3387C9A83C37F353855F2537D1693E8BD9575EB0
94F4D19250A3AF8F6390AB688B017A25AAB4A99AC9A5A5315FD46D7B5EDEDACF
1EEE03AF37A73E4830519E6B89AFF6C73A4909CE6450B4C214B5B3F82F1CD2D7
CAE35DDEE626D38B298C00C71DF7757C3FB98B9648DDA0926963FEA7C635E74B
4B6A54845206D8719A23D6FF69E945161B197D6C947471C633DF8F6C64797443
A7B2E90509AEAC33C9BBBA2D7489521C9630E152246A6A6AD97F35C5E1F1EBBA
1BE0AC2B40F639195970615899D067B1536AD4671841BE31EE1700788787F6AE
B915FBE28D3D3B7F15B5C55267AE664D44701A3C66042F6D109B70039284EDCE
79F8D401794E7A31F89101E35F95CD0560F8A0CE8A09D0B114BBB5EE27A11F4D
7C29C9079BFEB62DCBA2D6C459DE7CBC4C503F88A65B71816037BC6734903350
A6643C8944D4C004328A20541F540A98BD9C3C37084F0268DC6DE3562EE5274C
109AD819CC8702D1A091E1BA99C7BB044D71FEEBB26650BF6355C3233FFAC82C
12E90EC9F61D741C2C3163FD5019D48583D15DF2DD12949F2CEA38036FADC540
80F70E8082CA9DAF6DDB9C0334B6758EC5728C52ECCB7D62375604837055ADDB
9130E9527717E9AA9BAECA698782221C71103CC038B59F5482EB0DB81491A4FE
7F11B6464B7448E6CE59FE9EFA14AE8BB8AF0FA28E1E920D635064AE483173C2
220EA1B1E3B68919821A8649AC638988106EC3D7B8669EC612F1B83DA67EE121
1144C70AD232C22673010A81FB2801619AE8BBEA78F5DBD17EDB4EAF298449A0
882C7D1FC4C682BC07C1ABA5D2ED2EF46ACBE0664930D574EA7D1A6D4DB0085A
CAB174FF1EBC2C9115513A3AFAA63E7D3CA0752C4C26D148E3241F5DEE1B6AF5
19C9F3A8EDCDD0A9588AA02B380F6915743B3ECB6F3107986B6471594FAF31E4
4CE96B111B911C5168BD119CAA303F57C0484AE226EE5C1975AEB96EE3EBE371
F642E72A667AABAFAA5E61909523F90B7795576B206C925DE53B6AF81C4F9B6F
4820C51B8A76619DFA16B8EEA0052948029DB4FEFF86299F1808F16BF40A5F13
D08189AB70CDB73E48CB757CF885ACA1F859979A331FBE2E3C6CC2D2E0B82EA7
9A280093309789E4F97DC2135C00909D09C3906D9A70672914E082390D9EB37D
1E76785EF2B686DA35545F37F4EC1C52E39A4C7BD83EA316DF2EDDAC393D9F2D
1B425F814C6C84399DB94CA968465D75A77A10EFD885FCD3292E0FF683BAEAC3
6E8B330BC02784AA24DE462F847EA5291FE7969E7C4430FFC9FD780586F65ECA
8B59E3068CDB6033313A02C7DE75C813D29D008C3BE4287F5548F9AF91C7BF5D
E6CE2D5110DA95983B2DACB566C05210C95FC4DC63277953A6C09E03955691A1
54A03D256B20BA240B8F8C2AD4DFF26D9A077D58DB3F76FFC9971E3B5F898E30
2D2043FDB035BFFE632DD68F7DBFCD2F10516C61E4198528EDD8958031E86409
5277186AFAF38B59E9934E3D6633BBEB520E0C3D9E7F1F98FEAE0DACB28DB456
DDE40087E3E2E7B6320E171460424B979A1D009319F997BC4F377693D9A39CFC
5E63580BCECD328774C32E1D89801C5B507CB2434110EA0CC61072AC3507F64C
B61C6326D864946956B2CB0267BC30D0FD072E0186CE20EFD272DC78134E1DB1
51F8B0B54DF23BFE8BC84A9C3015BD3FC69ED2A6D655F3AB4EB2FE67B15D47B2
7C4F2D838CD0B9BA47B6F885E62D90F0819B84EE0F3C95AB4F6F99DEEEB9BC9B
DA77B3C0E0B98737A9B60BE9E32078B5D06C7C9A2FE040F0632F135BE313C8CC
6A43A02166E2E4EFAA65D32A5EE1A903CDEB54A166B3BA80E0ABCBF4452CD8D3
D34F58DA0C1F5ACACF73A8658CFEDC1ADFE2B5C05249308D020FC1269F71F64A
8D6ADA2FC50773864725F61B944FDD215686925B1DE97E0B12877F83C6953F8F
8C86FCA3A5C9A0FD07F3229F558B3D3C8B09D371D0295C97656D3EDFC6A9CF77
293F8FC6BC02DDD7FA313115440D56AB2B9D822D46867CD9CEF12E88F566C758
F4201518DC544FA35BCEF1E5EF812D1152B575F2F0679D90A80C074BBAFFA7CD
E77F48F87A7C5A0B6E5D2E67955C2D44C4D2E9D1EA1F1E4C7A290B2EE51CEF5C
F7A2EFEE97D613C8F4C8A4ED98A862FEB1C2CE5AA49D0CC9F30E0843620840DC
3B28961C46FFC9B76C045E32FD833BFD3A5DFC0FC7CF6AF56640C423A45C0622
483051C77E4B7BEC243F793A964180284C8FD189CF957F891352F9E6D5CFCBF9
CB469FF4A84F52EF2A097C8F5E7B326369ACD48F632D3AF4E940D8383A2775E8
83947CF88FAEF179DEEB0D3DB566A63DE1A9E5617B09C3EE2AB481D30B6FD5BD
4D92FD511879958BAD4B9A641531D9F3A2DB7E17F6CF96173DD293E7FC5537AC
CB15E7E224E91DC721B96E0A22D940DDD81C6E2A27AEBC1126BCB51F411ED521
72EF63F94E52800843FD466ECDE3611E094A1B763C45803C654866062DFB7CD6
7EE0F2BC1C37F90D644CDADBCEA060E03CD2BFF4D28C7F6257685A92D325F1C7
4BE99649720B1986B8A093CD8498B165A5715C19A0276CE1AC9417D48CE02711
A69E40FF4495A25468942A879806B6806842C38636B00BA7E42A0A81113E073A
7F982E50C2970126E0255EDF0C9F8335B2B906567F73A316503826CEF8AF3E88
871644535C1390F27B128D39CED3D0A51634F82E42D14F134E7A3C7ECFD259B5
A5F29234C0BB773497E6980F9C87EFD5AB716EF119CC9C36ABB960BB1CF45937
A007D3B3E30B4AAC5D15DEF1D6DCC7061E6EF35837ADB44DF66BB4BA3CF72C71
070DE8D3983EDB4700BDEBE0ECACC26B2DB8C562085CF21DCD4631905B68D03E
A8CB6FC896D664E4A7ED742D2DCDAE8CDD78EF75E269EF2E4F23CD4BC253B802
524D408A1763CF88C47EEB700932A7CBB1E40F08453FB280D8905DD97F728E7C
5B35124EAB0B37470024C44C2A96C1724F005D3068B11FC4EC161AB9AA82CC20
09846CAC0BDE557FC52BD7EF7613CB7E0FB449D843C54499C2EB6BD75027F67E
2699969526542197D6E0F30DE09FA83A87337C59E377ABA64086286637C613FE
A2F2D27A861FE0BEE55E9F5B5D9EE2E9ED3DFE3B8A8620BE1AAA0E994ADFE844
8A9759D9BD97EC10BBD4857B0B8625B8AE58AA16246ADD4800C1C02C39ADC302
7F286A88FFB65C226BB040F363FC12C14092FF1DACD917FF8F1B8BF73FF724C3
9487B45367808EF9BDAB131B80C67D07C3077A2CD1A63F8D09716412B275B3ED
C9F1379D3E6BA12DB4381E4B51573B450B97434A53031E9A76C3F9C89CD4A189
E04868CBEE01723B5787F0FC425FF544BAE31FD95A2EFC346D7F73B37473B0B3
D0D7F8C79806F096719A12B014EC9D55FD304DA3D31517ED7CAEB14DE5FD4331
2CDB9D2AB3565F2674837A133F4D5AB99E4C62998AF45AC6C50274B4A26585D3
C4581CAFAF9E310EBB5B83D807359B554CA94422457C1862DF3DE945E4A929A1
DBAB615FB38F0C642C656C57795E33B60A4F5D2B57AB040E20CEE7D1CF9B8C5D
789E23C6419E63D34AA7C7362D97035BA35E99642B15FF1A15F47866C8335966
6458CF4EB1FB8014ACDAC991746EE76068B9C60D1B5CFCE2BE46E872859C317A
936186B63505B4095D8070D6916E948D5A731DCC0EEFEEA1D497349322FF4A18
06BC8B9A07AF3C85DB9A476BDFEEC11030E0A0F7F4FB2092267D5C46BB26A011
9C54108B451FB95AF3C7CBCC24A0C7602B071EAFFCC46DFA131604B068BAE5FB
7D31E7100716367BF8BCAAFABEA6F43AF591FD4D2C7D44DA8EC082689CE1B016
450B11BAE0E31418F047E2C3799B8F764359D7CE4867FB622D56F58AEBE2E7D3
CC8A4994FE5D748528E7C32ECB499EA09B32D4DA8337C57CA52ABC98D0A8B893
14E8A1FBBCE48A6B7DDE33D44384D6F0580ED7D746CFC5144348F7AB383F2BDE
0F092DB756845F00F6DD2245AFBDB19F8FAC88FA80122CD03556D301283E2E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (CorrigesTechno.dvi)
@start /Fa 94[42 161[{}1 58.049 /Fourier-Math-Symbols
rf /Fb 141[19 12[26 101[{ TeXBase1Encoding ReEncodeFont }2
49.6466 /Utopia-Regular rf /Fc 145[36 110[{
 TeXBase1Encoding ReEncodeFont }1 58.049 /Utopia-Italic
rf /Fe 22[31 115[37 21 27 24 36 37 35 38 56 17 1[17 18
37 32 19 31 1[30 1[32 20[35 26[32 2[16 1[16 4[17 39[{
 TeXBase1Encoding ReEncodeFont }24 61.1042 /Utopia-Regular
rf /Ff 201[31 31 31 31 31 31 31 48[{ TeXBase1Encoding ReEncodeFont }7
58.049 /Utopia-Regular rf /Fg 242[83 13[{}1 83.022 /CMSY10
rf /Fh 205[36 36 49[{ TeXBase1Encoding ReEncodeFont }2
68.7422 /Utopia-Regular rf /Fi 177[58 78[{}1 83.022 /wasy10
rf /Fj 134[36 39 2[47 2[31 2[41 47 8[35 1[34 15[41 4[58
4[26 3[46 58 9[20 58[{ TeXBase1Encoding ReEncodeFont }14
76.3802 /Utopia-Italic rf /Fk 159[44 96[{}1 76.3802
/Fourier-Math-Letters-Italic rf /Fl 57[55 55 8[55 22[55
1[55 21 55 161[{}7 76.3802 /Fourier-Math-Symbols rf /Fm
4[46 16[39 39 39 38 6[40 22[46 13[34 15[34 14[67 6[31
8[78 17[37 39 37 1[38 46 26 33 30 45 46 44 47 70 21 40
21 22 46 40 24 39 46 38 46 40 6[47 3[48 1[47 41 49 1[46
58 60 72 43 50 27 27 1[56 44 46 60 52 49 49 1[30 1[44
1[20 20 40 40 40 40 40 40 40 40 40 40 35 20 30 20 44
1[27 27 21 1[64 33[47 47 2[{ TeXBase1Encoding ReEncodeFont }82
76.3802 /Utopia-Regular rf /Fn 22[40 112[40 2[48 28 1[34
46 47 45 49 72 24 2[24 3[40 1[38 1[42 14[52 1[50 1[56
8[48 2[52 7[21 43 43 43 43 43 43 43 43 43 43 1[21 46[{
 TeXBase1Encoding ReEncodeFont }32 76.3802 /Utopia-Bold
rf /Fo 22[57 57 115[41 49 48 1[68 64 70 104 34 2[35 3[57
67 1[67 60 12[69 3[71 30[62 49[{ TeXBase1Encoding ReEncodeFont }18
109.987 /Utopia-Bold rf /Fp 22[47 112[45 4[40 36 2[53
5[27 1[48 1[47 55 45 31[63 67[{ TeXBase1Encoding ReEncodeFont }11
91.6562 /Utopia-Regular rf /Fq 22[68 68 81[66 32[80 45
58 51 78 1[76 82 122 37 2[38 80 69 1[68 1[65 1[69 16[79
2[125 77[{ TeXBase1Encoding ReEncodeFont }20 131.985
/Utopia-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -254 -561 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-246 -246 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246
-246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -246 -246 a -246 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -246 -246 a -246 -246
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Proportionnalit\351)
/OUT pdfmark end
 -246 -246 a -246 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -246 -246 a -246 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -246
-246 a -246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246
a -246 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 0 TeXcolorgray
700 166 a Fq(M)n(ath\351matiques)30 b(\226)g(P)n(r)m(emi\350r)m(e)h
(technologique)1496 577 y Fp(C)o(orr)q(ig\351s)18 b(des)j(exer)n(cices)
-246 937 y
SDict begin H.S end
 -246 937 a -246 937 a
SDict begin 18 H.A end
 -246 937 a -246 937
a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -246 937 a Fo(T)-10 b(able)22 b(des)h(mati\350r)n(es)p
0 0 1 TeXcolorrgb -246 1120 a
SDict begin H.S end
 -246 1120 a Fn(1)67 b(P)o(ropor)q
(tionnalit\351)472 1120 y
SDict begin 12 H.L end
 472 1120 a 472 1120 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 472 1120
a 0 TeXcolorgray 3631 w Fn(2)p 0 TeXcolorgray 1930 5895
a Fm(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -246 -246 a 83 x Fo(1)105 b(P)o(r)o(opor)q(tionnalit\351)-246
-54 y
SDict begin H.S end
 -246 -54 a -246 -54 a
SDict begin 12 H.A end
 -246 -54 a -246 -54 a
SDict begin [/View [/XYZ H.V]/Dest (exo.1) cvn /DEST pdfmark end
 -246
-54 a -246 -69 a
SDict begin H.S end
 -246 -69 a -246 -69 a
SDict begin 12 H.A end
 -246 -69 a -246
-69 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -246 -69 a 0 TeXcolorgray 90 x Fn(Ex)o(er)o(cice)14
b(1)p 0 TeXcolorgray 0 TeXcolorgray 147 w Fm(1.)p 0 TeXcolorgray
42 w(On)j(compl\350te)i(un)f(tableau)g(de)f(propor)q(tionnalit\351)i(:)
p 0 TeXcolorgray 0 TeXcolorgray 1425 108 1258 4 v 1425
208 4 100 v 1478 178 a(\311l\350ves)p 2001 208 V 360
w(40)p 2340 208 V 268 w(?)p 2679 208 V 1425 211 1258
4 v 1425 311 4 100 v 1478 281 a(P)n(our)o(centage)p 2001
311 V 144 w(100)p 2340 311 V 219 w(70)p 2679 311 V 1425
314 1258 4 v -38 437 a(Il)e(y)f(a)i(40)10 b Fl(\243)g
Fm(70)g Fl(\245)g Fm(100)18 b Fl(\306)c Fm(28)k(gar)o(\347ons)f(dans)g
(la)h(classe)o(.)-246 471 y
SDict begin H.S end
 -246 471 a -246 471 a
SDict begin 12 H.A end
 -246
471 a -246 471 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -246 471 a 0 TeXcolorgray -141 566 a
Fm(2.)p 0 TeXcolorgray 43 w(On)f(compl\350te)i(un)f(tableau)g(de)f
(propor)q(tionnalit\351)i(:)p 0 TeXcolorgray 0 TeXcolorgray
1425 653 1258 4 v 1425 753 4 100 v 1478 723 a(M)o(ar)q(ins)p
2001 753 V 332 w(1)12 b(760)p 2340 753 V 167 w(1)g(046)p
2679 753 V 1425 756 1258 4 v 1425 856 4 100 v 1478 826
a(P)n(our)o(centage)p 2001 856 V 144 w(100)p 2340 856
V 228 w(?)p 2679 856 V 1425 859 1258 4 v -38 983 a(1)c(046)i
Fl(\243)g Fm(100)g Fl(\245)g Fm(1)e(760)20 b Fl(\274)15
b Fm(59,)8 b(43,)20 b(donc)d(environ)h(59,43)h(\045)e(des)h(mar)q(ins)f
(sont)h(tomb\351s)h(malades)o(.)-38 1147 y Fn(N.B.)f
Fm(On)e(fait)h(le)g(calcul)f(et,)h(seulement)i(apr\350s)o(,)f(on)e
(\351cr)q(it)g(la)h(r\351ponse)g(avec)g(le)f(symbole)h(\045.)g(R)o
(appelons)h(\340)e(cette)i(occasion)e(la)h(signi\002cation)-38
1246 y(de)g(59,43)j(\045)d(:)1604 1373 y(59,)8 b(43)19
b(\045)c Fl(\306)1969 1316 y Fm(59,)8 b(43)p 1969 1353
191 5 v 2003 1430 a(100)2183 1373 y Fl(\306)15 b Fm(0,)8
b(5943.)-38 1595 y(Donc)17 b(dir)o(e)f(que)i(59,43)i(\045)d(des)g(mar)q
(ins)h(sont)g(tomb\351s)g(malades)o(,)h(c)n('est)f(dir)o(e)f(que)g(la)h
(propor)q(tion)f(de)h(malades)g(est)3401 1539 y(59,)8
b(43)p 3401 1576 V 3435 1652 a(100)3601 1595 y(.)-246
1667 y
SDict begin H.S end
 -246 1667 a -246 1667 a
SDict begin 12 H.A end
 -246 1667 a -246 1667
a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -246 1667 a 0 TeXcolorgray -141 1747 a Fm(3.)p 0 TeXcolorgray
43 w(Le)22 b(fait)h(que)f(la)h(bouteille)g(soit)g(titr\351e)g(\340)e
(12)i(\045)f(vol.)h(signi\002e)f(qu)n('elle)h(contient)h(12)e(\045)g(d)
n('alcool)h(pur)-5 b(.)23 b(On)e(compl\350te)j(donc)e(un)g(tableau)h
(de)-38 1847 y(propor)q(tionnalit\351)c(:)p 0 TeXcolorgray
0 TeXcolorgray 1366 1934 1376 4 v 1366 2033 4 100 v 1419
2004 a(V)-5 b(olume)19 b(\(en)f(mL\))p 2060 2033 V 141
w(500)p 2399 2033 V 228 w(?)p 2738 2033 V 1366 2037 1376
4 v 1366 2136 4 100 v 1419 2106 a(P)n(our)o(centage)p
2060 2136 V 262 w(100)p 2399 2136 V 219 w(12)p 2738 2136
V 1366 2140 1376 4 v -38 2263 a(La)f(bouteille)i(contient)g(500)10
b Fl(\243)g Fm(12)g Fl(\245)g Fm(100)19 b Fl(\306)14
b Fm(60)k(mL)g(d)n('alcool)g(pur)-5 b(.)-246 2295 y
SDict begin H.S end
 -246
2295 a -246 2295 a
SDict begin 12 H.A end
 -246 2295 a -246 2295 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -246 2295
a 0 TeXcolorgray -141 2392 a Fm(4.)p 0 TeXcolorgray 43
w(S)n(ur)18 b(100)g(personnes)h(de)e(l)o('entr)o(epr)q(ise)o(,)i(il)f
(y)f(a)g(56)h(hommes)o(.)-38 2506 y(25)g(\045)f(d)n('entr)o(e)h(eux)g
(fument,)h(ce)e(qui)h(r)o(epr\351sente)1566 2689 y(25)10
b Fl(\243)g Fm(56)g Fl(\245)g Fm(100)18 b Fl(\306)d Fm(14)j(personnes)
-38 2871 y(\(on)f(peut)i(bien)e(s\373r)h(fair)o(e)f(un)h(tableau)g(de)f
(propor)q(tionnalit\351)h(pour)g(obtenir)g(cette)g(r\351ponse\).)-38
2985 y(C)o(onclusion)h(:)f(les)g(hommes)h(fumeurs)g(r)o(epr\351sentent)
g(14)f(\045)f(du)g(personnel)i(de)e(l)o('entr)o(epr)q(ise)o(.)-246
3069 y
SDict begin H.S end
 -246 3069 a -246 3069 a
SDict begin 12 H.A end
 -246 3069 a -246 3069
a
SDict begin [/View [/XYZ H.V]/Dest (exo.2) cvn /DEST pdfmark end
 -246 3069 a -246 3087 a
SDict begin H.S end
 -246 3087 a -246 3087 a
SDict begin 12 H.A end
 -246
3087 a -246 3087 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -246 3087 a 0 TeXcolorgray 97 x Fn(Ex)o(er)o(cice)d
(2)p 0 TeXcolorgray 0 TeXcolorgray 147 w Fm(1.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1435 3240 1239 4 v 1435
3340 4 100 v 1488 3310 a(N)n(ombr)o(e)i(de)h(personnes)p
2302 3340 V 145 w(4)p 2526 3340 V 144 w(6)p 2670 3340
V 1435 3343 1239 4 v 1435 3443 4 100 v 1653 3413 a(F)l(ar)q(ine)h(\(en)
f(g\))p 2302 3443 V 268 w(250)p 2526 3443 V 114 w(?)p
2670 3443 V 1435 3446 1239 4 v 1435 3546 4 100 v 1660
3516 a(Lait)h(\(en)f(mL\))p 2302 3546 V 276 w(500)p 2526
3546 V 114 w(?)p 2670 3546 V 1435 3549 1239 4 v 1435
3649 4 100 v 1779 3619 a(\214ufs)p 2302 3649 V 435 w(4)p
2526 3649 V 144 w(6)p 2670 3649 V 1435 3652 1239 4 v
-38 3761 a(P)n(our)g(6)g(personnes)o(,)j(il)e(faut)g(250)10
b Fl(\243)g Fm(6)g Fl(\245)g Fm(4)17 b Fl(\306)d Fm(375)19
b(g)e(de)g(far)q(ine)o(,)g(500)10 b Fl(\243)g Fm(6)g
Fl(\245)g Fm(4)17 b Fl(\306)e Fm(750)j(mL)g(de)g(lait)f(et,)h(bien)g
(s\373r)-5 b(,)18 b(6)g(\234ufs)o(.)-246 3794 y
SDict begin H.S end
 -246
3794 a -246 3794 a
SDict begin 12 H.A end
 -246 3794 a -246 3794 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -246 3794
a 0 TeXcolorgray -141 3890 a Fm(2.)p 0 TeXcolorgray 43
w(Les)g(6)g(yaour)q(ts)f(p\350sent)i(6)10 b Fl(\243)g
Fm(125)16 b Fl(\306)e Fm(750)19 b(g.)p 0 TeXcolorgray
0 TeXcolorgray 1541 3978 1027 4 v 1541 4078 4 100 v 1594
4048 a(masse)f(\(en)g(g\))p 2074 4078 V 102 w(1000)p
2339 4078 V 105 w(750)p 2563 4078 V 1541 4081 1027 4
v 1541 4181 4 100 v 1625 4151 a(pr)q(ix)f(\(en)h Fi(N)p
Fm(\))p 2074 4181 V 194 w(2)p 2339 4181 V 214 w(?)p 2563
4181 V 1541 4184 1027 4 v -38 4308 a(J)n(e)f(payer)o(ai)g(750)10
b Fl(\243)g Fm(2)g Fl(\245)g Fm(1)e(000)19 b Fl(\306)14
b Fm(1,)8 b(5)19 b Fi(N)o Fm(.)-246 4393 y
SDict begin H.S end
 -246 4393
a -246 4393 a
SDict begin 12 H.A end
 -246 4393 a -246 4393 a
SDict begin [/View [/XYZ H.V]/Dest (exo.3) cvn /DEST pdfmark end
 -246 4393 a 0 TeXcolorgray
114 x Fn(Ex)o(er)o(cice)14 b(3)p 0 TeXcolorgray 42 w
Fm(L)-10 b('\351nonc\351)18 b(donne)g(les)g(infor)q(mations)h(r)o
(ecens\351es)f(dans)g(le)f(tableau)h(ci-dessous)h(et)e(demande)h(de)f
(compl\351ter)i(la)e(case)3744 4504 y Fh(1)3721 4507
y Fg(\015)p Fm(.)p 0 TeXcolorgray 0 TeXcolorgray 1525
4619 850 4 v 1525 4718 4 100 v 1593 4688 a(F)o(lor)q(ins)p
1898 4718 V 118 w(7)p 2042 4718 V 113 w(?)p 2185 4718
V 2262 4685 a Fh(1)2238 4688 y Fg(\015)p 2371 4718 V
1525 4722 850 4 v 1525 4821 4 100 v 1581 4791 a Fm(Pistoles)p
1898 4821 V 107 w(6)p 2042 4821 V 1 0 0 TeXcolorrgb 103
w(4)p 0 TeXcolorgray 2185 4821 V 0 TeXcolorgray 2262
4788 a Fh(2)p 0 TeXcolorgray 2238 4791 a Fg(\015)p 2371
4821 V 1525 4825 850 4 v 1525 4924 4 100 v 1579 4894
a Fm(Deniers)p 1898 4924 V 112 w(?)p 2042 4924 V 1 0 0
TeXcolorrgb 104 w(5)p 0 TeXcolorgray 2185 4924 V 1 0 0
TeXcolorrgb 104 w(30)p 0 TeXcolorgray 2371 4924 V 1525
4927 850 4 v -246 5076 a(On)h(compl\350te)h(d)n('abor)o(d)d(la)h(case)
774 5073 y Fh(2)751 5076 y Fg(\015)g Fm(:)g(en)h(\351change)g(de)f(30)h
(deniers)o(,)g(on)g(a)f(4)10 b Fl(\243)g Fm(30)g Fl(\245)g
Fm(5)17 b Fl(\306)d Fm(24)k(pistoles)h(:)p 0 TeXcolorgray
0 TeXcolorgray 1525 5189 V 1525 5288 4 100 v 1593 5259
a(F)o(lor)q(ins)p 1898 5288 V 1 0 0 TeXcolorrgb 118 w(7)p
0 TeXcolorgray 2042 5288 V 113 w(?)p 2185 5288 V 0 TeXcolorgray
2262 5256 a Fh(1)p 0 TeXcolorgray 2238 5259 a Fg(\015)p
2371 5288 V 1525 5292 850 4 v 1525 5391 4 100 v 1581
5361 a Fm(Pistoles)p 1898 5391 V 1 0 0 TeXcolorrgb 107
w(6)p 0 TeXcolorgray 2042 5391 V 103 w(4)p 2185 5391
V 1 0 0 TeXcolorrgb 104 w(24)p 0 TeXcolorgray 2371 5391
V 1525 5395 850 4 v 1525 5494 4 100 v 1579 5464 a(Deniers)p
1898 5494 V 112 w(?)p 2042 5494 V 104 w(5)p 2185 5494
V 104 w(30)p 2371 5494 V 1525 5498 850 4 v -246 5646
a(On)f(peut)g(alors)g(compl\351ter)g(la)g(case)879 5643
y Fh(1)855 5646 y Fg(\015)g Fm(:)f(en)h(\351change)f(de)h(30)g(deniers)
o(,)g(on)g(a)f(7)10 b Fl(\243)g Fm(24)g Fl(\245)g Fm(6)17
b Fl(\306)d Fm(28)k(\003or)q(ins)o(.)-246 5731 y
SDict begin H.S end
 -246
5731 a -246 5731 a
SDict begin 12 H.A end
 -246 5731 a -246 5731 a
SDict begin [/View [/XYZ H.V]/Dest (exo.4) cvn /DEST pdfmark end
 -246 5731
a 0 TeXcolorgray 1930 5895 a Fm(2)p 0 TeXcolorgray eop
end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 83 x Fn(Ex)o(er)o(cice)14
b(4)p 0 TeXcolorgray 0 TeXcolorgray 147 w Fm(1.)p 0 TeXcolorgray
42 w(G\351n\351r)o(alement,)20 b(dans)d(ce)h(type)f(de)h(question,)h
(il)f(vaut)f(mieux)i(conver)q(tir)e(en)h(minutes)p 0 0 1
TeXcolorrgb 2973 -163 a
SDict begin H.S end
 2973 -163 a -30 x Ff(1)3010 -163
y
SDict begin 12 H.L end
 3010 -163 a 3010 -163 a
SDict begin [/Subtype /Link/Dest (Hfootnote.1) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3010 -163 a 0 TeXcolorgray
Fm(.)p 0 TeXcolorgray 0 TeXcolorgray 1528 -74 1051 4
v 1528 26 4 100 v 1605 -4 a(temps)h(\(en)e(min\))p 2208
26 V 127 w(60)p 2392 26 V 134 w(?)p 2576 26 V 1528 29
1051 4 v 1528 129 4 100 v 1582 99 a(distance)g(\(en)h(km\))p
2208 129 V 103 w(20)p 2392 129 V 104 w(45)p 2576 129
V 1528 132 1051 4 v -38 256 a(On)f(mettr)o(a)h(60)10
b Fl(\243)g Fm(45)g Fl(\245)g Fm(20)18 b Fl(\306)c Fm(135)19
b(min,)g(soit)f(2)f(h)h(15)g(min)g(\(puisque)h(135)d
Fl(\306)e Fm(120)c Fl(\305)g Fm(15\).)-246 288 y
SDict begin H.S end
 -246
288 a -246 288 a
SDict begin 12 H.A end
 -246 288 a -246 288 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -246 288 a 0 TeXcolorgray
-141 385 a Fm(2.)p 0 TeXcolorgray 43 w(On)17 b(peut)i(se)e(passer)h(d)n
('un)g(tableau)g(de)f(propor)q(tionnalit\351)i(:)e(1)h(h)d
Fl(\306)f Fm(60)k(min)q(,)f(donc)g(0,)8 b(6)19 b(h)c
Fl(\306)f Fm(0,)8 b(6)i Fl(\243)g Fm(60)20 b(min)15 b
Fl(\306)f Fm(36)k(min)q(.)-246 416 y
SDict begin H.S end
 -246 416 a -246
416 a
SDict begin 12 H.A end
 -246 416 a -246 416 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -246 416 a -246 416 a
SDict begin H.S end
 -246
416 a -246 416 a
SDict begin 12 H.A end
 -246 416 a -246 416 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -246 416 a 0 TeXcolorgray
-141 514 a Fm(3.)p 0 TeXcolorgray 0 TeXcolorgray 91 w(\(a\))p
0 TeXcolorgray 41 w(On)f(compl\350te)i(deux)e(tableaux)h(de)g(propor)q
(tionnalit\351)g(\(on)g(tr)o(availle)g(en)g(min)g(et)g(en)f(km\))h(:)p
0 TeXcolorgray 0 TeXcolorgray 589 633 1072 4 v 589 733
4 100 v 665 703 a(temps)h(\(en)e(min\))p 1268 733 V 127
w(60)p 1452 733 V 144 w(?)p 1656 733 V 589 736 1072 4
v 589 836 4 100 v 642 806 a(distance)h(\(en)f(km\))p
1268 836 V 123 w(3)p 1452 836 V 124 w(0,5)p 1656 836
V 589 839 1072 4 v 0 TeXcolorgray 0 TeXcolorgray 2661
633 1011 4 v 2661 733 4 100 v 2737 703 a(temps)i(\(en)f(min\))p
3341 733 V 127 w(60)p 3525 733 V 113 w(?)p 3668 733 V
2661 736 1011 4 v 2661 836 4 100 v 2714 806 a(distance)g(\(en)f(km\))p
3341 836 V 104 w(15)p 3525 836 V 104 w(5)p 3668 836 V
2661 839 1011 4 v 145 1011 a(S)n(t\351phane)i(nage)e(60)10
b Fl(\243)g Fm(0,)e(5)i Fl(\245)g Fm(3)18 b Fl(\306)c
Fm(10)k(min,)h(puis)f(il)g(cour)q(t)f(60)10 b Fl(\243)g
Fm(5)g Fl(\245)g Fm(15)17 b Fl(\306)d Fm(20)19 b(min.)-246
1045 y
SDict begin H.S end
 -246 1045 a -246 1045 a
SDict begin 12 H.A end
 -246 1045 a -246 1045
a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -246 1045 a 0 TeXcolorgray 4 1140 a Fm(\(b\))p 0 TeXcolorgray
41 w(S)n(t\351phane)g(a)e(par)o(cour)q(u)g(un)g(total)h(de)g(5)10
b Fl(\305)g Fm(0,)e(5)16 b Fl(\306)e Fm(5,)8 b(5)19 b(km,)f(en)f(10)10
b Fl(\305)g Fm(20)17 b Fl(\306)d Fm(30)k(min.)p 0 TeXcolorgray
0 TeXcolorgray 1610 1227 1072 4 v 1610 1327 4 100 v 1686
1297 a(temps)h(\(en)e(min\))p 2289 1327 V 137 w(30)p
2493 1327 V 114 w(60)p 2677 1327 V 1610 1330 1072 4 v
1610 1430 4 100 v 1663 1400 a(distance)h(\(en)f(km\))p
2289 1430 V 103 w(5,5)p 2493 1430 V 134 w(?)p 2677 1430
V 1610 1433 1072 4 v 145 1557 a(La)g(vitesse)i(mo)n(yenne)f(de)f(S)n
(t\351phane)j(sur)d(l)o('ensemble)j(de)d(son)h(par)o(cours)f(est)h
(donc)f(60)10 b Fl(\243)g Fm(5,)e(5)i Fl(\245)g Fm(30)18
b Fl(\306)c Fm(11)k(km/h.)-246 1642 y
SDict begin H.S end
 -246 1642 a -246
1642 a
SDict begin 12 H.A end
 -246 1642 a -246 1642 a
SDict begin [/View [/XYZ H.V]/Dest (exo.5) cvn /DEST pdfmark end
 -246 1642 a 0 TeXcolorgray
114 x Fn(Ex)o(er)o(cice)c(5)p 0 TeXcolorgray 42 w Fm(A)-5
b(vant)23 b(de)f(commencer)-5 b(,)25 b(il)e(est)h(utile)g(de)f(se)g(r)o
(appeler)h(que)g(10)g(cm=1)f(dm)9 b(;)23 b(et)g(que)g(1)h
Fk(`)19 b Fl(\306)h Fm(1)j(dm)3079 1724 y Ff(3)3114 1756
y Fm(.)g(A)n(utr)o(ement)h(dit,)f(un)g(litr)o(e)g(est)h(le)-246
1856 y(volume)d(d)n('un)f(cube)f(qui)h(mesur)o(e)f(1)h(dm)f(sur)h(1)f
(dm)g(sur)h(1)f(dm,)h(ou)f(encor)o(e)g(10)h(cm)g(sur)f(10)h(cm)f(sur)h
(10)g(cm)f(\(la)g(\002gur)o(e)f(ci-dessous)j(n)-6 b('est)20
b(bien)f(s\373r)-246 1955 y(pas)f(\340)f(l)o('\351chelle\).)p
0 TeXcolorgray 0 TeXcolorgray 1260 3155 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 166.1639 a add def
/d 0.0 a add neg def /h 131.45152 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1260 3155 a
1596 2891 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 56.90549 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 56.90549 56.90549 56.90549   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 0.0 0.0 56.90549   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 85.35823 0.0 56.90549   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 28.45274 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 85.35823 56.90549 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 28.45274 56.90549 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 28.45274 85.35823 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1596 2891 a
tx@Dict begin { 16.50264 -4.55254 } PutCoor PutBegin  end
 1596 2891 a 57 x Fm(1)g(dm)1596 2891 y
tx@Dict begin  PutEnd  end
 1596
2891 a 1596 2891 a
tx@Dict begin { -28.45274 32.4361 } PutCoor PutBegin  end
 1596 2891 a 57 x Fm(1)g(dm)1596 2891
y
tx@Dict begin  PutEnd  end
 1596 2891 a 1596 2891 a
tx@Dict begin { 76.82231 14.79555 } PutCoor PutBegin  end
 1596 2891 a 57 x Fm(1)g(dm)1596
2891 y
tx@Dict begin  PutEnd  end
 1596 2891 a 1596 2891 a
tx@Dict begin { 26.17647 35.28156 } PutCoor PutBegin  end
 1596 2891 a 57 x Fm(1)g
Fk(`)1596 2891 y
tx@Dict begin  PutEnd  end
 1596 2891 a 2640 3155 a
currentpoint initclip moveto
 2640 3155 a
-246 3388 a Fm(On)g(r)o(emplit)h(d)n('eau)g(un)f(aquar)q(ium)h(r)o
(ectangulair)o(e)e(dont)h(la)h(largeur)e(est)i(80)f(cm,)h(la)f
(profondeur)g(30)h(cm)f(et)h(la)f(hauteur)h(40)g(cm.)f(On)g(dispose)h
(d)n('un)-246 3487 y(robinet)f(dont)h(le)g(d\351bit)f(est)h(de)f(6)h
(litr)o(es)g(par)f(minute)o(.)-246 3534 y
SDict begin H.S end
 -246 3534 a
-246 3534 a
SDict begin 12 H.A end
 -246 3534 a -246 3534 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -246 3534 a 0 TeXcolorgray
-141 3631 a Fm(1.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
994 4870 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 255.20395 a add def
/d 0.0 a add neg def /h 141.11893 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 994 4870 a 910 4889 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.39554 21.33955 42.67911 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.39554 106.69777 213.39554 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.67911 106.69777 42.67911 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 213.39554 106.69777 42.67911 106.69777
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35822 128.03732 42.67911 106.69777
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 128.03732 85.35822 128.03732
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 128.03732 213.39554 106.69777
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 42.67911 213.39554 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 128.03732 256.07465 42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35822 42.67911 85.35822 128.03732
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35822 42.67911 42.67911 21.33955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 256.07465 42.67911 85.35822 42.67911
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 910 4889 a
tx@Dict begin { 122.08083 17.51845 } PutCoor PutBegin  end
 910 4889 a 57 x Fm(8)h(dm)910
4889 y
tx@Dict begin  PutEnd  end
 910 4889 a 910 4889 a
tx@Dict begin { 19.8912 68.34283 } PutCoor PutBegin  end
 910 4889 a 57 x Fm(4)g(dm)910
4889 y
tx@Dict begin  PutEnd  end
 910 4889 a 910 4889 a
tx@Dict begin { 236.70636 31.57625 } PutCoor PutBegin  end
 910 4889 a 57 x Fm(3)g(dm)910
4889 y
tx@Dict begin  PutEnd  end
 910 4889 a 3113 4870 a
currentpoint initclip moveto
 3113 4870 a -246 4913 a
SDict begin H.S end

-246 4913 a -246 4913 a
SDict begin 12 H.A end
 -246 4913 a -246 4913 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -246
4913 a 0 TeXcolorgray -141 5028 a Fm(2.)p 0 TeXcolorgray
43 w(Les)g(dimensions)h(de)e(l)o('aquar)q(ium)i(sont)f(:)1025
5210 y(largeur)c Fl(\306)g Fm(8)k(dm,)155 b(profondeur)14
b Fl(\306)g Fm(3)k(dm,)155 b(hauteur)15 b Fl(\306)f Fm(4)k(dm,)-38
5393 y(donc)f(son)h(volume)h(est)1795 5493 y(8)10 b Fl(\243)g
Fm(3)g Fl(\243)g Fm(4)16 b Fl(\306)e Fm(96)19 b Fk(`)p
Fm(.)p 0 TeXcolorgray -246 5546 1757 4 v -154 5622 a
Fe(1)q(.)p 0 TeXcolorgray -76 5622 a
SDict begin H.S end
 -76 5622 a -76 5622
a
SDict begin H.R end
 -76 5622 a -76 5622 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.1) cvn /DEST pdfmark
end
 -76 5622 a 0 TeXcolorgray Fe(Les)14
b(calculs)g(ne)g(sont)f(pas)h(toujours)g(plus)f(faciles)i(en)f(minutes)
f(qu)n('en)i(heur)o(es)o(,)f(mais)g(c)n('est)g(g\351n\351r)o(alement)h
(le)g(cas)o(.)p 0 TeXcolorgray 0 TeXcolorgray 1930 5895
a Fm(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray -141 -163 a Fm(3.)p
0 TeXcolorgray 43 w(On)20 b(peut)i(se)f(passer)g(d)n('un)g(tableau)g
(de)f(propor)q(tionnalit\351)i(:)e(le)h(d\351bit)g(du)f(robinet)g(est)h
(de)f(6)h Fk(`)p Fm(/min,)h(donc)e(il)h(faut)g(96)11
b Fl(\245)g Fm(6)19 b Fl(\306)f Fm(16)j(min)g(pour)-38
-63 y(r)o(emplir)d(les)g(96)g Fk(`)f Fm(de)g(l)o('aquar)q(ium.)-246
13 y
SDict begin H.S end
 -246 13 a -246 13 a
SDict begin 12 H.A end
 -246 13 a -246 13 a
SDict begin [/View [/XYZ H.V]/Dest (exo.6) cvn /DEST pdfmark end
 -246 13
a 0 TeXcolorgray 109 x Fn(Ex)o(er)o(cice)d(6)p 0 TeXcolorgray
42 w Fm(Le)21 b(tableau)h(suivant)g(donne)f(l)o('\351volution)j(du)d
(tir)o(age)g(jour)q(nalier)h(\(en)g(millions)h(d)n('exemplair)o(es\))f
(de)f(la)g(pr)o(esse)h(quotidienne)h(d)n('in-)-246 221
y(for)q(mation)18 b(g\351n\351r)o(ale)h(et)e(politique)j(en)e(F)o(r)o
(ance)o(.)p 0 TeXcolorgray 0 TeXcolorgray -246 310 4392
4 v -246 410 4 100 v -193 380 a(Ann\351e)p 330 410 V
604 w(2010)p 1092 410 V 602 w(2011)p 1855 410 V 603 w(2012)p
2617 410 V 602 w(2013)p 3380 410 V 603 w(2014)p 4142
410 V -246 413 4392 4 v -246 613 4 200 v -193 483 a(N)n(um\351ro)-193
583 y(ann\351e)h(:)e Fj(n)p 330 613 V 692 533 a Fm(0)p
1092 613 V 723 w(1)p 1855 613 V 722 w(2)p 2617 613 V
723 w(3)p 3380 613 V 722 w(4)p 4142 613 V -246 616 4392
4 v -246 715 4 100 v -193 686 a(T)m(ir)o(age)i(:)e Fj(u)126
698 y Fc(n)p 330 715 V 642 686 a Fm(1,80)p 1092 715 V
622 w(1,73)p 1855 715 V 623 w(1,60)p 2617 715 V 622 w(1,47)p
3380 715 V 623 w(1,36)p 4142 715 V -246 719 4392 4 v
3593 789 a Fj(Sour)o(ce)f(:)i(INSEE)-246 942 y Fm(On)g(note)g
Fj(u)100 954 y Fc(n)161 942 y Fm(le)f(tir)o(age)h(jour)q(nalier)g(en)g
(millions)h(d)n('exemplair)o(es)g(pour)f(l)o('ann\351e)h(num\351ro)f
Fj(n)t Fm(.)g(On)f(a)g(donc)g(:)p 0 TeXcolorgray -76
1082 a(\225)p 0 TeXcolorgray 42 w Fj(u)46 1094 y Ff(0)96
1082 y Fl(\306)d Fm(tir)o(age)j(jour)q(nalier)h(l)o('ann\351e)h(0)c
Fl(\306)f Fm(1,)8 b(80)19 b(;)p 0 TeXcolorgray -76 1182
a(\225)p 0 TeXcolorgray 42 w Fj(u)46 1194 y Ff(1)96 1182
y Fl(\306)14 b Fm(tir)o(age)j(jour)q(nalier)h(l)o('ann\351e)h(1)c
Fl(\306)f Fm(1,)8 b(73)19 b(;)p 0 TeXcolorgray -76 1281
a(\225)p 0 TeXcolorgray 42 w Fj(u)46 1293 y Ff(4)96 1281
y Fl(\306)14 b Fm(tir)o(age)j(jour)q(nalier)h(l)o('ann\351e)h(4)c
Fl(\306)f Fm(1,)8 b(36.)-246 1359 y
SDict begin H.S end
 -246 1359 a -246
1359 a
SDict begin 12 H.A end
 -246 1359 a -246 1359 a
SDict begin [/View [/XYZ H.V]/Dest (exo.7) cvn /DEST pdfmark end
 -246 1359 a 0 TeXcolorgray
107 x Fn(Ex)o(er)o(cice)14 b(7)p 0 TeXcolorgray 42 w
Fj(u)21 b Fm(est)d(la)g(suite)g(des)f(multiples)k(de)c(4,)h(en)f(par)q
(tant)h(de)f Fj(u)1788 1478 y Ff(0)1838 1466 y Fl(\306)d
Fm(4)c Fl(\243)g Fm(0)16 b Fl(\306)e Fm(0.)-246 1504
y
SDict begin H.S end
 -246 1504 a -246 1504 a
SDict begin 12 H.A end
 -246 1504 a -246 1504 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -246
1504 a 0 TeXcolorgray -141 1596 a Fm(1.)p 0 TeXcolorgray
0 TeXcolorgray 88 w(\225)p 0 TeXcolorgray 42 w Fj(u)129
1608 y Ff(1)179 1596 y Fl(\306)g Fm(4)c Fl(\243)g Fm(1)15
b Fl(\306)f Fm(4)k(;)p 0 TeXcolorgray 7 1696 a(\225)p
0 TeXcolorgray 42 w Fj(u)129 1708 y Ff(2)179 1696 y Fl(\306)c
Fm(4)c Fl(\243)g Fm(2)15 b Fl(\306)f Fm(8)k(;)p 0 TeXcolorgray
7 1796 a(\225)p 0 TeXcolorgray 42 w Fj(u)129 1808 y Ff(3)179
1796 y Fl(\306)c Fm(4)c Fl(\243)g Fm(3)15 b Fl(\306)f
Fm(12.)-246 1819 y
SDict begin H.S end
 -246 1819 a -246 1819 a
SDict begin 12 H.A end
 -246 1819
a -246 1819 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -246 1819 a 0 TeXcolorgray -141 1916 a
Fm(2.)p 0 TeXcolorgray 43 w Fj(u)11 1928 y Ff(20)92 1916
y Fl(\306)g Fm(4)c Fl(\243)g Fm(20)16 b Fl(\306)e Fm(80.)-246
1988 y
SDict begin H.S end
 -246 1988 a -246 1988 a
SDict begin 12 H.A end
 -246 1988 a -246 1988
a
SDict begin [/View [/XYZ H.V]/Dest (exo.8) cvn /DEST pdfmark end
 -246 1988 a 0 TeXcolorgray 113 x Fn(Ex)o(er)o(cice)g(8)p
0 TeXcolorgray 42 w Fj(u)21 b Fm(est)d(une)g(suite)h(telle)f(que)g(:)p
0 TeXcolorgray -76 2200 a(\225)p 0 TeXcolorgray 42 w
Fj(u)46 2212 y Ff(0)96 2200 y Fl(\306)c Fm(2,)p 0 TeXcolorgray
-76 2300 a(\225)p 0 TeXcolorgray 42 w(tout)k(ter)q(me)g(de)f(la)g
(suite)i(se)e(d\351duit)h(du)f(pr\351c\351dent)h(en)g(ajoutant)h(3.)
-246 2339 y
SDict begin H.S end
 -246 2339 a -246 2339 a
SDict begin 12 H.A end
 -246 2339 a -246
2339 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -246 2339 a 0 TeXcolorgray -141 2431 a Fm(1.)p
0 TeXcolorgray 0 TeXcolorgray 88 w(\225)p 0 TeXcolorgray
42 w Fj(u)129 2443 y Ff(1)179 2431 y Fl(\306)14 b Fm(3)c
Fl(\305)g Fm(2)15 b Fl(\306)f Fm(5)k(;)p 0 TeXcolorgray
7 2530 a(\225)p 0 TeXcolorgray 42 w Fj(u)129 2542 y Ff(2)179
2530 y Fl(\306)c Fm(5)c Fl(\305)g Fm(3)15 b Fl(\306)f
Fm(8)k(;)p 0 TeXcolorgray 7 2630 a(\225)p 0 TeXcolorgray
42 w Fj(u)129 2642 y Ff(3)179 2630 y Fl(\306)c Fm(8)c
Fl(\305)g Fm(3)15 b Fl(\306)f Fm(11)19 b(;)p 0 TeXcolorgray
7 2729 a(\225)p 0 TeXcolorgray 42 w Fj(u)129 2741 y Ff(4)179
2729 y Fl(\306)14 b Fm(11)c Fl(\305)g Fm(3)16 b Fl(\306)e
Fm(14.)-246 2752 y
SDict begin H.S end
 -246 2752 a -246 2752 a
SDict begin 12 H.A end
 -246 2752
a -246 2752 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -246 2752 a 0 TeXcolorgray -141 2850 a
Fm(2.)p 0 TeXcolorgray 43 w(P)n(our)j(obtenir)g(le)h(tableau)g(avec)f
(un)h(tableur)-5 b(,)18 b(on)g(entr)o(e)f(la)h(for)q(mule)1945
3008 y(=B1+1)-38 3166 y(dans)f(la)h(cellule)h(C1,)f(et)f(la)h(for)q
(mule)1945 3266 y(=B2+3)-38 3401 y(dans)f(la)h(cellule)h(C2.)f(Ensuite)
h(on)e(\351tir)o(e)g(vers)h(la)g(droite)o(.)p 0 TeXcolorgray
0 TeXcolorgray -38 3495 4184 4 v -38 3595 4 100 v 105
3595 V 419 3565 a(A)p 778 3595 V 624 w(B)p 1451 3595
V 622 w(C)p 2124 3595 V 617 w(D)p 2797 3595 V 620 w(E)p
3470 3595 V 627 w(F)p 4142 3595 V -38 3598 4184 4 v -38
3698 4 100 v 15 3668 a(1)p 105 3698 V 363 w Fj(n)p 778
3698 V 631 w Fm(0)p 1451 3698 V 544 w(=B1+1)p 2124 3698
V 521 w Fl(\242)8 b(\242)g(\242)p 2797 3698 V 594 w(\242)g(\242)g(\242)
p 3470 3698 V 594 w(\242)g(\242)g(\242)p 4142 3698 V
-38 3701 4184 4 v -38 3801 4 100 v 15 3771 a Fm(2)p 105
3801 V 342 w Fj(u)446 3783 y Fc(n)p 778 3801 V 1096 3771
a Fm(2)p 1451 3801 V 544 w(=B2+3)p 2124 3801 V 521 w
Fl(\242)g(\242)g(\242)p 2797 3801 V 594 w(\242)g(\242)g(\242)p
3470 3801 V 594 w(\242)g(\242)g(\242)p 4142 3801 V -38
3804 4184 4 v -246 3863 a
SDict begin H.S end
 -246 3863 a -246 3863 a
SDict begin 12 H.A end
 -246
3863 a -246 3863 a
SDict begin [/View [/XYZ H.V]/Dest (exo.9) cvn /DEST pdfmark end
 -246 3863 a 0 TeXcolorgray 91 x Fn(Ex)o(er)o(cice)14
b(9)p 0 TeXcolorgray 42 w Fm(N)n(otr)o(e)i(objet)i(tombe)g(de)f(:)p
0 TeXcolorgray -76 4054 a(\225)p 0 TeXcolorgray 42 w(5)g(m)h(pendant)g
(la)g(1)570 4030 y Fb(r)o(e)631 4054 y Fm(seconde)9 b(;)p
0 TeXcolorgray -76 4154 a(\225)p 0 TeXcolorgray 42 w(15)18
b(m)g(pendant)g(la)f(2)610 4130 y Fb(e)653 4154 y Fm(seconde)9
b(;)p 0 TeXcolorgray -76 4253 a(\225)p 0 TeXcolorgray
42 w(25)18 b(m)g(pendant)g(la)f(3)610 4229 y Fb(e)653
4253 y Fm(seconde)9 b(;)p 0 TeXcolorgray -76 4353 a(\225)p
0 TeXcolorgray 42 w(35)18 b(m)g(pendant)g(la)f(4)610
4329 y Fb(e)653 4353 y Fm(seconde)9 b(;)p 0 TeXcolorgray
-76 4452 a(\225)p 0 TeXcolorgray 42 w(45)18 b(m)g(pendant)g(la)f(5)610
4429 y Fb(e)653 4452 y Fm(seconde)o(.)-246 4592 y(C)o(onclusion)j(:)d
(pendant)h(les)g(5)g(pr)o(emi\350r)o(es)g(secondes)o(,)g(l)o('objet)h
(est)f(tomb\351)g(de)1461 4750 y(5)10 b Fl(\305)g Fm(15)g
Fl(\305)g Fm(25)g Fl(\305)g Fm(35)g Fl(\305)g Fm(45)20
b Fl(\306)14 b Fm(125)19 b(m.)-246 4949 y Fn(R)o(emarque)e(:)j
Fm(Les)h(infor)q(mations)h(de)e(l)o('\351nonc\351)i(sont)f
(impr\351cises)h(:)e(si)h(l)o('on)g(n\351glige)g(la)f(r\351sistance)h
(de)f(l)o('air)h(\(frottements\),)h(un)e(objet)h(soumis)h(\340)-246
5048 y(son)c(propr)o(e)f(poids)h(tombe)g(de)f(4,9)h(m)g(pendant)g(la)f
(1)1334 5025 y Fb(r)o(e)1396 5048 y Fm(seconde)o(,)g(4,)8
b(9)i Fl(\243)g Fm(3)16 b Fl(\306)f Fm(14,)8 b(7)19 b(m)e(pendant)h(la)
g(2)2709 5025 y Fb(e)2735 5048 y Fm(,)f(4,)8 b(9)i Fl(\243)g
Fm(5)16 b Fl(\306)f Fm(24,)8 b(5)19 b(m)e(pendant)h(la)g(3)3763
5025 y Fb(e)3789 5048 y Fm(,)f(etc)o(.)h(Dans)-246 5148
y(l)o('exer)o(cice)o(,)g(nous)g(avons)g(r)o(emplac\351)g(4,9)h(par)e(5)
h(pour)f(simpli\002er)i(les)f(calculs)o(.)-246 5288 y(N)n(otons)c(par)g
(ailleurs)i(que)e(ces)h(r\351sultats)g(doivent)g(\352tr)o(e)f(for)q
(tement)h(corr)q(ig\351s)f(si)g(l)o('on)h(veut)g(tenir)f(compte)i(de)e
(la)g(r\351sistance)h(de)f(l)o('air)-5 b(.)15 b(P)m(ar)f(exemple)o(,)
-246 5387 y(un)24 b(adulte)g(en)f(chute)h(libr)o(e)f(qui)h(par)q(vient)
h(\340)e(se)h(mettr)o(e)f(\253)16 b(\340)23 b(plat)16
b(\273)46 b(devr)o(ait)24 b(arr\352ter)f(d)n('acc\351l\351r)o(er)g
(apr\350s)g(une)h(dizaine)g(de)f(secondes)h(de)f(chute)-246
5487 y(environ,)k(sans)g(d\351passer)f(60)h(m/s)9 b(;)26
b(tandis)h(qu)n('un)f(chat)g(ne)h(d\351passer)o(a)f(pas)h(les)f(20)h
(m/s)f(et)h(pourr)o(a)f(sur)q(vivr)o(e)h(\340)f(une)g(chute)h(d)n('une)
g(hauteur)-246 5587 y(impor)q(tante)o(.)19 b(La)e(vid\351o)p
0 1 0 0 TeXcolorcmyk 490 5589 a
SDict begin H.S end
 490 5589 a 0 1 0 0 TeXcolorcmyk
-2 x Fm(KEZ)q(AK)m(O)h(:)f(chute)h(libr)o(e)p 0 1 0 0
TeXcolorcmyk 1213 5530 a
SDict begin H.R end
 1213 5530 a 1213 5587 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.youtube.com/watch?v=RFbmabdbBC0)>>/Subtype
/Link H.B /ANN pdfmark end
 1213
5587 a 0 TeXcolorgray 17 w Fm(explique)i(ce)d(probl\350me)h(en)g
(d\351tail.)p 0 TeXcolorgray 1930 5895 a(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-254 -561 a
SDict begin H.S end
 -254 -561 a -254 -561 a
SDict begin H.R end
 -254 -561 a -254
-561 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -254 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-246 -246 a
SDict begin H.S end
 -246 -246 a -246 -246 a
SDict begin 12 H.A end
 -246 -246 a -246
-246 a
SDict begin [/View [/XYZ H.V]/Dest (exo.10) cvn /DEST pdfmark end
 -246 -246 a 0 TeXcolorgray 83 x Fn(Ex)o(er)o(cice)14
b(10)p 0 TeXcolorgray 41 w Fm(On)j(tr)o(ace)h(les)g(droites)f
Fj(D)938 -151 y Ff(1)988 -163 y Fm(:)h Fj(y)j Fl(\306)16
b Fj(x)f Fl(\241)10 b Fm(4,)19 b Fj(D)1415 -151 y Ff(2)1464
-163 y Fm(:)g Fj(y)i Fl(\306)14 b Fm(2)r Fj(x)5 b Fm(,)19
b Fj(D)1817 -151 y Ff(3)1866 -163 y Fm(:)f Fj(y)j Fl(\306)15
b(\241)p Fm(2)r Fj(x)g Fl(\305)10 b Fm(3)18 b(et)g Fj(D)2451
-151 y Ff(4)2501 -163 y Fm(:)g Fj(y)j Fl(\306)14 b(\241)p
Fm(2)k(\340)f(par)q(tir)g(de)g(quatr)o(e)h(tableaux)g(de)f(valeurs)h(:)
-246 37 y(T)-6 b(r)o(ac\351)18 b(de)f Fj(D)124 49 y Ff(1)159
37 y Fm(.)p -246 67 425 5 v 0 TeXcolorgray 0 TeXcolorgray
-3 119 551 4 v -3 218 4 100 v 52 188 a Fj(x)p 147 218
V 137 w Fm(0)p 345 218 V 158 w(2)p 544 218 V -3 222 551
4 v -3 321 4 100 v 54 291 a Fj(y)p 147 321 V 110 w Fl(\241)p
Fm(4)p 345 321 V 104 w Fl(\241)p Fm(2)p 544 321 V -3
325 551 4 v 105 521 a(0)10 b Fl(\241)g Fm(4)15 b Fl(\306)f(\241)p
Fm(4)105 646 y(2)c Fl(\241)g Fm(4)15 b Fl(\306)f(\241)p
Fm(2)p 0 TeXcolorgray 827 663 9 710 v 0 TeXcolorgray
873 37 a(T)-6 b(r)o(ac\351)17 b(de)g Fj(D)1242 49 y Ff(2)1278
37 y Fm(.)p 873 67 425 5 v 0 TeXcolorgray 0 TeXcolorgray
1171 119 441 4 v 1171 218 4 100 v 1226 188 a Fj(x)p 1321
218 V 109 w Fm(0)p 1464 218 V 103 w(2)p 1607 218 V 1171
222 441 4 v 1171 321 4 100 v 1228 291 a Fj(y)p 1321 321
V 110 w Fm(0)p 1464 321 V 103 w(4)p 1607 321 V 1171 325
441 4 v 1251 521 a(2)10 b Fl(\243)g Fm(0)15 b Fl(\306)f
Fm(2)1251 646 y(2)c Fl(\243)g Fm(2)15 b Fl(\306)f Fm(4)p
0 TeXcolorgray 1946 663 9 710 v 0 TeXcolorgray 1992 37
a(T)-6 b(r)o(ac\351)17 b(de)g Fj(D)2361 49 y Ff(3)2396
37 y Fm(.)p 1992 67 425 5 v 0 TeXcolorgray 0 TeXcolorgray
2262 119 496 4 v 2262 218 4 100 v 2317 189 a Fj(x)p 2412
218 V 109 w Fm(0)p 2555 218 V 131 w(2)p 2754 218 V 2262
222 496 4 v 2262 321 4 100 v 2319 292 a Fj(y)p 2412 321
V 110 w Fm(3)p 2555 321 V 103 w Fl(\241)p Fm(1)p 2754
321 V 2262 325 496 4 v 2256 521 a Fl(\241)10 b Fm(2)g
Fl(\243)g Fm(0)g Fl(\305)g Fm(3)17 b Fl(\306)d Fm(3)2256
646 y Fl(\241)c Fm(2)g Fl(\243)g Fm(2)g Fl(\305)g Fm(3)17
b Fl(\306)d(\241)p Fm(1)p 0 TeXcolorgray 3064 663 9 710
v 0 TeXcolorgray 3110 37 a(T)-6 b(r)o(ac\351)18 b(de)f
Fj(D)3480 49 y Ff(4)3515 37 y Fm(.)p 3110 67 425 5 v
0 TeXcolorgray 0 TeXcolorgray 3353 149 551 4 v 3353 249
4 100 v 3408 219 a Fj(x)p 3503 249 V 136 w Fm(0)p 3701
249 V 159 w(2)p 3900 249 V 3353 252 551 4 v 3353 352
4 100 v 3410 322 a Fj(y)p 3503 352 V 110 w Fl(\241)p
Fm(2)p 3701 352 V 103 w Fl(\241)p Fm(2)p 3900 352 V 3353
355 551 4 v -246 845 a(On)h(place)g(\340)f(chaque)h(fois)g(les)g(deux)f
(points)i(en)f(gr)q(is)o(,)f(puis)i(on)e(tr)o(ace)h(les)g(droites)f(en)
h(couleur)g(:)p 0 TeXcolorgray 0 TeXcolorgray 973 2633
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 235.4022 a add def
/d 0.0 a add neg def /h 202.12918 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 973 2633 a 1565 1768 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  0.0 -91.04913 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 164.04189 0.0 -71.36032 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 22.76228 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  -68.28685 0.0 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 97.87788 0.0 -104.2513   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 22.76228 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 164.04189  0 -71.36032  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -71.36032
 164.04189  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-104.2513  def /maxTickline 97.87788  def /dT 1491749 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 22.76228  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 22.76228
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 97.87788
0.0 -104.2513   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 164.04189
0.0 -71.36032 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 97.87788  0 -104.2513  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -104.2513
 97.87788  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-71.36032  def /maxTickline 164.04189  def /dT 1491749 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 22.76228  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 22.76228  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 97.87788
0.0 -104.2513   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  2.0
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 164.04189
0.0 -71.36032 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1550 1865 a Ff(0)158
b(1)g(2)g(3)g(4)g(5)g(6)-1375 b Fa(\241)p Ff(1)-262 b
Fa(\241)p Ff(2)g Fa(\241)p Ff(3)1476 1787 y(0)1435 1976
y Fa(\241)p Ff(1)1435 2165 y Fa(\241)p Ff(2)1435 2354
y Fa(\241)p Ff(3)1435 2543 y Fa(\241)p Ff(4)1476 1598
y(1)1476 1409 y(2)1476 1220 y(3)1565 1768 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 1 0.49803 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.135027624309382
def /x1 7.206740331491703 def /dx x1 x sub 49 div def /F@pstplot ((-4.--1.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 22.76228 mul F@pstplot
22.76228 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30 22.76228
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 22.76228 mul gt { moveto } {
dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 1 0.49803 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1565 1768 a
tx@Dict begin { 101.38412 37.78546 } PutCoor PutBegin  end
 1565 1768 a 1 0.49803 0
TeXcolorrgb 53 x Fj(D)1628 1833 y Ff(1)p 0 TeXcolorgray
1565 1768 a
tx@Dict begin  PutEnd  end
 1565 1768 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0.49803 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.135027624309382
def /x1 7.206740331491703 def /dx x1 x sub 49 div def /F@pstplot ((-0.--2.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 22.76228 mul F@pstplot
22.76228 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30 22.76228
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 22.76228 mul gt { moveto } {
dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0.49803 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1565 1768 a
tx@Dict begin { 31.32904 60.54774 } PutCoor PutBegin  end
 1565 1768 a 0.49803 0 1 TeXcolorrgb 53 x
Fj(D)1628 1833 y Ff(2)p 0 TeXcolorgray 1565 1768 a
tx@Dict begin  PutEnd  end
 1565
1768 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.135027624309382
def /x1 7.206740331491703 def /dx x1 x sub 49 div def /F@pstplot ((--3.-2.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 22.76228 mul F@pstplot
22.76228 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30 22.76228
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 22.76228 mul gt { moveto } {
dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 1 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1565 1768
a
tx@Dict begin { 79.19249 -79.66798 } PutCoor PutBegin  end
 1565 1768 a 0 1 0 TeXcolorrgb 53 x Fj(D)1628 1833 y
Ff(3)p 0 TeXcolorgray 1565 1768 a
tx@Dict begin  PutEnd  end
 1565 1768 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.135027624309382
def /x1 7.206740331491703 def /dx x1 x sub 49 div def /F@pstplot ((-2.-0.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 22.76228 mul F@pstplot
22.76228 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 22.76228 mul gt { moveto } { dup -1.e30 22.76228
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 22.76228 mul gt { moveto } {
dup -1.e30 22.76228 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1565 1768 a
tx@Dict begin { 91.04913 -34.14342 } PutCoor PutBegin  end
 1565 1768 a 0 0 1
TeXcolorrgb 53 x Fj(D)1628 1833 y Ff(4)p 0 TeXcolorgray
1565 1768 a
tx@Dict begin  PutEnd  end
 1565 1768 a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 0.0 0.0   false
NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 45.52457 91.04913
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 0.0 68.28685  
false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 45.52457 -22.76228
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 0.0 -91.04913 
 false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 45.52457 -45.52457
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0.5  setgray  [ 0.0 -45.52457 
 false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
2927 2633 a
currentpoint initclip moveto
 2927 2633 a -246 2816 a Fn(R)o(emarque)14
b(:)k Fm(La)f(droite)g Fj(D)567 2828 y Ff(4)619 2816
y Fm(est)h(hor)q(izontale)o(.)g(C'\351tait)g(pr\351visible)o(,)h
(puisque)g(la)f(valeur)g(de)j Fj(y)41 b Fm(\()p Fl(\241)p
Fm(2\))17 b(est)h(ind\351pendante)h(de)g Fj(x)5 b Fm(.)p
0 TeXcolorgray 1930 5895 a(5)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
